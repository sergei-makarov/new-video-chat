/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PATH_PREFIX", function() { return PATH_PREFIX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_ID", function() { return APP_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STATE_CHANGED_EVENT_NAME", function() { return STATE_CHANGED_EVENT_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STATE_UPDATE_DELAY", function() { return STATE_UPDATE_DELAY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizePath", function() { return normalizePath; });
var PATH_PREFIX = 'new-video-chat/';
var APP_ID = '3074457352186897321';
var STATE_CHANGED_EVENT_NAME = 'break_state_changed';
var STATE_UPDATE_DELAY = 500;
function normalizePath(htmlName) {
    return PATH_PREFIX + "/" + htmlName;
}


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var BreakStateHelper = /** @class */ (function () {
    function BreakStateHelper() {
        this.isBreakEnabled = false;
    }
    Object.defineProperty(BreakStateHelper, "instance", {
        get: function () {
            if (!BreakStateHelper.initInstance) {
                BreakStateHelper.initInstance = new BreakStateHelper();
            }
            return BreakStateHelper.initInstance;
        },
        enumerable: true,
        configurable: true
    });
    BreakStateHelper.prototype.getStateWidget = function () {
        return __awaiter(this, void 0, Promise, function () {
            var widgets, i, metadata;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, miro.board.widgets.get({
                            type: 'sticker',
                            x: 0,
                            y: 0
                        })];
                    case 1:
                        widgets = _a.sent();
                        if (!widgets || !widgets.length) {
                            return [2 /*return*/, undefined];
                        }
                        for (i = 0; i < widgets.length; i++) {
                            metadata = widgets[i].metadata;
                            if (!metadata) {
                                continue;
                            }
                            if (!metadata[config__WEBPACK_IMPORTED_MODULE_0__["APP_ID"]]) {
                                continue;
                            }
                            return [2 /*return*/, widgets[i]];
                        }
                        return [2 /*return*/, undefined];
                }
            });
        });
    };
    BreakStateHelper.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.reloadState()];
                    case 1:
                        _a.sent();
                        setInterval(function () { _this.reloadState(); }, config__WEBPACK_IMPORTED_MODULE_0__["STATE_UPDATE_DELAY"]);
                        return [2 /*return*/];
                }
            });
        });
    };
    BreakStateHelper.prototype.reloadState = function () {
        return __awaiter(this, void 0, void 0, function () {
            var widget;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getStateWidget()];
                    case 1:
                        widget = _a.sent();
                        if (!widget || !widget.metadata || !widget.metadata[config__WEBPACK_IMPORTED_MODULE_0__["APP_ID"]]) {
                            this.setBreakEnabled(false);
                            return [2 /*return*/];
                        }
                        this.setBreakEnabled(!!widget.metadata[config__WEBPACK_IMPORTED_MODULE_0__["APP_ID"]].enabled);
                        return [2 /*return*/];
                }
            });
        });
    };
    BreakStateHelper.prototype.setBreakEnabled = function (value) {
        if (value === this.isBreakEnabled) {
            return;
        }
        this.isBreakEnabled = value;
        this.raise();
    };
    BreakStateHelper.prototype.raise = function () {
        console.warn("isBreakEnabled changed from " + !this.isBreakEnabled + " to " + this.isBreakEnabled);
        document.dispatchEvent(new CustomEvent(config__WEBPACK_IMPORTED_MODULE_0__["STATE_CHANGED_EVENT_NAME"], {
            detail: { isBreakEnabled: this.isBreakEnabled }
        }));
    };
    BreakStateHelper.prototype.turnOn = function () {
        return __awaiter(this, void 0, Promise, function () {
            var _a, widget;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getStateWidget()];
                    case 1:
                        widget = _b.sent();
                        if (widget && widget.metadata && widget.metadata.enabled) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, miro.board.widgets.create({
                                type: 'sticker',
                                x: 0,
                                y: 0,
                                width: 1000,
                                height: 1000,
                                metadata: (_a = {},
                                    _a[config__WEBPACK_IMPORTED_MODULE_0__["APP_ID"]] = {
                                        creator: 'ME!',
                                        enabled: true
                                    },
                                    _a)
                            })];
                    case 2:
                        _b.sent();
                        this.setBreakEnabled(true);
                        return [2 /*return*/];
                }
            });
        });
    };
    BreakStateHelper.prototype.turnOff = function () {
        return __awaiter(this, void 0, Promise, function () {
            var widget;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getStateWidget()];
                    case 1:
                        widget = _a.sent();
                        if (!widget) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, miro.board.widgets.deleteById(widget.id)];
                    case 2:
                        _a.sent();
                        this.setBreakEnabled(false);
                        return [2 /*return*/];
                }
            });
        });
    };
    return BreakStateHelper;
}());
/* harmony default export */ __webpack_exports__["default"] = (BreakStateHelper);


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_inlinesvg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(15);
/* harmony import */ var react_inlinesvg__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_inlinesvg__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var helpers_break_state_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
/* harmony import */ var games_Games__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(20);
/* harmony import */ var games_GamePreview__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(21);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};






__webpack_require__(22);
var BANNER_IMG = __webpack_require__(27);
var Root = /** @class */ (function (_super) {
    __extends(Root, _super);
    function Root() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.containerRef = react__WEBPACK_IMPORTED_MODULE_0__["createRef"]();
        return _this;
    }
    Root.prototype.render = function () {
        return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { ref: this.containerRef },
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: 'coffee-break-modal__banner_wrapper' },
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"](react_inlinesvg__WEBPACK_IMPORTED_MODULE_2___default.a, { className: 'coffee-break-modal__banner', src: BANNER_IMG })),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("button", { className: "miro-btn miro-btn--primary miro-btn--medium", onClick: this.setCoffeeBreakEnabled }, "!!Start coffee break!"),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("button", { className: "miro-btn miro-btn--primary miro-btn--medium", onClick: this.setCoffeeBreakDisabled }, "!!Stop coffee break!"),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"](games_GamePreview__WEBPACK_IMPORTED_MODULE_5__["GamePreview"], { game: games_Games__WEBPACK_IMPORTED_MODULE_4__["Games"].Galaxy, title: 'Exterminate the task', caption: 'Feel like as the true developer at Miro' })));
    };
    Root.prototype.setCoffeeBreakEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, helpers_break_state_helper__WEBPACK_IMPORTED_MODULE_3__["default"].instance.turnOn()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Root.prototype.setCoffeeBreakDisabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, helpers_break_state_helper__WEBPACK_IMPORTED_MODULE_3__["default"].instance.turnOff()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Root.prototype.renderGame = function (game) {
        return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("iframe", { src: game + "/index.html" }));
    };
    return Root;
}(react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"]));
miro.onReady(function () {
    react_dom__WEBPACK_IMPORTED_MODULE_1__["render"](react__WEBPACK_IMPORTED_MODULE_0__["createElement"](Root, null), document.getElementById('react-app'));
});


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(5);
}


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.13.1
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var _assign = __webpack_require__(6);
var checkPropTypes = __webpack_require__(7);

var ReactVersion = '16.13.1';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  suspense: null
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
function describeComponentFrame (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
}

var Resolved = 1;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type.render);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame = {};
var currentlyValidatingElement = null;
function setCurrentlyValidatingElement(element) {
  {
    currentlyValidatingElement = element;
  }
}

{
  // Stack implementation injected by the current renderer.
  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentlyValidatingElement) {
      var name = getComponentName(currentlyValidatingElement.type);
      var owner = currentlyValidatingElement._owner;
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

/**
 * Used by act() to track whether you're inside an act() scope.
 */
var IsSomeRendererActing = {
  current: false
};

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner,
  IsSomeRendererActing: IsSomeRendererActing,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: _assign
};

{
  _assign(ReactSharedInternals, {
    // These should not be included in production.
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
    // TODO: remove in React 17.0.
    ReactComponentTreeHook: {}
  });
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

    if (!hasExistingStack) {
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var stack = ReactDebugCurrentFrame.getStackAddendum();

      if (stack !== '') {
        format += '%s';
        args = args.concat([stack]);
      }
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  }
}

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
    {
      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
    }
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

_assign(pureComponentPrototype, Component.prototype);

pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

function warnIfStringRefCannotBeAutoConverted(config) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;

      {
        warnIfStringRefCannotBeAutoConverted(config);
      }
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (!!(element === null || element === undefined)) {
    {
      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
    }
  }

  var propName; // Original props are copied

  var props = _assign({}, element.props); // Reserved names are extracted


  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

var POOL_SIZE = 10;
var traverseContextPool = [];

function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
  if (traverseContextPool.length) {
    var traverseContext = traverseContextPool.pop();
    traverseContext.result = mapResult;
    traverseContext.keyPrefix = keyPrefix;
    traverseContext.func = mapFunction;
    traverseContext.context = mapContext;
    traverseContext.count = 0;
    return traverseContext;
  } else {
    return {
      result: mapResult,
      keyPrefix: keyPrefix,
      func: mapFunction,
      context: mapContext,
      count: 0
    };
  }
}

function releaseTraverseContext(traverseContext) {
  traverseContext.result = null;
  traverseContext.keyPrefix = null;
  traverseContext.func = null;
  traverseContext.context = null;
  traverseContext.count = 0;

  if (traverseContextPool.length < POOL_SIZE) {
    traverseContextPool.push(traverseContext);
  }
}
/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {

      {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          if (!didWarnAboutMaps) {
            warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';

      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }

      var childrenString = '' + children;

      {
        {
          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum );
        }
      }
    }
  }

  return subtreeCount;
}
/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}
/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof component === 'object' && component !== null && component.key != null) {
    // Explicit key
    return escape(component.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;
  func.call(context, child, bookKeeping.count++);
}
/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */


function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  releaseTraverseContext(traverseContext);
}

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;
  var mappedChild = func.call(context, child, bookKeeping.count++);

  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
      return c;
    });
  } else if (mappedChild != null) {
    if (isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }

    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';

  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }

  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  releaseTraverseContext(traverseContext);
}
/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */


function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  return traverseAllChildren(children, function () {
    return null;
  }, null);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
    return child;
  });
  return result;
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    {
      throw Error( "React.Children.only expected to receive a single React element child." );
    }
  }

  return children;
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
      }
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context,
      _calculateChangedBits: context._calculateChangedBits
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;

            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;

            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

function lazy(ctor) {
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _ctor: ctor,
    // React uses these fields to store the result.
    _status: -1,
    _result: null
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes;
    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          defaultProps = newDefaultProps; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          propTypes = newPropTypes; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      if (render.length !== 0 && render.length !== 2) {
        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
      }
    }

    if (render != null) {
      if (render.defaultProps != null || render.propTypes != null) {
        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
      }
    }
  }

  return {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };
}

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  return {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  if (!(dispatcher !== null)) {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }

  return dispatcher;
}

function useContext(Context, unstable_observedBits) {
  var dispatcher = resolveDispatcher();

  {
    if (unstable_observedBits !== undefined) {
      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
    } // TODO: add a more generic warning for invalid values.


    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context, unstable_observedBits);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, deps);
}
function useLayoutEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, deps);
}
function useCallback(callback, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, deps);
}
function useMemo(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, deps);
}
function useImperativeHandle(ref, create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, deps);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
  }

  setCurrentlyValidatingElement(element);

  {
    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
  }

  setCurrentlyValidatingElement(null);
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var name = getComponentName(type);
    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      setCurrentlyValidatingElement(element);
      checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
      setCurrentlyValidatingElement(null);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true;

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    setCurrentlyValidatingElement(fragment);
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        break;
      }
    }

    if (fragment.ref !== null) {
      error('Invalid attribute `ref` supplied to `React.Fragment`.');
    }

    setCurrentlyValidatingElement(null);
  }
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    {
      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
var didWarnAboutDeprecatedCreateFactory = false;
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;

  {
    if (!didWarnAboutDeprecatedCreateFactory) {
      didWarnAboutDeprecatedCreateFactory = true;

      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
    } // Legacy hook: remove it


    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

{

  try {
    var frozenObject = Object.freeze({});
    var testMap = new Map([[frozenObject, null]]);
    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
  }
}

var createElement$1 =  createElementWithValidation ;
var cloneElement$1 =  cloneElementWithValidation ;
var createFactory =  createFactoryWithValidation ;
var Children = {
  map: mapChildren,
  forEach: forEachChildren,
  count: countChildren,
  toArray: toArray,
  only: onlyChild
};

exports.Children = Children;
exports.Component = Component;
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.Profiler = REACT_PROFILER_TYPE;
exports.PureComponent = PureComponent;
exports.StrictMode = REACT_STRICT_MODE_TYPE;
exports.Suspense = REACT_SUSPENSE_TYPE;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
exports.cloneElement = cloneElement$1;
exports.createContext = createContext;
exports.createElement = createElement$1;
exports.createFactory = createFactory;
exports.createRef = createRef;
exports.forwardRef = forwardRef;
exports.isValidElement = isValidElement;
exports.lazy = lazy;
exports.memo = memo;
exports.useCallback = useCallback;
exports.useContext = useContext;
exports.useDebugValue = useDebugValue;
exports.useEffect = useEffect;
exports.useImperativeHandle = useImperativeHandle;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useReducer = useReducer;
exports.useRef = useRef;
exports.useState = useState;
exports.version = ReactVersion;
  })();
}


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

if (true) {
  var ReactPropTypesSecret = __webpack_require__(8);
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (true) {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (true) {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (false) {} else {
  module.exports = __webpack_require__(10);
}


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.13.1
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var React = __webpack_require__(4);
var _assign = __webpack_require__(6);
var Scheduler = __webpack_require__(11);
var checkPropTypes = __webpack_require__(7);
var tracing = __webpack_require__(13);

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
// Current owner and dispatcher used to share the same ref,
// but PR #14548 split them out to better support the react-debug-tools package.

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
  ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  };
}

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
  ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  };
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

    if (!hasExistingStack) {
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var stack = ReactDebugCurrentFrame.getStackAddendum();

      if (stack !== '') {
        format += '%s';
        args = args.concat([stack]);
      }
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  }
}

if (!React) {
  {
    throw Error( "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM." );
  }
}

var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (!(typeof document !== 'undefined')) {
        {
          throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
        }
      }

      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.

      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }

        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);
    };

    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.

var hasRethrowError = false;
var rethrowError = null;
var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);

  if (hasError) {
    var error = clearCaughtError();

    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}
/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}
function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    {
      {
        throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;
function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
  getInstanceFromNode = getInstanceFromNodeImpl;
  getNodeFromInstance = getNodeFromInstanceImpl;

  {
    if (!getNodeFromInstance || !getInstanceFromNode) {
      error('EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
    }
  }
}
var validateEventDispatches;

{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;
    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
      error('EventPluginUtils: Invalid `event`.');
    }
  };
}
/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */


function executeDispatch(event, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}
/**
 * Standard/simple iteration through an event's collected dispatches.
 */

function executeDispatchesInOrder(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;

  {
    validateEventDispatches(event);
  }

  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      } // Listeners and Instances are two parallel arrays that are always in sync.


      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, dispatchListeners, dispatchInstances);
  }

  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var FundamentalComponent = 20;
var ScopeComponent = 21;
var Block = 22;

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;
/**
 * Injectable mapping from names to event plugin modules.
 */

var namesToPlugins = {};
/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */

function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }

  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);

    if (!(pluginIndex > -1)) {
      {
        throw Error( "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`." );
      }
    }

    if (plugins[pluginIndex]) {
      continue;
    }

    if (!pluginModule.extractEvents) {
      {
        throw Error( "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not." );
      }
    }

    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;

    for (var eventName in publishedEvents) {
      if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
        {
          throw Error( "EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`." );
        }
      }
    }
  }
}
/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */


function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
    {
      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`." );
    }
  }

  eventNameDispatchConfigs[eventName] = dispatchConfig;
  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }

    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }

  return false;
}
/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */


function publishRegistrationName(registrationName, pluginModule, eventName) {
  if (!!registrationNameModules[registrationName]) {
    {
      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`." );
    }
  }

  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}
/**
 * Registers plugins so that they can extract and dispatch events.
 */

/**
 * Ordered list of injected plugins.
 */


var plugins = [];
/**
 * Mapping from event name to dispatch config
 */

var eventNameDispatchConfigs = {};
/**
 * Mapping from registration name to plugin module
 */

var registrationNameModules = {};
/**
 * Mapping from registration name to event name
 */

var registrationNameDependencies = {};
/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */

var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 */

function injectEventPluginOrder(injectedEventPluginOrder) {
  if (!!eventPluginOrder) {
    {
      throw Error( "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React." );
    }
  } // Clone the ordering so it cannot be dynamically mutated.


  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}
/**
 * Injects plugins to be used by plugin event system. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 */

function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;

  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }

    var pluginModule = injectedNamesToPlugins[pluginName];

    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      if (!!namesToPlugins[pluginName]) {
        {
          throw Error( "EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`." );
        }
      }

      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }

  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

var PLUGIN_EVENT_SYSTEM = 1;
var IS_REPLAYED = 1 << 5;
var IS_FIRST_ANCESTOR = 1 << 6;

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);

  if (!internalInstance) {
    // Unmounted
    return;
  }

  if (!(typeof restoreImpl === 'function')) {
    {
      throw Error( "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

  if (stateNode) {
    var _props = getFiberCurrentPropsFromNode(stateNode);

    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
  }
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}
function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}
function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}
function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }

  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;
  restoreStateOfTarget(target);

  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

var enableProfilerTimer = true; // Trace which interactions trigger each commit.

var enableDeprecatedFlareAPI = false; // Experimental Host Component support.

var enableFundamentalAPI = false; // Experimental Scope support.
var warnAboutStringRefs = false;

// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults

var batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var discreteUpdatesImpl = function (fn, a, b, c, d) {
  return fn(a, b, c, d);
};

var flushDiscreteUpdatesImpl = function () {};

var batchedEventUpdatesImpl = batchedUpdatesImpl;
var isInsideEventHandler = false;
var isBatchingEventUpdates = false;

function finishEventHandler() {
  // Here we wait until all updates have propagated, which is important
  // when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  // Then we restore state of any controlled component.
  var controlledComponentsHavePendingUpdates = needsStateRestore();

  if (controlledComponentsHavePendingUpdates) {
    // If a controlled event was fired, we may need to restore the state of
    // the DOM node back to the controlled value. This is necessary when React
    // bails out of the update without touching the DOM.
    flushDiscreteUpdatesImpl();
    restoreStateIfNeeded();
  }
}

function batchedUpdates(fn, bookkeeping) {
  if (isInsideEventHandler) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(bookkeeping);
  }

  isInsideEventHandler = true;

  try {
    return batchedUpdatesImpl(fn, bookkeeping);
  } finally {
    isInsideEventHandler = false;
    finishEventHandler();
  }
}
function batchedEventUpdates(fn, a, b) {
  if (isBatchingEventUpdates) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(a, b);
  }

  isBatchingEventUpdates = true;

  try {
    return batchedEventUpdatesImpl(fn, a, b);
  } finally {
    isBatchingEventUpdates = false;
    finishEventHandler();
  }
} // This is for the React Flare event system
function discreteUpdates(fn, a, b, c, d) {
  var prevIsInsideEventHandler = isInsideEventHandler;
  isInsideEventHandler = true;

  try {
    return discreteUpdatesImpl(fn, a, b, c, d);
  } finally {
    isInsideEventHandler = prevIsInsideEventHandler;

    if (!isInsideEventHandler) {
      finishEventHandler();
    }
  }
}
function flushDiscreteUpdatesIfNeeded(timeStamp) {
  // event.timeStamp isn't overly reliable due to inconsistencies in
  // how different browsers have historically provided the time stamp.
  // Some browsers provide high-resolution time stamps for all events,
  // some provide low-resolution time stamps for all events. FF < 52
  // even mixes both time stamps together. Some browsers even report
  // negative time stamps or time stamps that are 0 (iOS9) in some cases.
  // Given we are only comparing two time stamps with equality (!==),
  // we are safe from the resolution differences. If the time stamp is 0
  // we bail-out of preventing the flush, which can affect semantics,
  // such as if an earlier flush removes or adds event listeners that
  // are fired in the subsequent flush. However, this is the same
  // behaviour as we had before this change, so the risks are low.
  if (!isInsideEventHandler && (!enableDeprecatedFlareAPI  )) {
    flushDiscreteUpdatesImpl();
  }
}
function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
  batchedUpdatesImpl = _batchedUpdatesImpl;
  discreteUpdatesImpl = _discreteUpdatesImpl;
  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
}

var DiscreteEvent = 0;
var UserBlockingEvent = 1;
var ContinuousEvent = 2;

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0; // A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.

var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.

var BOOLEANISH_STRING = 2; // A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.

var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.

var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.

var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.

var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */

var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty = Object.prototype.hasOwnProperty;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }

  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }

  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }

  illegalAttributeNameCache[attributeName] = true;

  {
    error('Invalid attribute name: `%s`', attributeName);
  }

  return false;
}
function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }

  return false;
}
function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }

  switch (typeof value) {
    case 'function': // $FlowIssue symbol is perfectly valid here

    case 'symbol':
      // eslint-disable-line
      return true;

    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }

        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }

    default:
      return false;
  }
}
function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }

  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (propertyInfo !== null) {
    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;

      case OVERLOADED_BOOLEAN:
        return value === false;

      case NUMERIC:
        return isNaN(value);

      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }

  return false;
}
function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
  this.sanitizeURL = sanitizeURL;
} // When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.


var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

reservedProps.forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.

[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null, // attributeNamespace
  false);
}); // These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).

['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.

['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML boolean attributes.

['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.

['checked', // Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.

['capture', 'download' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that must be positive numbers.

['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that must be numbers.

['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
});
var CAMELIZE = /[\-\:]([a-z])/g;

var capitalize = function (token) {
  return token[1].toUpperCase();
}; // This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scraping the MDN documentation.


['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null, // attributeNamespace
  false);
}); // String SVG attributes with the xlink namespace.

['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink', false);
}); // String SVG attributes with the xml namespace.

['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace', false);
}); // These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.

['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These attributes accept URLs. These must not allow javascript: URLS.
// These will also need to accept Trusted Types object in the future.

var xlinkHref = 'xlinkHref';
properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
'xlink:href', 'http://www.w3.org/1999/xlink', true);
['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  true);
});

var ReactDebugCurrentFrame = null;

{
  ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
} // A javascript: URL can contain leading C0 control or \u0020 SPACE,
// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space

/* eslint-disable max-len */


var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
var didWarn = false;

function sanitizeURL(url) {
  {
    if (!didWarn && isJavaScriptProtocol.test(url)) {
      didWarn = true;

      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
    }
  }
}

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
      return node[propertyName];
    } else {
      if ( propertyInfo.sanitizeURL) {
        // If we haven't fully disabled javascript: URLs, and if
        // the hydration is successful of a javascript: URL, we
        // still want to warn on the client.
        sanitizeURL('' + expected);
      }

      var attributeName = propertyInfo.attributeName;
      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);

          if (value === '') {
            return true;
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          }

          if (value === '' + expected) {
            return expected;
          }

          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }

        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        } // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.


        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue;
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}
/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }

    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }

    var value = node.getAttribute(name);

    if (value === '' + expected) {
      return expected;
    }

    return value;
  }
}
/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);

  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }

  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  } // If the prop isn't in the special list, treat it as a simple attribute.


  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;

      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        node.setAttribute(_attributeName,  '' + value);
      }
    }

    return;
  }

  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;
      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }

    return;
  } // The rest are treated as attributes with special cases.


  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;
    var attributeValue;

    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      // If attribute type is boolean, we know for sure it won't be an execution sink
      // and we won't require Trusted Type here.
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      {
        attributeValue = '' + value;
      }

      if (propertyInfo.sanitizeURL) {
        sanitizeURL(attributeValue.toString());
      }
    }

    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
function describeComponentFrame (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
}

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}
function initializeLazyComponentType(lazyComponent) {
  if (lazyComponent._status === Uninitialized) {
    lazyComponent._status = Pending;
    var ctor = lazyComponent._ctor;
    var thenable = ctor();
    lazyComponent._result = thenable;
    thenable.then(function (moduleObject) {
      if (lazyComponent._status === Pending) {
        var defaultExport = moduleObject.default;

        {
          if (defaultExport === undefined) {
            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
          }
        }

        lazyComponent._status = Resolved;
        lazyComponent._result = defaultExport;
      }
    }, function (error) {
      if (lazyComponent._status === Pending) {
        lazyComponent._status = Rejected;
        lazyComponent._result = error;
      }
    });
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type.render);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function describeFiber(fiber) {
  switch (fiber.tag) {
    case HostRoot:
    case HostPortal:
    case HostText:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
      return '';

    default:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber.type);
      var ownerName = null;

      if (owner) {
        ownerName = getComponentName(owner.type);
      }

      return describeComponentFrame(name, source, ownerName);
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  var info = '';
  var node = workInProgress;

  do {
    info += describeFiber(node);
    node = node.return;
  } while (node);

  return info;
}
var current = null;
var isRendering = false;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }

  return null;
}
function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }
}
function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame$1.getCurrentStack = null;
    current = null;
    isRendering = false;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    isRendering = false;
  }
}
function setIsRendering(rendering) {
  {
    isRendering = rendering;
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  return '' + value;
}
function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return value;

    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

var ReactDebugCurrentFrame$2 = null;
var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };
  var propTypes = {
    value: function (props, propName, componentName) {
      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
        return null;
      }

      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
        return null;
      }

      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };
  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */

  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
  };
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';

  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)

  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  var get = descriptor.get,
      set = descriptor.set;
  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      set.call(this, value);
    }
  }); // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });
  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  } // TODO: Once it's just Fiber we can move this to node._wrapperState


  node._valueTracker = trackValueOnNode(node);
}
function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
  // that trying again will succeed

  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);

  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }

  return false;
}

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}
/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */


function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;

  var hostProps = _assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}
function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnCheckedDefaultChecked = true;
    }

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}
function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;

  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}
function updateWrapper(element, props) {
  var node = element;

  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      error('A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

      didWarnUncontrolledToControlled = true;
    }

    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      error('A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);
  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}
function postMountWrapper(element, props, isHydrating) {
  var node = element; // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.

  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872

    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.

    if (!isHydrating) {
      {
        // When syncing the value attribute, the value property should use
        // the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (initialValue !== node.value) {
          node.value = initialValue;
        }
      }
    }

    {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = initialValue;
    }
  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.


  var name = node.name;

  if (name !== '') {
    node.name = '';
  }

  {
    // When syncing the checked attribute, both the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}
function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;

  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    } // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.


    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];

      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      } // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.


      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);

      if (!otherProps) {
        {
          throw Error( "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported." );
        }
      } // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set


      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.

      updateWrapper(otherNode, otherProps);
    }
  }
} // In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253


function setDefaultValue(node, type, value) {
  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || node.ownerDocument.activeElement !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;

function flattenChildren(children) {
  var content = ''; // Flatten children. We'll warn if they are invalid
  // during validateProps() which runs for hydration too.
  // Note that this would throw on non-element objects.
  // Elements are stringified (which is normally irrelevant
  // but matters for <fbt>).

  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }

    content += child; // Note: we don't warn about invalid children here.
    // Instead, this is done separately below so that
    // it happens during the hydration codepath too.
  });
  return content;
}
/**
 * Implements an <option> host component that warns when `selected` is set.
 */


function validateProps(element, props) {
  {
    // This mirrors the codepath above, but runs for hydration too.
    // Warn about invalid children here so that client and hydration are consistent.
    // TODO: this seems like it could cause a DEV-only throw for hydration
    // if children contains a non-element object. We should try to avoid that.
    if (typeof props.children === 'object' && props.children !== null) {
      React.Children.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }

        if (typeof child === 'string' || typeof child === 'number') {
          return;
        }

        if (typeof child.type !== 'string') {
          return;
        }

        if (!didWarnInvalidChild) {
          didWarnInvalidChild = true;

          error('Only strings and numbers are supported as <option> children.');
        }
      });
    } // TODO: Remove support for `selected` in <option>.


    if (props.selected != null && !didWarnSelectedSetOnOption) {
      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

      didWarnSelectedSetOnOption = true;
    }
  }
}
function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}
function getHostProps$1(element, props) {
  var hostProps = _assign({
    children: undefined
  }, props);

  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

var didWarnValueDefaultValue$1;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }

  return '';
}

var valuePropNames = ['value', 'defaultValue'];
/**
 * Validation function for `value` and `defaultValue`.
 */

function checkSelectPropTypes(props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('select', props);

    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];

      if (props[propName] == null) {
        continue;
      }

      var isArray = Array.isArray(props[propName]);

      if (props.multiple && !isArray) {
        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
      } else if (!props.multiple && isArray) {
        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
      }
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};

    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }

    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }

      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));

    var defaultSelected = null;

    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;

        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }

        return;
      }

      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }

    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}
/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */


function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}
function initWrapperState$1(element, props) {
  var node = element;

  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');

      didWarnValueDefaultValue$1 = true;
    }
  }
}
function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}
function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}
function restoreControlledState$1(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
function getHostProps$3(element, props) {
  var node = element;

  if (!(props.dangerouslySetInnerHTML == null)) {
    {
      throw Error( "`dangerouslySetInnerHTML` does not make sense on <textarea>." );
    }
  } // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.


  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}
function initWrapperState$2(element, props) {
  var node = element;

  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props);

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value; // Only bother fetching default value if we're going to use it

  if (initialValue == null) {
    var children = props.children,
        defaultValue = props.defaultValue;

    if (children != null) {
      {
        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }

      {
        if (!(defaultValue == null)) {
          {
            throw Error( "If you supply `defaultValue` on a <textarea>, do not pass children." );
          }
        }

        if (Array.isArray(children)) {
          if (!(children.length <= 1)) {
            {
              throw Error( "<textarea> can only have at most one child." );
            }
          }

          children = children[0];
        }

        defaultValue = children;
      }
    }

    if (defaultValue == null) {
      defaultValue = '';
    }

    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}
function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);

  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

    if (newValue !== node.value) {
      node.value = newValue;
    }

    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }

  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}
function postMountWrapper$3(element, props) {
  var node = element; // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.

  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

  if (textContent === node._wrapperState.initialValue) {
    if (textContent !== '' && textContent !== null) {
      node.value = textContent;
    }
  }
}
function restoreControlledState$2(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
var Namespaces = {
  html: HTML_NAMESPACE,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
}; // Assumes there is no parent namespace.

function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;

    case 'math':
      return MATH_NAMESPACE;

    default:
      return HTML_NAMESPACE;
  }
}
function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }

  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE;
  } // By default, pass namespace below.


  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

var reusableSVGContainer;
/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */

var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  if (node.namespaceURI === Namespaces.svg) {

    if (!('innerHTML' in node)) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;

      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }

      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }

      return;
    }
  }

  node.innerHTML = html;
});

/**
 * HTML nodeType values that represent the type of the node
 */
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */

var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }

  node.textContent = text;
};

// Do not use the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)
function unsafeCastStringToDOMTopLevelType(topLevelType) {
  return topLevelType;
}
function unsafeCastDOMTopLevelTypeToString(topLevelType) {
  return topLevelType;
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  return prefixes;
}
/**
 * A list of event names to a configurable list of vendor prefixes.
 */


var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};
/**
 * Event names that have already been detected and prefixed (if applicable).
 */

var prefixedEventNames = {};
/**
 * Element to check for prefixes on.
 */

var style = {};
/**
 * Bootstrap if a DOM exists.
 */

if (canUseDOM) {
  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.

  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  } // Same as above


  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}
/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */


function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */

var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
function getRawEventName(topLevelType) {
  return unsafeCastDOMTopLevelTypeToString(topLevelType);
}

var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // prettier-ignore

var elementListenerMap = new PossiblyWeakMap();
function getListenerMapForElement(element) {
  var listenerMap = elementListenerMap.get(element);

  if (listenerMap === undefined) {
    listenerMap = new Map();
    elementListenerMap.set(element, listenerMap);
  }

  return listenerMap;
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */
function get(key) {
  return key._reactInternalFiber;
}
function has(key) {
  return key._reactInternalFiber !== undefined;
}
function set(key, value) {
  key._reactInternalFiber = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoEffect =
/*              */
0;
var PerformedWork =
/*         */
1; // You can change the rest (and add more).

var Placement =
/*             */
2;
var Update =
/*                */
4;
var PlacementAndUpdate =
/*    */
6;
var Deletion =
/*              */
8;
var ContentReset =
/*          */
16;
var Callback =
/*              */
32;
var DidCapture =
/*            */
64;
var Ref =
/*                   */
128;
var Snapshot =
/*              */
256;
var Passive =
/*               */
512;
var Hydrating =
/*             */
1024;
var HydratingAndUpdate =
/*    */
1028; // Passive & Update & Callback & Ref & Snapshot

var LifecycleEffectMask =
/*   */
932; // Union of all host effects

var HostEffectMask =
/*        */
2047;
var Incomplete =
/*            */
2048;
var ShouldCapture =
/*         */
4096;

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (fiber.tag === SuspenseComponent) {
    var suspenseState = fiber.memoizedState;

    if (suspenseState === null) {
      var current = fiber.alternate;

      if (current !== null) {
        suspenseState = current.memoizedState;
      }
    }

    if (suspenseState !== null) {
      return suspenseState.dehydrated;
    }
  }

  return null;
}
function getContainerFromFiber(fiber) {
  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
}
function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;

      if (!instance._warnedAboutRefsInRender) {
        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
      }

      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (!(getNearestMountedFiber(fiber) === fiber)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (!(nearestMounted !== null)) {
      {
        throw Error( "Unable to find node on an unmounted component." );
      }
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      {
        {
          throw Error( "Unable to find node on an unmounted component." );
        }
      }
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          {
            throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
          }
        }
      }
    }

    if (!(a.alternate === b)) {
      {
        throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (!(a.tag === HostRoot)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}
function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  if (!(next != null)) {
    {
      throw Error( "accumulateInto(...): Accumulated items must not be null or undefined." );
    }
  }

  if (current == null) {
    return next;
  } // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).


  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }

    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */

var eventQueue = null;
/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */

var executeDispatchesAndRelease = function (event) {
  if (event) {
    executeDispatchesInOrder(event);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e);
};

function runEventsInBatch(events) {
  if (events !== null) {
    eventQueue = accumulateInto(eventQueue, events);
  } // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.


  var processingEventQueue = eventQueue;
  eventQueue = null;

  if (!processingEventQueue) {
    return;
  }

  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

  if (!!eventQueue) {
    {
      throw Error( "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented." );
    }
  } // This would be a good time to rethrow if any of the event handlers threw.


  rethrowCaughtError();
}

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html


  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

/**
 * Summary of `DOMEventPluginSystem` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginRegistry`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginRegistry` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginRegistry` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|PluginRegistry|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;

  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
} // Used to store ancestor hierarchy in top level callback


function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.eventSystemFlags = eventSystemFlags;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }

  return {
    topLevelType: topLevelType,
    eventSystemFlags: eventSystemFlags,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}
/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */


function findRootContainerNode(inst) {
  if (inst.tag === HostRoot) {
    return inst.stateNode.containerInfo;
  } // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.


  while (inst.return) {
    inst = inst.return;
  }

  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }

  return inst.stateNode.containerInfo;
}
/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */


function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var events = null;

  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];

    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);

      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }

  return events;
}

function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  runEventsInBatch(events);
}

function handleTopLevel(bookKeeping) {
  var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.

  var ancestor = targetInst;

  do {
    if (!ancestor) {
      var ancestors = bookKeeping.ancestors;
      ancestors.push(ancestor);
      break;
    }

    var root = findRootContainerNode(ancestor);

    if (!root) {
      break;
    }

    var tag = ancestor.tag;

    if (tag === HostComponent || tag === HostText) {
      bookKeeping.ancestors.push(ancestor);
    }

    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    var eventTarget = getEventTarget(bookKeeping.nativeEvent);
    var topLevelType = bookKeeping.topLevelType;
    var nativeEvent = bookKeeping.nativeEvent;
    var eventSystemFlags = bookKeeping.eventSystemFlags; // If this is the first ancestor, we mark it on the system flags

    if (i === 0) {
      eventSystemFlags |= IS_FIRST_ANCESTOR;
    }

    runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
  }
}

function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedEventUpdates(handleTopLevel, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}
/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */

function legacyListenToEvent(registrationName, mountAt) {
  var listenerMap = getListenerMapForElement(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
  }
}
function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
  if (!listenerMap.has(topLevelType)) {
    switch (topLevelType) {
      case TOP_SCROLL:
        trapCapturedEvent(TOP_SCROLL, mountAt);
        break;

      case TOP_FOCUS:
      case TOP_BLUR:
        trapCapturedEvent(TOP_FOCUS, mountAt);
        trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
        // but this ensures we mark both as attached rather than just one.

        listenerMap.set(TOP_BLUR, null);
        listenerMap.set(TOP_FOCUS, null);
        break;

      case TOP_CANCEL:
      case TOP_CLOSE:
        if (isEventSupported(getRawEventName(topLevelType))) {
          trapCapturedEvent(topLevelType, mountAt);
        }

        break;

      case TOP_INVALID:
      case TOP_SUBMIT:
      case TOP_RESET:
        // We listen to them on the target DOM elements.
        // Some of them bubble so we don't want them to fire twice.
        break;

      default:
        // By default, listen on the top level to all non-media events.
        // Media events don't bubble so adding the listener wouldn't do anything.
        var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;

        if (!isMediaEvent) {
          trapBubbledEvent(topLevelType, mountAt);
        }

        break;
    }

    listenerMap.set(topLevelType, null);
  }
}
function isListeningToAllDependencies(registrationName, mountAt) {
  var listenerMap = getListenerMapForElement(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];

    if (!listenerMap.has(dependency)) {
      return false;
    }
  }

  return true;
}

var attemptUserBlockingHydration;
function setAttemptUserBlockingHydration(fn) {
  attemptUserBlockingHydration = fn;
}
var attemptContinuousHydration;
function setAttemptContinuousHydration(fn) {
  attemptContinuousHydration = fn;
}
var attemptHydrationAtCurrentPriority;
function setAttemptHydrationAtCurrentPriority(fn) {
  attemptHydrationAtCurrentPriority = fn;
} // TODO: Upgrade this definition once we're on a newer version of Flow that
var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
// if the last target was dehydrated.

var queuedFocus = null;
var queuedDrag = null;
var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

var queuedPointers = new Map();
var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

var queuedExplicitHydrationTargets = [];
function hasQueuedDiscreteEvents() {
  return queuedDiscreteEvents.length > 0;
}
var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
function isReplayableDiscreteEvent(eventType) {
  return discreteReplayableEvents.indexOf(eventType) > -1;
}

function trapReplayableEventForDocument(topLevelType, document, listenerMap) {
  legacyListenToTopLevelEvent(topLevelType, document, listenerMap);
}

function eagerlyTrapReplayableEvents(container, document) {
  var listenerMapForDoc = getListenerMapForElement(document); // Discrete

  discreteReplayableEvents.forEach(function (topLevelType) {
    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
  }); // Continuous

  continuousReplayableEvents.forEach(function (topLevelType) {
    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
  });
}

function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  return {
    blockedOn: blockedOn,
    topLevelType: topLevelType,
    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
    nativeEvent: nativeEvent,
    container: container
  };
}

function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
  queuedDiscreteEvents.push(queuedEvent);
} // Resets the replaying for this type of continuous event to no event.

function clearIfContinuousEvent(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_FOCUS:
    case TOP_BLUR:
      queuedFocus = null;
      break;

    case TOP_DRAG_ENTER:
    case TOP_DRAG_LEAVE:
      queuedDrag = null;
      break;

    case TOP_MOUSE_OVER:
    case TOP_MOUSE_OUT:
      queuedMouse = null;
      break;

    case TOP_POINTER_OVER:
    case TOP_POINTER_OUT:
      {
        var pointerId = nativeEvent.pointerId;
        queuedPointers.delete(pointerId);
        break;
      }

    case TOP_GOT_POINTER_CAPTURE:
    case TOP_LOST_POINTER_CAPTURE:
      {
        var _pointerId = nativeEvent.pointerId;
        queuedPointerCaptures.delete(_pointerId);
        break;
      }
  }
}

function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);

    if (blockedOn !== null) {
      var _fiber2 = getInstanceFromNode$1(blockedOn);

      if (_fiber2 !== null) {
        // Attempt to increase the priority of this target.
        attemptContinuousHydration(_fiber2);
      }
    }

    return queuedEvent;
  } // If we have already queued this exact event, then it's because
  // the different event systems have different DOM event listeners.
  // We can accumulate the flags and store a single event to be
  // replayed.


  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  return existingQueuedEvent;
}

function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  // These set relatedTarget to null because the replayed event will be treated as if we
  // moved from outside the window (no target) onto the target once it hydrates.
  // Instead of mutating we could clone the event.
  switch (topLevelType) {
    case TOP_FOCUS:
      {
        var focusEvent = nativeEvent;
        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
        return true;
      }

    case TOP_DRAG_ENTER:
      {
        var dragEvent = nativeEvent;
        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
        return true;
      }

    case TOP_MOUSE_OVER:
      {
        var mouseEvent = nativeEvent;
        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
        return true;
      }

    case TOP_POINTER_OVER:
      {
        var pointerEvent = nativeEvent;
        var pointerId = pointerEvent.pointerId;
        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
        return true;
      }

    case TOP_GOT_POINTER_CAPTURE:
      {
        var _pointerEvent = nativeEvent;
        var _pointerId2 = _pointerEvent.pointerId;
        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
        return true;
      }
  }

  return false;
} // Check if this target is unblocked. Returns true if it's unblocked.

function attemptExplicitHydrationTarget(queuedTarget) {
  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
  // Try to unify them. It's a bit tricky since it would require two return
  // values.
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted !== null) {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // We're blocked on hydrating this boundary.
          // Increase its priority.
          queuedTarget.blockedOn = instance;
          Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
            attemptHydrationAtCurrentPriority(nearestMounted);
          });
          return;
        }
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
          // a root other than sync.

          return;
        }
      }
    }
  }

  queuedTarget.blockedOn = null;
}

function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (queuedEvent.blockedOn !== null) {
    return false;
  }

  var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);

  if (nextBlockedOn !== null) {
    // We're still blocked. Try again later.
    var _fiber3 = getInstanceFromNode$1(nextBlockedOn);

    if (_fiber3 !== null) {
      attemptContinuousHydration(_fiber3);
    }

    queuedEvent.blockedOn = nextBlockedOn;
    return false;
  }

  return true;
}

function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
    map.delete(key);
  }
}

function replayUnblockedEvents() {
  hasScheduledReplayAttempt = false; // First replay discrete events.

  while (queuedDiscreteEvents.length > 0) {
    var nextDiscreteEvent = queuedDiscreteEvents[0];

    if (nextDiscreteEvent.blockedOn !== null) {
      // We're still blocked.
      // Increase the priority of this boundary to unblock
      // the next discrete event.
      var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);

      if (_fiber4 !== null) {
        attemptUserBlockingHydration(_fiber4);
      }

      break;
    }

    var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);

    if (nextBlockedOn !== null) {
      // We're still blocked. Try again later.
      nextDiscreteEvent.blockedOn = nextBlockedOn;
    } else {
      // We've successfully replayed the first event. Let's try the next one.
      queuedDiscreteEvents.shift();
    }
  } // Next replay any continuous events.


  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
    queuedFocus = null;
  }

  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
    queuedDrag = null;
  }

  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
    queuedMouse = null;
  }

  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}

function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  if (queuedEvent.blockedOn === unblocked) {
    queuedEvent.blockedOn = null;

    if (!hasScheduledReplayAttempt) {
      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
      // now unblocked. This first might not actually be unblocked yet.
      // We could check it early to avoid scheduling an unnecessary callback.

      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
    }
  }
}

function retryIfBlockedOn(unblocked) {
  // Mark anything that was blocked on this as no longer blocked
  // and eligible for a replay.
  if (queuedDiscreteEvents.length > 0) {
    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
    // worth it because we expect very few discrete events to queue up and once
    // we are actually fully unblocked it will be fast to replay them.

    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
      var queuedEvent = queuedDiscreteEvents[i];

      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
      }
    }
  }

  if (queuedFocus !== null) {
    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  }

  if (queuedDrag !== null) {
    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  }

  if (queuedMouse !== null) {
    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  }

  var unblock = function (queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  };

  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);

  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
    var queuedTarget = queuedExplicitHydrationTargets[_i];

    if (queuedTarget.blockedOn === unblocked) {
      queuedTarget.blockedOn = null;
    }
  }

  while (queuedExplicitHydrationTargets.length > 0) {
    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

    if (nextExplicitTarget.blockedOn !== null) {
      // We're still blocked.
      break;
    } else {
      attemptExplicitHydrationTarget(nextExplicitTarget);

      if (nextExplicitTarget.blockedOn === null) {
        // We're unblocked.
        queuedExplicitHydrationTargets.shift();
      }
    }
  }
}

function addEventBubbleListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, false);
}
function addEventCaptureListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, true);
}

// do it in two places, which duplicates logic
// and increases the bundle size, we do it all
// here once. If we remove or refactor the
// SimpleEventPlugin, we should also remove or
// update the below line.

var simpleEventPluginEventTypes = {};
var topLevelEventsToDispatchConfig = new Map();
var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
// the code required to apply the same logic for event prioritization and that of the
// SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
// duplication (for which there would be quite a bit). For the events that are not needed
// for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
// array of top level events.
// Lastly, we ignore prettier so we can keep the formatting sane.
// prettier-ignore

var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, 'blur', TOP_CANCEL, 'cancel', TOP_CLICK, 'click', TOP_CLOSE, 'close', TOP_CONTEXT_MENU, 'contextMenu', TOP_COPY, 'copy', TOP_CUT, 'cut', TOP_AUX_CLICK, 'auxClick', TOP_DOUBLE_CLICK, 'doubleClick', TOP_DRAG_END, 'dragEnd', TOP_DRAG_START, 'dragStart', TOP_DROP, 'drop', TOP_FOCUS, 'focus', TOP_INPUT, 'input', TOP_INVALID, 'invalid', TOP_KEY_DOWN, 'keyDown', TOP_KEY_PRESS, 'keyPress', TOP_KEY_UP, 'keyUp', TOP_MOUSE_DOWN, 'mouseDown', TOP_MOUSE_UP, 'mouseUp', TOP_PASTE, 'paste', TOP_PAUSE, 'pause', TOP_PLAY, 'play', TOP_POINTER_CANCEL, 'pointerCancel', TOP_POINTER_DOWN, 'pointerDown', TOP_POINTER_UP, 'pointerUp', TOP_RATE_CHANGE, 'rateChange', TOP_RESET, 'reset', TOP_SEEKED, 'seeked', TOP_SUBMIT, 'submit', TOP_TOUCH_CANCEL, 'touchCancel', TOP_TOUCH_END, 'touchEnd', TOP_TOUCH_START, 'touchStart', TOP_VOLUME_CHANGE, 'volumeChange'];
var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE]; // prettier-ignore

var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, 'drag', TOP_DRAG_ENTER, 'dragEnter', TOP_DRAG_EXIT, 'dragExit', TOP_DRAG_LEAVE, 'dragLeave', TOP_DRAG_OVER, 'dragOver', TOP_MOUSE_MOVE, 'mouseMove', TOP_MOUSE_OUT, 'mouseOut', TOP_MOUSE_OVER, 'mouseOver', TOP_POINTER_MOVE, 'pointerMove', TOP_POINTER_OUT, 'pointerOut', TOP_POINTER_OVER, 'pointerOver', TOP_SCROLL, 'scroll', TOP_TOGGLE, 'toggle', TOP_TOUCH_MOVE, 'touchMove', TOP_WHEEL, 'wheel']; // prettier-ignore

var continuousPairsForSimpleEventPlugin = [TOP_ABORT, 'abort', TOP_ANIMATION_END, 'animationEnd', TOP_ANIMATION_ITERATION, 'animationIteration', TOP_ANIMATION_START, 'animationStart', TOP_CAN_PLAY, 'canPlay', TOP_CAN_PLAY_THROUGH, 'canPlayThrough', TOP_DURATION_CHANGE, 'durationChange', TOP_EMPTIED, 'emptied', TOP_ENCRYPTED, 'encrypted', TOP_ENDED, 'ended', TOP_ERROR, 'error', TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', TOP_LOAD, 'load', TOP_LOADED_DATA, 'loadedData', TOP_LOADED_METADATA, 'loadedMetadata', TOP_LOAD_START, 'loadStart', TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', TOP_PLAYING, 'playing', TOP_PROGRESS, 'progress', TOP_SEEKING, 'seeking', TOP_STALLED, 'stalled', TOP_SUSPEND, 'suspend', TOP_TIME_UPDATE, 'timeUpdate', TOP_TRANSITION_END, 'transitionEnd', TOP_WAITING, 'waiting'];
/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */

function processSimpleEventPluginPairsByPriority(eventTypes, priority) {
  // As the event types are in pairs of two, we need to iterate
  // through in twos. The events are in pairs of two to save code
  // and improve init perf of processing this array, as it will
  // result in far fewer object allocations and property accesses
  // if we only use three arrays to process all the categories of
  // instead of tuples.
  for (var i = 0; i < eventTypes.length; i += 2) {
    var topEvent = eventTypes[i];
    var event = eventTypes[i + 1];
    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
    var onEvent = 'on' + capitalizedEvent;
    var config = {
      phasedRegistrationNames: {
        bubbled: onEvent,
        captured: onEvent + 'Capture'
      },
      dependencies: [topEvent],
      eventPriority: priority
    };
    eventPriorities.set(topEvent, priority);
    topLevelEventsToDispatchConfig.set(topEvent, config);
    simpleEventPluginEventTypes[event] = config;
  }
}

function processTopEventPairsByPriority(eventTypes, priority) {
  for (var i = 0; i < eventTypes.length; i++) {
    eventPriorities.set(eventTypes[i], priority);
  }
} // SimpleEventPlugin


processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent); // Not used by SimpleEventPlugin

processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
function getEventPriorityForPluginSystem(topLevelType) {
  var priority = eventPriorities.get(topLevelType); // Default to a ContinuousEvent. Note: we might
  // want to warn if we can't detect the priority
  // for the event.

  return priority === undefined ? ContinuousEvent : priority;
}

// Intentionally not named imports because Rollup would use dynamic dispatch for
var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

var _enabled = true;
function setEnabled(enabled) {
  _enabled = !!enabled;
}
function isEnabled() {
  return _enabled;
}
function trapBubbledEvent(topLevelType, element) {
  trapEventForPluginEventSystem(element, topLevelType, false);
}
function trapCapturedEvent(topLevelType, element) {
  trapEventForPluginEventSystem(element, topLevelType, true);
}

function trapEventForPluginEventSystem(container, topLevelType, capture) {
  var listener;

  switch (getEventPriorityForPluginSystem(topLevelType)) {
    case DiscreteEvent:
      listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
      break;

    case UserBlockingEvent:
      listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
      break;

    case ContinuousEvent:
    default:
      listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
      break;
  }

  var rawEventName = getRawEventName(topLevelType);

  if (capture) {
    addEventCaptureListener(container, rawEventName, listener);
  } else {
    addEventBubbleListener(container, rawEventName, listener);
  }
}

function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
  flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
  discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
}

function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
  runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
}

function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
  if (!_enabled) {
    return;
  }

  if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
    // If we already have a queue of discrete events, and this is another discrete
    // event, then we can't dispatch it regardless of its target, since they
    // need to dispatch in order.
    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
    topLevelType, eventSystemFlags, container, nativeEvent);
    return;
  }

  var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);

  if (blockedOn === null) {
    // We successfully dispatched this event.
    clearIfContinuousEvent(topLevelType, nativeEvent);
    return;
  }

  if (isReplayableDiscreteEvent(topLevelType)) {
    // This this to be replayed later once the target is available.
    queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
    return;
  }

  if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
    return;
  } // We need to clear only if we didn't queue because
  // queueing is accummulative.


  clearIfContinuousEvent(topLevelType, nativeEvent); // This is not replayable so we'll invoke it but without a target,
  // in case the event system needs to trace it.

  {
    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
  }
} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
  // TODO: Warn if _enabled is false.
  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted === null) {
      // This tree has been unmounted already. Dispatch without a target.
      targetInst = null;
    } else {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // Queue the event to be replayed later. Abort dispatching since we
          // don't want this event dispatched twice through the event system.
          // TODO: If this is the first discrete event in the queue. Schedule an increased
          // priority for this boundary.
          return instance;
        } // This shouldn't happen, something went wrong but to avoid blocking
        // the whole system, dispatch the event without a target.
        // TODO: Warn.


        targetInst = null;
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          // If this happens during a replay something went wrong and it might block
          // the whole system.
          return getContainerFromFiber(nearestMounted);
        }

        targetInst = null;
      } else if (nearestMounted !== targetInst) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }
    }
  }

  {
    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
  } // We're not blocked on anything.


  return null;
}

// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand = {
  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
  columns: ['columnCount', 'columnWidth'],
  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
  flexFlow: ['flexDirection', 'flexWrap'],
  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
  gap: ['columnGap', 'rowGap'],
  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
  gridColumnGap: ['columnGap'],
  gridGap: ['columnGap', 'rowGap'],
  gridRow: ['gridRowEnd', 'gridRowStart'],
  gridRowGap: ['rowGap'],
  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marker: ['markerEnd', 'markerMid', 'markerStart'],
  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
  maskPosition: ['maskPositionX', 'maskPositionY'],
  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
  overflow: ['overflowX', 'overflowY'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  placeContent: ['alignContent', 'justifyContent'],
  placeItems: ['alignItems', 'justifyItems'],
  placeSelf: ['alignSelf', 'justifySelf'],
  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
  wordWrap: ['overflowWrap']
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}
/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */


var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.

Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901
  var isEmpty = value == null || typeof value === 'boolean' || value === '';

  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */

function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

  var badStyleValueWithSemicolonPattern = /;\s*$/;
  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;

    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;

    error('`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;

    error('`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';

    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }

      var styleValue = styles[styleName];

      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
        delimiter = ';';
      }
    }

    return serialized || null;
  }
}
/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

function setValueForStyles(node, styles) {
  var style = node.style;

  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }

    var isCustomProperty = styleName.indexOf('--') === 0;

    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }

    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

    if (styleName === 'float') {
      styleName = 'cssFloat';
    }

    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

function isValueEmpty(value) {
  return value == null || typeof value === 'boolean' || value === '';
}
/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */


function expandShorthandMap(styles) {
  var expanded = {};

  for (var key in styles) {
    var longhands = shorthandToLonghand[key] || [key];

    for (var i = 0; i < longhands.length; i++) {
      expanded[longhands[i]] = key;
    }
  }

  return expanded;
}
/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */


function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
  {

    if (!nextStyles) {
      return;
    }

    var expandedUpdates = expandShorthandMap(styleUpdates);
    var expandedStyles = expandShorthandMap(nextStyles);
    var warnedAbout = {};

    for (var key in expandedUpdates) {
      var originalKey = expandedUpdates[key];
      var correctOriginalKey = expandedStyles[key];

      if (correctOriginalKey && originalKey !== correctOriginalKey) {
        var warningKey = originalKey + ',' + correctOriginalKey;

        if (warnedAbout[warningKey]) {
          continue;
        }

        warnedAbout[warningKey] = true;

        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
      }
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.
var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

};

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

var HTML = '__html';
var ReactDebugCurrentFrame$3 = null;

{
  ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
}

function assertValidProps(tag, props) {
  if (!props) {
    return;
  } // Note the use of `==` which checks for null or undefined.


  if (voidElementTags[tag]) {
    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
      {
        throw Error( tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
      }
    }
  }

  if (props.dangerouslySetInnerHTML != null) {
    if (!(props.children == null)) {
      {
        throw Error( "Can only set one of `children` or `props.dangerouslySetInnerHTML`." );
      }
    }

    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
      {
        throw Error( "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information." );
      }
    }
  }

  {
    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
    }
  }

  if (!(props.style == null || typeof props.style === 'object')) {
    {
      throw Error( "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
    }
  }
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }

  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;

    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  disablepictureinpicture: 'disablePictureInPicture',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',
  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0,
  // state
  'aria-details': 0,
  'aria-disabled': 0,
  // state
  'aria-hidden': 0,
  // state
  'aria-invalid': 0,
  // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function validateProperty(tagName, name) {
  {
    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
      return true;
    }

    if (rARIACamel.test(name)) {
      var ariaName = 'aria-' + name.slice(4).toLowerCase();
      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (correctName == null) {
        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

        warnedProperties[name] = true;
        return true;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== correctName) {
        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

        warnedProperties[name] = true;
        return true;
      }
    }

    if (rARIA.test(name)) {
      var lowerCasedName = name.toLowerCase();
      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (standardName == null) {
        warnedProperties[name] = true;
        return false;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== standardName) {
        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties[name] = true;
        return true;
      }
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  {
    var invalidProps = [];

    for (var key in props) {
      var isValid = validateProperty(type, key);

      if (!isValid) {
        invalidProps.push(key);
      }
    }

    var unknownPropString = invalidProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (invalidProps.length === 1) {
      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
    } else if (invalidProps.length > 1) {
      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
    }
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;
function validateProperties$1(type, props) {
  {
    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
      return;
    }

    if (props != null && props.value === null && !didWarnValueNull) {
      didWarnValueNull = true;

      if (type === 'select' && props.multiple) {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
      } else {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
      }
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();

    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

      warnedProperties$1[name] = true;
      return true;
    } // We can't rely on the event system being injected on the server.


    if (canUseEventSystem) {
      if (registrationNameModules.hasOwnProperty(name)) {
        return true;
      }

      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

      if (registrationName != null) {
        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

        warnedProperties$1[name] = true;
        return true;
      }

      if (EVENT_NAME_REGEX.test(name)) {
        error('Unknown event handler property `%s`. It will be ignored.', name);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Let the ARIA attribute hook validate ARIA attributes


    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];

      if (standardName !== name) {
        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Now that we've validated casing, do not validate
    // data types for reserved props


    if (isReserved) {
      return true;
    } // Warn when a known attribute is a bad type


    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    } // Warn when passing the strings 'false' or 'true' into a boolean prop


    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, canUseEventSystem) {
  {
    var unknownProps = [];

    for (var key in props) {
      var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

      if (!isValid) {
        unknownProps.push(key);
      }
    }

    var unknownPropString = unknownProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (unknownProps.length === 1) {
      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
    } else if (unknownProps.length > 1) {
      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
    }
  }
};

function validateProperties$2(type, props, canUseEventSystem) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnUnknownProperties(type, props, canUseEventSystem);
}

var didWarnInvalidHydration = false;
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML$1 = '__html';
var HTML_NAMESPACE$1 = Namespaces.html;
var warnedUnknownTags;
var suppressHydrationWarning;
var validatePropertiesInDevelopment;
var warnForTextDifference;
var warnForPropDifference;
var warnForExtraAttributes;
var warnForInvalidEventListener;
var canDiffStyleForHydrationWarning;
var normalizeMarkupForTextOrAttribute;
var normalizeHTML;

{
  warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props,
    /* canUseEventSystem */
    true);
  }; // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807


  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.

  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

    if (normalizedServerText === normalizedClientText) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

    if (normalizedServerValue === normalizedClientValue) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });

    error('Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  }; // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.


  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  legacyListenToEvent(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = nextProps[propKey];

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];

    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.

  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;

  if (namespaceURI === HTML_NAMESPACE$1) {
    namespaceURI = getIntrinsicNamespace(type);
  }

  if (namespaceURI === HTML_NAMESPACE$1) {
    {
      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.

      if (!isCustomComponentTag && type !== type.toLowerCase()) {
        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
      }
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');

      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.

      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, {
        is: props.is
      });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
      // attributes on `select`s needs to be added before `option`s are inserted.
      // This prevents:
      // - a bug where the `select` does not scroll to the correct option because singular
      //  `select` elements automatically pick the first item #13222
      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
      // See https://github.com/facebook/react/issues/13222
      // and https://github.com/facebook/react/issues/14239

      if (type === 'select') {
        var node = domElement;

        if (props.multiple) {
          node.multiple = true;
        } else if (props.size) {
          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
          // it is possible that no option is selected.
          //
          // This is only necessary when a select in "single selection mode".
          node.size = props.size;
        }
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE$1) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;

        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}
function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}
function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);

  {
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  var props;

  switch (tag) {
    case 'iframe':
    case 'object':
    case 'embed':
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;

    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }

      props = rawProps;
      break;

    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      props = rawProps;
      break;

    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;

    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      props = rawProps;
      break;

    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      props = rawProps;
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    default:
      props = rawProps;
  }

  assertValidProps(tag, props);
  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;

    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;

    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }
} // Calculate the diff between the two objects.

function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;
  var lastProps;
  var nextProps;

  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;

    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;

      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  assertValidProps(tag, nextProps);
  var propKey;
  var styleName;
  var styleUpdates = null;

  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }

    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];

      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }

          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }

  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }

      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = '';
          }
        } // Update styles that changed since `lastProp`.


        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }

          updatePayload.push(propKey, styleUpdates);
        }

        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, nextHtml);
        }
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }

      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }

  if (styleUpdates) {
    {
      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
    }

    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }

  return updatePayload;
} // Apply the diff.

function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.

  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;

    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;

    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();

    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }

    return possibleStandardNames[lowerCasedName] || null;
  }
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  var isCustomComponentTag;
  var extraAttributeNames;

  {
    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  switch (tag) {
    case 'iframe':
    case 'object':
    case 'embed':
      trapBubbledEvent(TOP_LOAD, domElement);
      break;

    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }

      break;

    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      break;

    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      break;

    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      break;

    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'option':
      validateProps(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;

    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();

      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.

        case 'value':
          break;

        case 'checked':
          break;

        case 'selected':
          break;

        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;

  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = rawProps[propKey];

    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if ( !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if ( !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = getPropertyInfo(propKey);

      if (suppressHydrationWarning) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');

          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;

        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;

          if (ownNamespace === HTML_NAMESPACE$1) {
            ownNamespace = getIntrinsicNamespace(tag);
          }

          if (ownNamespace === HTML_NAMESPACE$1) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);

            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

              extraAttributeNames.delete(standardName);
            } // $FlowFixMe - Should be inferred as not undefined.


            extraAttributeNames.delete(propKey);
          }

          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;

    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  return updatePayload;
}
function diffHydratedText(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}
function warnForUnmatchedText(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}
function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}
function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }

    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}
function restoreControlledState$3(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;

    case 'textarea':
      restoreControlledState$2(domElement, props);
      return;

    case 'select':
      restoreControlledState$1(domElement, props);
      return;
  }
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }

  return node;
}
/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */


function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }

    node = node.parentNode;
  }
}
/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */


function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;
  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}
/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }

      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      } // Moving from `node` to its first child `next`.


      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }

      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }

      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }

      if ((next = node.nextSibling) !== null) {
        break;
      }

      node = parentNode;
      parentNode = node.parentNode;
    } // Moving from `node` to its next sibling `next`.


    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}
/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
  // fails when pasting 100+ items)

  if (!win.getSelection) {
    return;
  }

  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.

  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }

    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function isSameOriginFrame(iframe) {
  try {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute.
    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
    // iframe.contentDocument.defaultView;
    // A safety way is to access one of the cross origin properties: Window or Location
    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
    return typeof iframe.contentWindow.location.href === 'string';
  } catch (err) {
    return false;
  }
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();

  while (element instanceof win.HTMLIFrameElement) {
    if (isSameOriginFrame(element)) {
      win = element.contentWindow;
    } else {
      return element;
    }

    element = getActiveElement(win.document);
  }

  return element;
}
/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */


function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}
function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    // Used by Flare
    activeElementDetached: null,
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
  };
}
/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;

  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    } // Focusing a node can change the scroll position, which is undesirable


    var ancestors = [];
    var ancestor = priorFocusedElem;

    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}
/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

function getSelection(input) {
  var selection;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || {
    start: 0,
    end: 0
  };
}
/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var validateDOMNesting = function () {};

var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.
  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  var emptyAncestorInfo = {
    current: null,
    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,
    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

    var info = {
      tag: tag
    };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }

    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    } // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }

    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }

    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }

    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }

    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }

    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }

    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };
  /**
   * Returns whether
   */


  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';

      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but

      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

      case 'html':
        return tag === 'head' || tag === 'body' || tag === 'frameset';

      case 'frameset':
        return tag === 'frame';

      case '#document':
        return tag === 'html';
    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frameset':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };
  /**
   * Returns whether
   */


  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn$1 = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      if (childTag != null) {
        error('validateDOMNesting: when childText is passed, childTag should be null');
      }

      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;

    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackInDev();
    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

    if (didWarn$1[warnKey]) {
      return;
    }

    didWarn$1[warnKey] = true;
    var tagDisplayName = childTag;
    var whitespaceInfo = '';

    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';

      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
      }

      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
    } else {
      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
    }
  };
}

var SUPPRESS_HYDRATION_WARNING$1;

{
  SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
}

var SUSPENSE_START_DATA = '$';
var SUSPENSE_END_DATA = '/$';
var SUSPENSE_PENDING_START_DATA = '$?';
var SUSPENSE_FALLBACK_START_DATA = '$!';
var STYLE$1 = 'style';
var eventsEnabled = null;
var selectionInformation = null;

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }

  return false;
}
function getRootHostContext(rootContainerInstance) {
  var type;
  var namespace;
  var nodeType = rootContainerInstance.nodeType;

  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }

    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }

  {
    var validatedTag = type.toLowerCase();
    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getPublicInstance(instance) {
  return instance;
}
function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  setEnabled(false);
}
function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  setEnabled(eventsEnabled);
  eventsEnabled = null;

  selectionInformation = null;
}
function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace;

  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }

    parentNamespace = hostContextDev.namespace;
  }

  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}
function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);
  return shouldAutoFocusHostComponent(type, props);
}
function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;

    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }

  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
}
function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}
function shouldDeprioritizeSubtree(type, props) {
  return !!props.hidden;
}
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }

  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.

var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
var noTimeout = -1; // -------------------
function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  if (shouldAutoFocusHostComponent(type, newProps)) {
    domElement.focus();
  }
}
function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Update the props handle so that we know which props are the ones with
  // with current event handlers.
  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

  updateProperties(domElement, updatePayload, type, oldProps, newProps);
}
function resetTextContent(domElement) {
  setTextContent(domElement, '');
}
function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}
function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function appendChildToContainer(container, child) {
  var parentNode;

  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  } // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that non React root containers have inline onclick
  // defined.
  // https://github.com/facebook/react/issues/11918


  var reactRootContainer = container._reactRootContainer;

  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}
function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}
function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}
function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}
function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}

function hideInstance(instance) {
  // pass host context to this method?


  instance = instance;
  var style = instance.style;

  if (typeof style.setProperty === 'function') {
    style.setProperty('display', 'none', 'important');
  } else {
    style.display = 'none';
  }
}
function hideTextInstance(textInstance) {
  textInstance.nodeValue = '';
}
function unhideInstance(instance, props) {
  instance = instance;
  var styleProp = props[STYLE$1];
  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
  instance.style.display = dangerousStyleValue('display', display);
}
function unhideTextInstance(textInstance, text) {
  textInstance.nodeValue = text;
} // -------------------
function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  } // This has now been refined to an element node.


  return instance;
}
function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a text node.


  return instance;
}
function isSuspenseInstancePending(instance) {
  return instance.data === SUSPENSE_PENDING_START_DATA;
}
function isSuspenseInstanceFallback(instance) {
  return instance.data === SUSPENSE_FALLBACK_START_DATA;
}

function getNextHydratable(node) {
  // Skip non-hydratable nodes.
  for (; node != null; node = node.nextSibling) {
    var nodeType = node.nodeType;

    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
      break;
    }
  }

  return node;
}

function getNextHydratableSibling(instance) {
  return getNextHydratable(instance.nextSibling);
}
function getFirstHydratableChild(parentInstance) {
  return getNextHydratable(parentInstance.firstChild);
}
function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
  // get attached.

  updateFiberProps(instance, props);
  var parentNamespace;

  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  }

  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
}
function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, textInstance);
  return diffHydratedText(textInstance, text);
}
function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          return getNextHydratableSibling(node);
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        depth++;
      }
    }

    node = node.nextSibling;
  } // TODO: Warn, we didn't find the end comment boundary.


  return null;
} // Returns the SuspenseInstance if this node is a direct child of a
// SuspenseInstance. I.e. if its previous sibling is a Comment with
// SUSPENSE_x_START_DATA. Otherwise, null.

function getParentSuspenseInstance(targetInstance) {
  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        if (depth === 0) {
          return node;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_END_DATA) {
        depth++;
      }
    }

    node = node.previousSibling;
  }

  return null;
}
function commitHydratedContainer(container) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(container);
}
function commitHydratedSuspenseInstance(suspenseInstance) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(suspenseInstance);
}
function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
  {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotHydrateContainerInstance(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}
function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentInstance, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentInstance, instance);
    }
  }
}
function didNotFindHydratableContainerInstance(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type);
  }
}
function didNotFindHydratableContainerTextInstance(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}
function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForInsertedHydratedElement(parentInstance, type);
  }
}
function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForInsertedHydratedText(parentInstance, text);
  }
}
function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
}

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
var internalContainerInstanceKey = '__reactContainere$' + randomKey;
function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}
function markContainerAsRoot(hostRoot, node) {
  node[internalContainerInstanceKey] = hostRoot;
}
function unmarkContainerAsRoot(node) {
  node[internalContainerInstanceKey] = null;
}
function isContainerMarkedAsRoot(node) {
  return !!node[internalContainerInstanceKey];
} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
// If the target node is part of a hydrated or not yet rendered subtree, then
// this may also return a SuspenseComponent or HostRoot to indicate that.
// Conceptually the HostRoot fiber is a child of the Container node. So if you
// pass the Container node as the targetNode, you will not actually get the
// HostRoot back. To get to the HostRoot, you need to pass a child of it.
// The same thing applies to Suspense boundaries.

function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];

  if (targetInst) {
    // Don't return HostRoot or SuspenseComponent here.
    return targetInst;
  } // If the direct event target isn't a React owned DOM node, we need to look
  // to see if one of its parents is a React owned DOM node.


  var parentNode = targetNode.parentNode;

  while (parentNode) {
    // We'll check if this is a container root that could include
    // React nodes in the future. We need to check this first because
    // if we're a child of a dehydrated container, we need to first
    // find that inner container before moving on to finding the parent
    // instance. Note that we don't check this field on  the targetNode
    // itself because the fibers are conceptually between the container
    // node and the first child. It isn't surrounding the container node.
    // If it's not a container, we check if it's an instance.
    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

    if (targetInst) {
      // Since this wasn't the direct target of the event, we might have
      // stepped past dehydrated DOM nodes to get here. However they could
      // also have been non-React nodes. We need to answer which one.
      // If we the instance doesn't have any children, then there can't be
      // a nested suspense boundary within it. So we can use this as a fast
      // bailout. Most of the time, when people add non-React children to
      // the tree, it is using a ref to a child-less DOM node.
      // Normally we'd only need to check one of the fibers because if it
      // has ever gone from having children to deleting them or vice versa
      // it would have deleted the dehydrated boundary nested inside already.
      // However, since the HostRoot starts out with an alternate it might
      // have one on the alternate so we need to check in case this was a
      // root.
      var alternate = targetInst.alternate;

      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
        // Next we need to figure out if the node that skipped past is
        // nested within a dehydrated boundary and if so, which one.
        var suspenseInstance = getParentSuspenseInstance(targetNode);

        while (suspenseInstance !== null) {
          // We found a suspense instance. That means that we haven't
          // hydrated it yet. Even though we leave the comments in the
          // DOM after hydrating, and there are boundaries in the DOM
          // that could already be hydrated, we wouldn't have found them
          // through this pass since if the target is hydrated it would
          // have had an internalInstanceKey on it.
          // Let's get the fiber associated with the SuspenseComponent
          // as the deepest instance.
          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

          if (targetSuspenseInst) {
            return targetSuspenseInst;
          } // If we don't find a Fiber on the comment, it might be because
          // we haven't gotten to hydrate it yet. There might still be a
          // parent boundary that hasn't above this one so we need to find
          // the outer most that is known.


          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
          // host component also hasn't hydrated yet. We can return it
          // below since it will bail out on the isMounted check later.
        }
      }

      return targetInst;
    }

    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }

  return null;
}
/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
      return inst;
    } else {
      return null;
    }
  }

  return null;
}
/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  } // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.


  {
    {
      throw Error( "getNodeFromInstance: Invalid argument." );
    }
  }
}
function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}
function updateFiberProps(node, props) {
  node[internalEventHandlersKey] = props;
}

function getParent(inst) {
  do {
    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);

  if (inst) {
    return inst;
  }

  return null;
}
/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */


function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;

  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }

  var depthB = 0;

  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  } // If A is deeper, crawl up.


  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  } // If B is deeper, crawl up.


  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  } // Walk in lockstep until we find a match.


  var depth = depthA;

  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }

    instA = getParent(instA);
    instB = getParent(instB);
  }

  return null;
}
/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */

function traverseTwoPhase(inst, fn, arg) {
  var path = [];

  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }

  var i;

  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }

  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}
/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];

  while (true) {
    if (!from) {
      break;
    }

    if (from === common) {
      break;
    }

    var alternate = from.alternate;

    if (alternate !== null && alternate === common) {
      break;
    }

    pathFrom.push(from);
    from = getParent(from);
  }

  var pathTo = [];

  while (true) {
    if (!to) {
      break;
    }

    if (to === common) {
      break;
    }

    var _alternate = to.alternate;

    if (_alternate !== null && _alternate === common) {
      break;
    }

    pathTo.push(to);
    to = getParent(to);
  }

  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }

  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
    case 'onMouseEnter':
      return !!(props.disabled && isInteractive(type));

    default:
      return false;
  }
}
/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */


function getListener(inst, registrationName) {
  var listener; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon

  var stateNode = inst.stateNode;

  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }

  var props = getFiberCurrentPropsFromNode(stateNode);

  if (!props) {
    // Work in progress.
    return null;
  }

  listener = props[registrationName];

  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }

  if (!(!listener || typeof listener === 'function')) {
    {
      throw Error( "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type." );
    }
  }

  return listener;
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}
/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */


function accumulateDirectionalDispatches(inst, phase, event) {
  {
    if (!inst) {
      error('Dispatching inst must not be null');
    }
  }

  var listener = listenerAtPhase(inst, event, phase);

  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}
/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */


function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}
/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */


function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);

    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}
/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */


function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}
function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}
function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var root = null;
var startText = null;
var fallbackText = null;
function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}
function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}
function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start;
  var startValue = startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;

  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}
function getText() {
  if ('value' in root) {
    return root.value;
  }

  return root.textContent;
}

var EVENT_POOL_SIZE = 10;
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: function () {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
}
/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */


function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
    delete this.isDefaultPrevented;
    delete this.isPropagationStopped;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;
  var Interface = this.constructor.Interface;

  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }

    {
      delete this[propName]; // this has a getter/setter for warnings
    }

    var normalize = Interface[propName];

    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

  if (defaultPrevented) {
    this.isDefaultPrevented = functionThatReturnsTrue;
  } else {
    this.isDefaultPrevented = functionThatReturnsFalse;
  }

  this.isPropagationStopped = functionThatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;

    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }

    this.isDefaultPrevented = functionThatReturnsTrue;
  },
  stopPropagation: function () {
    var event = this.nativeEvent;

    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = functionThatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = functionThatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: functionThatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;

    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }

    this.dispatchConfig = null;
    this._targetInst = null;
    this.nativeEvent = null;
    this.isDefaultPrevented = functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    this._dispatchListeners = null;
    this._dispatchInstances = null;

    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
    }
  }
});

SyntheticEvent.Interface = EventInterface;
/**
 * Helper to reduce boilerplate when creating subclasses.
 */

SyntheticEvent.extend = function (Interface) {
  var Super = this;

  var E = function () {};

  E.prototype = Super.prototype;
  var prototype = new E();

  function Class() {
    return Super.apply(this, arguments);
  }

  _assign(prototype, Class.prototype);

  Class.prototype = prototype;
  Class.prototype.constructor = Class;
  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.extend = Super.extend;
  addEventPoolingTo(Class);
  return Class;
};

addEventPoolingTo(SyntheticEvent);
/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */

function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    {
      error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
    }
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;

  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }

  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;

  if (!(event instanceof EventConstructor)) {
    {
      throw Error( "Trying to release an event instance into a pool of a different type." );
    }
  }

  event.destructor();

  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */

var SyntheticCompositionEvent = SyntheticEvent.extend({
  data: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */

var SyntheticInputEvent = SyntheticEvent.extend({
  data: null
});

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

var START_KEYCODE = 229;
var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
var documentMode = null;

if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
} // Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.


var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.

var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  }
}; // Track whether we've ever handled a keypress on the space key.

var hasSpaceKeypress = false;
/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}
/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */


function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case TOP_COMPOSITION_START:
      return eventTypes.compositionStart;

    case TOP_COMPOSITION_END:
      return eventTypes.compositionEnd;

    case TOP_COMPOSITION_UPDATE:
      return eventTypes.compositionUpdate;
  }
}
/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
}
/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_KEY_UP:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

    case TOP_KEY_DOWN:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;

    case TOP_KEY_PRESS:
    case TOP_MOUSE_DOWN:
    case TOP_BLUR:
      // Events are not possible without cancelling IME.
      return true;

    default:
      return false;
  }
}
/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */


function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;

  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }

  return null;
}
/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
} // Track the current IME composition status, if any.


var isComposing = false;
/**
 * @return {?object} A SyntheticCompositionEvent.
 */

function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);

    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */


function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_COMPOSITION_END:
      return getDataFromCustomEvent(nativeEvent);

    case TOP_KEY_PRESS:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;

      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case TOP_TEXT_INPUT:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.

      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}
/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */


function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }

    return null;
  }

  switch (topLevelType) {
    case TOP_PASTE:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;

    case TOP_KEY_PRESS:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }

      return null;

    case TOP_COMPOSITION_END:
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

    default:
      return null;
  }
}
/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */


function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  } // If no characters are being inserted, no BeforeInput event should
  // be fired.


  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */


var BeforeInputEventPlugin = {
  eventTypes: eventTypes,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    if (composition === null) {
      return beforeInput;
    }

    if (beforeInput === null) {
      return composition;
    }

    return [composition, beforeInput];
  }
};

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

var eventTypes$1 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
  event.type = 'change'; // Flag this event loop as needing state restore.

  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */


var activeElement = null;
var activeElementInst = null;
/**
 * SECTION: handle `change` event
 */

function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.

  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  runEventsInBatch(event);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);

  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CHANGE) {
    return targetInst;
  }
}
/**
 * SECTION: handle `input` event
 */


var isInputEventSupported = false;

if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}
/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */


function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}
/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */


function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}
/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */


function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }

  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === TOP_FOCUS) {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === TOP_BLUR) {
    stopWatchingForValueChange();
  }
} // For IE8 and IE9.


function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}
/**
 * SECTION: handle `click` event
 */


function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CLICK) {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}
/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */


var ChangeEventPlugin = {
  eventTypes: eventTypes$1,
  _isInputEventSupported: isInputEventSupported,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
    var getTargetInstFunc, handleEventFunc;

    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);

      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    } // When blurring, set the value attribute for number inputs


    if (topLevelType === TOP_BLUR) {
      handleControlledInputBlur(targetNode);
    }
  }
};

var SyntheticUIEvent = SyntheticEvent.extend({
  view: null,
  detail: null
});

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */
var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.

function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;

  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }

  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

var previousScreenX = 0;
var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

var isMovementXSet = false;
var isMovementYSet = false;
/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticMouseEvent = SyntheticUIEvent.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    var screenX = previousScreenX;
    previousScreenX = event.screenX;

    if (!isMovementXSet) {
      isMovementXSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenX - screenX : 0;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    }

    var screenY = previousScreenY;
    previousScreenY = event.screenY;

    if (!isMovementYSet) {
      isMovementYSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenY - screenY : 0;
  }
});

/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */

var SyntheticPointerEvent = SyntheticMouseEvent.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tangentialPressure: null,
  tiltX: null,
  tiltY: null,
  twist: null,
  pointerType: null,
  isPrimary: null
});

var eventTypes$2 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  pointerEnter: {
    registrationName: 'onPointerEnter',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  },
  pointerLeave: {
    registrationName: 'onPointerLeave',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  }
};
var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$2,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

    if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      // If this is an over event with a target, then we've already dispatched
      // the event in the out event of the other target. If this is replayed,
      // then it's because we couldn't dispatch against this target previously
      // so we have to do it now instead.
      return null;
    }

    if (!isOutEvent && !isOverEvent) {
      // Must not be a mouse or pointer in or out - ignoring.
      return null;
    }

    var win;

    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;

      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;

    if (isOutEvent) {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;

      if (to !== null) {
        var nearestMounted = getNearestMountedFiber(to);

        if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
          to = null;
        }
      }
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var eventInterface, leaveEventType, enterEventType, eventTypePrefix;

    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
      eventInterface = SyntheticMouseEvent;
      leaveEventType = eventTypes$2.mouseLeave;
      enterEventType = eventTypes$2.mouseEnter;
      eventTypePrefix = 'mouse';
    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
      eventInterface = SyntheticPointerEvent;
      leaveEventType = eventTypes$2.pointerLeave;
      enterEventType = eventTypes$2.pointerEnter;
      eventTypePrefix = 'pointer';
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);
    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
    leave.type = eventTypePrefix + 'leave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;
    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
    enter.type = eventTypePrefix + 'enter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;
    accumulateEnterLeaveDispatches(leave, enter, from, to); // If we are not processing the first ancestor, then we
    // should not process the same nativeEvent again, as we
    // will have already processed it in the first ancestor.

    if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
      return [leave];
    }

    return [leave, enter];
  }
};

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var objectIs = typeof Object.is === 'function' ? Object.is : is;

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (objectIs(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
var eventTypes$3 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
  }
};
var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;
/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */

function getSelection$1(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}
/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */


function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}
/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */


function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return null;
  } // Only fire when selection has actually changed.


  var currentSelection = getSelection$1(activeElement$1);

  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;
    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;
    accumulateTwoPhaseDispatches(syntheticEvent);
    return syntheticEvent;
  }

  return null;
}
/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */


var SelectEventPlugin = {
  eventTypes: eventTypes$3,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
    var containerOrDoc = container || getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.

    if (!containerOrDoc || !isListeningToAllDependencies('onSelect', containerOrDoc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case TOP_FOCUS:
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }

        break;

      case TOP_BLUR:
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.

      case TOP_MOUSE_DOWN:
        mouseDown = true;
        break;

      case TOP_CONTEXT_MENU:
      case TOP_MOUSE_UP:
      case TOP_DRAG_END:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.

      case TOP_SELECTION_CHANGE:
        if (skipSelectionChangeEvent) {
          break;
        }

      // falls through

      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */

var SyntheticAnimationEvent = SyntheticEvent.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */

var SyntheticClipboardEvent = SyntheticEvent.extend({
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticFocusEvent = SyntheticUIEvent.extend({
  relatedTarget: null
});

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.


  if (charCode === 10) {
    charCode = 13;
  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.


  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};
/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};
/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.
    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

    if (key !== 'Unidentified') {
      return key;
    }
  } // Browser does not implement `key`, polyfill as much of it as we can.


  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.

    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }

  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }

  return '';
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.
    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.
    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  }
});

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticDragEvent = SyntheticMouseEvent.extend({
  dataTransfer: null
});

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */

var SyntheticTouchEvent = SyntheticUIEvent.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */

var SyntheticTransitionEvent = SyntheticEvent.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticWheelEvent = SyntheticMouseEvent.extend({
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,
  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
});

var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
var SimpleEventPlugin = {
  // simpleEventPluginEventTypes gets populated from
  // the DOMEventProperties module.
  eventTypes: simpleEventPluginEventTypes,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);

    if (!dispatchConfig) {
      return null;
    }

    var EventConstructor;

    switch (topLevelType) {
      case TOP_KEY_PRESS:
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }

      /* falls through */

      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        EventConstructor = SyntheticKeyboardEvent;
        break;

      case TOP_BLUR:
      case TOP_FOCUS:
        EventConstructor = SyntheticFocusEvent;
        break;

      case TOP_CLICK:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }

      /* falls through */

      case TOP_AUX_CLICK:
      case TOP_DOUBLE_CLICK:
      case TOP_MOUSE_DOWN:
      case TOP_MOUSE_MOVE:
      case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

      /* falls through */

      case TOP_MOUSE_OUT:
      case TOP_MOUSE_OVER:
      case TOP_CONTEXT_MENU:
        EventConstructor = SyntheticMouseEvent;
        break;

      case TOP_DRAG:
      case TOP_DRAG_END:
      case TOP_DRAG_ENTER:
      case TOP_DRAG_EXIT:
      case TOP_DRAG_LEAVE:
      case TOP_DRAG_OVER:
      case TOP_DRAG_START:
      case TOP_DROP:
        EventConstructor = SyntheticDragEvent;
        break;

      case TOP_TOUCH_CANCEL:
      case TOP_TOUCH_END:
      case TOP_TOUCH_MOVE:
      case TOP_TOUCH_START:
        EventConstructor = SyntheticTouchEvent;
        break;

      case TOP_ANIMATION_END:
      case TOP_ANIMATION_ITERATION:
      case TOP_ANIMATION_START:
        EventConstructor = SyntheticAnimationEvent;
        break;

      case TOP_TRANSITION_END:
        EventConstructor = SyntheticTransitionEvent;
        break;

      case TOP_SCROLL:
        EventConstructor = SyntheticUIEvent;
        break;

      case TOP_WHEEL:
        EventConstructor = SyntheticWheelEvent;
        break;

      case TOP_COPY:
      case TOP_CUT:
      case TOP_PASTE:
        EventConstructor = SyntheticClipboardEvent;
        break;

      case TOP_GOT_POINTER_CAPTURE:
      case TOP_LOST_POINTER_CAPTURE:
      case TOP_POINTER_CANCEL:
      case TOP_POINTER_DOWN:
      case TOP_POINTER_MOVE:
      case TOP_POINTER_OUT:
      case TOP_POINTER_OVER:
      case TOP_POINTER_UP:
        EventConstructor = SyntheticPointerEvent;
        break;

      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            error('SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        } // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0


        EventConstructor = SyntheticEvent;
        break;
    }

    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

/**
 * Specifies a deterministic ordering of `EventPlugin`s. A convenient way to
 * reason about plugins, without having to package every one of them. This
 * is better than having plugins be ordered in the same order that they
 * are injected because that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */

injectEventPluginOrder(DOMEventPluginOrder);
setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
/**
 * Some important event plugins included by default (without having to require
 * them).
 */

injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = "\u269B";
var warningEmoji = "\u26D4";
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).

var currentPhase = null;
var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.

var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
// to avoid stretch the commit phase with measurement overhead.

var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + " " + markName;
};

var formatLabel = function (label, warning) {
  var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
  var suffix = warning ? " Warning: " + warning : '';
  return "" + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning);

  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {} // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.
  // Clear marks immediately to avoid growing buffer.


  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + " (#" + debugID + ")";
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
  } else {
    // Composite component methods.
    return componentName + "." + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }

  labelsInCurrentCommit.add(label);
  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
    case Mode:
      return true;

    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }

  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;

  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }

    fiber = fiber.return;
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber.return !== null) {
    resumeTimersRecursively(fiber.return);
  }

  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  {
    effectCountInCurrentCommit++;
  }
}
function recordScheduleUpdate() {
  {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }

    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}
function startWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, this is the fiber to unwind from.


    currentFiber = fiber;

    if (!beginFiberMark(fiber, null)) {
      return;
    }

    fiber._debugIsCurrentlyTiming = true;
  }
}
function cancelWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.


    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}
function stopWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}
function stopFailedWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning);
  }
}
function startPhaseTimer(fiber, phase) {
  {
    if (!supportsUserTiming) {
      return;
    }

    clearPendingPhaseMeasurement();

    if (!beginFiberMark(fiber, phase)) {
      return;
    }

    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}
function stopPhaseTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning);
    }

    currentPhase = null;
    currentPhaseFiber = null;
  }
}
function startWorkLoopTimer(nextUnitOfWork) {
  {
    currentFiber = nextUnitOfWork;

    if (!supportsUserTiming) {
      return;
    }

    commitCountInCurrentWorkLoop = 0; // This is top level call.
    // Any other measurements are performed within.

    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

    resumeTimers();
  }
}
function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
  {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
        warning = "An update to " + componentName + " interrupted the previous render";
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning = 'There were cascading updates';
    }

    commitCountInCurrentWorkLoop = 0;
    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

    pauseTimers();
    endMark(label, '(React Tree Reconciliation)', warning);
  }
}
function startCommitTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}
function stopCommitTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (hasScheduledUpdateInCurrentCommit) {
      warning = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning = 'Caused by a cascading update in earlier commit';
    }

    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();
    endMark('(Committing Changes)', '(Committing Changes)', warning);
  }
}
function startCommitSnapshotEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Snapshot Effects)');
  }
}
function stopCommitSnapshotEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
  }
}
function startCommitHostEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}
function stopCommitHostEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
  }
}
function startCommitLifeCyclesTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}
function stopCommitLifeCyclesTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      error('Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      error('Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  {
    if (!(contextStackCursor.current === emptyContextObject)) {
      {
        throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentName(type) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;

          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext;
    startPhaseTimer(fiber, 'getChildContext');
    childContext = instance.getChildContext();
    stopPhaseTimer();

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        {
          throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
        }
      }
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
      // somebody calls unstable_renderSubtreeIntoContainer() and we process
      // context from the parent component instance. The stack will be missing
      // because it's outside of the reconciliation, and so the pointer has not
      // been set. This is rare and doesn't matter. We'll also remove that API.
      getCurrentFiberStackInDev);
    }

    return _assign({}, parentContext, {}, childContext);
  }
}

function pushContextProvider(workInProgress) {
  {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  {
    var instance = workInProgress.stateNode;

    if (!instance) {
      {
        throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
      {
        throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    {
      {
        throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

var LegacyRoot = 0;
var BlockingRoot = 1;
var ConcurrentRoot = 2;

var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
    Scheduler_now = Scheduler.unstable_now,
    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

{
  // Provide explicit error message when production+profiling bundle of e.g.
  // react-dom is used with production (non-profiling) bundle of
  // scheduler/tracing
  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
    {
      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling" );
    }
  }
}

var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
// ascending numbers so we can compare them like numbers. They start at 90 to
// avoid clashing with Scheduler's priorities.

var ImmediatePriority = 99;
var UserBlockingPriority$1 = 98;
var NormalPriority = 97;
var LowPriority = 96;
var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

var NoPriority = 90;
var shouldYield = Scheduler_shouldYield;
var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
var syncQueue = null;
var immediateQueueCallbackNode = null;
var isFlushingSyncQueue = false;
var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
// This will be the case for modern browsers that support `performance.now`. In
// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
// timestamp. In that case, subtract the module initialization time to simulate
// the behavior of performance.now and keep our times small enough to fit
// within 32 bits.
// TODO: Consider lifting this into Scheduler.

var now = initialTimeMs < 10000 ? Scheduler_now : function () {
  return Scheduler_now() - initialTimeMs;
};
function getCurrentPriorityLevel() {
  switch (Scheduler_getCurrentPriorityLevel()) {
    case Scheduler_ImmediatePriority:
      return ImmediatePriority;

    case Scheduler_UserBlockingPriority:
      return UserBlockingPriority$1;

    case Scheduler_NormalPriority:
      return NormalPriority;

    case Scheduler_LowPriority:
      return LowPriority;

    case Scheduler_IdlePriority:
      return IdlePriority;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function reactPriorityToSchedulerPriority(reactPriorityLevel) {
  switch (reactPriorityLevel) {
    case ImmediatePriority:
      return Scheduler_ImmediatePriority;

    case UserBlockingPriority$1:
      return Scheduler_UserBlockingPriority;

    case NormalPriority:
      return Scheduler_NormalPriority;

    case LowPriority:
      return Scheduler_LowPriority;

    case IdlePriority:
      return Scheduler_IdlePriority;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function runWithPriority$1(reactPriorityLevel, fn) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_runWithPriority(priorityLevel, fn);
}
function scheduleCallback(reactPriorityLevel, callback, options) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_scheduleCallback(priorityLevel, callback, options);
}
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }

  return fakeCallbackNode;
}
function cancelCallback(callbackNode) {
  if (callbackNode !== fakeCallbackNode) {
    Scheduler_cancelCallback(callbackNode);
  }
}
function flushSyncCallbackQueue() {
  if (immediateQueueCallbackNode !== null) {
    var node = immediateQueueCallbackNode;
    immediateQueueCallbackNode = null;
    Scheduler_cancelCallback(node);
  }

  flushSyncCallbackQueueImpl();
}

function flushSyncCallbackQueueImpl() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrancy.
    isFlushingSyncQueue = true;
    var i = 0;

    try {
      var _isSync = true;
      var queue = syncQueue;
      runWithPriority$1(ImmediatePriority, function () {
        for (; i < queue.length; i++) {
          var callback = queue[i];

          do {
            callback = callback(_isSync);
          } while (callback !== null);
        }
      });
      syncQueue = null;
    } catch (error) {
      // If something throws, leave the remaining callbacks on the queue.
      if (syncQueue !== null) {
        syncQueue = syncQueue.slice(i + 1);
      } // Resume flushing in the next tick


      Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
      throw error;
    } finally {
      isFlushingSyncQueue = false;
    }
  }
}

var NoMode = 0;
var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
// tag instead

var BlockingMode = 2;
var ConcurrentMode = 4;
var ProfileMode = 8;

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var MAX_SIGNED_31_BIT_INT = 1073741823;

var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
// Never work can be committed in an inconsistent state without tearing the UI.
// The main example is offscreen content, like a hidden subtree. So one possible
// name is Offscreen. However, it also includes dehydrated Suspense boundaries,
// which are inconsistent in the sense that they haven't finished yet, but
// aren't visibly inconsistent because the server rendered HTML matches what the
// hydrated tree would look like.

var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
// order to be consistent.

var Idle = 2; // Continuous Hydration is slightly higher than Idle and is used to increase
// priority of hover targets.

var ContinuousHydration = 3;
var Sync = MAX_SIGNED_31_BIT_INT;
var Batched = Sync - 1;
var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

function msToExpirationTime(ms) {
  // Always subtract from the offset so that we don't clash with the magic number for NoWork.
  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
}
function expirationTimeToMs(expirationTime) {
  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
} // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
// the names to reflect.


var LOW_PRIORITY_EXPIRATION = 5000;
var LOW_PRIORITY_BATCH_SIZE = 250;
function computeAsyncExpiration(currentTime) {
  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
}
function computeSuspenseExpiration(currentTime, timeoutMs) {
  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
  return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
} // We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.

var HIGH_PRIORITY_EXPIRATION =  500 ;
var HIGH_PRIORITY_BATCH_SIZE = 100;
function computeInteractiveExpiration(currentTime) {
  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
}
function inferPriorityFromExpirationTime(currentTime, expirationTime) {
  if (expirationTime === Sync) {
    return ImmediatePriority;
  }

  if (expirationTime === Never || expirationTime === Idle) {
    return IdlePriority;
  }

  var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

  if (msUntil <= 0) {
    return ImmediatePriority;
  }

  if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
    return UserBlockingPriority$1;
  }

  if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
    return NormalPriority;
  } // TODO: Handle LowPriority
  // Assume anything lower has idle priority


  return IdlePriority;
}

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      if (fiberArray.length === 0) {
        return;
      }

      var firstFiber = fiberArray[0];
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);
      var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);

      error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, firstComponentStack);
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    syncUpdates(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      scheduleWork(fiber, Sync);
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);

    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}
function readLazyComponentType(lazyComponent) {
  initializeLazyComponentType(lazyComponent);

  if (lazyComponent._status !== Resolved) {
    throw lazyComponent._result;
  }

  return lazyComponent._result;
}

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
      }

      context._currentRenderer = rendererSigil;
    }
  }
}
function popProvider(providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);
  var context = providerFiber.type._context;

  {
    context._currentValue = currentValue;
  }
}
function calculateChangedBits(context, newValue, oldValue) {
  if (objectIs(oldValue, newValue)) {
    // No change
    return 0;
  } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

    {
      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
      }
    }

    return changedBits | 0;
  }
}
function scheduleWorkOnParentPath(parent, renderExpirationTime) {
  // Update the child expiration time of all the ancestors, including
  // the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (node.childExpirationTime < renderExpirationTime) {
      node.childExpirationTime = renderExpirationTime;

      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
        alternate.childExpirationTime = renderExpirationTime;
      }
    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
      alternate.childExpirationTime = renderExpirationTime;
    } else {
      // Neither alternate was updated, which means the rest of the
      // ancestor path already has sufficient priority.
      break;
    }

    node = node.return;
  }
}
function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(renderExpirationTime, null);
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.

            enqueueUpdate(fiber, update);
          }

          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }

          var alternate = fiber.alternate;

          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
            alternate.expirationTime = renderExpirationTime;
          }

          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

          if (list.expirationTime < renderExpirationTime) {
            list.expirationTime = renderExpirationTime;
          } // Since we already found a match, we can stop traversing the
          // dependency list.


          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderExpirationTime) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    var firstContext = dependencies.firstContext;

    if (firstContext !== null) {
      if (dependencies.expirationTime >= renderExpirationTime) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      dependencies.firstContext = null;
    }
  }
}
function readContext(context, observedBits) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    if (isDisallowedContextReadInDEV) {
      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
    }
  }

  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      if (!(currentlyRenderingFiber !== null)) {
        {
          throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
        }
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        expirationTime: NoWork,
        firstContext: contextItem,
        responders: null
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return  context._currentValue ;
}

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;

{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
}

function initializeUpdateQueue(fiber) {
  var queue = {
    baseState: fiber.memoizedState,
    baseQueue: null,
    shared: {
      pending: null
    },
    effects: null
  };
  fiber.updateQueue = queue;
}
function cloneUpdateQueue(current, workInProgress) {
  // Clone the update queue from current. Unless it's already a clone.
  var queue = workInProgress.updateQueue;
  var currentQueue = current.updateQueue;

  if (queue === currentQueue) {
    var clone = {
      baseState: currentQueue.baseState,
      baseQueue: currentQueue.baseQueue,
      shared: currentQueue.shared,
      effects: currentQueue.effects
    };
    workInProgress.updateQueue = clone;
  }
}
function createUpdate(expirationTime, suspenseConfig) {
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null
  };
  update.next = update;

  {
    update.priority = getCurrentPriorityLevel();
  }

  return update;
}
function enqueueUpdate(fiber, update) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return;
  }

  var sharedQueue = updateQueue.shared;
  var pending = sharedQueue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  sharedQueue.pending = update;

  {
    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

      didWarnUpdateInsideUpdate = true;
    }
  }
}
function enqueueCapturedUpdate(workInProgress, update) {
  var current = workInProgress.alternate;

  if (current !== null) {
    // Ensure the work-in-progress queue is a clone
    cloneUpdateQueue(current, workInProgress);
  } // Captured updates go only on the work-in-progress queue.


  var queue = workInProgress.updateQueue; // Append the update to the end of the list.

  var last = queue.baseQueue;

  if (last === null) {
    queue.baseQueue = update.next = update;
    update.next = update;
  } else {
    update.next = last.next;
    last.next = update;
  }
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if ( workInProgress.mode & StrictMode) {
              payload.call(instance, prevState, nextProps);
            }
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if ( workInProgress.mode & StrictMode) {
              _payload.call(instance, prevState, nextProps);
            }
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return _assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
  // This is always non-null on a ClassComponent or HostRoot
  var queue = workInProgress.updateQueue;
  hasForceUpdate = false;

  {
    currentlyProcessingQueue = queue.shared;
  } // The last rebase update that is NOT part of the base state.


  var baseQueue = queue.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.shared.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    baseQueue = pendingQueue;
    queue.shared.pending = null; // TODO: Pass `current` as argument

    var current = workInProgress.alternate;

    if (current !== null) {
      var currentQueue = current.updateQueue;

      if (currentQueue !== null) {
        currentQueue.baseQueue = pendingQueue;
      }
    }
  } // These values may change as we process the queue.


  if (baseQueue !== null) {
    var first = baseQueue.next; // Iterate through the list of updates to compute the result.

    var newState = queue.baseState;
    var newExpirationTime = NoWork;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;

    if (first !== null) {
      var update = first;

      do {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime < renderExpirationTime) {
          // Priority is insufficient. Skip this update. If this is the first
          // skipped update, the previous update/state is the new base
          // update/state.
          var clone = {
            expirationTime: update.expirationTime,
            suspenseConfig: update.suspenseConfig,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };

          if (newBaseQueueLast === null) {
            newBaseQueueFirst = newBaseQueueLast = clone;
            newBaseState = newState;
          } else {
            newBaseQueueLast = newBaseQueueLast.next = clone;
          } // Update the remaining priority in the queue.


          if (updateExpirationTime > newExpirationTime) {
            newExpirationTime = updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority.
          if (newBaseQueueLast !== null) {
            var _clone = {
              expirationTime: Sync,
              // This update is going to be committed so we never want uncommit it.
              suspenseConfig: update.suspenseConfig,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            newBaseQueueLast = newBaseQueueLast.next = _clone;
          } // Mark the event time of this update as relevant to this render pass.
          // TODO: This should ideally use the true event time of this update rather than
          // its priority which is a derived and not reverseable value.
          // TODO: We should skip this update if it was already committed but currently
          // we have no way of detecting the difference between a committed and suspended
          // update here.


          markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

          newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
          var callback = update.callback;

          if (callback !== null) {
            workInProgress.effectTag |= Callback;
            var effects = queue.effects;

            if (effects === null) {
              queue.effects = [update];
            } else {
              effects.push(update);
            }
          }
        }

        update = update.next;

        if (update === null || update === first) {
          pendingQueue = queue.shared.pending;

          if (pendingQueue === null) {
            break;
          } else {
            // An update was scheduled from inside a reducer. Add the new
            // pending updates to the end of the list and keep processing.
            update = baseQueue.next = pendingQueue.next;
            pendingQueue.next = first;
            queue.baseQueue = baseQueue = pendingQueue;
            queue.shared.pending = null;
          }
        }
      } while (true);
    }

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    }

    queue.baseState = newBaseState;
    queue.baseQueue = newBaseQueueLast; // Set the remaining expiration time to be whatever is remaining in the queue.
    // This should be fine because the only two other things that contribute to
    // expiration time are props and context. We're already in the middle of the
    // begin phase by the time we start processing the queue, so we've already
    // dealt with the props. Context in components that specify
    // shouldComponentUpdate is tricky; but we'll have to account for
    // that regardless.

    markUnprocessedUpdateTime(newExpirationTime);
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = newState;
  }

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (!(typeof callback === 'function')) {
    {
      throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
    }
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance) {
  // Commit the effects
  var effects = finishedQueue.effects;
  finishedQueue.effects = null;

  if (effects !== null) {
    for (var i = 0; i < effects.length; i++) {
      var effect = effects[i];
      var callback = effect.callback;

      if (callback !== null) {
        effect.callback = null;
        callCallback(callback, instance);
      }
    }
  }
}

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
function requestCurrentSuspenseConfig() {
  return ReactCurrentBatchConfig.suspense;
}

var fakeInternalInstance = {};
var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.

var emptyRefsObject = new React.Component().refs;
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + "_" + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);

      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);

        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      {
        {
          throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
        }
      }
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if ( workInProgress.mode & StrictMode) {
      // Invoke the function an extra time to help detect side-effects.
      getDerivedStateFromProps(nextProps, prevState);
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  if (workInProgress.expirationTime === NoWork) {
    // Queue is always non-null for classes
    var updateQueue = workInProgress.updateQueue;
    updateQueue.baseState = memoizedState;
  }
}
var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'setState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    {
      if ( workInProgress.mode & StrictMode) {
        // Invoke the function an extra time to help detect side-effects.
        instance.shouldComponentUpdate(newProps, newState, nextContext);
      }
    }

    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
    stopPhaseTimer();

    {
      if (shouldUpdate === undefined) {
        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
      }
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
    }

    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
    }

    if (instance.propTypes) {
      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
    }

    if (instance.contextType) {
      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
    }

    {
      if (instance.contextTypes) {
        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      }

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);

        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    if (typeof instance.componentShouldUpdate === 'function') {
      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
    }

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }

    if (typeof instance.componentDidUnmount === 'function') {
      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
    }

    if (typeof instance.componentDidReceiveProps === 'function') {
      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
    }

    if (typeof instance.componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
    }

    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
    }

    var hasMutatedProps = instance.props !== newProps;

    if (instance.props !== undefined && hasMutatedProps) {
      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
    }

    if (instance.defaultProps) {
      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    if (typeof instance.getDerivedStateFromProps === 'function') {
      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof instance.getDerivedStateFromError === 'function') {
      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
    }

    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      error('%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  } // Instantiate twice to help detect side-effects.


  {
    if ( workInProgress.mode & StrictMode) {
      new ctor(props, context); // eslint-disable-line no-new
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);

        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  startPhaseTimer(workInProgress, 'componentWillMount');
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  stopPhaseTimer();

  if (oldState !== instance.state) {
    {
      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;
  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  stopPhaseTimer();

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);

        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  initializeUpdateQueue(workInProgress);
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  instance.state = workInProgress.memoizedState;
  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.effectTag |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillMount');

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  cloneUpdateQueue(current, workInProgress);
  var oldProps = workInProgress.memoizedProps;
  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillUpdate');

      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.effectTag |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.effectTag |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (!(typeof child._store === 'object')) {
      {
        throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    child._store.validated = true;
    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

    error('Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
  };
}

var isArray$1 = Array.isArray;

function coerceRef(returnFiber, current, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
      // because these cannot be automatically converted to an arrow function
      // using a codemod. Therefore, we don't have to warn about string refs again.
      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
        var componentName = getComponentName(returnFiber.type) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          {
            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (!(ownerFiber.tag === ClassComponent)) {
          {
            throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref" );
          }
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        {
          throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
        }
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
        return current.ref;
      }

      var ref = function (value) {
        var refs = inst.refs;

        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (!(typeof mixedRef === 'string')) {
        {
          throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
        }
      }

      if (!element._owner) {
        {
          throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information." );
        }
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';

    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
    }

    {
      {
        throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum );
      }
    }
  }
}

function warnOnFunctionType() {
  {
    var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

    if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
  }
} // This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    } // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }

    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }

    var current = newFiber.alternate;

    if (current !== null) {
      var oldIndex = current.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, expirationTime) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, expirationTime) {
    if (current !== null) {
      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
       isCompatibleFamilyForHotReloading(current, element) )) {
        // Move based on index
        var existing = useFiber(current, element.props);
        existing.ref = coerceRef(returnFiber, current, element);
        existing.return = returnFiber;

        {
          existing._debugSource = element._source;
          existing._debugOwner = element._owner;
        }

        return existing;
      }
    } // Insert


    var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
    created.ref = coerceRef(returnFiber, current, element);
    created.return = returnFiber;
    return created;
  }

  function updatePortal(returnFiber, current, portal, expirationTime) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || []);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }

              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }

            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (!(typeof iteratorFn === 'function')) {
      {
        throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        if (!didWarnAboutGenerators) {
          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
        }

        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        if (!didWarnAboutMaps) {
          error('Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.');
        }

        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (!(newChildren != null)) {
      {
        throw Error( "An iterable object provided no iterator." );
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        switch (child.tag) {
          case Fragment:
            {
              if (element.type === REACT_FRAGMENT_TYPE) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.props.children);
                existing.return = returnFiber;

                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }

                return existing;
              }

              break;
            }

          case Block:

          // We intentionally fallthrough here if enableBlocksAPI is not on.
          // eslint-disable-next-lined no-fallthrough

          default:
            {
              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
               isCompatibleFamilyForHotReloading(child, element) )) {
                deleteRemainingChildren(returnFiber, child.sibling);

                var _existing3 = useFiber(child, element.props);

                _existing3.ref = coerceRef(returnFiber, child, element);
                _existing3.return = returnFiber;

                {
                  _existing3._debugSource = element._source;
                  _existing3._debugOwner = element._owner;
                }

                return _existing3;
              }

              break;
            }
        } // Didn't match.


        deleteRemainingChildren(returnFiber, child);
        break;
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || []);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;

              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough

        case FunctionComponent:
          {
            var Component = returnFiber.type;

            {
              {
                throw Error( (Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
              }
            }
          }
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current, workInProgress) {
  if (!(current === null || workInProgress.child === current.child)) {
    {
      throw Error( "Resuming work not yet implemented." );
    }
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, renderExpirationTime) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, renderExpirationTime);
    child = child.sibling;
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (!(c !== NO_CONTEXT)) {
    {
      throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

  if (props.fallback === undefined) {
    return false;
  } // Regular boundaries always capture.


  if (props.unstable_avoidThisFallback !== true) {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
  // parent boundary if it is currently invisible.


  if (hasInvisibleParent) {
    return false;
  } // If the parent is not able to handle it, we must handle it.


  return true;
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

function createDeprecatedResponderListener(responder, props) {
  var eventResponderListener = {
    responder: responder,
    props: props
  };

  {
    Object.freeze(eventResponderListener);
  }

  return eventResponderListener;
}

var HasEffect =
/* */
1; // Represents the phase in which the effect (not the clean-up) fires.

var Layout =
/*    */
2;
var Passive$1 =
/*   */
4;

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;

{
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
// does not get reset if we do another render pass; only when we're completely
// finished evaluating this component. This is an optimization so we know
// whether we need to clear render phase updates after a throw.

var didScheduleRenderPhaseUpdate = false;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentName(currentlyRenderingFiber$1.type);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (objectIs(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
  renderExpirationTime = nextRenderExpirationTime;
  currentlyRenderingFiber$1 = workInProgress;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  }

  workInProgress.memoizedState = null;
  workInProgress.updateQueue = null;
  workInProgress.expirationTime = NoWork; // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // didScheduleRenderPhaseUpdate = false;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because memoizedState === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so memoizedState would be null during updates and mounts.

  {
    if (current !== null && current.memoizedState !== null) {
      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, secondArg); // Check if there was a render phase update

  if (workInProgress.expirationTime === renderExpirationTime) {
    // Keep rendering in a loop for as long as render phase updates continue to
    // be scheduled. Use a counter to prevent infinite loops.
    var numberOfReRenders = 0;

    do {
      workInProgress.expirationTime = NoWork;

      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
        {
          throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
        }
      }

      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      currentHook = null;
      workInProgressHook = null;
      workInProgress.updateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher.current =  HooksDispatcherOnRerenderInDEV ;
      children = Component(props, secondArg);
    } while (workInProgress.expirationTime === renderExpirationTime);
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.


  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  {
    workInProgress._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderExpirationTime = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
  }

  didScheduleRenderPhaseUpdate = false;

  if (!!didRenderTooFewHooks) {
    {
      throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
    }
  }

  return children;
}
function bailoutHooks(current, workInProgress, expirationTime) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.effectTag &= ~(Passive | Update);

  if (current.expirationTime <= expirationTime) {
    current.expirationTime = NoWork;
  }
}
function resetHooksAfterThrow() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.
  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  if (didScheduleRenderPhaseUpdate) {
    // There were render phase updates. These are only valid for this render
    // phase, which we are now aborting. Remove the updates from the queues so
    // they do not persist to the next render. Do not remove updates from hooks
    // that weren't processed.
    //
    // Only reset the updates from the queue if it has a clone. If it does
    // not have a clone, that means it wasn't processed, and the updates were
    // scheduled before we entered the render phase.
    var hook = currentlyRenderingFiber$1.memoizedState;

    while (hook !== null) {
      var queue = hook.queue;

      if (queue !== null) {
        queue.pending = null;
      }

      hook = hook.next;
    }
  }

  renderExpirationTime = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
  }

  didScheduleRenderPhaseUpdate = false;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  var nextCurrentHook;

  if (currentHook === null) {
    var current = currentlyRenderingFiber$1.alternate;

    if (current !== null) {
      nextCurrentHook = current.memoizedState;
    } else {
      nextCurrentHook = null;
    }
  } else {
    nextCurrentHook = currentHook.next;
  }

  var nextWorkInProgressHook;

  if (workInProgressHook === null) {
    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
  } else {
    nextWorkInProgressHook = workInProgressHook.next;
  }

  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
  } else {
    // Clone from the current hook.
    if (!(nextCurrentHook !== null)) {
      {
        throw Error( "Rendered more hooks than during the previous render." );
      }
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      baseQueue: currentHook.baseQueue,
      queue: currentHook.queue,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null
  };
}

function basicStateReducer(state, action) {
  // $FlowFixMe: Flow doesn't like mixed types
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer;
  var current = currentHook; // The last rebase update that is NOT part of the base state.

  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    current.baseQueue = baseQueue = pendingQueue;
    queue.pending = null;
  }

  if (baseQueue !== null) {
    // We have a queue to process.
    var first = baseQueue.next;
    var newState = current.baseState;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;
    var update = first;

    do {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime < renderExpirationTime) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          expirationTime: update.expirationTime,
          suspenseConfig: update.suspenseConfig,
          action: update.action,
          eagerReducer: update.eagerReducer,
          eagerState: update.eagerState,
          next: null
        };

        if (newBaseQueueLast === null) {
          newBaseQueueFirst = newBaseQueueLast = clone;
          newBaseState = newState;
        } else {
          newBaseQueueLast = newBaseQueueLast.next = clone;
        } // Update the remaining priority in the queue.


        if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
          currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
          markUnprocessedUpdateTime(updateExpirationTime);
        }
      } else {
        // This update does have sufficient priority.
        if (newBaseQueueLast !== null) {
          var _clone = {
            expirationTime: Sync,
            // This update is going to be committed so we never want uncommit it.
            suspenseConfig: update.suspenseConfig,
            action: update.action,
            eagerReducer: update.eagerReducer,
            eagerState: update.eagerState,
            next: null
          };
          newBaseQueueLast = newBaseQueueLast.next = _clone;
        } // Mark the event time of this update as relevant to this render pass.
        // TODO: This should ideally use the true event time of this update rather than
        // its priority which is a derived and not reverseable value.
        // TODO: We should skip this update if it was already committed but currently
        // we have no way of detecting the difference between a committed and suspended
        // update here.


        markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

        if (update.eagerReducer === reducer) {
          // If this update was processed eagerly, and its reducer matches the
          // current reducer, we can use the eagerly computed state.
          newState = update.eagerState;
        } else {
          var action = update.action;
          newState = reducer(newState, action);
        }
      }

      update = update.next;
    } while (update !== null && update !== first);

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState;
    hook.baseState = newBaseState;
    hook.baseQueue = newBaseQueueLast;
    queue.lastRenderedState = newState;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function rerenderReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
  // work-in-progress hook.

  var dispatch = queue.dispatch;
  var lastRenderPhaseUpdate = queue.pending;
  var newState = hook.memoizedState;

  if (lastRenderPhaseUpdate !== null) {
    // The queue doesn't persist past this render pass.
    queue.pending = null;
    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
    var update = firstRenderPhaseUpdate;

    do {
      // Process this render phase update. We don't have to check the
      // priority because it will always be the same as the current
      // render's.
      var action = update.action;
      newState = reducer(newState, action);
      update = update.next;
    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
    // the base state unless the queue is empty.
    // TODO: Not sure if this is the desired semantics, but it's what we
    // do for gDSFP. I can't remember why.

    if (hook.baseQueue === null) {
      hook.baseState = newState;
    }

    queue.lastRenderedState = newState;
  }

  return [newState, dispatch];
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    // $FlowFixMe: Flow doesn't like mixed types
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer);
}

function rerenderState(initialState) {
  return rerenderReducer(basicStateReducer);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();
  var ref = {
    current: initialValue
  };

  {
    Object.seal(ref);
  }

  hook.memoizedState = ref;
  return ref;
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps);
}

function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        pushEffect(hookEffectTag, create, destroy, nextDeps);
        return;
      }
    }
  }

  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
}

function updateEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
}

function mountLayoutEffect(create, deps) {
  return mountEffectImpl(Update, Layout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, Layout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      if (!refObject.hasOwnProperty('current')) {
        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
      }
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value, config) {
  var _mountState = mountState(value),
      prevValue = _mountState[0],
      setValue = _mountState[1];

  mountEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function updateDeferredValue(value, config) {
  var _updateState = updateState(),
      prevValue = _updateState[0],
      setValue = _updateState[1];

  updateEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function rerenderDeferredValue(value, config) {
  var _rerenderState = rerenderState(),
      prevValue = _rerenderState[0],
      setValue = _rerenderState[1];

  updateEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function startTransition(setPending, config, callback) {
  var priorityLevel = getCurrentPriorityLevel();
  runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {
    setPending(true);
  });
  runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setPending(false);
      callback();
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  });
}

function mountTransition(config) {
  var _mountState2 = mountState(false),
      isPending = _mountState2[0],
      setPending = _mountState2[1];

  var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function updateTransition(config) {
  var _updateState2 = updateState(),
      isPending = _updateState2[0],
      setPending = _updateState2[1];

  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function rerenderTransition(config) {
  var _rerenderState2 = rerenderState(),
      isPending = _rerenderState2[0],
      setPending = _rerenderState2[1];

  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function dispatchAction(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var currentTime = requestCurrentTimeForUpdate();
  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    action: action,
    eagerReducer: null,
    eagerState: null,
    next: null
  };

  {
    update.priority = getCurrentPriorityLevel();
  } // Append the update to the end of the list.


  var pending = queue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  queue.pending = update;
  var alternate = fiber.alternate;

  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -> linked list of updates. After this render pass, we'll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdate = true;
    update.expirationTime = renderExpirationTime;
    currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
  } else {
    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          update.eagerReducer = lastRenderedReducer;
          update.eagerState = eagerState;

          if (objectIs(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher.current = prevDispatcher;
          }
        }
      }
    }

    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfNotScopedWithMatchingAct(fiber);
        warnIfNotCurrentlyActingUpdatesInDev(fiber);
      }
    }

    scheduleWork(fiber, expirationTime);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useResponder: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError
};
var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var HooksDispatcherOnRerenderInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

{
  var warnInvalidContextAccess = function () {
    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      mountHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  HooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return rerenderDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return rerenderTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderTransition(config);
    }
  };
}

var now$1 = Scheduler.unstable_now;
var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {

  commitTime = now$1();
}

function startProfilerTimer(fiber) {

  profilerStartTime = now$1();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$1();
  }
}

function stopProfilerTimerIfRunning(fiber) {

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

  if (profilerStartTime >= 0) {
    var elapsedTime = now$1() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function enterHydrationState(fiber) {

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;

      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.

  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;

  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
              break;

            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;

            case SuspenseComponent:
              didNotFindHydratableSuspenseInstance(parentType, parentProps);
              break;
          }

          break;
        }

      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type);

        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {

        return false;
      }

    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }

  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;

      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }

  return shouldUpdate;
}

function skipPastDehydratedSuspenseInstance(fiber) {

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.

  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;

    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function resetHydrationState() {

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
}

function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
  if (current === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
  }
}

function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their
  // identities match.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
}

function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);

    if ( workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  if (current === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(type), getCurrentFiberStackInDev);
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentName(_type), getCurrentFiberStackInDev);
    }
  }

  var currentChild = current.child; // This is always exactly one child

  if (updateExpirationTime < renderExpirationTime) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        outerMemoType = refineResolvedLazyComponent(outerMemoType);
      }

      var outerPropTypes = outerMemoType && outerMemoType.propTypes;

      if (outerPropTypes) {
        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
      } // Inner propTypes will be validated in the function component path.

    }
  }

  if (current !== null) {
    var prevProps = current.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
     workInProgress.type === current.type )) {
      didReceiveUpdate = false;

      if (updateExpirationTime < renderExpirationTime) {
        // The pending update priority was cleared at the beginning of
        // beginWork. We're about to bail out, but there might be additional
        // updates at a lower priority. Usually, the priority level of the
        // remaining updates is accumlated during the evaluation of the
        // component (i.e. when processing the update queue). But since since
        // we're bailing out early *without* evaluating the component, we need
        // to account for it here, too. Reset to the value of the current fiber.
        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
        // because a MemoComponent fiber does not have hooks or an update queue;
        // rather, it wraps around an inner component, which may or may not
        // contains hooks.
        // TODO: Move the reset at in beginWork out of the common path so that
        // this is no longer necessary.
        workInProgress.expirationTime = current.expirationTime;
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
      }
    }
  }

  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
}

function updateFragment(current, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMode(current, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateProfiler(current, workInProgress, renderExpirationTime) {
  {
    workInProgress.effectTag |= Update;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function markRef(current, workInProgress) {
  var ref = workInProgress.ref;

  if (current === null && ref !== null || current !== null && current.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.effectTag |= Ref;
  }
}

function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);

    if ( workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    if (current !== null) {
      // A class component without an instance only mounts if it suspended
      // inside a non-concurrent tree, in an inconsistent state. We want to
      // treat it like a new mount, even though an empty version of it already
      // committed. Disconnect the alternate pointers.
      current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.effectTag |= Placement;
    } // In the initial pass we might need to construct the instance.


    constructClassInstance(workInProgress, Component, nextProps);
    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    shouldUpdate = true;
  } else if (current === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  } else {
    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderExpirationTime);
  }

  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);

  {
    var inst = workInProgress.stateNode;

    if (inst.props !== nextProps) {
      if (!didWarnAboutReassigningProps) {
        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
      }

      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current, workInProgress);
  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$1.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFromError is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    {
      stopProfilerTimerIfRunning();
    }
  } else {
    {
      setIsRendering(true);
      nextChildren = instance.render();

      if ( workInProgress.mode & StrictMode) {
        instance.render();
      }

      setIsRendering(false);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (current !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current, workInProgress, renderExpirationTime) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;

  if (!(current !== null && updateQueue !== null)) {
    {
      throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  cloneUpdateQueue(current, workInProgress);
  processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime);
  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
  // being called "element".

  var nextChildren = nextState.element;

  if (nextChildren === prevChildren) {
    // If the state is the same as before, that's a bailout because we had
    // no work that expires at this time.
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  }

  var root = workInProgress.stateNode;

  if (root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.
    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    workInProgress.child = child;
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.effectTag = node.effectTag & ~Placement | Hydrating;
      node = node.sibling;
    }
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    resetHydrationState();
  }

  return workInProgress.child;
}

function updateHostComponent(current, workInProgress, renderExpirationTime) {
  pushHostContext(workInProgress);

  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current !== null ? current.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also has access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.effectTag |= ContentReset;
  }

  markRef(current, workInProgress); // Check the host config to see if the children are offscreen/hidden.

  if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
    {
      markSpawnedWork(Never);
    } // Schedule this fiber to re-render at offscreen priority. Then bailout.


    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
    return null;
  }

  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateHostText(current, workInProgress) {
  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
  if (_current !== null) {
    // A lazy component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
  // Cancel and resume right after we know the tag.

  cancelWorkTimer(workInProgress);
  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  startWorkTimer(workInProgress);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        updateExpirationTime, renderExpirationTime);
        return child;
      }
  }

  var hint = '';

  {
    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
      hint = ' Did you wrap a component in React.lazy() more than once?';
    }
  } // This message intentionally doesn't mention ForwardRef or MemoComponent
  // because the fact that it's a separate type of work is an
  // implementation detail.


  {
    {
      throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
    }
  }
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
  if (_current !== null) {
    // An incomplete component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  } // Promote the fiber to a class and try rendering again.


  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  constructClassInstance(workInProgress, Component, nextProps);
  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
  if (_current !== null) {
    // An indeterminate component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps;
  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var value;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    setIsRendering(true);
    ReactCurrentOwner$1.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    initializeUpdateQueue(workInProgress);
    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {

      if ( workInProgress.mode & StrictMode) {
        // Only double-render components with Hooks
        if (workInProgress.memoizedState !== null) {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
      }
    }

    reconcileChildren(null, workInProgress, value, renderExpirationTime);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  {
    if (Component) {
      if (Component.childContextTypes) {
        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
      }
    }

    if (workInProgress.ref !== null) {
      var info = '';
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }

      var warningKey = ownerName || workInProgress._debugID || '';
      var debugSource = workInProgress._debugSource;

      if (debugSource) {
        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
      }

      if (!didWarnAboutFunctionRefs[warningKey]) {
        didWarnAboutFunctionRefs[warningKey] = true;

        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
      }
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      var _componentName2 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
        error('%s: Function components do not support getDerivedStateFromProps.', _componentName2);

        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
      }
    }

    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
      var _componentName3 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
        error('%s: Function components do not support contextType.', _componentName3);

        didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
      }
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  retryTime: NoWork
};

function shouldRemainOnFallback(suspenseContext, current, workInProgress) {
  // If the context is telling us that we should show a fallback, and we're not
  // already showing content, then we should show the fallback instead.
  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current === null || current.memoizedState !== null);
}

function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
  var mode = workInProgress.mode;
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.effectTag |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var nextDidTimeout = false;
  var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    nextDidTimeout = true;
    workInProgress.effectTag &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current === null || current.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Boundaries without fallbacks or should be avoided are not considered since
      // they cannot handle preferred fallback states.
      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext); // This next part is a bit confusing. If the children timeout, we switch to
  // showing the fallback children in place of the "primary" children.
  // However, we don't want to delete the primary children because then their
  // state will be lost (both the React state and the host state, e.g.
  // uncontrolled form inputs). Instead we keep them mounted and hide them.
  // Both the fallback children AND the primary children are rendered at the
  // same time. Once the primary children are un-suspended, we can delete
  // the fallback children — don't need to preserve their state.
  //
  // The two sets of children are siblings in the host environment, but
  // semantically, for purposes of reconciliation, they are two separate sets.
  // So we store them using two fragment fibers.
  //
  // However, we want to avoid allocating extra fibers for every placeholder.
  // They're only necessary when the children time out, because that's the
  // only time when both sets are mounted.
  //
  // So, the extra fragment fibers are only used if the children time out.
  // Otherwise, we render the primary children directly. This requires some
  // custom reconciliation logic to preserve the state of the primary
  // children. It's essentially a very basic form of re-parenting.

  if (current === null) {
    // If we're currently hydrating, try to hydrate this boundary.
    // But only if this has a fallback.
    if (nextProps.fallback !== undefined) {
      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
    } // This is the initial mount. This branch is pretty simple because there's
    // no previous state that needs to be preserved.


    if (nextDidTimeout) {
      // Mount separate fragments for primary and fallback children.
      var nextFallbackChildren = nextProps.fallback;
      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
      primaryChildFragment.return = workInProgress;

      if ((workInProgress.mode & BlockingMode) === NoMode) {
        // Outside of blocking mode, we commit the effects from the
        // partially completed, timed-out tree, too.
        var progressedState = workInProgress.memoizedState;
        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
        primaryChildFragment.child = progressedPrimaryChild;
        var progressedChild = progressedPrimaryChild;

        while (progressedChild !== null) {
          progressedChild.return = primaryChildFragment;
          progressedChild = progressedChild.sibling;
        }
      }

      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
      fallbackChildFragment.return = workInProgress;
      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
      // fallback children.

      workInProgress.memoizedState = SUSPENDED_MARKER;
      workInProgress.child = primaryChildFragment;
      return fallbackChildFragment;
    } else {
      // Mount the primary children without an intermediate fragment fiber.
      var nextPrimaryChildren = nextProps.children;
      workInProgress.memoizedState = null;
      return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
    }
  } else {
    // This is an update. This branch is more complicated because we need to
    // ensure the state of the primary children is preserved.
    var prevState = current.memoizedState;

    if (prevState !== null) {
      // wrapped in a fragment fiber.


      var currentPrimaryChildFragment = current.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

      if (nextDidTimeout) {
        // Still timed out. Reuse the current primary children by cloning
        // its fragment. We're going to skip over these entirely.
        var _nextFallbackChildren2 = nextProps.fallback;

        var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);

        _primaryChildFragment2.return = workInProgress;

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // Outside of blocking mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState = workInProgress.memoizedState;

          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
            _primaryChildFragment2.child = _progressedPrimaryChild;
            var _progressedChild2 = _progressedPrimaryChild;

            while (_progressedChild2 !== null) {
              _progressedChild2.return = _primaryChildFragment2;
              _progressedChild2 = _progressedChild2.sibling;
            }
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if ( workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration = 0;
          var _hiddenChild = _primaryChildFragment2.child;

          while (_hiddenChild !== null) {
            _treeBaseDuration += _hiddenChild.treeBaseDuration;
            _hiddenChild = _hiddenChild.sibling;
          }

          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
        } // Clone the fallback child fragment, too. These we'll continue
        // working on.


        var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);

        _fallbackChildFragment2.return = workInProgress;
        _primaryChildFragment2.sibling = _fallbackChildFragment2;
        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment2;
        return _fallbackChildFragment2;
      } else {
        // No longer suspended. Switch back to showing the primary children,
        // and remove the intermediate fragment fiber.
        var _nextPrimaryChildren = nextProps.children;
        var currentPrimaryChild = currentPrimaryChildFragment.child;
        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
        // children. Wait until the complete phase, after we've confirmed the
        // fallback is no longer needed.
        // TODO: Would it be better to store the fallback fragment on
        // the stateNode?
        // Continue rendering the children, like we normally do.

        workInProgress.memoizedState = null;
        return workInProgress.child = primaryChild;
      }
    } else {
      // The current tree has not already timed out. That means the primary
      // children are not wrapped in a fragment fiber.
      var _currentPrimaryChild = current.child;

      if (nextDidTimeout) {
        // Timed out. Wrap the children in a fragment fiber to keep them
        // separate from the fallback children.
        var _nextFallbackChildren3 = nextProps.fallback;

        var _primaryChildFragment3 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
        // going to render this fragment.
        null, mode, NoWork, null);

        _primaryChildFragment3.return = workInProgress;
        _primaryChildFragment3.child = _currentPrimaryChild;

        if (_currentPrimaryChild !== null) {
          _currentPrimaryChild.return = _primaryChildFragment3;
        } // Even though we're creating a new fiber, there are no new children,
        // because we're reusing an already mounted tree. So we don't need to
        // schedule a placement.
        // primaryChildFragment.effectTag |= Placement;


        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // Outside of blocking mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState2 = workInProgress.memoizedState;

          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

          _primaryChildFragment3.child = _progressedPrimaryChild2;
          var _progressedChild3 = _progressedPrimaryChild2;

          while (_progressedChild3 !== null) {
            _progressedChild3.return = _primaryChildFragment3;
            _progressedChild3 = _progressedChild3.sibling;
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if ( workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration2 = 0;
          var _hiddenChild2 = _primaryChildFragment3.child;

          while (_hiddenChild2 !== null) {
            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
            _hiddenChild2 = _hiddenChild2.sibling;
          }

          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
        } // Create a fragment from the fallback children, too.


        var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

        _fallbackChildFragment3.return = workInProgress;
        _primaryChildFragment3.sibling = _fallbackChildFragment3;
        _fallbackChildFragment3.effectTag |= Placement;
        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment3;
        return _fallbackChildFragment3;
      } else {
        // Still haven't timed out. Continue rendering the children, like we
        // normally do.
        workInProgress.memoizedState = null;
        var _nextPrimaryChildren2 = nextProps.children;
        return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
      }
    }
  }
}

function scheduleWorkOnFiber(fiber, renderExpirationTime) {
  if (fiber.expirationTime < renderExpirationTime) {
    fiber.expirationTime = renderExpirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
    alternate.expirationTime = renderExpirationTime;
  }

  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleWorkOnFiber(node, renderExpirationTime);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleWorkOnFiber(node, renderExpirationTime);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          case 'forward':
          case 'backward':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          default:
            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

            break;
        }
      } else {
        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;

        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;

        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isArray = Array.isArray(childSlot);
    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

    if (isArray || isIterable) {
      var type = isArray ? 'array' : 'iterable';

      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode,
      lastEffect: lastEffectBeforeRendering
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.renderingStartTime = 0;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailExpiration = 0;
    renderState.tailMode = tailMode;
    renderState.lastEffect = lastEffectBeforeRendering;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.effectTag |= DidCapture;
  } else {
    var didSuspendBefore = current !== null && (current.effectTag & DidCapture) !== NoEffect;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & BlockingMode) === NoMode) {
    // Outside of blocking mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode, workInProgress.lastEffect);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode, workInProgress.lastEffect);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined, workInProgress.lastEffect);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current, workInProgress, renderExpirationTime) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  }

  return workInProgress.child;
}

function updateContextProvider(current, workInProgress, renderExpirationTime) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);

    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current, workInProgress, renderExpirationTime) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;

          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    if (typeof render !== 'function') {
      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
    }
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren;

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    newChildren = render(newValue);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
  cancelWorkTimer(workInProgress);

  if (current !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current.dependencies;
  }

  {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning();
  }

  var updateExpirationTime = workInProgress.expirationTime;

  if (updateExpirationTime !== NoWork) {
    markUnprocessedUpdateTime(updateExpirationTime);
  } // Check if the children have any pending work.


  var childExpirationTime = workInProgress.childExpirationTime;

  if (childExpirationTime < renderExpirationTime) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current, workInProgress);
    return workInProgress.child;
  }
}

function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = current;
      returnFiber.lastEffect = current;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = current;
    }

    current.nextEffect = null;
    current.effectTag = Deletion;
    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function beginWork(current, workInProgress, renderExpirationTime) {
  var updateExpirationTime = workInProgress.expirationTime;

  {
    if (workInProgress._debugNeedsRemount && current !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
    }
  }

  if (current !== null) {
    var oldProps = current.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
     workInProgress.type !== current.type )) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else if (updateExpirationTime < renderExpirationTime) {
      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
      // the begin phase. There's still some bookkeeping we that needs to be done
      // in this optimized path, mostly pushing stuff onto the stack.

      switch (workInProgress.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress);
          resetHydrationState();
          break;

        case HostComponent:
          pushHostContext(workInProgress);

          if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
            {
              markSpawnedWork(Never);
            } // Schedule this fiber to re-render at offscreen priority. Then bailout.


            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
            return null;
          }

          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress);
            }

            break;
          }

        case HostPortal:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case ContextProvider:
          {
            var newValue = workInProgress.memoizedProps.value;
            pushProvider(workInProgress, newValue);
            break;
          }

        case Profiler:
          {
            // Profiler should only call onRender when one of its descendants actually rendered.
            var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (hasChildWork) {
              workInProgress.effectTag |= Update;
            }
          }

          break;

        case SuspenseComponent:
          {
            var state = workInProgress.memoizedState;

            if (state !== null) {
              // whether to retry the primary children, or to skip over it and
              // go straight to the fallback. Check the priority of the primary
              // child fragment.


              var primaryChildFragment = workInProgress.child;
              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                // The primary children have pending work. Use the normal path
                // to attempt to render the primary children again.
                return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
              } else {
                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                // priority. Bailout.

                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);

                if (child !== null) {
                  // The fallback children have pending work. Skip over the
                  // primary children and work on the fallback.
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }

            break;
          }

        case SuspenseListComponent:
          {
            var didSuspendBefore = (current.effectTag & DidCapture) !== NoEffect;

            var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (didSuspendBefore) {
              if (_hasChildWork) {
                // If something was in fallback state last time, and we have all the
                // same children then we're still in progressive loading state.
                // Something might get unblocked by state updates or retries in the
                // tree which will affect the tail. So we need to use the normal
                // path to compute the correct tail.
                return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
              } // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.


              workInProgress.effectTag |= DidCapture;
            } // If nothing suspended before and we're rendering the same children,
            // then the tail doesn't matter. Anything new that suspends will work
            // in the "together" mode, so we can continue from the state we had.


            var renderState = workInProgress.memoizedState;

            if (renderState !== null) {
              // Reset to the "together" mode in case we've started a different
              // update in the past but didn't complete it.
              renderState.rendering = null;
              renderState.tail = null;
            }

            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

            if (_hasChildWork) {
              break;
            } else {
              // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.
              return null;
            }
          }
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    } else {
      // An update was scheduled on this fiber, but there are no new props
      // nor legacy context. Set this to false. If an update queue or context
      // consumer produces a changed value, it will set this to true. Otherwise,
      // the component will assume the children have not changed and bail out.
      didReceiveUpdate = false;
    }
  } else {
    didReceiveUpdate = false;
  } // Before entering the begin phase, clear pending update priority.
  // TODO: This assumes that we're about to evaluate the component and process
  // the update queue. However, there's an exception: SimpleMemoComponent
  // sometimes bails out later in the begin phase. This indicates that we should
  // move this assignment out of the common path and into each branch.


  workInProgress.expirationTime = NoWork;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderExpirationTime);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
      }

    case FunctionComponent:
      {
        var _Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderExpirationTime);
      }

    case ClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
      }

    case HostRoot:
      return updateHostRoot(current, workInProgress, renderExpirationTime);

    case HostComponent:
      return updateHostComponent(current, workInProgress, renderExpirationTime);

    case HostText:
      return updateHostText(current, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current, workInProgress, renderExpirationTime);

    case HostPortal:
      return updatePortalComponent(current, workInProgress, renderExpirationTime);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderExpirationTime);
      }

    case Fragment:
      return updateFragment(current, workInProgress, renderExpirationTime);

    case Mode:
      return updateMode(current, workInProgress, renderExpirationTime);

    case Profiler:
      return updateProfiler(current, workInProgress, renderExpirationTime);

    case ContextProvider:
      return updateContextProvider(current, workInProgress, renderExpirationTime);

    case ContextConsumer:
      return updateContextConsumer(current, workInProgress, renderExpirationTime);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
      }

    case IncompleteClassComponent:
      {
        var _Component3 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.effectTag |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.effectTag |= Ref;
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

{
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function completeWork(current, workInProgress, renderExpirationTime) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
    case LazyComponent:
    case SimpleMemoComponent:
    case FunctionComponent:
    case ForwardRef:
    case Fragment:
    case Mode:
    case Profiler:
    case ContextConsumer:
    case MemoComponent:
      return null;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var fiberRoot = workInProgress.stateNode;

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          }
        }

        updateHostContainer(workInProgress);
        return null;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.


            return null;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on whether we want to add them top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node need to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners

            workInProgress.stateNode = instance;
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.


            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        return null;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState;

        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = false;

        if (current === null) {
          if (workInProgress.memoizedProps.fallback !== undefined) {
            popHydrationState(workInProgress);
          }
        } else {
          var prevState = current.memoizedState;
          prevDidTimeout = prevState !== null;

          if (!nextDidTimeout && prevState !== null) {
            // We just switched from the fallback to the normal children.
            // Delete the fallback.
            // TODO: Would it be better to store the fallback fragment on
            // the stateNode during the begin phase?
            var currentFallbackChild = current.child.sibling;

            if (currentFallbackChild !== null) {
              // Deletions go at the beginning of the return fiber's effect list
              var first = workInProgress.firstEffect;

              if (first !== null) {
                workInProgress.firstEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = first;
              } else {
                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = null;
              }

              currentFallbackChild.effectTag = Deletion;
            }
          }
        }

        if (nextDidTimeout && !prevDidTimeout) {
          // If this subtreee is running in blocking mode we can suspend,
          // otherwise we won't suspend.
          // TODO: This will still suspend a synchronous tree if anything
          // in the concurrent tree already suspended during this render.
          // This is a known bug.
          if ((workInProgress.mode & BlockingMode) !== NoMode) {
            // TODO: Move this back to throwException because this is too late
            // if this is a large tree which is common for initial loads. We
            // don't know if we should restart a render or not until we get
            // this marker, and this is too late.
            // If this render already had a ping or lower pri updates,
            // and this is the first time we know we're going to suspend we
            // should be able to immediately restart from within throwException.
            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
              // If this was in an invisible tree or a new render, then showing
              // this boundary is ok.
              renderDidSuspend();
            } else {
              // Otherwise, we're going to have to hide content so we should
              // suspend for longer if possible.
              renderDidSuspendDelayIfPossible();
            }
          }
        }

        {
          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
          if (nextDidTimeout || prevDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the promise. This flag is also used to hide the
            // primary children. In mutation mode, we also need the flag to
            // *unhide* children that were previously hidden, so check if this
            // is currently timed out, too.
            workInProgress.effectTag |= Update;
          }
        }

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);
      return null;

    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      return null;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode.
          // We don't do anything in this mode.
          return null;
        }

        var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.effectTag |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thennables. Instead, we'll transfer its thennables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThennables = suspended.updateQueue;

                  if (newThennables !== null) {
                    workInProgress.updateQueue = newThennables;
                    workInProgress.effectTag |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect list before doing the second pass since that's now invalid.


                  if (renderState.lastEffect === null) {
                    workInProgress.firstEffect = null;
                  }

                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                  resetChildFibers(workInProgress, renderExpirationTime); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThennables = _suspended.updateQueue;

              if (_newThennables !== null) {
                workInProgress.updateQueue = _newThennables;
                workInProgress.effectTag |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
                // We need to delete the row we just rendered.
                // Reset the effect list to what it was before we rendered this
                // child. The nested children have already appended themselves.
                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                if (lastEffect !== null) {
                  lastEffect.nextEffect = null;
                } // We're done.


                return null;
              }
            } else if ( // The time it took to render last row is greater than time until
            // the expiration.
            now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime > Never) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. If we can show
              // them, then they really have the same priority as this render.
              // So we'll pick it back up the very next render pass once we've had
              // an opportunity to yield for paint.

              var nextPriority = renderExpirationTime - 1;
              workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

              {
                markSpawnedWork(nextPriority);
              }
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          if (renderState.tailExpiration === 0) {
            // Heuristic for how long we're willing to spend rendering rows
            // until we just give up and show what we have so far.
            var TAIL_EXPIRATION_TIMEOUT_MS = 500;
            renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS; // TODO: This is meant to mimic the train model or JND but this
            // is a per component value. It should really be since the start
            // of the total render or last commit. Consider using something like
            // globalMostRecentFallbackTime. That doesn't account for being
            // suspended for part of the time or when it's a new render.
            // It should probably use a global start time value instead.
          } // Pop a row.


          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.lastEffect = workInProgress.lastEffect;
          renderState.renderingStartTime = now();
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

          return next;
        }

        return null;
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function unwindWork(workInProgress, renderExpirationTime) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var effectTag = workInProgress.effectTag;

        if (effectTag & ShouldCapture) {
          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var _effectTag = workInProgress.effectTag;

        if (!((_effectTag & DidCapture) === NoEffect)) {
          {
            throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
          }
        }

        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
        return workInProgress;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);

        var _effectTag2 = workInProgress.effectTag;

        if (_effectTag2 & ShouldCapture) {
          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      popProvider(workInProgress);
      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      popProvider(interruptedWork);
      break;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

function logCapturedError(capturedError) {

  var error = capturedError.error;

  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
    // `preventDefault()` in window `error` handler.
    // We record this information as an expando on the error.

    if (error != null && error._suppressLogging) {
      if (errorBoundaryFound && willRetry) {
        // The error is recoverable and was silenced.
        // Ignore it and don't print the stack addendum.
        // This is handy for testing error boundaries without noise.
        return;
      } // The error is fatal. Since the silencing might have
      // been accidental, we'll surface it anyway.
      // However, the browser would have silenced the original error
      // so we'll print it first, and then print the stack addendum.


      console['error'](error); // Don't transform to our wrapper
      // For a more detailed description of this block, see:
      // https://github.com/facebook/react/pull/13384
    }

    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      } else {
        errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }

    var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

    console['error'](combinedMessage); // Don't transform to our wrapper
  }
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
function logError(boundary, errorInfo) {
  var source = errorInfo.source;
  var stack = errorInfo.stack;

  if (stack === null && source !== null) {
    stack = getStackByFiberInDevAndProd(source);
  }

  var capturedError = {
    componentName: source !== null ? getComponentName(source.type) : null,
    componentStack: stack !== null ? stack : '',
    error: errorInfo.value,
    errorBoundary: null,
    errorBoundaryName: null,
    errorBoundaryFound: false,
    willRetry: false
  };

  if (boundary !== null && boundary.tag === ClassComponent) {
    capturedError.errorBoundary = boundary.stateNode;
    capturedError.errorBoundaryName = getComponentName(boundary.type);
    capturedError.errorBoundaryFound = true;
    capturedError.willRetry = true;
  }

  try {
    logCapturedError(capturedError);
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var callComponentWillUnmountWithTimer = function (current, instance) {
  startPhaseTimer(current, 'componentWillUnmount');
  instance.props = current.memoizedProps;
  instance.state = current.memoizedState;
  instance.componentWillUnmount();
  stopPhaseTimer();
}; // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current, unmountError);
    }
  }
}

function safelyDetachRef(current) {
  var ref = current.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);

        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current, destroy) {
  {
    invokeGuardedCallback(null, destroy, null);

    if (hasCaughtError()) {
      var error = clearCaughtError();
      captureCommitPhaseError(current, error);
    }
  }
}

function commitBeforeMutationLifeCycles(current, finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        return;
      }

    case ClassComponent:
      {
        if (finishedWork.effectTag & Snapshot) {
          if (current !== null) {
            var prevProps = current.memoizedProps;
            var prevState = current.memoizedState;
            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);

                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            stopPhaseTimer();
          }
        }

        return;
      }

    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case IncompleteClassComponent:
      // Nothing to do for these component types
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitHookEffectListUnmount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          destroy();
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitHookEffectListMount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Mount
        var create = effect.create;
        effect.destroy = create();

        {
          var destroy = effect.destroy;

          if (destroy !== undefined && typeof destroy !== 'function') {
            var addendum = void 0;

            if (destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + destroy;
            }

            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitPassiveHookEffects(finishedWork) {
  if ((finishedWork.effectTag & Passive) !== NoEffect) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
      case Block:
        {
          // TODO (#17945) We should call all passive destroy functions (for all fibers)
          // before calling any create functions. The current approach only serializes
          // these for a single fiber.
          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          break;
        }
    }
  }
}

function commitLifeCycles(finishedRoot, current, finishedWork, committedExpirationTime) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        // At this point layout effects have already been destroyed (during mutation phase).
        // This is done to prevent sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        commitHookEffectListMount(Layout | HasEffect, finishedWork);

        return;
      }

    case ClassComponent:
      {
        var instance = finishedWork.stateNode;

        if (finishedWork.effectTag & Update) {
          if (current === null) {
            startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            instance.componentDidMount();
            stopPhaseTimer();
          } else {
            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
            var prevState = current.memoizedState;
            startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            stopPhaseTimer();
          }
        }

        var updateQueue = finishedWork.updateQueue;

        if (updateQueue !== null) {
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              if (instance.props !== finishedWork.memoizedProps) {
                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }

              if (instance.state !== finishedWork.memoizedState) {
                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }
            }
          } // We could update instance props and state here,
          // but instead we rely on them being set during last render.
          // TODO: revisit this when we implement resuming.


          commitUpdateQueue(finishedWork, updateQueue, instance);
        }

        return;
      }

    case HostRoot:
      {
        var _updateQueue = finishedWork.updateQueue;

        if (_updateQueue !== null) {
          var _instance = null;

          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;

              case ClassComponent:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }

          commitUpdateQueue(finishedWork, _updateQueue, _instance);
        }

        return;
      }

    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.

        if (current === null && finishedWork.effectTag & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props);
        }

        return;
      }

    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }

    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }

    case Profiler:
      {
        {
          var onRender = finishedWork.memoizedProps.onRender;

          if (typeof onRender === 'function') {
            {
              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
            }
          }
        }

        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        return;
      }

    case SuspenseListComponent:
    case IncompleteClassComponent:
    case FundamentalComponent:
    case ScopeComponent:
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (isHidden) {
          hideInstance(instance);
        } else {
          unhideInstance(node.stateNode, node.memoizedProps);
        }
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (isHidden) {
          hideTextInstance(_instance3);
        } else {
          unhideTextInstance(_instance3, node.memoizedProps);
        }
      } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
        // Found a nested Suspense component that timed out. Skip over the
        // primary child fragment, which should remain hidden.
        var fallbackChildFragment = node.child.sibling;
        fallbackChildFragment.return = node;
        node = fallbackChildFragment;
        continue;
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag

    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current) {
  var currentRef = current.ref;

  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
} // User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay


function commitUnmount(finishedRoot, current, renderPriorityLevel) {
  onCommitUnmount(current);

  switch (current.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        var updateQueue = current.updateQueue;

        if (updateQueue !== null) {
          var lastEffect = updateQueue.lastEffect;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;

            {
              // When the owner fiber is deleted, the destroy function of a passive
              // effect hook is called during the synchronous commit phase. This is
              // a concession to implementation complexity. Calling it in the
              // passive effect phase (like they usually are, when dependencies
              // change during an update) would require either traversing the
              // children of the deleted fiber again, or including unmount effects
              // as part of the fiber effect list.
              //
              // Because this is during the sync commit phase, we need to change
              // the priority.
              //
              // TODO: Reconsider this implementation trade off.
              var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
              runWithPriority$1(priorityLevel, function () {
                var effect = firstEffect;

                do {
                  var _destroy = effect.destroy;

                  if (_destroy !== undefined) {
                    safelyCallDestroy(current, _destroy);
                  }

                  effect = effect.next;
                } while (effect !== firstEffect);
              });
            }
          }
        }

        return;
      }

    case ClassComponent:
      {
        safelyDetachRef(current);
        var instance = current.stateNode;

        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current, instance);
        }

        return;
      }

    case HostComponent:
      {

        safelyDetachRef(current);
        return;
      }

    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        {
          unmountHostComponents(finishedRoot, current, renderPriorityLevel);
        }

        return;
      }

    case FundamentalComponent:
      {

        return;
      }

    case DehydratedFragment:
      {

        return;
      }

    case ScopeComponent:
      {

        return;
      }
  }
}

function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  // we do an inner loop while we're still inside the host node.
  var node = root;

  while (true) {
    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.

    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
     node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === root) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiber(current) {
  var alternate = current.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.

  current.return = null;
  current.child = null;
  current.memoizedState = null;
  current.updateQueue = null;
  current.dependencies = null;
  current.alternate = null;
  current.firstEffect = null;
  current.lastEffect = null;
  current.pendingProps = null;
  current.memoizedProps = null;
  current.stateNode = null;

  if (alternate !== null) {
    detachFiber(alternate);
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  {
    {
      throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.effectTag & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.effectTag & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  var parent;
  var isContainer;
  var parentStateNode = parentFiber.stateNode;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentStateNode;
      isContainer = false;
      break;

    case HostRoot:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case HostPortal:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case FundamentalComponent:

    // eslint-disable-next-line-no-fallthrough

    default:
      {
        {
          throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
        }
      }

  }

  if (parentFiber.effectTag & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent); // Clear ContentReset from the effect tag

    parentFiber.effectTag &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
  // children to find all the terminal nodes.

  if (isContainer) {
    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
  } else {
    insertOrAppendPlacementNode(finishedWork, before, parent);
  }
}

function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertInContainerBefore(parent, stateNode, before);
    } else {
      appendChildToContainer(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function insertOrAppendPlacementNode(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertBefore(parent, stateNode, before);
    } else {
      appendChild(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNode(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNode(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
  // We only have the top Fiber that was deleted but we need to recurse down its
  // children to find all the terminal nodes.
  var node = current; // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.

  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

  var currentParent;
  var currentParentIsContainer;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;

      findParent: while (true) {
        if (!(parent !== null)) {
          {
            throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var parentStateNode = parent.stateNode;

        switch (parent.tag) {
          case HostComponent:
            currentParent = parentStateNode;
            currentParentIsContainer = false;
            break findParent;

          case HostRoot:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case HostPortal:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

        }

        parent = parent.return;
      }

      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      } // Don't visit children because we already visited them.

    } else if (node.tag === HostPortal) {
      if (node.child !== null) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        currentParentIsContainer = true; // Visit children because portals might contain host components.

        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }

    if (node === current) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === current) {
        return;
      }

      node = node.return;

      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(finishedRoot, current, renderPriorityLevel) {
  {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(finishedRoot, current, renderPriorityLevel);
  }

  detachFiber(current);
}

function commitWork(current, finishedWork) {

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        // Layout effects are destroyed during the mutation phase so that all
        // destroy functions for all fibers are called before any create functions.
        // This prevents sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
        return;
      }

    case ClassComponent:
      {
        return;
      }

    case HostComponent:
      {
        var instance = finishedWork.stateNode;

        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.

          var oldProps = current !== null ? current.memoizedProps : newProps;
          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;

          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps);
          }
        }

        return;
      }

    case HostText:
      {
        if (!(finishedWork.stateNode !== null)) {
          {
            throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.

        var oldText = current !== null ? current.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }

    case HostRoot:
      {
        {
          var _root = finishedWork.stateNode;

          if (_root.hydrate) {
            // We've just hydrated. No need to hydrate again.
            _root.hydrate = false;
            commitHydratedContainer(_root.containerInfo);
          }
        }

        return;
      }

    case Profiler:
      {
        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseComponent(finishedWork);
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case SuspenseListComponent:
      {
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case IncompleteClassComponent:
      {
        return;
      }
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitSuspenseComponent(finishedWork) {
  var newState = finishedWork.memoizedState;
  var newDidTimeout;
  var primaryChildParent = finishedWork;

  if (newState === null) {
    newDidTimeout = false;
  } else {
    newDidTimeout = true;
    primaryChildParent = finishedWork.child;
    markCommitTimeOfFallback();
  }

  if ( primaryChildParent !== null) {
    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
  }
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current = finishedWork.alternate;

    if (current !== null) {
      var prevState = current.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of thenables.
  // For each thenable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var thenables = finishedWork.updateQueue;

  if (thenables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    thenables.forEach(function (thenable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

      if (!retryCache.has(thenable)) {
        {
          if (thenable.__reactDoNotTraceInteractions !== true) {
            retry = tracing.unstable_wrap(retry);
          }
        }

        retryCache.add(thenable);
        thenable.then(retry, retry);
      }
    });
  }
}

function commitResetTextContent(current) {

  resetTextContent(current.stateNode);
}

var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error$1 = errorInfo.value;

    update.payload = function () {
      logError(fiber, errorInfo);
      return getDerivedStateFromError(error$1);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

        logError(fiber, errorInfo);
      }

      var error$1 = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error$1, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          if (fiber.expirationTime !== Sync) {
            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
          }
        }
      }
    };
  } else {
    update.callback = function () {
      markFailedErrorBoundaryForHotReloading(fiber);
    };
  }

  return update;
}

function attachPingListener(root, renderExpirationTime, thenable) {
  // Attach a listener to the promise to "ping" the root and retry. But
  // only if one does not already exist for the current render expiration
  // time (which acts like a "thread ID" here).
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap$1();
    threadIDs = new Set();
    pingCache.set(thenable, threadIDs);
  } else {
    threadIDs = pingCache.get(thenable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(thenable, threadIDs);
    }
  }

  if (!threadIDs.has(renderExpirationTime)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(renderExpirationTime);
    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
    thenable.then(ping, ping);
  }
}

function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
  // The source fiber did not complete.
  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a thenable.
    var thenable = value;

    if ((sourceFiber.mode & BlockingMode) === NoMode) {
      // Reset the memoizedState to what it was before we attempted
      // to render it.
      var currentSource = sourceFiber.alternate;

      if (currentSource) {
        sourceFiber.updateQueue = currentSource.updateQueue;
        sourceFiber.memoizedState = currentSource.memoizedState;
        sourceFiber.expirationTime = currentSource.expirationTime;
      } else {
        sourceFiber.updateQueue = null;
        sourceFiber.memoizedState = null;
      }
    }

    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

    var _workInProgress = returnFiber;

    do {
      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
        // Found the nearest boundary.
        // Stash the promise on the boundary fiber. If the boundary times out, we'll
        // attach another listener to flip the boundary back to its normal state.
        var thenables = _workInProgress.updateQueue;

        if (thenables === null) {
          var updateQueue = new Set();
          updateQueue.add(thenable);
          _workInProgress.updateQueue = updateQueue;
        } else {
          thenables.add(thenable);
        } // If the boundary is outside of blocking mode, we should *not*
        // suspend the commit. Pretend as if the suspended component rendered
        // null and keep rendering. In the commit phase, we'll schedule a
        // subsequent synchronous update to re-render the Suspense.
        //
        // Note: It doesn't matter whether the component that suspended was
        // inside a blocking mode tree. If the Suspense is outside of it, we
        // should *not* suspend the commit.


        if ((_workInProgress.mode & BlockingMode) === NoMode) {
          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
          // But we shouldn't call any lifecycle methods or callbacks. Remove
          // all lifecycle effect tags.

          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;

            if (currentSourceFiber === null) {
              // This is a new mount. Change the tag so it's not mistaken for a
              // completed class component. For example, we should not call
              // componentWillUnmount if it is deleted.
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              // When we try rendering again, we should not reuse the current fiber,
              // since it's known to be in an inconsistent state. Use a force update to
              // prevent a bail out.
              var update = createUpdate(Sync, null);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update);
            }
          } // The source fiber did not complete. Mark it with Sync priority to
          // indicate that it still has pending work.


          sourceFiber.expirationTime = Sync; // Exit without suspending.

          return;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
        // this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.


        attachPingListener(root, renderExpirationTime, thenable);
        _workInProgress.effectTag |= ShouldCapture;
        _workInProgress.expirationTime = renderExpirationTime;
        return;
      } // This boundary already captured during this render. Continue to the next
      // boundary.


      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
    // TODO: Use invariant so the message is stripped in prod?


    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
  } // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.


  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;

          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update2);
          return;
        }

        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

var ceil = Math.ceil;
var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
var NoContext =
/*                    */
0;
var BatchedContext =
/*               */
1;
var EventContext =
/*                 */
2;
var DiscreteEventContext =
/*         */
4;
var LegacyUnbatchedContext =
/*       */
8;
var RenderContext =
/*                */
16;
var CommitContext =
/*                */
32;
var RootIncomplete = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5;
// Describes where we are in the React execution stack
var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The expiration time we're rendering

var renderExpirationTime$1 = NoWork; // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
// This is conceptually a time stamp but expressed in terms of an ExpirationTime
// because we deal mostly with expiration times in the hot path, so this avoids
// the conversion happening in the hot path.

var workInProgressRootLatestProcessedExpirationTime = Sync;
var workInProgressRootLatestSuspenseTimeout = Sync;
var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
// This flag determines if it might be worthwhile to restart if an opportunity
// happens latere.

var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500;
var nextEffect = null;
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsRenderPriority = NoPriority;
var pendingPassiveEffectsExpirationTime = NoWork;
var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0;
var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
// during the commit phase. This enables them to be traced across components
// that spawn new work during render. E.g. hidden boundaries, suspended SSR
// hydration or SuspenseList.

var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
// time). However, if two updates are scheduled within the same event, we
// should treat their start times as simultaneous, even if the actual clock
// time has advanced between the first and second call.
// In other words, because expiration times determine how updates are batched,
// we want all updates of like priority that occur within the same event to
// receive the same expiration time. Otherwise we get tearing.

var currentEventTime = NoWork;
function requestCurrentTimeForUpdate() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return msToExpirationTime(now());
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoWork) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = msToExpirationTime(now());
  return currentEventTime;
}
function getCurrentTime() {
  return msToExpirationTime(now());
}
function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
  var mode = fiber.mode;

  if ((mode & BlockingMode) === NoMode) {
    return Sync;
  }

  var priorityLevel = getCurrentPriorityLevel();

  if ((mode & ConcurrentMode) === NoMode) {
    return priorityLevel === ImmediatePriority ? Sync : Batched;
  }

  if ((executionContext & RenderContext) !== NoContext) {
    // Use whatever time we're already rendering
    // TODO: Should there be a way to opt out, like with `runWithPriority`?
    return renderExpirationTime$1;
  }

  var expirationTime;

  if (suspenseConfig !== null) {
    // Compute an expiration time based on the Suspense timeout.
    expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
  } else {
    // Compute an expiration time based on the Scheduler priority.
    switch (priorityLevel) {
      case ImmediatePriority:
        expirationTime = Sync;
        break;

      case UserBlockingPriority$1:
        // TODO: Rename this to computeUserBlockingExpiration
        expirationTime = computeInteractiveExpiration(currentTime);
        break;

      case NormalPriority:
      case LowPriority:
        // TODO: Handle LowPriority
        // TODO: Rename this to... something better.
        expirationTime = computeAsyncExpiration(currentTime);
        break;

      case IdlePriority:
        expirationTime = Idle;
        break;

      default:
        {
          {
            throw Error( "Expected a valid priority level" );
          }
        }

    }
  } // If we're in the middle of rendering a tree, do not update at the same
  // expiration time that is already rendering.
  // TODO: We shouldn't have to do this if the update is on a different root.
  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
  // the root when we check for this condition.


  if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
    // This is a trick to move this update into a separate batch
    expirationTime -= 1;
  }

  return expirationTime;
}
function scheduleUpdateOnFiber(fiber, expirationTime) {
  checkForNestedUpdates();
  warnAboutRenderPhaseUpdatesInDEV(fiber);
  var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

  if (root === null) {
    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
    return;
  }

  checkForInterruption(fiber, expirationTime);
  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
  // priority as an argument to that function and this one.

  var priorityLevel = getCurrentPriorityLevel();

  if (expirationTime === Sync) {
    if ( // Check if we're inside unbatchedUpdates
    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
    (executionContext & (RenderContext | CommitContext)) === NoContext) {
      // Register pending interactions on the root to avoid losing traced interaction data.
      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
      // root inside of batchedUpdates should be synchronous, but layout updates
      // should be deferred until the end of the batch.

      performSyncWorkOnRoot(root);
    } else {
      ensureRootIsScheduled(root);
      schedulePendingInteractions(root, expirationTime);

      if (executionContext === NoContext) {
        // Flush the synchronous work now, unless we're already working or inside
        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
        // scheduleCallbackForFiber to preserve the ability to schedule a callback
        // without immediately flushing it. We only do this for user-initiated
        // updates, to preserve historical behavior of legacy mode.
        flushSyncCallbackQueue();
      }
    }
  } else {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, expirationTime);
  }

  if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
  // discrete, even inside a discrete event.
  priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
    // This is the result of a discrete event. Track the lowest priority
    // discrete update per root so we can flush them early, if needed.
    if (rootsWithPendingDiscreteUpdates === null) {
      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
    } else {
      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
        rootsWithPendingDiscreteUpdates.set(root, expirationTime);
      }
    }
  }
}
var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
// work without treating it as a typical update that originates from an event;
// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
// on a fiber.

function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
  // Update the source fiber's expiration time
  if (fiber.expirationTime < expirationTime) {
    fiber.expirationTime = expirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < expirationTime) {
    alternate.expirationTime = expirationTime;
  } // Walk the parent path to the root and update the child expiration time.


  var node = fiber.return;
  var root = null;

  if (node === null && fiber.tag === HostRoot) {
    root = fiber.stateNode;
  } else {
    while (node !== null) {
      alternate = node.alternate;

      if (node.childExpirationTime < expirationTime) {
        node.childExpirationTime = expirationTime;

        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
          alternate.childExpirationTime = expirationTime;
        }
      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
        alternate.childExpirationTime = expirationTime;
      }

      if (node.return === null && node.tag === HostRoot) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
  }

  if (root !== null) {
    if (workInProgressRoot === root) {
      // Received an update to a tree that's in the middle of rendering. Mark
      // that's unprocessed work on this root.
      markUnprocessedUpdateTime(expirationTime);

      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        // The root already suspended with a delay, which means this render
        // definitely won't finish. Since we have a new update, let's mark it as
        // suspended now, right before marking the incoming update. This has the
        // effect of interrupting the current render and switching to the update.
        // TODO: This happens to work when receiving an update during the render
        // phase, because of the trick inside computeExpirationForFiber to
        // subtract 1 from `renderExpirationTime` to move it into a
        // separate bucket. But we should probably model it with an exception,
        // using the same mechanism we use to force hydration of a subtree.
        // TODO: This does not account for low pri updates that were already
        // scheduled before the root started rendering. Need to track the next
        // pending expiration time (perhaps by backtracking the return path) and
        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
        markRootSuspendedAtTime(root, renderExpirationTime$1);
      }
    } // Mark that the root has a pending update.


    markRootUpdatedAtTime(root, expirationTime);
  }

  return root;
}

function getNextRootExpirationTimeToWorkOn(root) {
  // Determines the next expiration time that the root should render, taking
  // into account levels that may be suspended, or levels that may have
  // received a ping.
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    return lastExpiredTime;
  } // "Pending" refers to any update that hasn't committed yet, including if it
  // suspended. The "suspended" range is therefore a subset.


  var firstPendingTime = root.firstPendingTime;

  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
    // The highest priority pending time is not suspended. Let's work on that.
    return firstPendingTime;
  } // If the first pending time is suspended, check if there's a lower priority
  // pending level that we know about. Or check if we received a ping. Work
  // on whichever is higher priority.


  var lastPingedTime = root.lastPingedTime;
  var nextKnownPendingLevel = root.nextKnownPendingLevel;
  var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;

  if ( nextLevel <= Idle && firstPendingTime !== nextLevel) {
    // Don't work on Idle/Never priority unless everything else is committed.
    return NoWork;
  }

  return nextLevel;
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the
// expiration time of the existing task is the same as the expiration time of
// the next level that the root has work on. This function is called on every
// update, and right before exiting a task.


function ensureRootIsScheduled(root) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    // Special case: Expired work should flush synchronously.
    root.callbackExpirationTime = Sync;
    root.callbackPriority = ImmediatePriority;
    root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    return;
  }

  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
  var existingCallbackNode = root.callbackNode;

  if (expirationTime === NoWork) {
    // There's nothing to work on.
    if (existingCallbackNode !== null) {
      root.callbackNode = null;
      root.callbackExpirationTime = NoWork;
      root.callbackPriority = NoPriority;
    }

    return;
  } // TODO: If this is an update, we already read the current time. Pass the
  // time as an argument.


  var currentTime = requestCurrentTimeForUpdate();
  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
  // expiration time. Otherwise, we'll cancel it and schedule a new one.

  if (existingCallbackNode !== null) {
    var existingCallbackPriority = root.callbackPriority;
    var existingCallbackExpirationTime = root.callbackExpirationTime;

    if ( // Callback must have the exact same expiration time.
    existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
    existingCallbackPriority >= priorityLevel) {
      // Existing callback is sufficient.
      return;
    } // Need to schedule a new task.
    // TODO: Instead of scheduling a new task, we should be able to change the
    // priority of the existing one.


    cancelCallback(existingCallbackNode);
  }

  root.callbackExpirationTime = expirationTime;
  root.callbackPriority = priorityLevel;
  var callbackNode;

  if (expirationTime === Sync) {
    // Sync React callbacks are scheduled on a special internal queue
    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
  } else {
    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
    // ordering because tasks are processed in timeout order.
    {
      timeout: expirationTimeToMs(expirationTime) - now()
    });
  }

  root.callbackNode = callbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root, didTimeout) {
  // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.
  currentEventTime = NoWork;

  if (didTimeout) {
    // The render task took too long to complete. Mark the current time as
    // expired to synchronously render all expired work in a single batch.
    var currentTime = requestCurrentTimeForUpdate();
    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

    ensureRootIsScheduled(root);
    return null;
  } // Determine the next expiration time to work on, using the fields stored
  // on the root.


  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

  if (expirationTime !== NoWork) {
    var originalCallbackNode = root.callbackNode;

    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error( "Should not already be working." );
      }
    }

    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
      prepareFreshStack(root, expirationTime);
      startWorkOnPendingInteractions(root, expirationTime);
    } // If we have a work-in-progress fiber, it means there's still work to do
    // in this root.


    if (workInProgress !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      var prevInteractions = pushInteractions(root);
      startWorkLoopTimer(workInProgress);

      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);

      {
        popInteractions(prevInteractions);
      }

      if (workInProgressRootExitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        stopInterruptedWorkLoopTimer();
        prepareFreshStack(root, expirationTime);
        markRootSuspendedAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        throw fatalError;
      }

      if (workInProgress !== null) {
        // There's still work left over. Exit without committing.
        stopInterruptedWorkLoopTimer();
      } else {
        // We now have a consistent tree. The next step is either to commit it,
        // or, if something suspended, wait to commit it after a timeout.
        stopFinishedWorkLoopTimer();
        var finishedWork = root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
      }

      ensureRootIsScheduled(root);

      if (root.callbackNode === originalCallbackNode) {
        // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
      }
    }
  }

  return null;
}

function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;

  switch (exitStatus) {
    case RootIncomplete:
    case RootFatalErrored:
      {
        {
          {
            throw Error( "Root did not complete. This is a bug in React." );
          }
        }
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // If this was an async render, the error may have happened due to
        // a mutation in a concurrent event. Try rendering one more time,
        // synchronously, to see if the error goes away. If there are
        // lower priority updates, let's include those, too, in case they
        // fix the inconsistency. Render at Idle to include all updates.
        // If it was Idle or Never or some not-yet-invented time, render
        // at that time.
        markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
        // and therefore not hit this path again.

        break;
      }

    case RootSuspended:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        } // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.
        // If we have processed new updates during this render, we may now
        // have a new loading state ready. We want to ensure that we commit
        // that as soon as possible.


        var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

        if (hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current)) {
          // If we have not processed any new updates during this pass, then
          // this is either a retry of an existing fallback state or a
          // hidden tree. Hidden trees shouldn't be batched with other work
          // and after that's fixed it can only be a retry. We're going to
          // throttle committing retries so that we don't show too many
          // loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            if (workInProgressRootHasPendingPing) {
              var lastPingedTime = root.lastPingedTime;

              if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                // This render was pinged but we didn't get to restart
                // earlier so try restarting now instead.
                root.lastPingedTime = expirationTime;
                prepareFreshStack(root, expirationTime);
                break;
              }
            }

            var nextTime = getNextRootExpirationTimeToWorkOn(root);

            if (nextTime !== NoWork && nextTime !== expirationTime) {
              // There's additional work on this root.
              break;
            }

            if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              root.lastPingedTime = lastSuspendedTime;
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var _lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === _lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        }

        if ( // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current)) {
          // We're suspended in a state that should be avoided. We'll try to
          // avoid committing it for as long as the timeouts let us.
          if (workInProgressRootHasPendingPing) {
            var _lastPingedTime = root.lastPingedTime;

            if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
              // This render was pinged but we didn't get to restart earlier
              // so try restarting now instead.
              root.lastPingedTime = expirationTime;
              prepareFreshStack(root, expirationTime);
              break;
            }
          }

          var _nextTime = getNextRootExpirationTimeToWorkOn(root);

          if (_nextTime !== NoWork && _nextTime !== expirationTime) {
            // There's additional work on this root.
            break;
          }

          if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
            // We should prefer to render the fallback of at the last
            // suspended level. Ping the last suspended level to try
            // rendering it again.
            root.lastPingedTime = _lastSuspendedTime;
            break;
          }

          var _msUntilTimeout;

          if (workInProgressRootLatestSuspenseTimeout !== Sync) {
            // We have processed a suspense config whose expiration time we
            // can use as the timeout.
            _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
          } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
            // This should never normally happen because only new updates
            // cause delayed states, so we should have processed something.
            // However, this could also happen in an offscreen tree.
            _msUntilTimeout = 0;
          } else {
            // If we don't have a suspense config, we're going to use a
            // heuristic to determine how long we can suspend.
            var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
            var currentTimeMs = now();
            var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
            var timeElapsed = currentTimeMs - eventTimeMs;

            if (timeElapsed < 0) {
              // We get this wrong some time since we estimate the time.
              timeElapsed = 0;
            }

            _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
            // event time is exact instead of inferred from expiration time
            // we don't need this.

            if (timeUntilExpirationMs < _msUntilTimeout) {
              _msUntilTimeout = timeUntilExpirationMs;
            }
          } // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        if ( // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
          // If we have exceeded the minimum loading delay, which probably
          // means we have shown a spinner already, we might have to suspend
          // a bit longer to ensure that the spinner is shown for
          // enough time.
          var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

          if (_msUntilTimeout2 > 10) {
            markRootSuspendedAtTime(root, expirationTime);
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
            break;
          }
        }

        commitRoot(root);
        break;
      }

    default:
      {
        {
          {
            throw Error( "Unknown root exit status." );
          }
        }
      }
  }
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  // Check if there's expired work on this root. Otherwise, render at Sync.
  var lastExpiredTime = root.lastExpiredTime;
  var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
    prepareFreshStack(root, expirationTime);
    startWorkOnPendingInteractions(root, expirationTime);
  } // If we have a work-in-progress fiber, it means there's still work to do
  // in this root.


  if (workInProgress !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= RenderContext;
    var prevDispatcher = pushDispatcher();
    var prevInteractions = pushInteractions(root);
    startWorkLoopTimer(workInProgress);

    do {
      try {
        workLoopSync();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      }
    } while (true);

    resetContextDependencies();
    executionContext = prevExecutionContext;
    popDispatcher(prevDispatcher);

    {
      popInteractions(prevInteractions);
    }

    if (workInProgressRootExitStatus === RootFatalErrored) {
      var fatalError = workInProgressRootFatalError;
      stopInterruptedWorkLoopTimer();
      prepareFreshStack(root, expirationTime);
      markRootSuspendedAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
      throw fatalError;
    }

    if (workInProgress !== null) {
      // This is a sync render, so we should have finished the whole tree.
      {
        {
          throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
        }
      }
    } else {
      // We now have a consistent tree. Because this is a sync render, we
      // will commit it even if something suspended.
      stopFinishedWorkLoopTimer();
      root.finishedWork = root.current.alternate;
      root.finishedExpirationTime = expirationTime;
      finishSyncRender(root);
    } // Before exiting, make sure there's a callback scheduled for the next
    // pending level.


    ensureRootIsScheduled(root);
  }

  return null;
}

function finishSyncRender(root) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;
  commitRoot(root);
}
function flushDiscreteUpdates() {
  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
  // those two cases. Need to fix this before exposing flushDiscreteUpdates
  // as a public API.
  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
    {
      if ((executionContext & RenderContext) !== NoContext) {
        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
      }
    } // We're already rendering, so we can't synchronously flush pending work.
    // This is probably a nested event dispatch triggered by a lifecycle/effect,
    // like `el.focus()`. Exit.


    return;
  }

  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
  // they fire before the next serial event.

  flushPassiveEffects();
}
function syncUpdates(fn, a, b, c) {
  return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
}

function flushPendingDiscreteUpdates() {
  if (rootsWithPendingDiscreteUpdates !== null) {
    // For each root with pending discrete updates, schedule a callback to
    // immediately flush them.
    var roots = rootsWithPendingDiscreteUpdates;
    rootsWithPendingDiscreteUpdates = null;
    roots.forEach(function (expirationTime, root) {
      markRootExpiredAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
    }); // Now flush the immediate queue.

    flushSyncCallbackQueue();
  }
}

function batchedUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function batchedEventUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= EventContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function discreteUpdates$1(fn, a, b, c, d) {
  var prevExecutionContext = executionContext;
  executionContext |= DiscreteEventContext;

  try {
    // Should this
    return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function unbatchedUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext &= ~BatchedContext;
  executionContext |= LegacyUnbatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function flushSync(fn, a) {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    {
      {
        throw Error( "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering." );
      }
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
  } finally {
    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
    // Note that this will happen even if batchedUpdates is higher up
    // the stack.

    flushSyncCallbackQueue();
  }
}

function prepareFreshStack(root, expirationTime) {
  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  workInProgress = createWorkInProgress(root.current, null);
  renderExpirationTime$1 = expirationTime;
  workInProgressRootExitStatus = RootIncomplete;
  workInProgressRootFatalError = null;
  workInProgressRootLatestProcessedExpirationTime = Sync;
  workInProgressRootLatestSuspenseTimeout = Sync;
  workInProgressRootCanSuspendUsingConfig = null;
  workInProgressRootNextUnprocessedUpdateTime = NoWork;
  workInProgressRootHasPendingPing = false;

  {
    spawnedWorkDuringRender = null;
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
  }
}

function handleError(root, thrownValue) {
  do {
    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooksAfterThrow();
      resetCurrentFiber();

      if (workInProgress === null || workInProgress.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
        // sibling, or the parent if there are no siblings. But since the root
        // has no siblings nor a parent, we set it to null. Usually this is
        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
        // interntionally not calling those, we need set it here.
        // TODO: Consider calling `unwindWork` to pop the contexts.

        workInProgress = null;
        return null;
      }

      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
      }

      throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
      workInProgress = completeUnitOfWork(workInProgress);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;
      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher(root) {
  var prevDispatcher = ReactCurrentDispatcher$1.current;
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher$1.current = prevDispatcher;
}

function pushInteractions(root) {
  {
    var prevInteractions = tracing.__interactionsRef.current;
    tracing.__interactionsRef.current = root.memoizedInteractions;
    return prevInteractions;
  }
}

function popInteractions(prevInteractions) {
  {
    tracing.__interactionsRef.current = prevInteractions;
  }
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now();
}
function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
  if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
    workInProgressRootLatestProcessedExpirationTime = expirationTime;
  }

  if (suspenseConfig !== null) {
    if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
    }
  }
}
function markUnprocessedUpdateTime(expirationTime) {
  if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
  }
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there's a lower priority update somewhere else in the tree.


  if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
    // Mark the current render as suspended, and then mark that there's a
    // pending update.
    // TODO: This should immediately interrupt the current render, instead
    // of waiting until the next time we yield.
    markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
    markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
  }
}
function renderDidError() {
  if (workInProgressRootExitStatus !== RootCompleted) {
    workInProgressRootExitStatus = RootErrored;
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootIncomplete;
}

function inferTimeFromExpirationTime(expirationTime) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
}

function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time by subtracting the timeout
  // that was added to the event time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current = unitOfWork.alternate;
  startWorkTimer(unitOfWork);
  setCurrentFiber(unitOfWork);
  var next;

  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    next = completeUnitOfWork(unitOfWork);
  }

  ReactCurrentOwner$2.current = null;
  return next;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  workInProgress = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current = workInProgress.alternate;
    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
      setCurrentFiber(workInProgress);
      var next = void 0;

      if ( (workInProgress.mode & ProfileMode) === NoMode) {
        next = completeWork(current, workInProgress, renderExpirationTime$1);
      } else {
        startProfilerTimer(workInProgress);
        next = completeWork(current, workInProgress, renderExpirationTime$1); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
      }

      stopWorkTimer(workInProgress);
      resetCurrentFiber();
      resetChildExpirationTime(workInProgress);

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        return next;
      }

      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
      (returnFiber.effectTag & Incomplete) === NoEffect) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }

        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }

          returnFiber.lastEffect = workInProgress.lastEffect;
        } // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if needed,
        // by doing multiple passes over the effect list. We don't want to
        // schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.


        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
        // list. PerformedWork effect is read by React DevTools but shouldn't be
        // committed.

        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }

          returnFiber.lastEffect = workInProgress;
        }
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(workInProgress); // Because this fiber did not complete, don't reset its expiration time.


      if ( (workInProgress.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

        var actualDuration = workInProgress.actualDuration;
        var child = workInProgress.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        workInProgress.actualDuration = actualDuration;
      }

      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        // TODO: The name stopFailedWorkTimer is misleading because Suspense
        // also captures and restarts.
        stopFailedWorkTimer(workInProgress);
        _next.effectTag &= HostEffectMask;
        return _next;
      }

      stopWorkTimer(workInProgress);

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.effectTag |= Incomplete;
      }
    }

    var siblingFiber = workInProgress.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      return siblingFiber;
    } // Otherwise, return to the parent


    workInProgress = returnFiber;
  } while (workInProgress !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootCompleted;
  }

  return null;
}

function getRemainingExpirationTime(fiber) {
  var updateExpirationTime = fiber.expirationTime;
  var childExpirationTime = fiber.childExpirationTime;
  return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
}

function resetChildExpirationTime(completedWork) {
  if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

  if ( (completedWork.mode & ProfileMode) !== NoMode) {
    // In profiling mode, resetChildExpirationTime is also used to reset
    // profiler durations.
    var actualDuration = completedWork.actualDuration;
    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration. If
    // the fiber has not been cloned though, (meaning no work was done), then
    // this value will reflect the amount of time spent working on a previous
    // render. In that case it should not bubble. We determine whether it was
    // cloned by comparing the child pointer.

    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
    var child = completedWork.child;

    while (child !== null) {
      var childUpdateExpirationTime = child.expirationTime;
      var childChildExpirationTime = child.childExpirationTime;

      if (childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childUpdateExpirationTime;
      }

      if (childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childChildExpirationTime;
      }

      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }

      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }

    completedWork.actualDuration = actualDuration;
    completedWork.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = completedWork.child;

    while (_child !== null) {
      var _childUpdateExpirationTime = _child.expirationTime;
      var _childChildExpirationTime = _child.childExpirationTime;

      if (_childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childUpdateExpirationTime;
      }

      if (_childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childChildExpirationTime;
      }

      _child = _child.sibling;
    }
  }

  completedWork.childExpirationTime = newChildExpirationTime;
}

function commitRoot(root) {
  var renderPriorityLevel = getCurrentPriorityLevel();
  runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
  return null;
}

function commitRootImpl(root, renderPriorityLevel) {
  do {
    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
    // means `flushPassiveEffects` will sometimes result in additional
    // passive effects. So we need to keep flushing in a loop until there are
    // no more pending effects.
    // TODO: Might be better if `flushPassiveEffects` did not automatically
    // flush synchronous work at the end, to avoid factoring hazards like this.
    flushPassiveEffects();
  } while (rootWithPendingPassiveEffects !== null);

  flushRenderPhaseStrictModeWarningsInDEV();

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  var finishedWork = root.finishedWork;
  var expirationTime = root.finishedExpirationTime;

  if (finishedWork === null) {
    return null;
  }

  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;

  if (!(finishedWork !== root.current)) {
    {
      throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
    }
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null;
  root.callbackExpirationTime = NoWork;
  root.callbackPriority = NoPriority;
  root.nextKnownPendingLevel = NoWork;
  startCommitTimer(); // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
  markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    renderExpirationTime$1 = NoWork;
  } // This indicates that the last root we worked on is not the same one that
  // we're committing now. This most commonly happens when a suspended root
  // times out.
  // Get the list of effects.


  var firstEffect;

  if (finishedWork.effectTag > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if it
    // had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  if (firstEffect !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;
    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    startCommitSnapshotEffectsTimer();
    prepareForCommit(root.containerInfo);
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var error = clearCaughtError();
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitSnapshotEffectsTimer();

    {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    } // The next phase is the mutation phase, where we mutate the host tree.


    startCommitHostEffectsTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitHostEffectsTimer();
    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
    // the host tree after it's been mutated. The idiomatic use case for this is
    // layout, but class component lifecycles also fire here for legacy reasons.

    startCommitLifeCyclesTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error2 = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error2);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitLifeCyclesTimer();
    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
    // opportunity to paint.

    requestPaint();

    {
      popInteractions(prevInteractions);
    }

    executionContext = prevExecutionContext;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    startCommitSnapshotEffectsTimer();
    stopCommitSnapshotEffectsTimer();

    {
      recordCommitTime();
    }

    startCommitHostEffectsTimer();
    stopCommitHostEffectsTimer();
    startCommitLifeCyclesTimer();
    stopCommitLifeCyclesTimer();
  }

  stopCommitTimer();
  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsExpirationTime = expirationTime;
    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
  } else {
    // We are done with the effect chain at this point so let's clear the
    // nextEffect pointers to assist with GC. If we have passive effects, we'll
    // clear this in flushPassiveEffects.
    nextEffect = firstEffect;

    while (nextEffect !== null) {
      var nextNextEffect = nextEffect.nextEffect;
      nextEffect.nextEffect = null;
      nextEffect = nextNextEffect;
    }
  } // Check if there's remaining work on this root


  var remainingExpirationTime = root.firstPendingTime;

  if (remainingExpirationTime !== NoWork) {
    {
      if (spawnedWorkDuringRender !== null) {
        var expirationTimes = spawnedWorkDuringRender;
        spawnedWorkDuringRender = null;

        for (var i = 0; i < expirationTimes.length; i++) {
          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
        }
      }

      schedulePendingInteractions(root, remainingExpirationTime);
    }
  } else {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  {
    if (!rootDidHavePassiveEffects) {
      // If there are no passive effects, then we can complete the pending interactions.
      // Otherwise, we'll wait until after the passive effects are flushed.
      // Wait to do this until after remaining work has been scheduled,
      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
      finishPendingInteractions(root, expirationTime);
    }
  }

  if (remainingExpirationTime === Sync) {
    // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.
    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  }

  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.

  ensureRootIsScheduled(root);

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var _error3 = firstUncaughtError;
    firstUncaughtError = null;
    throw _error3;
  }

  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
    // This is a legacy edge case. We just committed the initial mount of
    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
    // synchronously, but layout updates should be deferred until the end
    // of the batch.
    return null;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbackQueue();
  return null;
}

function commitBeforeMutationEffects() {
  while (nextEffect !== null) {
    var effectTag = nextEffect.effectTag;

    if ((effectTag & Snapshot) !== NoEffect) {
      setCurrentFiber(nextEffect);
      recordEffect();
      var current = nextEffect.alternate;
      commitBeforeMutationLifeCycles(current, nextEffect);
      resetCurrentFiber();
    }

    if ((effectTag & Passive) !== NoEffect) {
      // If there are passive effects, schedule a callback to flush at
      // the earliest opportunity.
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }

    nextEffect = nextEffect.nextEffect;
  }
}

function commitMutationEffects(root, renderPriorityLevel) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (effectTag & Ref) {
      var current = nextEffect.alternate;

      if (current !== null) {
        commitDetachRef(current);
      }
    } // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every possible
    // bitmap value, we remove the secondary effects from the effect tag and
    // switch on that value.


    var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

    switch (primaryEffectTag) {
      case Placement:
        {
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted does
          // and isMounted is deprecated anyway so we should be able to kill this.

          nextEffect.effectTag &= ~Placement;
          break;
        }

      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.

          nextEffect.effectTag &= ~Placement; // Update

          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }

      case Hydrating:
        {
          nextEffect.effectTag &= ~Hydrating;
          break;
        }

      case HydratingAndUpdate:
        {
          nextEffect.effectTag &= ~Hydrating; // Update

          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }

      case Update:
        {
          var _current3 = nextEffect.alternate;
          commitWork(_current3, nextEffect);
          break;
        }

      case Deletion:
        {
          commitDeletion(root, nextEffect, renderPriorityLevel);
          break;
        }
    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.


    recordEffect();
    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function commitLayoutEffects(root, committedExpirationTime) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & (Update | Callback)) {
      recordEffect();
      var current = nextEffect.alternate;
      commitLifeCycles(root, current, nextEffect);
    }

    if (effectTag & Ref) {
      recordEffect();
      commitAttachRef(nextEffect);
    }

    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function flushPassiveEffects() {
  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
    pendingPassiveEffectsRenderPriority = NoPriority;
    return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
  }
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  }

  var root = rootWithPendingPassiveEffects;
  var expirationTime = pendingPassiveEffectsExpirationTime;
  rootWithPendingPassiveEffects = null;
  pendingPassiveEffectsExpirationTime = NoWork;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Cannot flush passive effects while already rendering." );
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  var prevInteractions = pushInteractions(root);

  {
    // Note: This currently assumes there are no passive effects on the root fiber
    // because the root is not part of its own effect list.
    // This could change in the future.
    var _effect2 = root.current.firstEffect;

    while (_effect2 !== null) {
      {
        setCurrentFiber(_effect2);
        invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);

        if (hasCaughtError()) {
          if (!(_effect2 !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error5 = clearCaughtError();

          captureCommitPhaseError(_effect2, _error5);
        }

        resetCurrentFiber();
      }

      var nextNextEffect = _effect2.nextEffect; // Remove nextEffect pointer to assist GC

      _effect2.nextEffect = null;
      _effect2 = nextNextEffect;
    }
  }

  {
    popInteractions(prevInteractions);
    finishPendingInteractions(root, expirationTime);
  }

  executionContext = prevExecutionContext;
  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
  // exceeds the limit, we'll fire a warning.

  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValue(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
  enqueueUpdate(rootFiber, update);
  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, Sync);
  }
}

function captureCommitPhaseError(sourceFiber, error) {
  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    return;
  }

  var fiber = sourceFiber.return;

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, // TODO: This is always sync
        Sync);
        enqueueUpdate(fiber, update);
        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, Sync);
        }

        return;
      }
    }

    fiber = fiber.return;
  }
}
function pingSuspendedRoot(root, thenable, suspendedTime) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(thenable);
  }

  if (workInProgressRoot === root && renderExpirationTime$1 === suspendedTime) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, we'll always suspend so we can always
    // restart. If we're suspended without any updates, it might be a retry.
    // If it's early in the retry we can restart. We can't know for sure
    // whether we'll eventually process an update during this render pass,
    // but it's somewhat unlikely that we get to a ping before that, since
    // getting to the root most update is usually very fast.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root. Don't need to schedule a ping because
      // we're already working on this tree.
      prepareFreshStack(root, renderExpirationTime$1);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootHasPendingPing = true;
    }

    return;
  }

  if (!isRootSuspendedAtTime(root, suspendedTime)) {
    // The root is no longer suspended at this time.
    return;
  }

  var lastPingedTime = root.lastPingedTime;

  if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
    // There's already a lower priority ping scheduled.
    return;
  } // Mark the time at which this ping was scheduled.


  root.lastPingedTime = suspendedTime;

  ensureRootIsScheduled(root);
  schedulePendingInteractions(root, suspendedTime);
}

function retryTimedOutBoundary(boundaryFiber, retryTime) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new expiration time.
  if (retryTime === NoWork) {
    var suspenseConfig = null; // Retries don't carry over the already committed update.

    var currentTime = requestCurrentTimeForUpdate();
    retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
  } // TODO: Special case idle priority?


  var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, retryTime);
  }
}
function resolveRetryThenable(boundaryFiber, thenable) {
  var retryTime = NoWork; // Default

  var retryCache;

  {
    retryCache = boundaryFiber.stateNode;
  }

  if (retryCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(thenable);
  }

  retryTimedOutBoundary(boundaryFiber, retryTime);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

  if (busyMinDurationMs <= 0) {
    return 0;
  }

  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

  var currentTimeMs = now();
  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
  var timeElapsed = currentTimeMs - eventTimeMs;

  if (timeElapsed <= busyDelayMs) {
    // If we haven't yet waited longer than the initial delay, we don't
    // have to wait any additional time.
    return 0;
  }

  var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

  return msUntilTimeout;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;

    {
      {
        throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
      }
    }
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;

      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

function stopFinishedWorkLoopTimer() {
  var didCompleteRoot = true;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function stopInterruptedWorkLoopTimer() {
  // TODO: Track which fiber caused the interruption.
  var didCompleteRoot = false;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
  if ( workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
    interruptedBy = fiberThatReceivedUpdate;
  }
}

var didWarnStateUpdateForUnmountedComponent = null;

function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
  {
    var tag = fiber.tag;

    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    }
    // the problematic code almost always lies inside that component.


    var componentName = getComponentName(fiber.type) || 'ReactComponent';

    if (didWarnStateUpdateForUnmountedComponent !== null) {
      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForUnmountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
    }

    error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
  }
}

var beginWork$1;

{
  var dummyFiber = null;

  beginWork$1 = function (current, unitOfWork, expirationTime) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork(current, unitOfWork, expirationTime);
    } catch (originalError) {
      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises. Treat everything else like an error.
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if ( unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, expirationTime);

      if (hasCaughtError()) {
        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
        // Rethrow this error instead of the original one.

        throw replayError;
      } else {
        // This branch is reachable if the render phase is impure.
        throw originalError;
      }
    }
  };
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInRenderForAnotherComponent;

{
  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
}

function warnAboutRenderPhaseUpdatesInDEV(fiber) {
  {
    if (isRendering && (executionContext & RenderContext) !== NoContext) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

            var dedupeKey = renderingComponentName;

            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://fb.me/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
            }

            break;
          }

        case ClassComponent:
          {
            if (!didWarnAboutUpdateInRender) {
              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

              didWarnAboutUpdateInRender = true;
            }

            break;
          }
      }
    }
  }
} // a 'shared' variable that changes when act() opens/closes in tests.


var IsThisRendererActing = {
  current: false
};
function warnIfNotScopedWithMatchingAct(fiber) {
  {
    if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
      error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
    }
  }
}
function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
  {
    if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
  {
    if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
// scheduler is the actual recommendation. The alternative could be a testing build,
// a new lib, or whatever; we dunno just yet. This message is for early adopters
// to get their tests right.

function warnIfUnmockedScheduler(fiber) {
  {
    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
        didWarnAboutUnmockedScheduler = true;

        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
      }
    }
  }
}

function computeThreadID(root, expirationTime) {
  // Interaction threads are unique per root and expiration time.
  return expirationTime * 1000 + root.interactionThreadID;
}

function markSpawnedWork(expirationTime) {

  if (spawnedWorkDuringRender === null) {
    spawnedWorkDuringRender = [expirationTime];
  } else {
    spawnedWorkDuringRender.push(expirationTime);
  }
}

function scheduleInteractions(root, expirationTime, interactions) {

  if (interactions.size > 0) {
    var pendingInteractionMap = root.pendingInteractionMap;
    var pendingInteractions = pendingInteractionMap.get(expirationTime);

    if (pendingInteractions != null) {
      interactions.forEach(function (interaction) {
        if (!pendingInteractions.has(interaction)) {
          // Update the pending async work count for previously unscheduled interaction.
          interaction.__count++;
        }

        pendingInteractions.add(interaction);
      });
    } else {
      pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

      interactions.forEach(function (interaction) {
        interaction.__count++;
      });
    }

    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);
      subscriber.onWorkScheduled(interactions, threadID);
    }
  }
}

function schedulePendingInteractions(root, expirationTime) {

  scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
}

function startWorkOnPendingInteractions(root, expirationTime) {
  // we can accurately attribute time spent working on it, And so that cascading
  // work triggered during the render phase will be associated with it.


  var interactions = new Set();
  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
    if (scheduledExpirationTime >= expirationTime) {
      scheduledInteractions.forEach(function (interaction) {
        return interactions.add(interaction);
      });
    }
  }); // Store the current set of interactions on the FiberRoot for a few reasons:
  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
  // without having to recalculate it. We will also use it in commitWork() to
  // pass to any Profiler onRender() hooks. This also provides DevTools with a
  // way to access it when the onCommitRoot() hook is called.

  root.memoizedInteractions = interactions;

  if (interactions.size > 0) {
    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);

      try {
        subscriber.onWorkStarted(interactions, threadID);
      } catch (error) {
        // If the subscriber throws, rethrow it in a separate task
        scheduleCallback(ImmediatePriority, function () {
          throw error;
        });
      }
    }
  }
}

function finishPendingInteractions(root, committedExpirationTime) {

  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
  var subscriber;

  try {
    subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null && root.memoizedInteractions.size > 0) {
      var threadID = computeThreadID(root, committedExpirationTime);
      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
    }
  } catch (error) {
    // If the subscriber throws, rethrow it in a separate task
    scheduleCallback(ImmediatePriority, function () {
      throw error;
    });
  } finally {
    // Clear completed interactions from the pending Map.
    // Unless the render was suspended or cascading work was scheduled,
    // In which case– leave pending interactions until the subsequent render.
    var pendingInteractionMap = root.pendingInteractionMap;
    pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
      // Only decrement the pending interaction count if we're done.
      // If there's still work at the current priority,
      // That indicates that we are waiting for suspense data.
      if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
        pendingInteractionMap.delete(scheduledExpirationTime);
        scheduledInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              // If the subscriber throws, rethrow it in a separate task
              scheduleCallback(ImmediatePriority, function () {
                throw error;
              });
            }
          }
        });
      }
    });
  }
}

var onScheduleFiberRoot = null;
var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    if (true) {
      // Only used by Fast Refresh
      if (typeof hook.onScheduleFiberRoot === 'function') {
        onScheduleFiberRoot = function (root, children) {
          try {
            hook.onScheduleFiberRoot(rendererID, root, children);
          } catch (err) {
            if ( true && !hasLoggedError) {
              hasLoggedError = true;

              error('React instrumentation encountered an error: %s', err);
            }
          }
        };
      }
    }

    onCommitFiberRoot = function (root, expirationTime) {
      try {
        var didError = (root.current.effectTag & DidCapture) === DidCapture;

        if (enableProfilerTimer) {
          var currentTime = getCurrentTime();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
        } else {
          hook.onCommitFiberRoot(rendererID, root, undefined, didError);
        }
      } catch (err) {
        if (true) {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    };

    onCommitFiberUnmount = function (fiber) {
      try {
        hook.onCommitFiberUnmount(rendererID, fiber);
      } catch (err) {
        if (true) {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    };
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      error('React instrumentation encountered an error: %s.', err);
    }
  } // DevTools exists


  return true;
}
function onScheduleRoot(root, children) {
  if (typeof onScheduleFiberRoot === 'function') {
    onScheduleFiberRoot(root, children);
  }
}
function onCommitRoot(root, expirationTime) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root, expirationTime);
  }
}
function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    var testMap = new Map([[nonExtensibleObject, null]]);
    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

var debugCounter = 1;

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.effectTag = NoEffect;
  this.nextEffect = null;
  this.firstEffect = null;
  this.lastEffect = null;
  this.expirationTime = NoWork;
  this.childExpirationTime = NoWork;
  this.alternate = null;

  {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  } // This is normally DEV-only except www when it adds listeners.
  // TODO: remove the User Timing integration in favor of Root Events.


  {
    this._debugID = debugCounter++;
    this._debugIsCurrentlyTiming = false;
  }

  {
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      {
        workInProgress._debugID = current._debugID;
      }

      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  workInProgress.childExpirationTime = current.childExpirationTime;
  workInProgress.expirationTime = current.expirationTime;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    expirationTime: currentDependencies.expirationTime,
    firstContext: currentDependencies.firstContext,
    responders: currentDependencies.responders
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderExpirationTime) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect tag but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

  workInProgress.nextEffect = null;
  workInProgress.firstEffect = null;
  workInProgress.lastEffect = null;
  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childExpirationTime = NoWork;
    workInProgress.expirationTime = renderExpirationTime;
    workInProgress.child = null;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      expirationTime: currentDependencies.expirationTime,
      firstContext: currentDependencies.firstContext,
      responders: currentDependencies.responders
    };

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode | BlockingMode | StrictMode;
  } else if (tag === BlockingRoot) {
    mode = BlockingMode | StrictMode;
  } else {
    mode = NoMode;
  }

  if ( isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, expirationTime) {
  var fiber;
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = Mode;
        mode |= ConcurrentMode | BlockingMode | StrictMode;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;

              case REACT_BLOCK_TYPE:
                fiberTag = Block;
                break getTag;

            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentName(owner.type) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          {
            {
              throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
            }
          }
        }
    }
  }

  fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromElement(element, mode, expirationTime) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, expirationTime, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
  {
    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
      error('Profiler must specify an "id" string and "onRender" function as props');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.type = REACT_PROFILER_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  fiber.type = REACT_SUSPENSE_TYPE;
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

  {
    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.
    fiber.type = REACT_SUSPENSE_LIST_TYPE;
  }

  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromText(content, mode, expirationTime) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

  fiber.elementType = 'DELETED';
  fiber.type = 'DELETED';
  return fiber;
}
function createFiberFromPortal(portal, mode, expirationTime) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.effectTag = source.effectTag;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.expirationTime = source.expirationTime;
  target.childExpirationTime = source.childExpirationTime;
  target.alternate = source.alternate;

  {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  {
    target._debugID = source._debugID;
  }

  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate) {
  this.tag = tag;
  this.current = null;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.pingCache = null;
  this.finishedExpirationTime = NoWork;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.hydrate = hydrate;
  this.callbackNode = null;
  this.callbackPriority = NoPriority;
  this.firstPendingTime = NoWork;
  this.firstSuspendedTime = NoWork;
  this.lastSuspendedTime = NoWork;
  this.nextKnownPendingLevel = NoWork;
  this.lastPingedTime = NoWork;
  this.lastExpiredTime = NoWork;

  {
    this.interactionThreadID = tracing.unstable_getThreadID();
    this.memoizedInteractions = new Set();
    this.pendingInteractionMap = new Map();
  }
}

function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate);
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;
  initializeUpdateQueue(uninitializedFiber);
  return root;
}
function isRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;
  return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
}
function markRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;

  if (firstSuspendedTime < expirationTime) {
    root.firstSuspendedTime = expirationTime;
  }

  if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
    root.lastSuspendedTime = expirationTime;
  }

  if (expirationTime <= root.lastPingedTime) {
    root.lastPingedTime = NoWork;
  }

  if (expirationTime <= root.lastExpiredTime) {
    root.lastExpiredTime = NoWork;
  }
}
function markRootUpdatedAtTime(root, expirationTime) {
  // Update the range of pending times
  var firstPendingTime = root.firstPendingTime;

  if (expirationTime > firstPendingTime) {
    root.firstPendingTime = expirationTime;
  } // Update the range of suspended times. Treat everything lower priority or
  // equal to this update as unsuspended.


  var firstSuspendedTime = root.firstSuspendedTime;

  if (firstSuspendedTime !== NoWork) {
    if (expirationTime >= firstSuspendedTime) {
      // The entire suspended range is now unsuspended.
      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
    } else if (expirationTime >= root.lastSuspendedTime) {
      root.lastSuspendedTime = expirationTime + 1;
    } // This is a pending level. Check if it's higher priority than the next
    // known pending level.


    if (expirationTime > root.nextKnownPendingLevel) {
      root.nextKnownPendingLevel = expirationTime;
    }
  }
}
function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
  // Update the range of pending times
  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
  // equal to this update as unsuspended.

  if (finishedExpirationTime <= root.lastSuspendedTime) {
    // The entire suspended range is now unsuspended.
    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
  } else if (finishedExpirationTime <= root.firstSuspendedTime) {
    // Part of the suspended range is now unsuspended. Narrow the range to
    // include everything between the unsuspended time (non-inclusive) and the
    // last suspended time.
    root.firstSuspendedTime = finishedExpirationTime - 1;
  }

  if (finishedExpirationTime <= root.lastPingedTime) {
    // Clear the pinged time
    root.lastPingedTime = NoWork;
  }

  if (finishedExpirationTime <= root.lastExpiredTime) {
    // Clear the expired time
    root.lastExpiredTime = NoWork;
  }
}
function markRootExpiredAtTime(root, expirationTime) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
    root.lastExpiredTime = expirationTime;
  }
}

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        {
          {
            throw Error( "Unable to find node on an unmounted component." );
          }
        }
      } else {
        {
          {
            throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
          }
        }
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictMode) {
      var componentName = getComponentName(fiber.type) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;

        if (fiber.mode & StrictMode) {
          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        } else {
          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        }
      }
    }

    return hostFiber.stateNode;
  }
}

function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
  return createFiberRoot(containerInfo, tag, hydrate);
}
function updateContainer(element, container, parentComponent, callback) {
  {
    onScheduleRoot(container, element);
  }

  var current$1 = container.current;
  var currentTime = requestCurrentTimeForUpdate();

  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfUnmockedScheduler(current$1);
      warnIfNotScopedWithMatchingAct(current$1);
    }
  }

  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;

      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    {
      if (typeof callback !== 'function') {
        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
      }
    }

    update.callback = callback;
  }

  enqueueUpdate(current$1, update);
  scheduleWork(current$1, expirationTime);
  return expirationTime;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}

function markRetryTimeImpl(fiber, retryTime) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    if (suspenseState.retryTime < retryTime) {
      suspenseState.retryTime = retryTime;
    }
  }
} // Increases the priority of thennables when they resolve within this boundary.


function markRetryTimeIfNotHydrated(fiber, retryTime) {
  markRetryTimeImpl(fiber, retryTime);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryTimeImpl(alternate, retryTime);
  }
}

function attemptUserBlockingHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function attemptContinuousHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  scheduleWork(fiber, ContinuousHydration);
  markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
}
function attemptHydrationAtCurrentPriority$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var currentTime = requestCurrentTimeForUpdate();
  var expTime = computeExpirationForFiber(currentTime, fiber, null);
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  if (hostFiber.tag === FundamentalComponent) {
    return hostFiber.stateNode.instance;
  }

  return hostFiber.stateNode;
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideProps = null;
var scheduleUpdate = null;
var setSuspenseHandler = null;

{
  var copyWithSetImpl = function (obj, path, idx, value) {
    if (idx >= path.length) {
      return value;
    }

    var key = path[idx];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    if (currentHook !== null) {
      var newState = copyWithSet(currentHook.memoizedState, path, value);
      currentHook.memoizedState = newState;
      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleWork(fiber, Sync);
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleWork(fiber, Sync);
  };

  scheduleUpdate = function (fiber) {
    scheduleWork(fiber, Sync);
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals(_assign({}, devToolsConfig, {
    overrideHookState: overrideHookState,
    overrideProps: overrideProps,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: function (fiber) {
      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    },
    findFiberByHostInstance: function (instance) {
      if (!findFiberByHostInstance) {
        // Might not be implemented by the renderer.
        return null;
      }

      return findFiberByHostInstance(instance);
    },
    // React Refresh
    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
    scheduleRefresh:  scheduleRefresh ,
    scheduleRoot:  scheduleRoot ,
    setRefreshHandler:  setRefreshHandler ,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber:  function () {
      return current;
    } 
  }));
}
var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;

function ReactDOMRoot(container, options) {
  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
}

function ReactDOMBlockingRoot(container, tag, options) {
  this._internalRoot = createRootImpl(container, tag, options);
}

ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
  var root = this._internalRoot;

  {
    if (typeof arguments[1] === 'function') {
      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }

    var container = root.containerInfo;

    if (container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(root.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
        }
      }
    }
  }

  updateContainer(children, root, null, null);
};

ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
  {
    if (typeof arguments[0] === 'function') {
      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }
  }

  var root = this._internalRoot;
  var container = root.containerInfo;
  updateContainer(null, root, null, function () {
    unmarkContainerAsRoot(container);
  });
};

function createRootImpl(container, tag, options) {
  // Tag is either LegacyRoot or Concurrent Root
  var hydrate = options != null && options.hydrate === true;
  var hydrationCallbacks = options != null && options.hydrationOptions || null;
  var root = createContainer(container, tag, hydrate);
  markContainerAsRoot(root.current, container);

  if (hydrate && tag !== LegacyRoot) {
    var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
    eagerlyTrapReplayableEvents(container, doc);
  }

  return root;
}
function createLegacyRoot(container, options) {
  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
}
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
var topLevelUpdateWarnings;
var warnedAboutHydrateAPI = false;

{
  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
        }
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
    }

    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
    }
  };
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

function legacyCreateRootFromDOMContainer(container, forceHydrate) {
  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

  if (!shouldHydrate) {
    var warned = false;
    var rootSibling;

    while (rootSibling = container.lastChild) {
      {
        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
          warned = true;

          error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
        }
      }

      container.removeChild(rootSibling);
    }
  }

  {
    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
      warnedAboutHydrateAPI = true;

      warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
    }
  }

  return createLegacyRoot(container, shouldHydrate ? {
    hydrate: true
  } : undefined);
}

function warnOnInvalidCallback$1(callback, callerName) {
  {
    if (callback !== null && typeof callback !== 'function') {
      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  }
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  {
    topLevelUpdateWarnings(container);
    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
  // member of intersection type." Whyyyyyy.


  var root = container._reactRootContainer;
  var fiberRoot;

  if (!root) {
    // Initial mount
    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);
        originalCallback.call(instance);
      };
    } // Initial mount should not be batched.


    unbatchedUpdates(function () {
      updateContainer(children, fiberRoot, parentComponent, callback);
    });
  } else {
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var _originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);

        _originalCallback.call(instance);
      };
    } // Update


    updateContainer(children, fiberRoot, parentComponent, callback);
  }

  return getPublicRootInstance(fiberRoot);
}

function findDOMNode(componentOrElement) {
  {
    var owner = ReactCurrentOwner$3.current;

    if (owner !== null && owner.stateNode !== null) {
      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

      if (!warnedAboutRefsInRender) {
        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
      }

      owner.stateNode._warnedAboutRefsInRender = true;
    }
  }

  if (componentOrElement == null) {
    return null;
  }

  if (componentOrElement.nodeType === ELEMENT_NODE) {
    return componentOrElement;
  }

  {
    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
  }
}
function hydrate(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
    }
  } // TODO: throw or warn if we couldn't hydrate?


  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
}
function render(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
    }
  }

  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
}
function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  if (!isValidContainer(containerNode)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  if (!(parentComponent != null && has(parentComponent))) {
    {
      throw Error( "parentComponent must be a valid React Component" );
    }
  }

  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
}
function unmountComponentAtNode(container) {
  if (!isValidContainer(container)) {
    {
      throw Error( "unmountComponentAtNode(...): Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
    }
  }

  if (container._reactRootContainer) {
    {
      var rootEl = getReactRootElementInContainer(container);
      var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);

      if (renderedByDifferentReact) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }
    } // Unmount should not be batched.


    unbatchedUpdates(function () {
      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
        // $FlowFixMe This should probably use `delete container._reactRootContainer`
        container._reactRootContainer = null;
        unmarkContainerAsRoot(container);
      });
    }); // If you call unmountComponentAtNode twice in quick succession, you'll
    // get `true` twice. That's probably fine?

    return true;
  } else {
    {
      var _rootEl = getReactRootElementInContainer(container);

      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

      if (hasNonRootReactChild) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
      }
    }

    return false;
  }
}

function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

var ReactVersion = '16.13.1';

setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
setAttemptContinuousHydration(attemptContinuousHydration$1);
setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
var didWarnAboutUnstableCreatePortal = false;

{
  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
  }
}

setRestoreImplementation(restoreControlledState$3);
setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

function createPortal$1(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  } // TODO: pass ReactDOM portal implementation as third argument
  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


  return createPortal(children, container, null, key);
}

function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
}

function unstable_createPortal(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  {
    if (!didWarnAboutUnstableCreatePortal) {
      didWarnAboutUnstableCreatePortal = true;

      warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
    }
  }

  return createPortal$1(children, container, key);
}

var Internals = {
  // Keep in sync with ReactDOMUnstableNativeDependencies.js
  // ReactTestUtils.js, and ReactTestUtilsAct.js. This is an array for better minification.
  Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
};
var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType:  1 ,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

      if (/^(https?|file):$/.test(protocol)) {
        // eslint-disable-next-line react-internal/no-production-logging
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}

exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
exports.createPortal = createPortal$1;
exports.findDOMNode = findDOMNode;
exports.flushSync = flushSync;
exports.hydrate = hydrate;
exports.render = render;
exports.unmountComponentAtNode = unmountComponentAtNode;
exports.unstable_batchedUpdates = batchedUpdates$1;
exports.unstable_createPortal = unstable_createPortal;
exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
exports.version = ReactVersion;
  })();
}


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(12);
}


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v0.19.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var enableSchedulerDebugging = false;
var enableProfiling = true;

var requestHostCallback;
var requestHostTimeout;
var cancelHostTimeout;
var shouldYieldToHost;
var requestPaint;

if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
// implementation using setTimeout.
typeof window === 'undefined' || // Check if MessageChannel is supported, too.
typeof MessageChannel !== 'function') {
  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
  // fallback to a naive implementation.
  var _callback = null;
  var _timeoutID = null;

  var _flushCallback = function () {
    if (_callback !== null) {
      try {
        var currentTime = exports.unstable_now();
        var hasRemainingTime = true;

        _callback(hasRemainingTime, currentTime);

        _callback = null;
      } catch (e) {
        setTimeout(_flushCallback, 0);
        throw e;
      }
    }
  };

  var initialTime = Date.now();

  exports.unstable_now = function () {
    return Date.now() - initialTime;
  };

  requestHostCallback = function (cb) {
    if (_callback !== null) {
      // Protect against re-entrancy.
      setTimeout(requestHostCallback, 0, cb);
    } else {
      _callback = cb;
      setTimeout(_flushCallback, 0);
    }
  };

  requestHostTimeout = function (cb, ms) {
    _timeoutID = setTimeout(cb, ms);
  };

  cancelHostTimeout = function () {
    clearTimeout(_timeoutID);
  };

  shouldYieldToHost = function () {
    return false;
  };

  requestPaint = exports.unstable_forceFrameRate = function () {};
} else {
  // Capture local references to native APIs, in case a polyfill overrides them.
  var performance = window.performance;
  var _Date = window.Date;
  var _setTimeout = window.setTimeout;
  var _clearTimeout = window.clearTimeout;

  if (typeof console !== 'undefined') {
    // TODO: Scheduler no longer requires these methods to be polyfilled. But
    // maybe we want to continue warning if they don't exist, to preserve the
    // option to rely on it in the future?
    var requestAnimationFrame = window.requestAnimationFrame;
    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link

    if (typeof requestAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }

    if (typeof cancelAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  if (typeof performance === 'object' && typeof performance.now === 'function') {
    exports.unstable_now = function () {
      return performance.now();
    };
  } else {
    var _initialTime = _Date.now();

    exports.unstable_now = function () {
      return _Date.now() - _initialTime;
    };
  }

  var isMessageLoopRunning = false;
  var scheduledHostCallback = null;
  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
  // thread, like user events. By default, it yields multiple times per frame.
  // It does not attempt to align with frame boundaries, since most tasks don't
  // need to be frame aligned; for those that do, use requestAnimationFrame.

  var yieldInterval = 5;
  var deadline = 0; // TODO: Make this configurable

  {
    // `isInputPending` is not available. Since we have no way of knowing if
    // there's pending input, always yield at the end of the frame.
    shouldYieldToHost = function () {
      return exports.unstable_now() >= deadline;
    }; // Since we yield every frame regardless, `requestPaint` has no effect.


    requestPaint = function () {};
  }

  exports.unstable_forceFrameRate = function (fps) {
    if (fps < 0 || fps > 125) {
      // Using console['error'] to evade Babel and ESLint
      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
      return;
    }

    if (fps > 0) {
      yieldInterval = Math.floor(1000 / fps);
    } else {
      // reset the framerate
      yieldInterval = 5;
    }
  };

  var performWorkUntilDeadline = function () {
    if (scheduledHostCallback !== null) {
      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
      // cycle. This means there's always time remaining at the beginning of
      // the message event.

      deadline = currentTime + yieldInterval;
      var hasTimeRemaining = true;

      try {
        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

        if (!hasMoreWork) {
          isMessageLoopRunning = false;
          scheduledHostCallback = null;
        } else {
          // If there's more work, schedule the next message event at the end
          // of the preceding one.
          port.postMessage(null);
        }
      } catch (error) {
        // If a scheduler task throws, exit the current browser task so the
        // error can be observed.
        port.postMessage(null);
        throw error;
      }
    } else {
      isMessageLoopRunning = false;
    } // Yielding to the browser will give it a chance to paint, so we can
  };

  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  requestHostCallback = function (callback) {
    scheduledHostCallback = callback;

    if (!isMessageLoopRunning) {
      isMessageLoopRunning = true;
      port.postMessage(null);
    }
  };

  requestHostTimeout = function (callback, ms) {
    taskTimeoutID = _setTimeout(function () {
      callback(exports.unstable_now());
    }, ms);
  };

  cancelHostTimeout = function () {
    _clearTimeout(taskTimeoutID);

    taskTimeoutID = -1;
  };
}

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  var first = heap[0];
  return first === undefined ? null : first;
}
function pop(heap) {
  var first = heap[0];

  if (first !== undefined) {
    var last = heap.pop();

    if (last !== first) {
      heap[0] = last;
      siftDown(heap, last, 0);
    }

    return first;
  } else {
    return null;
  }
}

function siftUp(heap, node, i) {
  var index = i;

  while (true) {
    var parentIndex = index - 1 >>> 1;
    var parent = heap[parentIndex];

    if (parent !== undefined && compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;

  while (index < length) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (left !== undefined && compare(left, node) < 0) {
      if (right !== undefined && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (right !== undefined && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var NoPriority = 0;
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

var runIdCounter = 0;
var mainThreadIdCounter = 0;
var profilingStateSize = 4;
var sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer
typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
;
var profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

var PRIORITY = 0;
var CURRENT_TASK_ID = 1;
var CURRENT_RUN_ID = 2;
var QUEUE_SIZE = 3;

{
  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
  // array might include canceled tasks.

  profilingState[QUEUE_SIZE] = 0;
  profilingState[CURRENT_TASK_ID] = 0;
} // Bytes per element is 4


var INITIAL_EVENT_LOG_SIZE = 131072;
var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

var eventLogSize = 0;
var eventLogBuffer = null;
var eventLog = null;
var eventLogIndex = 0;
var TaskStartEvent = 1;
var TaskCompleteEvent = 2;
var TaskErrorEvent = 3;
var TaskCancelEvent = 4;
var TaskRunEvent = 5;
var TaskYieldEvent = 6;
var SchedulerSuspendEvent = 7;
var SchedulerResumeEvent = 8;

function logEvent(entries) {
  if (eventLog !== null) {
    var offset = eventLogIndex;
    eventLogIndex += entries.length;

    if (eventLogIndex + 1 > eventLogSize) {
      eventLogSize *= 2;

      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
        // Using console['error'] to evade Babel and ESLint
        console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
        stopLoggingProfilingEvents();
        return;
      }

      var newEventLog = new Int32Array(eventLogSize * 4);
      newEventLog.set(eventLog);
      eventLogBuffer = newEventLog.buffer;
      eventLog = newEventLog;
    }

    eventLog.set(entries, offset);
  }
}

function startLoggingProfilingEvents() {
  eventLogSize = INITIAL_EVENT_LOG_SIZE;
  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
  eventLog = new Int32Array(eventLogBuffer);
  eventLogIndex = 0;
}
function stopLoggingProfilingEvents() {
  var buffer = eventLogBuffer;
  eventLogSize = 0;
  eventLogBuffer = null;
  eventLog = null;
  eventLogIndex = 0;
  return buffer;
}
function markTaskStart(task, ms) {
  {
    profilingState[QUEUE_SIZE]++;

    if (eventLog !== null) {
      // performance.now returns a float, representing milliseconds. When the
      // event is logged, it's coerced to an int. Convert to microseconds to
      // maintain extra degrees of precision.
      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
    }
  }
}
function markTaskCompleted(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskCanceled(task, ms) {
  {
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCancelEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskErrored(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskErrorEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskRun(task, ms) {
  {
    runIdCounter++;
    profilingState[PRIORITY] = task.priorityLevel;
    profilingState[CURRENT_TASK_ID] = task.id;
    profilingState[CURRENT_RUN_ID] = runIdCounter;

    if (eventLog !== null) {
      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markTaskYield(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[CURRENT_RUN_ID] = 0;

    if (eventLog !== null) {
      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markSchedulerSuspended(ms) {
  {
    mainThreadIdCounter++;

    if (eventLog !== null) {
      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}
function markSchedulerUnsuspended(ms) {
  {
    if (eventLog !== null) {
      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}

/* eslint-disable no-var */
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111

var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);

      {
        markTaskStart(timer, currentTime);
        timer.isQueued = true;
      }
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {
  {
    markSchedulerUnsuspended(initialTime);
  } // We'll need a host callback the next time work is scheduled.


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod codepath.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;

    {
      var _currentTime = exports.unstable_now();

      markSchedulerSuspended(_currentTime);
    }
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging )) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (callback !== null) {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
      markTaskRun(currentTask, currentTime);
      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
        markTaskYield(currentTask, currentTime);
      } else {
        {
          markTaskCompleted(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function timeoutForPriorityLevel(priorityLevel) {
  switch (priorityLevel) {
    case ImmediatePriority:
      return IMMEDIATE_PRIORITY_TIMEOUT;

    case UserBlockingPriority:
      return USER_BLOCKING_PRIORITY;

    case IdlePriority:
      return IDLE_PRIORITY;

    case LowPriority:
      return LOW_PRIORITY_TIMEOUT;

    case NormalPriority:
    default:
      return NORMAL_PRIORITY_TIMEOUT;
  }
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;
  var timeout;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }

    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
  } else {
    timeout = timeoutForPriorityLevel(priorityLevel);
    startTime = currentTime;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  {
    newTask.isQueued = false;
  }

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);

    {
      markTaskStart(newTask, currentTime);
      newTask.isQueued = true;
    } // Schedule a host callback, if needed. If we're already performing work,
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
}

function unstable_continueExecution() {

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  {
    if (task.isQueued) {
      var currentTime = exports.unstable_now();
      markTaskCanceled(task, currentTime);
      task.isQueued = false;
    }
  } // Null out the callback to indicate the task has been canceled. (Can't
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

function unstable_shouldYield() {
  var currentTime = exports.unstable_now();
  advanceTimers(currentTime);
  var firstTask = peek(taskQueue);
  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling =  {
  startLoggingProfilingEvents: startLoggingProfilingEvents,
  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
  sharedProfilingBuffer: sharedProfilingBuffer
} ;

exports.unstable_IdlePriority = IdlePriority;
exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_Profiling = unstable_Profiling;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_next = unstable_next;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_shouldYield = unstable_shouldYield;
exports.unstable_wrapCallback = unstable_wrapCallback;
  })();
}


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(14);
}


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v0.19.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

var interactionIDCounter = 0;
var threadIDCounter = 0; // Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.

exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

exports.__subscriberRef = null;

{
  exports.__interactionsRef = {
    current: new Set()
  };
  exports.__subscriberRef = {
    current: null
  };
}
function unstable_clear(callback) {

  var prevInteractions = exports.__interactionsRef.current;
  exports.__interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    exports.__interactionsRef.current = prevInteractions;
  }
}
function unstable_getCurrent() {
  {
    return exports.__interactionsRef.current;
  }
}
function unstable_getThreadID() {
  return ++threadIDCounter;
}
function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };
  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.

  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  exports.__interactionsRef.current = interactions;
  var subscriber = exports.__subscriberRef.current;
  var returnValue;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--; // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}
function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  var wrappedInteractions = exports.__interactionsRef.current;
  var subscriber = exports.__subscriberRef.current;

  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  } // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.


  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });
  var hasRun = false;

  function wrapped() {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = wrappedInteractions;
    subscriber = exports.__subscriberRef.current;

    try {
      var returnValue;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true; // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = exports.__subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;

{
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      exports.__subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}
function unstable_unsubscribe(subscriber) {
  {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      exports.__subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

exports.unstable_clear = unstable_clear;
exports.unstable_getCurrent = unstable_getCurrent;
exports.unstable_getThreadID = unstable_getThreadID;
exports.unstable_subscribe = unstable_subscribe;
exports.unstable_trace = unstable_trace;
exports.unstable_unsubscribe = unstable_unsubscribe;
exports.unstable_wrap = unstable_wrap;
  })();
}


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var react_from_dom_1 = __webpack_require__(16);
var helpers_1 = __webpack_require__(18);
exports.STATUS = {
    FAILED: 'failed',
    LOADED: 'loaded',
    LOADING: 'loading',
    PENDING: 'pending',
    READY: 'ready',
    UNSUPPORTED: 'unsupported',
};
var cacheStore = Object.create(null);
var InlineSVG = /** @class */ (function (_super) {
    __extends(InlineSVG, _super);
    function InlineSVG(props) {
        var _this = _super.call(this, props) || this;
        // tslint:disable-next-line:variable-name
        _this._isMounted = false;
        _this.handleLoad = function (content) {
            /* istanbul ignore else */
            if (_this._isMounted) {
                _this.setState({
                    content: content,
                    status: exports.STATUS.LOADED,
                }, _this.getElement);
            }
        };
        _this.handleError = function (error) {
            var onError = _this.props.onError;
            var status = error.message === 'Browser does not support SVG' ? exports.STATUS.UNSUPPORTED : exports.STATUS.FAILED;
            /* istanbul ignore else */
            if (true) {
                // tslint:disable-next-line:no-console
                console.error(error);
            }
            /* istanbul ignore else */
            if (_this._isMounted) {
                _this.setState({ status: status }, function () {
                    /* istanbul ignore else */
                    if (typeof onError === 'function') {
                        onError(error);
                    }
                });
            }
        };
        _this.request = function () {
            var _a = _this.props, cacheRequests = _a.cacheRequests, src = _a.src;
            try {
                if (cacheRequests) {
                    cacheStore[src] = { content: '', status: exports.STATUS.LOADING, queue: [] };
                }
                return fetch(src)
                    .then(function (response) {
                    var contentType = response.headers.get('content-type');
                    var _a = __read((contentType || '').split(/ ?; ?/), 1), fileType = _a[0];
                    if (response.status > 299) {
                        throw new helpers_1.InlineSVGError('Not Found');
                    }
                    if (!['image/svg+xml', 'text/plain'].some(function (d) { return fileType.indexOf(d) >= 0; })) {
                        throw new helpers_1.InlineSVGError("Content type isn't valid: " + fileType);
                    }
                    return response.text();
                })
                    .then(function (content) {
                    _this.handleLoad(content);
                    /* istanbul ignore else */
                    if (cacheRequests) {
                        var cache = cacheStore[src];
                        /* istanbul ignore else */
                        if (cache) {
                            cache.content = content;
                            cache.status = exports.STATUS.LOADED;
                            cache.queue = cache.queue.filter(function (cb) {
                                cb(content);
                                return false;
                            });
                        }
                    }
                })
                    .catch(function (error) {
                    /* istanbul ignore else */
                    if (cacheRequests) {
                        delete cacheStore[src];
                    }
                    _this.handleError(error);
                });
            }
            catch (error) {
                _this.handleError(new helpers_1.InlineSVGError(error.message));
            }
        };
        _this.state = {
            content: '',
            element: null,
            hasCache: !!props.cacheRequests && !!cacheStore[props.src],
            status: exports.STATUS.PENDING,
        };
        _this.hash = props.uniqueHash || helpers_1.randomString(8);
        return _this;
    }
    InlineSVG.prototype.componentDidMount = function () {
        this._isMounted = true;
        if (!helpers_1.canUseDOM()) {
            this.handleError(new helpers_1.InlineSVGError('No DOM'));
            return;
        }
        var status = this.state.status;
        var src = this.props.src;
        try {
            /* istanbul ignore else */
            if (status === exports.STATUS.PENDING) {
                /* istanbul ignore else */
                if (!helpers_1.isSupportedEnvironment()) {
                    throw new helpers_1.InlineSVGError('Browser does not support SVG');
                }
                /* istanbul ignore else */
                if (!src) {
                    throw new helpers_1.InlineSVGError('Missing src');
                }
                this.load();
            }
        }
        catch (error) {
            this.handleError(error);
        }
    };
    InlineSVG.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (!helpers_1.canUseDOM()) {
            return;
        }
        var _a = this.state, hasCache = _a.hasCache, status = _a.status;
        var _b = this.props, onLoad = _b.onLoad, src = _b.src;
        if (prevState.status !== exports.STATUS.READY && status === exports.STATUS.READY) {
            /* istanbul ignore else */
            if (onLoad) {
                onLoad(src, hasCache);
            }
        }
        if (prevProps.src !== src) {
            if (!src) {
                this.handleError(new helpers_1.InlineSVGError('Missing src'));
                return;
            }
            this.load();
        }
    };
    InlineSVG.prototype.componentWillUnmount = function () {
        this._isMounted = false;
    };
    InlineSVG.prototype.processSVG = function () {
        var content = this.state.content;
        var preProcessor = this.props.preProcessor;
        if (preProcessor) {
            return preProcessor(content);
        }
        return content;
    };
    InlineSVG.prototype.updateSVGAttributes = function (node) {
        var _this = this;
        var _a = this.props, _b = _a.baseURL, baseURL = _b === void 0 ? '' : _b, uniquifyIDs = _a.uniquifyIDs;
        var replaceableAttributes = ['id', 'href', 'xlink:href', 'xlink:role', 'xlink:arcrole'];
        var linkAttributes = ['href', 'xlink:href'];
        var isDataValue = function (name, value) {
            return linkAttributes.indexOf(name) >= 0 && (value ? value.indexOf('#') < 0 : false);
        };
        if (!uniquifyIDs) {
            return node;
        }
        __spread(node.children).map(function (d) {
            if (d.attributes && d.attributes.length) {
                var attributes_1 = Object.values(d.attributes);
                attributes_1.forEach(function (a) {
                    var match = a.value.match(/url\((.*?)\)/);
                    if (match && match[1]) {
                        a.value = a.value.replace(match[0], "url(" + baseURL + match[1] + "__" + _this.hash + ")");
                    }
                });
                replaceableAttributes.forEach(function (r) {
                    var attribute = attributes_1.find(function (a) { return a.name === r; });
                    if (attribute && !isDataValue(r, attribute.value)) {
                        attribute.value = attribute.value + "__" + _this.hash;
                    }
                });
            }
            if (d.children.length) {
                d = _this.updateSVGAttributes(d);
            }
            return d;
        });
        return node;
    };
    InlineSVG.prototype.getNode = function () {
        var _a = this.props, description = _a.description, title = _a.title;
        try {
            var svgText = this.processSVG();
            var node = react_from_dom_1.default(svgText, { nodeOnly: true });
            if (!node || !(node instanceof SVGSVGElement)) {
                throw new helpers_1.InlineSVGError('Could not convert the src to a DOM Node');
            }
            var svg = this.updateSVGAttributes(node);
            if (description) {
                var originalDesc = svg.querySelector('desc');
                if (originalDesc && originalDesc.parentNode) {
                    originalDesc.parentNode.removeChild(originalDesc);
                }
                var descElement = document.createElement('desc');
                descElement.innerHTML = description;
                svg.prepend(descElement);
            }
            if (title) {
                var originalTitle = svg.querySelector('title');
                if (originalTitle && originalTitle.parentNode) {
                    originalTitle.parentNode.removeChild(originalTitle);
                }
                var titleElement = document.createElement('title');
                titleElement.innerHTML = title;
                svg.prepend(titleElement);
            }
            return svg;
        }
        catch (error) {
            this.handleError(error);
        }
    };
    InlineSVG.prototype.getElement = function () {
        try {
            var node = this.getNode();
            var element = react_from_dom_1.default(node);
            if (!element || !React.isValidElement(element)) {
                throw new helpers_1.InlineSVGError('Could not convert the src to a React element');
            }
            this.setState({
                element: element,
                status: exports.STATUS.READY,
            });
        }
        catch (error) {
            this.handleError(new helpers_1.InlineSVGError(error.message));
        }
    };
    InlineSVG.prototype.load = function () {
        var _this = this;
        /* istanbul ignore else */
        if (this._isMounted) {
            this.setState({
                content: '',
                element: null,
                status: exports.STATUS.LOADING,
            }, function () {
                var _a = _this.props, cacheRequests = _a.cacheRequests, src = _a.src;
                var cache = cacheRequests && cacheStore[src];
                if (cache) {
                    /* istanbul ignore else */
                    if (cache.status === exports.STATUS.LOADING) {
                        cache.queue.push(_this.handleLoad);
                    }
                    else if (cache.status === exports.STATUS.LOADED) {
                        _this.handleLoad(cache.content);
                    }
                    return;
                }
                var dataURI = src.match(/data:image\/svg[^,]*?(;base64)?,(.*)/);
                var inlineSrc;
                if (dataURI) {
                    inlineSrc = dataURI[1] ? atob(dataURI[2]) : decodeURIComponent(dataURI[2]);
                }
                else if (src.indexOf('<svg') >= 0) {
                    inlineSrc = src;
                }
                if (inlineSrc) {
                    _this.handleLoad(inlineSrc);
                    return;
                }
                _this.request();
            });
        }
    };
    InlineSVG.prototype.render = function () {
        if (!helpers_1.canUseDOM()) {
            return null;
        }
        var _a = this.state, element = _a.element, status = _a.status;
        var _b = this.props, baseURL = _b.baseURL, cacheRequests = _b.cacheRequests, _c = _b.children, children = _c === void 0 ? null : _c, description = _b.description, innerRef = _b.innerRef, _d = _b.loader, loader = _d === void 0 ? null : _d, onError = _b.onError, onLoad = _b.onLoad, preProcessor = _b.preProcessor, src = _b.src, title = _b.title, uniqueHash = _b.uniqueHash, uniquifyIDs = _b.uniquifyIDs, rest = __rest(_b, ["baseURL", "cacheRequests", "children", "description", "innerRef", "loader", "onError", "onLoad", "preProcessor", "src", "title", "uniqueHash", "uniquifyIDs"]);
        if (element) {
            return React.cloneElement(element, __assign({ ref: innerRef }, rest));
        }
        if ([exports.STATUS.UNSUPPORTED, exports.STATUS.FAILED].indexOf(status) > -1) {
            return children;
        }
        return loader;
    };
    InlineSVG.defaultProps = {
        cacheRequests: true,
        uniquifyIDs: false,
    };
    return InlineSVG;
}(React.PureComponent));
exports.default = InlineSVG;
//# sourceMappingURL=index.js.map

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertFromNode", function() { return convertFromNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertFromString", function() { return convertFromString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return convert; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17);
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (undefined && undefined.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/* eslint-disable @typescript-eslint/no-use-before-define */


function parseAttributes(node, reactKey) {
    var attributes = {
        key: reactKey,
    };
    /* istanbul ignore else */
    if (node instanceof Element) {
        var nodeClassNames = node.getAttribute('class');
        if (nodeClassNames) {
            attributes.className = nodeClassNames;
        }
        __spread(node.attributes).forEach(function (d) {
            switch (d.name) {
                // these are manually handled above, so break;
                case 'class':
                    break;
                case 'style':
                    attributes[d.name] = Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["styleToObject"])(d.value);
                    break;
                case 'checked':
                case 'disabled':
                case 'selected':
                case 'autoplay':
                case 'controls':
                    attributes[d.name] = d.name;
                    break;
                default:
                    attributes[_helpers__WEBPACK_IMPORTED_MODULE_1__["possibleStandardNames"][d.name] || d.name] = d.value;
            }
        });
    }
    return attributes;
}
function parseChildren(childNodeList, level, options) {
    var children = __spread(childNodeList).map(function (node, index) {
        return convertFromNode(node, __assign(__assign({}, options), { index: index, level: level + 1 }));
    })
        .filter(Boolean);
    if (!children.length) {
        return null;
    }
    return children;
}
function parseName(nodeName) {
    if (/[a-z]+[A-Z]+[a-z]+/.test(nodeName)) {
        return nodeName;
    }
    return nodeName.toLowerCase();
}
function convertFromNode(input, options) {
    if (options === void 0) { options = {}; }
    if (!input || !(input instanceof Node)) {
        return null;
    }
    var _a = options.actions, actions = _a === void 0 ? [] : _a, _b = options.index, index = _b === void 0 ? 0 : _b, _c = options.level, level = _c === void 0 ? 0 : _c;
    var node = input;
    var key = level + "-" + index;
    var result = [];
    /* istanbul ignore else */
    if (Array.isArray(actions)) {
        actions.forEach(function (action) {
            if (action.condition(node, key, level)) {
                if (typeof action.pre === 'function') {
                    node = action.pre(node, key, level);
                    if (!(node instanceof Node)) {
                        node = input;
                        /* istanbul ignore else */
                        if (true) {
                            // eslint-disable-next-line no-console
                            console.warn('The `pre`-method always must return a valid DomNode (instanceof Node) - your modification will be ignored (Hint: if you want to render a React-component, use the `action`-method instead)');
                        }
                    }
                }
                if (typeof action.post === 'function') {
                    result.push(action.post(node, key, level));
                }
            }
        });
    }
    if (result.length) {
        return result;
    }
    switch (node.nodeType) {
        case 1: {
            // regular dom-node
            return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](parseName(node.nodeName), parseAttributes(node, key), parseChildren(node.childNodes, level, options));
        }
        case 3: {
            // textnode
            var nodeText = node.nodeValue.toString();
            /* istanbul ignore else */
            if (/^\s+$/.test(nodeText)) {
                return null;
            }
            /* istanbul ignore next */
            if (!node.parentNode) {
                return nodeText;
            }
            var parentNodeName = node.parentNode.nodeName.toLowerCase();
            if (_helpers__WEBPACK_IMPORTED_MODULE_1__["noTextChildNodes"].indexOf(parentNodeName) !== -1) {
                /* istanbul ignore else */
                if (/\S/.test(nodeText)) {
                    // eslint-disable-next-line no-console
                    console.warn("A textNode is not allowed inside '" + parentNodeName + "'. Your text \"" + nodeText + "\" will be ignored");
                }
                return null;
            }
            return nodeText;
        }
        case 8: {
            // html-comment
            return null;
        }
        /* istanbul ignore next */
        default: {
            return null;
        }
    }
}
function convertFromString(input, options) {
    if (options === void 0) { options = {}; }
    if (!input || typeof input !== 'string') {
        return null;
    }
    var _a = options.nodeOnly, nodeOnly = _a === void 0 ? false : _a, _b = options.selector, selector = _b === void 0 ? 'body > *' : _b, _c = options.type, type = _c === void 0 ? 'text/html' : _c;
    try {
        var parser = new DOMParser();
        var doc = parser.parseFromString(input, type);
        var node = doc.querySelector(selector);
        if (!(node instanceof Node)) {
            throw new Error('Error parsing input');
        }
        if (nodeOnly) {
            return node;
        }
        return convertFromNode(node, options);
    }
    catch (error) {
        /* istanbul ignore else */
        if (true) {
            // eslint-disable-next-line no-console
            console.error(error);
        }
    }
    return null;
}
function convert(input, options) {
    if (options === void 0) { options = {}; }
    if (typeof input === 'string') {
        return convertFromString(input, options);
    }
    if (input instanceof Node) {
        return convertFromNode(input, options);
    }
    return null;
}
//# sourceMappingURL=index.js.map

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "styleToObject", function() { return styleToObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "noTextChildNodes", function() { return noTextChildNodes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "possibleStandardNames", function() { return possibleStandardNames; });
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var styleToObject = function (input) {
    var attributes = input.split(/ ?; ?/);
    return attributes.reduce(function (acc, d) {
        var _a = __read(d.split(/ ?: ?/), 2), key = _a[0], value = _a[1];
        if (key && value) {
            acc[key.replace(/-(\w)/g, function (_$0, $1) { return $1.toUpperCase(); })] = Number.isNaN(Number(value))
                ? value
                : Number(value);
        }
        return acc;
    }, {});
};
var noTextChildNodes = [
    'br',
    'col',
    'colgroup',
    'dl',
    'hr',
    'iframe',
    'img',
    'input',
    'link',
    'menuitem',
    'meta',
    'ol',
    'param',
    'select',
    'table',
    'tbody',
    'tfoot',
    'thead',
    'tr',
    'ul',
    'wbr',
];
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Taken from https://raw.githubusercontent.com/facebook/react/baff5cc2f69d30589a5dc65b089e47765437294b/packages/react-dom/src/shared/possibleStandardNames.js
// tslint:disable:object-literal-sort-keys
var possibleStandardNames = {
    // HTML
    'accept-charset': 'acceptCharset',
    acceptcharset: 'acceptCharset',
    accesskey: 'accessKey',
    allowfullscreen: 'allowFullScreen',
    autocapitalize: 'autoCapitalize',
    autocomplete: 'autoComplete',
    autocorrect: 'autoCorrect',
    autofocus: 'autoFocus',
    autoplay: 'autoPlay',
    autosave: 'autoSave',
    cellpadding: 'cellPadding',
    cellspacing: 'cellSpacing',
    charset: 'charSet',
    class: 'className',
    classid: 'classID',
    classname: 'className',
    colspan: 'colSpan',
    contenteditable: 'contentEditable',
    contextmenu: 'contextMenu',
    controlslist: 'controlsList',
    crossorigin: 'crossOrigin',
    dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
    datetime: 'dateTime',
    defaultchecked: 'defaultChecked',
    defaultvalue: 'defaultValue',
    enctype: 'encType',
    for: 'htmlFor',
    formmethod: 'formMethod',
    formaction: 'formAction',
    formenctype: 'formEncType',
    formnovalidate: 'formNoValidate',
    formtarget: 'formTarget',
    frameborder: 'frameBorder',
    hreflang: 'hrefLang',
    htmlfor: 'htmlFor',
    httpequiv: 'httpEquiv',
    'http-equiv': 'httpEquiv',
    icon: 'icon',
    innerhtml: 'innerHTML',
    inputmode: 'inputMode',
    itemid: 'itemID',
    itemprop: 'itemProp',
    itemref: 'itemRef',
    itemscope: 'itemScope',
    itemtype: 'itemType',
    keyparams: 'keyParams',
    keytype: 'keyType',
    marginwidth: 'marginWidth',
    marginheight: 'marginHeight',
    maxlength: 'maxLength',
    mediagroup: 'mediaGroup',
    minlength: 'minLength',
    nomodule: 'noModule',
    novalidate: 'noValidate',
    playsinline: 'playsInline',
    radiogroup: 'radioGroup',
    readonly: 'readOnly',
    referrerpolicy: 'referrerPolicy',
    rowspan: 'rowSpan',
    spellcheck: 'spellCheck',
    srcdoc: 'srcDoc',
    srclang: 'srcLang',
    srcset: 'srcSet',
    tabindex: 'tabIndex',
    usemap: 'useMap',
    // SVG
    accentheight: 'accentHeight',
    'accent-height': 'accentHeight',
    alignmentbaseline: 'alignmentBaseline',
    'alignment-baseline': 'alignmentBaseline',
    allowreorder: 'allowReorder',
    arabicform: 'arabicForm',
    'arabic-form': 'arabicForm',
    attributename: 'attributeName',
    attributetype: 'attributeType',
    autoreverse: 'autoReverse',
    basefrequency: 'baseFrequency',
    baselineshift: 'baselineShift',
    'baseline-shift': 'baselineShift',
    baseprofile: 'baseProfile',
    calcmode: 'calcMode',
    capheight: 'capHeight',
    'cap-height': 'capHeight',
    clippath: 'clipPath',
    'clip-path': 'clipPath',
    clippathunits: 'clipPathUnits',
    cliprule: 'clipRule',
    'clip-rule': 'clipRule',
    colorinterpolation: 'colorInterpolation',
    'color-interpolation': 'colorInterpolation',
    colorinterpolationfilters: 'colorInterpolationFilters',
    'color-interpolation-filters': 'colorInterpolationFilters',
    colorprofile: 'colorProfile',
    'color-profile': 'colorProfile',
    colorrendering: 'colorRendering',
    'color-rendering': 'colorRendering',
    contentscripttype: 'contentScriptType',
    contentstyletype: 'contentStyleType',
    diffuseconstant: 'diffuseConstant',
    dominantbaseline: 'dominantBaseline',
    'dominant-baseline': 'dominantBaseline',
    edgemode: 'edgeMode',
    enablebackground: 'enableBackground',
    'enable-background': 'enableBackground',
    externalresourcesrequired: 'externalResourcesRequired',
    fillopacity: 'fillOpacity',
    'fill-opacity': 'fillOpacity',
    fillrule: 'fillRule',
    'fill-rule': 'fillRule',
    filterres: 'filterRes',
    filterunits: 'filterUnits',
    floodopacity: 'floodOpacity',
    'flood-opacity': 'floodOpacity',
    floodcolor: 'floodColor',
    'flood-color': 'floodColor',
    fontfamily: 'fontFamily',
    'font-family': 'fontFamily',
    fontsize: 'fontSize',
    'font-size': 'fontSize',
    fontsizeadjust: 'fontSizeAdjust',
    'font-size-adjust': 'fontSizeAdjust',
    fontstretch: 'fontStretch',
    'font-stretch': 'fontStretch',
    fontstyle: 'fontStyle',
    'font-style': 'fontStyle',
    fontvariant: 'fontVariant',
    'font-variant': 'fontVariant',
    fontweight: 'fontWeight',
    'font-weight': 'fontWeight',
    glyphname: 'glyphName',
    'glyph-name': 'glyphName',
    glyphorientationhorizontal: 'glyphOrientationHorizontal',
    'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
    glyphorientationvertical: 'glyphOrientationVertical',
    'glyph-orientation-vertical': 'glyphOrientationVertical',
    glyphref: 'glyphRef',
    gradienttransform: 'gradientTransform',
    gradientunits: 'gradientUnits',
    horizadvx: 'horizAdvX',
    'horiz-adv-x': 'horizAdvX',
    horizoriginx: 'horizOriginX',
    'horiz-origin-x': 'horizOriginX',
    imagerendering: 'imageRendering',
    'image-rendering': 'imageRendering',
    kernelmatrix: 'kernelMatrix',
    kernelunitlength: 'kernelUnitLength',
    keypoints: 'keyPoints',
    keysplines: 'keySplines',
    keytimes: 'keyTimes',
    lengthadjust: 'lengthAdjust',
    letterspacing: 'letterSpacing',
    'letter-spacing': 'letterSpacing',
    lightingcolor: 'lightingColor',
    'lighting-color': 'lightingColor',
    limitingconeangle: 'limitingConeAngle',
    markerend: 'markerEnd',
    'marker-end': 'markerEnd',
    markerheight: 'markerHeight',
    markermid: 'markerMid',
    'marker-mid': 'markerMid',
    markerstart: 'markerStart',
    'marker-start': 'markerStart',
    markerunits: 'markerUnits',
    markerwidth: 'markerWidth',
    maskcontentunits: 'maskContentUnits',
    maskunits: 'maskUnits',
    numoctaves: 'numOctaves',
    overlineposition: 'overlinePosition',
    'overline-position': 'overlinePosition',
    overlinethickness: 'overlineThickness',
    'overline-thickness': 'overlineThickness',
    paintorder: 'paintOrder',
    'paint-order': 'paintOrder',
    'panose-1': 'panose1',
    pathlength: 'pathLength',
    patterncontentunits: 'patternContentUnits',
    patterntransform: 'patternTransform',
    patternunits: 'patternUnits',
    pointerevents: 'pointerEvents',
    'pointer-events': 'pointerEvents',
    pointsatx: 'pointsAtX',
    pointsaty: 'pointsAtY',
    pointsatz: 'pointsAtZ',
    preservealpha: 'preserveAlpha',
    preserveaspectratio: 'preserveAspectRatio',
    primitiveunits: 'primitiveUnits',
    refx: 'refX',
    refy: 'refY',
    renderingintent: 'renderingIntent',
    'rendering-intent': 'renderingIntent',
    repeatcount: 'repeatCount',
    repeatdur: 'repeatDur',
    requiredextensions: 'requiredExtensions',
    requiredfeatures: 'requiredFeatures',
    shaperendering: 'shapeRendering',
    'shape-rendering': 'shapeRendering',
    specularconstant: 'specularConstant',
    specularexponent: 'specularExponent',
    spreadmethod: 'spreadMethod',
    startoffset: 'startOffset',
    stddeviation: 'stdDeviation',
    stitchtiles: 'stitchTiles',
    stopcolor: 'stopColor',
    'stop-color': 'stopColor',
    stopopacity: 'stopOpacity',
    'stop-opacity': 'stopOpacity',
    strikethroughposition: 'strikethroughPosition',
    'strikethrough-position': 'strikethroughPosition',
    strikethroughthickness: 'strikethroughThickness',
    'strikethrough-thickness': 'strikethroughThickness',
    strokedasharray: 'strokeDasharray',
    'stroke-dasharray': 'strokeDasharray',
    strokedashoffset: 'strokeDashoffset',
    'stroke-dashoffset': 'strokeDashoffset',
    strokelinecap: 'strokeLinecap',
    'stroke-linecap': 'strokeLinecap',
    strokelinejoin: 'strokeLinejoin',
    'stroke-linejoin': 'strokeLinejoin',
    strokemiterlimit: 'strokeMiterlimit',
    'stroke-miterlimit': 'strokeMiterlimit',
    strokewidth: 'strokeWidth',
    'stroke-width': 'strokeWidth',
    strokeopacity: 'strokeOpacity',
    'stroke-opacity': 'strokeOpacity',
    suppresscontenteditablewarning: 'suppressContentEditableWarning',
    suppresshydrationwarning: 'suppressHydrationWarning',
    surfacescale: 'surfaceScale',
    systemlanguage: 'systemLanguage',
    tablevalues: 'tableValues',
    targetx: 'targetX',
    targety: 'targetY',
    textanchor: 'textAnchor',
    'text-anchor': 'textAnchor',
    textdecoration: 'textDecoration',
    'text-decoration': 'textDecoration',
    textlength: 'textLength',
    textrendering: 'textRendering',
    'text-rendering': 'textRendering',
    underlineposition: 'underlinePosition',
    'underline-position': 'underlinePosition',
    underlinethickness: 'underlineThickness',
    'underline-thickness': 'underlineThickness',
    unicodebidi: 'unicodeBidi',
    'unicode-bidi': 'unicodeBidi',
    unicoderange: 'unicodeRange',
    'unicode-range': 'unicodeRange',
    unitsperem: 'unitsPerEm',
    'units-per-em': 'unitsPerEm',
    unselectable: 'unselectable',
    valphabetic: 'vAlphabetic',
    'v-alphabetic': 'vAlphabetic',
    vectoreffect: 'vectorEffect',
    'vector-effect': 'vectorEffect',
    vertadvy: 'vertAdvY',
    'vert-adv-y': 'vertAdvY',
    vertoriginx: 'vertOriginX',
    'vert-origin-x': 'vertOriginX',
    vertoriginy: 'vertOriginY',
    'vert-origin-y': 'vertOriginY',
    vhanging: 'vHanging',
    'v-hanging': 'vHanging',
    videographic: 'vIdeographic',
    'v-ideographic': 'vIdeographic',
    viewbox: 'viewBox',
    viewtarget: 'viewTarget',
    vmathematical: 'vMathematical',
    'v-mathematical': 'vMathematical',
    wordspacing: 'wordSpacing',
    'word-spacing': 'wordSpacing',
    writingmode: 'writingMode',
    'writing-mode': 'writingMode',
    xchannelselector: 'xChannelSelector',
    xheight: 'xHeight',
    'x-height': 'xHeight',
    xlinkactuate: 'xlinkActuate',
    'xlink:actuate': 'xlinkActuate',
    xlinkarcrole: 'xlinkArcrole',
    'xlink:arcrole': 'xlinkArcrole',
    xlinkhref: 'xlinkHref',
    'xlink:href': 'xlinkHref',
    xlinkrole: 'xlinkRole',
    'xlink:role': 'xlinkRole',
    xlinkshow: 'xlinkShow',
    'xlink:show': 'xlinkShow',
    xlinktitle: 'xlinkTitle',
    'xlink:title': 'xlinkTitle',
    xlinktype: 'xlinkType',
    'xlink:type': 'xlinkType',
    xmlbase: 'xmlBase',
    'xml:base': 'xmlBase',
    xmllang: 'xmlLang',
    'xml:lang': 'xmlLang',
    'xml:space': 'xmlSpace',
    xmlnsxlink: 'xmlnsXlink',
    'xmlns:xlink': 'xmlnsXlink',
    xmlspace: 'xmlSpace',
    ychannelselector: 'yChannelSelector',
    zoomandpan: 'zoomAndPan',
    // event handlers
    onblur: 'onBlur',
    onchange: 'onChange',
    onclick: 'onClick',
    oncontextmenu: 'onContextMenu',
    ondoubleclick: 'onDoubleClick',
    ondrag: 'onDrag',
    ondragend: 'onDragEnd',
    ondragenter: 'onDragEnter',
    ondragexit: 'onDragExit',
    ondragleave: 'onDragLeave',
    ondragover: 'onDragOver',
    ondragstart: 'onDragStart',
    ondrop: 'onDrop',
    onerror: 'onError',
    onfocus: 'onFocus',
    oninput: 'onInput',
    oninvalid: 'onInvalid',
    onkeydown: 'onKeyDown',
    onkeypress: 'onKeyPress',
    onkeyup: 'onKeyUp',
    onload: 'onLoad',
    onmousedown: 'onMouseDown',
    onmouseenter: 'onMouseEnter',
    onmouseleave: 'onMouseLeave',
    onmousemove: 'onMouseMove',
    onmouseout: 'onMouseOut',
    onmouseover: 'onMouseOver',
    onmouseup: 'onMouseUp',
    onscroll: 'onScroll',
    onsubmit: 'onSubmit',
    ontouchcancel: 'onTouchCancel',
    ontouchend: 'onTouchEnd',
    ontouchmove: 'onTouchMove',
    ontouchstart: 'onTouchStart',
    onwheel: 'onWheel',
};
//# sourceMappingURL=helpers.js.map

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var exenv_1 = __webpack_require__(19);
exports.canUseDOM = function () { return exenv_1.canUseDOM; };
exports.supportsInlineSVG = function () {
    /* istanbul ignore next */
    if (!document) {
        return false;
    }
    var div = document.createElement('div');
    div.innerHTML = '<svg />';
    return div.firstChild && div.firstChild.namespaceURI === 'http://www.w3.org/2000/svg';
};
// tslint:disable-next-line:no-shadowed-variable
var InlineSVGError = /** @class */ (function (_super) {
    __extends(InlineSVGError, _super);
    function InlineSVGError(message, data) {
        var _this = _super.call(this) || this;
        _this.name = 'InlineSVGError';
        _this.message = message;
        _this.data = data;
        return _this;
    }
    return InlineSVGError;
}(Error));
exports.InlineSVGError = InlineSVGError;
exports.isSupportedEnvironment = function () {
    return exports.supportsInlineSVG() && typeof window !== 'undefined' && window !== null;
};
exports.randomString = function (length) {
    var letters = 'abcdefghijklmnopqrstuvwxyz';
    var numbers = '1234567890';
    var charset = "" + letters + letters.toUpperCase() + numbers;
    var randomCharacter = function (character) {
        return character[Math.floor(Math.random() * character.length)];
    };
    var R = '';
    for (var i = 0; i < length; i++) {
        R += randomCharacter(charset);
    }
    return R;
};
//# sourceMappingURL=helpers.js.map

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/
/* global define */

(function () {
	'use strict';

	var canUseDOM = !!(
		typeof window !== 'undefined' &&
		window.document &&
		window.document.createElement
	);

	var ExecutionEnvironment = {

		canUseDOM: canUseDOM,

		canUseWorkers: typeof Worker !== 'undefined',

		canUseEventListeners:
			canUseDOM && !!(window.addEventListener || window.attachEvent),

		canUseViewport: canUseDOM && !!window.screen

	};

	if (true) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return ExecutionEnvironment;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}());


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Games", function() { return Games; });
var Games;
(function (Games) {
    Games["Galaxy"] = "galaxy";
})(Games || (Games = {}));


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GamePreview", function() { return GamePreview; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

__webpack_require__(22);
var GamePreview = /** @class */ (function (_super) {
    __extends(GamePreview, _super);
    function GamePreview() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GamePreview.prototype.render = function () {
        return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", null,
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: 'miro-h4' }, this.props.title),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("img", { src: "../img/" + this.props.game + ".gif" }),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: 'miro-p-large' }, this.props.caption)));
    };
    return GamePreview;
}(react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"]));



/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(23);

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(25)(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(24)(false);
// imports


// module
exports.push([module.i, "html {\n  height: 100%;\n}\nbody {\n  height: 100%;\n  margin: 0;\n  color: #09043C;\n  font: 14px OpenSans, Arial, Helvetica, sans-serif;\n}\n* {\n  user-select: none;\n}\n#react-app {\n  height: 100%;\n}\n.edit-mode {\n  display: flex;\n}\n.select-start-screen {\n  display: flex;\n  height: 48px;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n}\n.icon {\n  width: 24px;\n  height: 24px;\n}\n.btn {\n  height: 48px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}\n.btn:hover {\n  color: #4262ff;\n}\n.coffee-break-modal__banner_wrapper {\n  width: 100%;\n  height: 260px;\n}\n.coffee-break-modal__banner {\n  width: 250px;\n  height: 250px;\n  margin-left: 275px;\n}\n", ""]);

// exports


/***/ }),
/* 24 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target) {
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(26);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 26 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = "<svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 4675.000000 4675.000000\" preserveAspectRatio=\"xMidYMid meet\"><g transform=\"translate(0.000000,4675.000000) scale(0.100000,-0.100000)\" fill=\"#000000\" stroke=\"none\"><path d=\"M31438 41079 c-37 -4 -93 -15 -125 -24 -77 -23 -286 -110 -331 -139 -75 -48 -295 -250 -587 -540 -165 -164 -334 -327 -375 -364 -155 -137 -205 -194 -235 -273 -28 -74 -28 -76 -36 -389 -7 -283 -12 -348 -49 -638 -29 -235 -45 -331 -58 -350 -13 -21 -17 -50 -17 -142 -1 -87 -5 -124 -18 -151 -9 -20 -19 -62 -23 -95 -3 -32 -12 -81 -20 -108 -8 -27 -14 -73 -14 -102 0 -47 -16 -151 -56 -354 -28 -149 -63 -398 -74 -530 -6 -74 -17 -151 -25 -170 -8 -19 -16 -60 -20 -90 -17 -163 -24 -208 -34 -233 -6 -16 -11 -69 -11 -118 0 -61 -5 -102 -16 -127 -11 -24 -19 -83 -24 -167 -5 -83 -13 -141 -23 -160 -8 -17 -18 -74 -22 -129 -3 -54 -11 -110 -17 -125 -6 -14 -14 -64 -19 -111 -8 -81 -19 -160 -54 -385 -37 -238 -78 -515 -106 -720 -16 -121 -37 -247 -45 -279 -9 -33 -15 -91 -15 -130 0 -45 -6 -89 -18 -121 -12 -31 -22 -94 -26 -167 -5 -85 -11 -118 -21 -122 -10 -4 -14 -26 -14 -79 0 -40 -9 -125 -21 -188 -11 -63 -25 -168 -29 -234 -5 -66 -16 -138 -24 -160 -8 -22 -15 -64 -16 -93 0 -29 -9 -78 -20 -109 -13 -38 -20 -83 -20 -133 0 -41 -7 -111 -15 -155 -9 -44 -22 -128 -30 -188 -26 -192 4 -180 -436 -167 -509 14 -842 13 -983 -5 -66 -8 -122 -13 -125 -11 -16 10 -1384 -15 -1601 -28 -407 -26 -781 -59 -1032 -91 -70 -9 -174 -14 -260 -13 -132 3 -146 1 -185 -20 -34 -18 -58 -22 -125 -22 -58 0 -101 -6 -141 -20 -42 -15 -82 -20 -156 -20 -229 0 -631 -70 -1321 -229 -96 -22 -223 -52 -281 -65 -367 -84 -792 -206 -1095 -314 -44 -16 -104 -32 -133 -36 -29 -4 -103 -25 -164 -47 -62 -23 -175 -63 -252 -90 -478 -170 -922 -364 -1159 -507 -37 -23 -70 -42 -71 -42 -10 0 -319 -212 -335 -230 -3 -3 -18 -16 -35 -29 -142 -109 -302 -273 -422 -431 -219 -291 -325 -574 -377 -1015 -56 -466 -49 -816 30 -1505 19 -168 48 -451 64 -630 28 -305 36 -392 60 -630 5 -52 14 -144 20 -205 6 -60 15 -148 20 -195 5 -47 16 -152 25 -235 69 -673 147 -1369 170 -1510 8 -49 19 -124 25 -165 6 -41 15 -100 20 -130 6 -30 15 -84 20 -120 9 -57 47 -275 95 -545 26 -145 62 -362 79 -480 43 -286 142 -724 276 -1215 17 -63 58 -221 91 -350 107 -420 179 -635 338 -1010 44 -104 50 -149 24 -173 -20 -17 -96 -43 -393 -138 -590 -187 -971 -357 -1389 -621 -324 -205 -640 -468 -809 -673 -37 -44 -69 -82 -73 -85 -14 -12 -99 -141 -135 -205 -103 -186 -171 -401 -189 -600 -3 -38 -8 -90 -11 -114 l-6 -45 -77 160 c-113 231 -196 356 -328 489 -211 215 -505 360 -830 411 -127 20 -432 24 -508 6 -27 -6 -85 -18 -127 -26 -43 -8 -93 -22 -110 -30 -18 -9 -73 -23 -123 -31 -376 -65 -606 -183 -851 -436 -176 -183 -230 -285 -365 -689 -50 -152 -73 -266 -84 -415 -4 -49 -13 -148 -21 -220 -7 -71 -14 -161 -14 -200 0 -167 51 -479 124 -751 55 -207 145 -514 168 -574 27 -70 188 -399 228 -465 16 -27 33 -57 37 -65 50 -109 486 -745 542 -790 4 -3 19 -21 35 -40 48 -59 110 -122 192 -197 208 -188 423 -306 685 -376 441 -119 784 -63 1059 173 81 70 127 95 210 115 96 23 205 61 250 88 165 98 326 240 462 409 124 154 186 280 230 468 25 110 36 416 19 557 -22 179 -75 368 -138 494 -13 26 -23 49 -23 52 0 3 -16 33 -35 67 -54 96 -140 293 -184 425 -23 66 -41 124 -41 129 0 5 11 -8 25 -28 14 -20 25 -39 25 -42 0 -3 5 -10 10 -17 6 -7 35 -46 65 -87 66 -92 48 -70 187 -230 162 -188 452 -469 613 -593 5 -4 42 -32 80 -63 98 -77 325 -234 492 -339 43 -27 108 -70 145 -96 36 -26 87 -55 113 -64 49 -16 75 -30 231 -121 51 -30 94 -54 96 -54 3 0 45 -23 94 -51 132 -76 293 -152 434 -204 169 -62 221 -84 249 -106 13 -11 31 -19 41 -19 9 0 27 -9 40 -20 13 -11 35 -20 49 -20 14 0 45 -13 68 -29 23 -15 82 -43 132 -61 50 -18 91 -36 91 -40 0 -5 -35 -33 -78 -63 -225 -158 -418 -336 -583 -537 -196 -240 -239 -329 -285 -595 -21 -121 -28 -194 -28 -300 0 -130 1 -145 28 -215 99 -261 406 -853 524 -1008 57 -76 185 -199 257 -248 123 -84 159 -106 252 -153 56 -28 119 -57 140 -65 172 -62 227 -80 365 -115 205 -53 268 -62 418 -63 298 0 603 82 951 258 141 72 191 100 551 312 139 82 273 161 298 174 183 102 581 345 655 400 301 223 466 422 562 676 18 49 163 599 163 619 0 3 19 2 43 0 139 -18 1644 -48 2577 -52 650 -3 865 2 1093 25 289 29 728 79 917 105 227 31 278 35 476 35 217 0 281 5 649 50 350 44 423 58 835 160 249 62 426 102 605 140 55 11 215 50 355 86 870 221 1487 432 2175 744 22 10 195 95 385 188 348 172 361 180 754 445 141 96 265 165 379 211 l100 41 19 52 c21 57 68 104 164 165 178 113 440 357 610 568 117 145 193 255 271 390 63 109 143 263 143 274 0 3 9 25 19 49 11 23 31 78 45 122 109 344 95 623 -52 1040 -27 77 -69 196 -92 265 -57 167 -78 214 -121 275 -20 28 -48 83 -63 122 -45 117 -98 186 -296 383 -123 123 -183 174 -290 245 -107 70 -170 104 -262 139 -64 24 -114 48 -448 218 -186 95 -312 142 -405 153 -126 15 -137 21 -174 92 -18 36 -26 43 -52 43 -16 0 -46 -7 -66 -15 -55 -23 -71 -19 -122 35 l-49 51 -123 18 c-68 11 -185 31 -259 46 -292 56 -543 95 -622 95 -21 0 -38 2 -38 4 0 2 16 35 35 73 19 38 50 112 69 164 19 52 54 135 79 184 116 230 256 610 334 905 14 55 65 307 78 387 4 23 16 54 28 69 20 26 22 26 91 19 122 -14 139 -11 204 34 56 38 132 71 192 84 14 3 84 13 155 22 146 17 376 59 439 79 22 8 68 22 101 32 103 30 305 110 430 169 331 157 742 433 1074 722 71 62 337 326 386 383 69 81 163 197 185 230 13 19 27 37 30 40 3 3 31 41 62 85 47 68 85 131 214 352 84 142 307 534 342 598 147 273 278 576 337 775 50 172 81 251 153 395 341 682 536 1243 598 1720 25 197 9 410 -45 590 -10 31 -19 86 -46 265 -36 238 -101 482 -175 660 -17 41 -38 93 -47 115 -9 22 -19 45 -23 50 -4 6 -24 42 -45 80 -177 329 -502 785 -729 1024 -474 499 -690 655 -1096 793 -355 120 -748 133 -1139 38 -331 -81 -667 -248 -1057 -526 -73 -52 -136 -94 -141 -94 -5 0 -29 24 -53 53 -86 103 -367 374 -455 440 -49 36 -136 94 -193 127 -106 64 -387 209 -482 249 -387 164 -660 253 -1180 385 -503 127 -743 179 -1005 220 -93 15 -190 31 -215 36 -25 5 -68 12 -95 15 -83 10 -81 3 -42 181 20 88 41 187 47 222 6 35 34 136 61 225 30 96 56 207 65 272 16 113 37 206 78 355 52 186 72 262 181 700 63 250 132 536 154 635 85 382 112 493 136 565 29 89 80 292 130 520 19 91 42 192 50 225 88 378 114 487 156 655 48 193 110 429 148 565 11 39 33 120 50 180 17 61 49 178 72 260 22 83 89 339 148 570 158 617 186 706 316 1014 50 118 66 189 71 326 5 108 3 145 -14 220 -25 113 -136 429 -257 735 -183 460 -316 716 -413 794 -106 86 -260 124 -424 105z m-46 -190 c117 -25 235 -119 332 -268 244 -374 409 -786 481 -1205 27 -158 30 -249 10 -298 -9 -24 -29 -86 -45 -138 -33 -117 -69 -188 -117 -237 -21 -20 -43 -51 -50 -68 -22 -57 -85 -210 -101 -245 -8 -19 -19 -71 -23 -115 -4 -44 -17 -114 -29 -155 -63 -217 -245 -983 -306 -1290 -4 -19 -15 -51 -25 -70 -11 -19 -19 -52 -19 -74 0 -22 -13 -82 -29 -135 -16 -53 -41 -150 -56 -216 -14 -66 -40 -176 -55 -245 -31 -133 -149 -651 -201 -885 -17 -77 -51 -219 -74 -315 -58 -236 -111 -471 -124 -550 -5 -36 -13 -82 -16 -103 -3 -21 -15 -53 -26 -70 -14 -24 -19 -50 -19 -104 0 -55 -5 -81 -20 -105 -11 -19 -20 -51 -20 -73 0 -23 -9 -67 -20 -98 -32 -91 -97 -365 -105 -442 -4 -38 -15 -86 -25 -105 -9 -19 -20 -66 -23 -104 -4 -37 -12 -75 -19 -83 -7 -9 -18 -50 -24 -92 -7 -42 -35 -161 -63 -266 -65 -239 -95 -372 -126 -550 -13 -77 -40 -194 -60 -260 -38 -130 -166 -636 -210 -830 -14 -66 -42 -185 -60 -265 -19 -80 -46 -199 -60 -265 -15 -66 -42 -192 -61 -280 -19 -88 -42 -191 -50 -230 -9 -38 -24 -108 -34 -155 -35 -163 -91 -405 -106 -465 -9 -33 -20 -125 -24 -205 -10 -168 -26 -224 -78 -274 -39 -39 -78 -50 -204 -62 l-77 -7 -7 27 c-15 60 2 179 40 286 53 148 96 323 157 635 40 203 58 277 75 302 23 34 24 55 3 105 -30 73 14 216 100 331 52 68 55 110 11 157 -28 30 -40 70 -22 70 5 0 23 20 41 45 17 24 38 51 46 59 40 40 68 121 77 219 10 117 24 176 84 354 24 73 49 167 54 210 23 181 33 236 71 388 22 88 46 180 54 205 9 25 21 77 29 115 15 78 95 444 126 575 11 47 28 128 39 180 56 271 75 348 92 376 14 23 19 51 19 105 0 57 5 81 20 104 11 17 20 41 20 54 0 13 8 38 19 55 10 17 21 56 24 86 3 30 13 69 22 87 9 18 19 64 22 103 3 38 9 70 13 70 12 0 30 100 30 169 0 37 4 71 10 77 31 31 83 229 111 424 7 47 20 106 30 132 10 25 25 86 34 135 8 48 35 150 60 227 61 183 95 328 95 398 0 36 9 81 23 120 30 79 66 226 167 683 30 134 81 314 130 460 23 66 81 251 130 410 49 160 101 322 115 360 92 251 121 333 151 436 18 64 48 154 65 200 49 131 70 253 76 437 4 118 9 162 18 162 22 0 34 209 15 280 -26 101 -59 150 -100 150 -10 0 -31 5 -47 11 -22 8 -24 12 -13 19 12 7 12 12 3 21 -9 9 -7 21 8 50 29 58 25 132 -12 220 -17 41 -34 85 -39 99 -5 14 -20 54 -35 90 -14 36 -40 103 -57 150 -40 113 -78 178 -135 232 -159 148 -399 144 -578 -11 -17 -14 -51 -42 -75 -61 -24 -19 -62 -50 -83 -69 -21 -19 -60 -44 -86 -56 -54 -26 -101 -71 -101 -98 0 -25 30 -75 49 -82 9 -4 30 11 57 40 23 25 47 45 53 45 11 0 38 20 70 51 9 9 36 29 61 46 43 29 58 42 122 98 15 14 51 38 81 55 l55 31 11 -32 c6 -17 8 -36 4 -43 -10 -16 -84 -108 -105 -129 -10 -10 -18 -21 -18 -26 0 -4 -16 -24 -35 -44 -46 -48 -46 -78 0 -100 45 -21 61 -22 41 -1 -20 20 -20 30 0 38 23 9 41 -9 38 -36 -1 -13 -3 -26 -3 -30 -1 -4 -7 -5 -13 -3 -13 4 -78 -75 -78 -95 0 -5 -4 -10 -10 -10 -5 0 -10 -5 -10 -11 0 -6 -6 -16 -12 -24 -27 -27 -48 -56 -48 -63 0 -4 -9 -13 -20 -20 -11 -7 -20 -20 -20 -30 0 -19 42 -62 60 -62 6 0 22 22 38 50 15 27 31 50 36 50 5 0 4 -6 -1 -12 -6 -7 -13 -26 -16 -43 l-7 -30 17 32 c10 21 28 37 50 44 18 6 33 16 33 22 0 8 -4 7 -12 -1 -17 -17 -48 -15 -48 2 0 8 12 28 26 43 l27 28 -7 -25 c-4 -15 2 -9 16 16 30 54 49 78 73 93 15 9 16 11 3 7 -32 -10 -19 12 45 77 79 81 127 137 127 146 0 4 14 17 30 29 29 22 43 16 16 -7 -8 -7 -17 -23 -20 -36 -4 -14 -11 -25 -16 -25 -16 0 -57 -44 -61 -65 -3 -12 -14 -21 -27 -23 -12 -2 -22 -8 -22 -13 0 -7 12 -8 30 -4 37 8 38 -4 5 -43 -14 -17 -25 -33 -25 -37 0 -4 -10 -18 -22 -30 -13 -12 -40 -43 -61 -69 -35 -42 -40 -45 -51 -30 -10 13 -15 14 -20 5 -5 -7 -1 -20 7 -29 14 -16 14 -19 -6 -38 -12 -11 -30 -23 -39 -27 -10 -3 -18 -12 -18 -19 0 -17 -32 -46 -46 -41 -5 2 -11 -8 -12 -21 -1 -13 -15 -49 -32 -79 -40 -73 -40 -97 1 -97 24 0 32 6 40 30 6 17 15 30 20 30 7 0 45 38 99 100 12 14 29 38 37 54 14 27 40 58 116 137 15 16 27 33 27 39 0 5 14 17 31 25 16 9 49 34 72 56 42 39 42 39 45 14 2 -14 8 -25 13 -25 15 0 -49 -87 -107 -145 -28 -28 -63 -71 -77 -95 -15 -25 -55 -75 -90 -111 -35 -37 -72 -84 -82 -105 -10 -21 -29 -47 -42 -57 -12 -10 -23 -26 -23 -35 0 -9 -11 -28 -25 -42 -22 -23 -24 -29 -11 -39 22 -19 51 -5 72 34 10 19 21 35 25 35 12 0 165 156 178 181 7 15 54 69 105 120 58 60 90 99 88 111 -2 10 2 18 7 18 7 0 9 -14 5 -35 -4 -27 -2 -35 10 -35 9 0 16 -3 16 -6 0 -14 -25 -50 -46 -67 -13 -10 -49 -57 -81 -105 -32 -48 -86 -116 -121 -151 -59 -59 -132 -160 -132 -180 0 -5 -20 -26 -44 -47 -51 -45 -62 -72 -42 -100 15 -19 16 -18 41 9 14 15 29 27 33 27 4 0 13 12 20 28 7 15 44 53 82 84 47 40 78 76 100 116 35 65 230 266 237 245 3 -7 11 -13 19 -13 23 0 13 -60 -13 -77 -22 -15 -63 -76 -63 -94 0 -11 -8 -20 -137 -156 -50 -52 -112 -131 -143 -182 -30 -49 -65 -94 -77 -100 -11 -5 -29 -23 -39 -40 -10 -17 -23 -31 -29 -31 -17 0 -36 -42 -32 -70 6 -39 31 -35 73 11 22 23 51 53 65 68 15 14 30 35 33 46 7 22 80 105 92 105 15 0 95 94 130 153 20 31 40 57 45 57 5 0 9 7 9 15 0 8 11 17 24 21 13 3 32 21 42 39 10 19 27 39 39 45 11 6 29 27 40 47 11 20 35 44 54 54 33 18 34 17 51 -3 15 -19 15 -25 4 -47 -8 -14 -14 -34 -14 -43 0 -10 -4 -18 -10 -18 -5 0 -10 -6 -10 -13 0 -8 -12 -25 -27 -39 -38 -35 -75 -85 -91 -122 -7 -17 -21 -38 -30 -47 -9 -9 -28 -31 -42 -49 -14 -17 -32 -40 -40 -50 -8 -10 -26 -37 -40 -60 -14 -24 -51 -68 -83 -99 -61 -60 -128 -146 -151 -196 -8 -17 -37 -54 -65 -82 -42 -43 -51 -58 -51 -87 0 -20 3 -36 6 -36 21 0 94 60 94 78 0 4 14 21 30 37 17 16 30 33 30 38 0 5 14 26 30 46 17 20 34 41 38 46 5 6 22 22 40 37 17 14 43 47 57 73 15 25 67 86 116 135 49 49 89 96 89 105 0 25 144 165 170 165 19 0 21 -4 16 -27 -4 -16 -10 -41 -13 -58 -3 -16 -11 -37 -18 -45 -7 -8 -15 -26 -18 -40 -7 -25 -27 -52 -98 -127 -21 -22 -39 -44 -39 -46 0 -3 -14 -21 -30 -39 -17 -18 -51 -63 -76 -100 -25 -38 -49 -68 -54 -68 -5 0 -19 -18 -31 -40 -13 -22 -26 -40 -30 -40 -19 0 -107 -93 -128 -135 -13 -25 -29 -49 -36 -51 -8 -3 -21 -23 -29 -45 -9 -22 -21 -37 -26 -34 -11 7 -92 -73 -170 -169 -30 -37 -76 -92 -101 -122 -31 -37 -49 -68 -53 -95 -3 -21 -11 -39 -16 -39 -15 0 -12 -20 4 -26 13 -5 106 53 106 65 0 3 18 26 40 51 22 25 40 49 40 54 0 5 18 26 40 47 22 21 40 42 40 46 0 4 17 26 38 48 43 46 112 141 112 154 0 5 17 24 37 43 73 65 119 115 158 172 22 32 87 104 144 160 57 55 116 114 131 129 24 24 32 27 49 17 12 -6 21 -15 21 -20 0 -20 -27 -68 -77 -140 -77 -109 -80 -113 -94 -104 -8 4 -10 3 -5 -5 9 -14 -116 -184 -185 -251 -25 -25 -63 -72 -84 -105 -21 -33 -60 -79 -86 -103 -27 -24 -62 -65 -78 -93 -17 -27 -35 -49 -41 -49 -5 0 -16 -12 -24 -27 -8 -16 -41 -55 -74 -89 -32 -34 -70 -83 -83 -109 -13 -26 -34 -54 -46 -63 -13 -8 -23 -22 -23 -31 0 -9 -19 -29 -41 -46 -46 -34 -50 -68 -9 -73 18 -2 34 6 54 27 26 27 27 32 15 47 -12 15 -12 16 7 10 23 -7 68 22 46 30 -17 8 -5 24 13 17 10 -3 15 2 15 16 0 16 6 21 25 21 14 0 25 4 25 9 0 6 18 31 40 56 22 25 40 55 40 66 0 10 5 19 10 19 6 0 15 11 21 24 6 13 22 29 35 35 13 5 26 22 30 36 3 14 10 25 14 25 13 0 -8 -64 -25 -76 -8 -6 -15 -19 -15 -28 0 -19 -17 -22 -23 -3 -2 6 -2 1 0 -13 6 -33 23 -51 23 -24 0 23 34 64 53 64 9 0 9 -2 0 -8 -6 -4 -23 -31 -36 -60 -14 -29 -27 -52 -29 -50 -2 2 -23 -16 -47 -40 -24 -23 -48 -39 -54 -35 -7 3 -9 3 -5 -2 4 -4 1 -17 -7 -29 -8 -11 -15 -26 -15 -33 0 -7 -11 -24 -26 -38 -14 -14 -22 -30 -19 -35 4 -6 1 -9 -6 -8 -7 2 -18 -7 -24 -19 -5 -13 -14 -23 -20 -23 -13 -1 -62 -78 -70 -113 -4 -15 -11 -27 -16 -27 -5 0 -14 -11 -19 -25 -5 -14 -14 -25 -19 -25 -6 0 -8 -7 -5 -15 4 -8 13 -15 22 -15 16 0 152 136 152 152 0 12 29 46 91 108 31 30 59 65 63 78 9 26 14 27 44 6 28 -19 28 -27 -2 -58 -28 -31 -32 -32 -32 -6 0 11 6 20 12 20 13 0 26 25 17 33 -12 13 -32 -7 -38 -36 -15 -81 -33 -123 -65 -157 -64 -69 -81 -93 -102 -140 -13 -31 -30 -50 -50 -59 -18 -8 -40 -33 -59 -66 -16 -29 -36 -56 -44 -59 -8 -3 -15 -12 -15 -21 0 -20 -29 -65 -42 -65 -5 0 -15 -6 -23 -13 -20 -21 -54 -96 -45 -102 26 -16 140 73 140 110 0 8 5 15 10 15 6 0 10 7 10 15 0 8 9 19 19 25 11 5 22 18 25 28 3 10 19 26 36 35 20 12 31 28 36 53 6 33 74 114 96 114 5 0 15 15 23 33 20 47 60 97 95 118 16 10 30 27 31 36 1 12 4 10 9 -7 5 -17 3 -29 -7 -36 -11 -10 -11 -13 1 -23 12 -10 9 -21 -17 -74 -17 -34 -41 -70 -53 -79 -12 -10 -37 -41 -55 -70 -34 -53 -48 -72 -102 -132 -40 -44 -87 -113 -87 -126 0 -10 -20 -34 -93 -114 -16 -17 -37 -50 -47 -73 -10 -23 -37 -60 -59 -84 -23 -23 -41 -48 -41 -55 0 -8 -3 -14 -7 -14 -9 0 -33 -48 -33 -65 0 -5 9 -16 20 -23 16 -10 24 -10 40 0 11 7 20 16 20 20 0 4 11 19 26 33 14 14 22 30 19 35 -3 6 -2 10 3 10 5 0 12 8 16 18 11 34 47 85 89 126 48 49 74 82 90 114 5 12 14 22 19 22 4 0 8 7 8 15 0 8 8 19 18 24 9 5 28 27 41 50 14 22 28 38 32 35 4 -2 10 7 13 21 4 14 13 25 21 25 8 0 15 -2 15 -5 0 -9 -24 -50 -35 -58 -6 -5 -4 -7 5 -5 8 3 19 14 25 26 13 29 28 28 19 0 -17 -56 -55 -86 -68 -55 -3 6 -3 -1 1 -17 5 -26 4 -28 -18 -21 -18 5 -20 4 -9 -4 12 -9 12 -13 -6 -33 -11 -13 -26 -37 -33 -54 -7 -17 -33 -53 -59 -80 -47 -50 -93 -113 -105 -147 -5 -13 -13 -17 -29 -12 -18 5 -20 4 -8 -4 13 -9 12 -14 -8 -33 -16 -16 -25 -19 -30 -11 -4 6 -7 -8 -7 -30 0 -25 -7 -50 -17 -62 -58 -68 -127 -161 -174 -232 -30 -46 -59 -83 -64 -83 -6 0 -10 -7 -10 -15 0 -9 -7 -18 -15 -21 -8 -4 -15 -12 -15 -19 0 -7 -7 -18 -15 -25 -8 -7 -17 -28 -20 -49 -11 -65 -47 -152 -77 -184 -17 -18 -36 -39 -44 -48 -8 -9 -14 -25 -14 -36 0 -12 -8 -23 -20 -26 -21 -5 -27 -40 -11 -66 7 -11 13 -9 30 8 11 11 25 21 30 21 9 0 25 30 23 42 -1 4 16 21 38 38 22 18 40 36 40 42 0 6 17 30 38 53 49 55 72 84 72 91 0 3 13 19 30 37 16 18 30 37 30 43 0 6 25 35 55 65 30 30 55 58 55 64 1 5 28 37 61 70 32 33 62 70 65 83 4 12 10 22 15 22 5 0 9 6 9 14 0 7 9 16 20 19 11 3 23 13 27 23 3 9 30 40 59 68 28 28 64 74 79 103 30 59 64 86 103 81 21 -2 26 -8 24 -23 -4 -30 -34 -95 -44 -95 -4 0 -7 -3 -6 -7 5 -14 -36 -72 -45 -66 -6 3 -7 1 -3 -5 4 -7 -4 -24 -18 -39 -15 -15 -26 -31 -26 -35 0 -3 -17 -24 -37 -45 -59 -60 -93 -102 -93 -112 0 -5 -4 -11 -8 -13 -4 -1 -20 -25 -36 -51 -15 -27 -34 -51 -42 -54 -8 -3 -14 -9 -14 -14 0 -4 -24 -32 -54 -61 -33 -33 -56 -66 -61 -86 -3 -18 -13 -32 -21 -32 -8 0 -14 -3 -14 -8 0 -4 -33 -42 -73 -84 -41 -42 -81 -91 -90 -109 -9 -19 -34 -54 -57 -78 -22 -24 -40 -47 -40 -50 0 -4 -20 -26 -45 -50 -40 -38 -85 -112 -85 -140 0 -19 25 -17 46 3 11 12 38 37 60 58 48 45 64 64 64 77 0 6 8 15 19 20 10 6 22 23 25 37 7 27 54 77 128 139 20 17 53 59 73 94 35 59 89 121 105 121 4 0 15 16 24 35 9 19 24 40 34 47 9 7 22 22 28 33 6 11 24 29 40 40 17 11 43 37 60 58 48 63 80 97 93 97 22 0 6 -92 -25 -140 -15 -25 -37 -61 -47 -80 -10 -19 -40 -57 -67 -85 -26 -27 -55 -68 -65 -90 -9 -22 -31 -49 -48 -60 -17 -11 -35 -29 -41 -40 -6 -11 -14 -22 -17 -25 -3 -3 -14 -22 -23 -42 -10 -20 -33 -46 -52 -57 -19 -11 -34 -28 -34 -37 0 -9 -34 -50 -75 -90 -41 -40 -75 -78 -75 -83 0 -6 -41 -52 -90 -103 -50 -51 -97 -109 -106 -128 -10 -19 -30 -48 -46 -65 -16 -16 -31 -40 -34 -52 -4 -13 -13 -23 -21 -23 -8 0 -17 -9 -20 -20 -3 -11 -14 -20 -24 -20 -13 0 -19 -7 -19 -21 0 -24 -23 -50 -42 -47 -20 4 -10 -44 14 -64 25 -22 33 -18 62 40 13 26 43 64 66 86 23 22 39 45 36 52 -3 9 2 14 14 14 11 0 20 5 20 11 0 6 21 31 46 57 25 25 58 64 73 86 14 23 34 47 44 54 9 7 23 25 31 40 8 15 52 66 98 112 45 47 93 100 106 117 15 21 29 30 40 26 15 -4 15 -3 2 6 -13 10 -8 18 30 51 24 22 47 40 51 40 4 0 9 6 12 13 2 6 3 3 1 -7 -2 -11 1 -25 7 -32 14 -17 0 -63 -22 -77 -11 -7 -19 -18 -19 -25 0 -7 -7 -15 -15 -18 -8 -4 -15 -17 -15 -30 0 -14 -6 -24 -15 -24 -8 0 -30 -24 -48 -52 -19 -29 -54 -75 -78 -103 -25 -27 -56 -66 -71 -85 -14 -19 -40 -50 -57 -67 -17 -18 -43 -60 -58 -93 -15 -33 -32 -60 -38 -60 -16 0 -133 -132 -157 -176 -17 -33 -125 -164 -163 -199 -6 -5 -20 -23 -33 -39 -13 -17 -22 -23 -23 -15 -1 8 -5 -6 -10 -31 -5 -25 -5 -48 0 -53 10 -10 51 9 51 23 0 6 9 10 20 10 11 0 20 5 20 10 0 6 25 36 55 66 30 31 55 62 55 69 0 7 7 15 15 19 8 3 15 13 15 21 0 9 34 51 75 95 44 47 83 98 96 129 16 36 28 51 42 51 10 0 21 9 24 20 3 10 16 26 30 35 13 9 44 47 69 85 51 80 100 122 110 95 4 -9 12 -14 19 -11 35 13 -18 -66 -102 -153 -63 -65 -102 -115 -120 -154 -18 -38 -31 -56 -40 -52 -8 2 -12 1 -9 -4 3 -4 -8 -17 -24 -29 -16 -12 -43 -51 -60 -87 -17 -36 -35 -65 -41 -65 -5 0 -13 -8 -16 -17 -9 -22 -28 -43 -42 -43 -10 0 -16 -7 -105 -125 -28 -38 -66 -86 -84 -104 -17 -19 -43 -59 -57 -88 -13 -29 -29 -53 -35 -53 -6 0 -13 -7 -16 -15 -14 -36 -80 -95 -114 -100 -79 -14 -81 -15 -100 -59 -10 -24 -27 -50 -37 -57 -10 -8 -30 -39 -45 -69 -15 -30 -36 -64 -46 -75 -34 -34 -60 -54 -66 -48 -3 4 -6 1 -6 -5 0 -7 -4 -12 -9 -12 -20 0 33 114 129 273 36 59 81 136 100 171 34 63 103 153 128 169 6 4 12 13 12 20 0 7 21 32 45 56 26 27 45 54 45 67 0 12 3 29 6 38 3 9 1 16 -5 16 -6 0 -11 -18 -11 -42 0 -53 -8 -45 -14 13 -3 32 -8 44 -20 44 -9 0 -15 -3 -13 -7 1 -4 -9 -15 -22 -24 -19 -14 -25 -14 -33 -3 -7 10 -8 5 -4 -16 5 -22 4 -26 -4 -15 -5 8 -10 23 -10 33 0 9 -7 17 -15 17 -9 0 1 16 25 40 28 28 40 49 40 68 0 46 19 61 80 64 48 3 55 6 58 26 2 12 -1 22 -7 22 -13 0 -15 56 -2 64 14 9 10 87 -5 93 -13 5 -104 -78 -104 -95 0 -4 -6 -14 -12 -20 -7 -7 -13 -16 -14 -20 -3 -23 -20 -45 -41 -53 -13 -5 -28 -19 -34 -31 -6 -13 -19 -38 -29 -57 -19 -34 -19 -34 -28 -11 -6 17 -11 20 -16 11 -5 -7 -3 -18 3 -24 18 -18 13 -29 -10 -22 -18 6 -20 4 -14 -14 7 -22 -9 -30 -19 -8 -3 6 -3 2 -1 -9 3 -12 0 -28 -7 -35 -7 -8 -22 -31 -33 -53 -22 -42 -43 -56 -55 -36 -10 16 7 88 25 106 8 8 19 23 25 32 8 15 11 15 21 2 8 -12 9 -9 4 14 -5 23 -3 27 10 22 9 -3 14 -2 10 3 -3 5 11 33 30 63 20 29 38 63 41 76 4 12 9 22 13 22 4 0 14 12 21 28 7 15 15 22 17 15 2 -7 -1 -22 -7 -33 -17 -32 -5 -35 15 -4 14 22 15 31 6 47 -7 10 -10 22 -6 25 3 4 10 0 15 -8 6 -8 10 -10 10 -5 0 6 12 18 28 27 15 10 21 18 14 18 -7 0 -20 -7 -29 -15 -8 -9 -18 -13 -21 -10 -4 3 9 21 28 39 75 70 131 140 137 168 3 16 27 50 56 78 42 41 49 53 43 75 -8 31 -32 42 -57 27 -24 -15 -27 -15 -32 1 -2 6 -2 1 0 -12 3 -15 -3 -28 -17 -38 -11 -8 -20 -20 -20 -27 0 -17 -35 -48 -43 -39 -4 3 -7 -1 -7 -11 0 -31 -128 -189 -172 -212 -34 -18 -38 -18 -38 1 0 8 7 15 16 15 8 0 12 5 9 10 -6 10 69 121 87 128 4 2 8 9 8 15 0 7 14 26 30 44 17 18 30 35 30 39 0 4 16 22 35 39 59 55 68 108 18 118 -28 5 -73 -29 -73 -55 0 -12 -110 -118 -130 -126 -4 -2 -10 9 -13 25 -4 20 3 38 27 70 82 111 116 162 116 172 0 6 3 11 8 11 4 0 17 26 29 58 14 35 35 66 55 82 55 44 100 94 115 129 30 69 26 102 -10 93 -40 -10 -82 -50 -117 -112 -18 -33 -39 -60 -46 -60 -7 0 -17 -13 -22 -29 -6 -16 -34 -53 -64 -83 -29 -30 -57 -61 -63 -69 -5 -8 -26 -38 -45 -66 -19 -29 -41 -53 -47 -53 -7 0 -13 -4 -13 -10 0 -5 -4 -10 -10 -10 -5 0 -10 21 -10 48 0 41 8 59 64 144 35 53 67 94 71 90 5 -4 5 -2 2 5 -8 13 62 123 109 170 18 18 40 49 49 70 39 88 39 88 120 174 8 9 15 23 15 32 0 8 6 17 13 20 9 3 7 10 -6 23 -14 15 -20 16 -35 6 -9 -6 -27 -16 -39 -21 -12 -6 -24 -19 -28 -31 -10 -31 -50 -70 -71 -70 -11 0 -25 -9 -32 -20 -7 -12 -17 -18 -22 -15 -6 3 -10 2 -10 -4 0 -5 4 -11 9 -13 5 -1 -1 -21 -14 -42 -21 -35 -25 -37 -30 -20 -4 10 -11 27 -16 36 -13 26 -12 29 14 25 12 -2 17 -2 10 0 -7 3 -10 18 -6 41 7 55 11 62 28 56 8 -3 15 -1 15 5 0 6 -8 11 -17 11 -17 1 -17 1 0 11 9 5 17 17 17 24 0 8 35 50 78 93 43 43 89 93 104 112 35 48 78 128 78 146 0 16 23 43 37 45 11 1 113 124 153 187 19 28 38 52 43 52 20 0 67 70 67 100 0 44 -83 9 -103 -44 -4 -9 -13 -16 -21 -16 -7 0 -17 -7 -20 -16 -3 -8 -10 -12 -16 -9 -5 3 -8 0 -6 -7 3 -7 -17 -31 -43 -53 -26 -22 -63 -60 -82 -85 -18 -25 -37 -47 -40 -50 -4 -3 -9 -15 -13 -27 -7 -23 -85 -93 -103 -93 -6 0 -14 16 -18 37 -6 31 -3 39 19 57 25 21 59 67 85 117 7 15 23 32 35 38 12 7 37 35 56 64 19 29 38 54 43 55 4 2 7 10 7 17 0 8 18 26 40 42 22 15 40 34 40 41 0 6 4 12 8 12 5 0 18 19 28 42 10 23 30 54 44 69 14 15 41 44 61 65 20 22 34 45 32 52 -7 19 -40 14 -46 -8 -3 -12 -11 -18 -19 -15 -8 3 -30 -14 -53 -41 -22 -25 -67 -74 -100 -108 -33 -33 -67 -70 -76 -81 -22 -27 -56 -54 -85 -67 -13 -6 -24 -17 -24 -25 0 -7 -4 -13 -10 -13 -13 0 -13 6 2 30 15 23 4 37 -16 21 -8 -7 -2 15 14 48 34 71 73 127 135 195 11 12 36 43 55 68 19 26 48 54 63 63 38 22 34 59 -6 63 -22 3 -35 -4 -60 -33 -18 -20 -47 -51 -66 -68 -19 -18 -48 -47 -66 -64 -32 -34 -65 -43 -65 -20 0 7 13 31 30 53 16 21 30 49 30 60 0 12 11 29 24 38 14 8 33 29 42 46 10 16 26 33 36 36 9 3 27 22 40 42 23 38 48 69 106 129 35 36 42 77 16 87 -12 5 -49 -25 -131 -109 -63 -63 -121 -115 -129 -115 -8 0 -14 -8 -14 -17 -1 -21 -15 -40 -50 -68 -14 -11 -19 -13 -12 -5 6 8 12 20 12 28 0 9 -8 5 -20 -11 -11 -14 -19 -29 -18 -34 9 -34 -40 -93 -78 -93 -35 0 -50 -18 -57 -68 -3 -24 -12 -51 -21 -61 -10 -11 -16 -36 -16 -67 0 -27 -11 -107 -25 -179 -28 -141 -48 -269 -65 -410 -6 -49 -17 -108 -25 -131 -7 -22 -16 -80 -20 -128 -3 -48 -10 -95 -15 -104 -27 -51 -70 -290 -70 -390 0 -48 -3 -63 -10 -52 -8 11 -8 7 -3 -15 8 -34 8 -54 -2 -142 -8 -61 -7 -62 20 -75 24 -11 27 -16 22 -49 -3 -21 -17 -53 -31 -72 -14 -19 -26 -37 -26 -42 0 -4 -9 -16 -21 -26 -26 -23 -38 -97 -18 -110 8 -5 29 -9 47 -9 29 0 32 -3 28 -24 -2 -13 -17 -46 -32 -73 -56 -99 -87 -169 -92 -210 -5 -43 -4 -43 27 -43 38 0 38 -6 -14 -115 -33 -69 -33 -70 -16 -100 21 -36 41 -41 81 -21 16 8 30 13 30 10 0 -11 -36 -90 -47 -104 -6 -8 -35 -46 -63 -85 -45 -63 -50 -75 -50 -122 l0 -53 41 0 c32 0 40 3 35 15 -5 15 18 22 27 8 2 -5 2 -2 1 5 -5 18 7 43 17 36 5 -3 9 6 9 20 0 20 4 24 17 19 12 -5 14 -3 8 8 -6 11 -5 11 5 2 11 -10 9 -17 -6 -40 -10 -15 -24 -40 -31 -55 -12 -29 -23 -43 -59 -83 -31 -34 -94 -166 -94 -197 0 -21 9 -34 35 -50 51 -34 61 -58 40 -99 -10 -18 -23 -38 -29 -45 -55 -58 -100 -157 -101 -219 l0 -50 43 2 c23 1 42 0 42 -2 0 -10 -44 -82 -64 -105 -32 -37 -61 -81 -75 -116 -13 -34 -7 -94 12 -106 20 -13 54 -9 67 7 14 17 46 20 55 5 3 -5 -16 -44 -43 -87 -27 -43 -59 -96 -71 -118 -12 -22 -35 -62 -52 -90 -16 -27 -33 -57 -36 -65 -4 -8 -9 -17 -12 -20 -11 -9 -31 -61 -31 -79 0 -10 11 -26 25 -35 29 -19 32 -53 11 -114 -28 -78 -11 -117 45 -108 38 6 39 6 39 -25 0 -31 -20 -65 -85 -142 -6 -7 -26 -37 -45 -67 -19 -30 -45 -65 -57 -78 -28 -28 -28 -55 -3 -102 18 -35 18 -35 -3 -75 -12 -22 -23 -42 -25 -45 -7 -10 -22 27 -22 57 0 34 -18 83 -31 83 -17 0 -37 -75 -59 -230 -38 -261 -51 -337 -121 -690 -29 -146 -54 -307 -59 -378 -9 -119 -37 -291 -66 -402 -8 -30 -14 -86 -14 -126 0 -39 -11 -120 -24 -180 -13 -60 -36 -183 -51 -274 -14 -91 -35 -211 -46 -268 -23 -119 -17 -142 41 -174 77 -42 74 -36 40 -64 -16 -14 -44 -54 -62 -89 -18 -38 -39 -66 -51 -69 -25 -6 -63 9 -105 41 -50 37 -55 61 -36 166 8 50 26 175 40 277 14 102 29 212 34 245 26 167 43 277 69 456 16 108 35 206 42 217 7 12 24 26 37 33 21 12 22 17 15 49 -16 71 -9 132 22 192 l29 58 -24 42 c-39 69 -33 136 25 283 47 118 48 121 36 176 -16 78 -14 137 9 269 12 63 25 142 30 175 5 33 23 152 40 265 17 113 39 277 49 366 11 89 26 174 34 190 13 26 29 192 28 291 -1 18 3 34 8 38 6 3 12 24 15 48 9 60 54 445 59 492 2 22 11 67 20 100 9 33 21 119 26 190 5 72 14 148 20 170 13 47 47 237 61 345 29 224 41 313 55 385 41 225 89 558 106 740 7 79 17 132 30 157 15 29 19 58 19 138 0 77 4 108 18 133 12 23 19 68 24 157 11 175 13 193 21 207 11 17 27 108 37 203 9 89 19 153 44 285 9 44 29 181 45 305 37 279 67 477 87 572 9 40 19 123 23 183 5 73 14 121 25 143 12 24 19 67 23 145 3 69 11 120 19 134 9 14 14 51 14 97 0 45 8 99 19 137 47 153 91 350 115 514 18 117 46 542 46 684 0 159 6 170 173 334 131 129 243 254 337 377 103 134 286 321 445 455 113 94 115 96 165 135 25 19 56 45 70 58 50 45 100 62 182 62 42 0 101 -5 130 -11z m52 -704 c8 -23 -31 -90 -67 -115 -18 -12 -45 -40 -62 -61 -46 -59 -69 -50 -41 16 8 19 15 25 20 17 4 -7 2 -12 -3 -12 -6 0 -11 -8 -11 -17 1 -11 9 -4 23 20 12 20 33 40 46 44 20 5 21 7 7 15 -9 5 -14 14 -10 19 4 6 11 6 19 -1 20 -17 32 -6 40 37 4 21 9 41 11 45 8 13 21 9 28 -7z m-54 -45 c0 -16 -4 -30 -10 -30 -11 0 -14 43 -3 53 11 12 13 8 13 -23z m-235 -39 c-3 -6 -11 -8 -17 -5 -6 4 -5 9 3 15 16 10 23 4 14 -10z m-49 -38 c-14 -14 -30 -23 -34 -19 -3 4 4 16 18 26 37 29 47 24 16 -7z m44 -3 c0 -5 -4 -10 -10 -10 -5 0 -10 -7 -10 -15 0 -8 -4 -15 -10 -15 -13 0 -13 6 2 30 14 21 28 26 28 10z m-70 -36 c0 -2 -9 -4 -20 -4 -11 0 -20 4 -20 9 0 5 9 7 20 4 11 -3 20 -7 20 -9z m20 -39 c0 -8 -7 -15 -15 -15 -16 0 -20 12 -8 23 11 12 23 8 23 -8z m388 -6 c7 -12 11 -24 8 -27 -6 -6 -35 27 -36 41 0 14 15 7 28 -14z m-38 -17 c0 -4 -9 -8 -19 -8 -15 0 -17 3 -9 13 10 12 28 9 28 -5z m28 -37 c-3 -3 -9 2 -12 12 -6 14 -5 15 5 6 7 -7 10 -15 7 -18z m-13 -24 c-6 -5 -25 10 -25 20 0 5 6 4 14 -3 8 -7 12 -15 11 -17z m142 -68 c2 -6 -7 -22 -20 -35 -14 -12 -32 -36 -40 -53 -13 -24 -16 -26 -16 -10 0 11 6 29 14 39 11 15 12 23 3 33 -8 10 -7 17 8 28 21 17 45 16 51 -2z m-77 -48 c0 -8 -2 -15 -4 -15 -2 0 -6 7 -10 15 -3 8 -1 15 4 15 6 0 10 -7 10 -15z m-30 -30 c-7 -8 -19 -15 -27 -15 -13 0 -13 3 -3 15 7 8 19 15 27 15 13 0 13 -3 3 -15z m20 -45 c0 -5 -4 -10 -9 -10 -6 0 -13 5 -16 10 -3 6 1 10 9 10 9 0 16 -4 16 -10z m-30 -20 c0 -5 -7 -10 -15 -10 -8 0 -15 5 -15 10 0 6 7 10 15 10 8 0 15 -4 15 -10z m170 -15 c-7 -8 -23 -15 -35 -15 -13 0 -26 -6 -28 -12 -4 -10 -6 -10 -6 -1 -1 12 44 40 68 42 11 1 11 -2 1 -14z m30 -20 c0 -8 -7 -15 -16 -15 -14 0 -14 3 -4 15 7 8 14 15 16 15 2 0 4 -7 4 -15z m-40 -65 c-6 -11 -15 -20 -20 -20 -6 0 -10 -7 -10 -15 0 -8 -4 -15 -10 -15 -16 0 -12 12 17 42 32 33 38 35 23 8z m-85 1 c3 -5 1 -12 -5 -16 -5 -3 -10 1 -10 9 0 18 6 21 15 7z m-35 -41 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m250 -104 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m50 -161 c9 -10 11 -32 7 -67 -7 -59 -8 -61 -31 -52 -11 4 -15 13 -11 25 9 27 -3 59 -20 53 -7 -3 -16 -1 -19 4 -3 5 2 9 12 8 9 0 18 6 18 14 3 28 4 30 18 30 7 0 19 -7 26 -15z m-340 -995 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m2 -52 c-8 -8 -9 -4 -5 13 4 13 8 18 11 10 2 -7 -1 -18 -6 -23z m-44 -73 c-3 -3 -9 2 -12 12 -6 14 -5 15 5 6 7 -7 10 -15 7 -18z m-45 -17 c8 -24 -14 -70 -30 -63 -12 4 -14 0 -10 -15 3 -13 0 -20 -9 -20 -8 0 -14 -4 -14 -10 0 -5 -4 -10 -10 -10 -16 0 -11 25 10 48 15 15 18 29 14 51 -6 28 -4 31 19 31 14 0 27 -6 30 -12z m-70 -48 c-10 -12 -21 -16 -26 -11 -13 13 1 31 23 31 19 0 19 -1 3 -20z m-37 -47 c-4 -9 -1 -21 6 -26 9 -6 8 -7 -5 -3 -12 4 -20 -2 -27 -19 -5 -14 -16 -25 -25 -25 -19 0 -20 19 -1 26 8 3 20 19 26 35 13 30 37 42 26 12z m27 -64 c-4 -12 -14 -24 -25 -26 -10 -3 -18 -10 -18 -15 0 -5 -4 -6 -10 -3 -17 11 -11 25 15 35 14 5 25 14 25 20 0 5 4 10 9 10 5 0 7 -10 4 -21z m112 11 c3 -6 -1 -7 -9 -4 -18 7 -21 14 -7 14 6 0 13 -4 16 -10z m-22 -17 c4 -3 3 -11 -1 -17 -5 -6 -14 -30 -22 -54 -7 -23 -28 -59 -45 -80 -18 -20 -42 -53 -54 -72 -20 -33 -26 -29 -22 13 3 26 -18 20 -29 -9 -9 -21 -7 -29 7 -39 10 -8 15 -17 11 -21 -5 -4 -17 1 -27 10 -11 10 -25 15 -31 11 -8 -5 -5 -12 9 -22 12 -8 18 -19 15 -25 -4 -6 -10 -5 -16 3 -6 10 -7 7 -3 -8 4 -14 2 -23 -4 -23 -6 0 -11 7 -11 16 0 8 -7 23 -16 31 -14 15 -13 18 15 40 17 14 31 31 31 38 0 19 38 29 55 15 12 -10 15 -9 15 3 0 8 17 29 38 46 25 21 32 30 20 31 -9 0 -20 -5 -23 -10 -4 -6 -10 -8 -15 -5 -4 2 1 23 13 45 14 29 23 38 30 31 8 -8 5 -15 -9 -25 -22 -16 -15 -30 10 -20 9 3 16 14 16 23 0 9 5 22 12 29 8 8 9 12 1 12 -6 0 -13 -3 -16 -7 -2 -5 -2 -2 0 6 2 8 -2 11 -12 7 -9 -3 -13 -2 -10 4 3 6 17 7 31 4 19 -5 23 -3 18 10 -6 16 7 22 19 9z m-174 -17 c9 -10 8 -15 -2 -19 -7 -3 -19 4 -25 14 -10 15 -9 19 2 19 7 0 19 -6 25 -14z m-3 -41 c8 10 17 15 21 12 11 -12 -24 -40 -41 -34 -9 4 -16 14 -16 24 1 17 2 16 12 -1 10 -19 11 -19 24 -1z m64 -94 c0 -5 -7 -11 -14 -14 -10 -4 -13 -1 -9 9 6 15 23 19 23 5z m-130 -172 c0 -10 5 -19 12 -19 6 0 9 -3 5 -6 -3 -3 -15 -3 -26 1 -20 6 -28 34 -15 48 11 10 24 -3 24 -24z m190 24 c-1 -12 -61 -76 -66 -70 -8 8 40 76 54 77 6 0 12 -3 12 -7z m-29 -80 c-8 -15 -10 -15 -11 -2 0 17 10 32 18 25 2 -3 -1 -13 -7 -23z m-67 -38 c3 -8 1 -15 -4 -15 -6 0 -10 7 -10 15 0 8 2 15 4 15 2 0 6 -7 10 -15z m31 -41 c-10 -19 -15 -23 -15 -11 0 20 23 62 28 49 1 -5 -4 -22 -13 -38z m-45 -67 c0 -20 -27 -53 -36 -44 -4 4 1 13 11 21 18 13 18 14 -1 24 -18 11 -18 11 4 12 12 0 22 -6 22 -13z m494 -299 c3 -13 1 -27 -4 -32 -7 -7 -10 -4 -10 6 0 9 -5 18 -12 20 -6 2 -8 10 -4 16 11 18 23 14 30 -10z m-1784 -407 c0 -4 -11 -20 -25 -35 -14 -15 -25 -22 -25 -17 0 6 10 21 23 35 26 28 27 29 27 17z m45 -16 c-4 -37 -12 -40 -12 -5 0 17 4 30 8 30 4 0 6 -11 4 -25z m-82 -72 c-4 -10 -9 -11 -19 -2 -19 15 -18 18 5 16 11 -1 17 -6 14 -14z m958 -140 c-12 -20 -14 -14 -5 12 4 9 9 14 11 11 3 -2 0 -13 -6 -23z m-21 -22 c0 -6 -4 -13 -10 -16 -5 -3 -10 1 -10 9 0 9 5 16 10 16 6 0 10 -4 10 -9z m-1087 -623 c-2 -5 -11 -8 -18 -8 -12 0 -12 5 -3 26 11 23 13 24 19 7 3 -10 5 -21 2 -25z m1723 -7 c-3 -20 -6 -45 -6 -56 0 -15 -2 -17 -9 -6 -5 7 -13 11 -18 8 -5 -3 -7 11 -5 31 5 52 8 59 27 59 14 0 16 -7 11 -36z m-1742 -17 c15 -14 16 -14 16 0 0 17 15 22 24 7 6 -10 -49 -61 -65 -61 -5 0 -9 7 -9 15 0 9 6 12 15 9 10 -4 15 0 15 11 0 11 -5 15 -15 11 -9 -3 -15 0 -15 9 0 19 15 19 34 -1z m1130 -90 c3 -8 2 -12 -4 -9 -6 3 -10 10 -10 16 0 14 7 11 14 -7z m-34 -39 c-7 -8 -17 -15 -23 -15 -5 0 -2 9 8 20 21 23 35 19 15 -5z m-11 -87 c-11 -19 -14 -20 -17 -6 -2 9 2 27 9 40 11 19 14 20 17 6 2 -9 -2 -27 -9 -40z m11 -214 c0 -14 -4 -23 -10 -19 -6 4 -8 11 -5 16 4 5 0 9 -7 9 -9 0 -9 3 2 10 20 13 20 13 20 -16z m-35 -35 c-6 -17 -45 -23 -45 -8 0 9 41 30 48 24 1 -1 0 -9 -3 -16z m552 -149 c2 -101 -2 -136 -29 -212 -14 -41 -28 -47 -48 -23 -7 8 -19 15 -26 15 -18 0 -18 21 1 46 8 10 15 38 15 62 0 23 4 50 9 60 5 9 15 44 21 77 7 33 17 66 23 73 23 29 32 3 34 -98z m-600 -166 c6 -17 -22 -52 -34 -41 -3 4 2 14 13 22 16 13 17 16 4 25 -11 7 -11 10 -2 10 7 0 15 -7 19 -16z m-44 -1 c-8 -3 -11 -14 -7 -30 5 -18 3 -24 -5 -19 -21 14 -11 57 13 55 6 0 6 -3 -1 -6z m-73 -148 c0 -19 -4 -35 -10 -35 -5 0 -10 -9 -10 -20 0 -11 -21 -44 -47 -74 -27 -30 -56 -66 -66 -80 -10 -15 -22 -24 -28 -21 -5 3 -6 0 -4 -8 3 -7 -6 -26 -20 -43 -14 -16 -32 -42 -39 -59 -8 -16 -44 -64 -82 -105 -92 -100 -131 -151 -148 -192 -8 -18 -23 -41 -33 -50 -10 -10 -41 -39 -69 -65 -30 -28 -66 -76 -85 -113 -33 -65 -160 -200 -186 -200 -7 0 -13 -4 -13 -9 0 -14 -63 -26 -68 -12 -2 6 -11 11 -19 11 -8 0 -13 6 -10 13 4 6 16 38 29 69 22 55 25 58 66 64 47 7 78 38 107 107 8 20 65 88 126 150 60 61 117 127 126 146 9 19 33 50 53 70 42 42 60 71 60 100 0 12 7 21 15 21 8 0 15 7 15 15 0 9 11 20 24 25 13 5 31 18 39 30 9 14 20 18 33 14 14 -4 16 -4 5 4 -11 8 -6 19 28 59 22 27 41 52 41 55 0 3 17 23 38 45 20 22 53 58 73 81 21 23 42 42 48 42 6 0 11 -16 11 -35z m-930 1 c0 -16 -21 -36 -37 -36 -12 0 -19 31 -8 41 10 10 45 7 45 -5z m960 -223 c0 -5 -11 -8 -24 -8 -13 0 -22 3 -19 8 2 4 13 7 24 7 10 0 19 -3 19 -7z m-50 -49 c0 -8 5 -12 10 -9 6 4 10 -11 10 -39 0 -25 -4 -47 -10 -51 -5 -3 -7 -12 -3 -20 4 -11 -3 -15 -30 -15 -40 0 -48 -9 -97 -120 -18 -41 -43 -85 -56 -97 -13 -11 -36 -45 -51 -74 -15 -28 -44 -68 -63 -88 -20 -20 -46 -56 -58 -81 -12 -25 -36 -59 -54 -76 -19 -17 -42 -50 -53 -73 -11 -22 -23 -41 -27 -41 -5 0 -8 -6 -8 -14 0 -7 -19 -34 -42 -58 -66 -69 -85 -94 -92 -116 -4 -11 -29 -44 -56 -72 -28 -29 -50 -55 -50 -58 0 -3 -11 -20 -25 -38 -14 -18 -25 -39 -25 -46 0 -18 -22 -46 -98 -126 -58 -61 -65 -65 -76 -49 -14 18 -56 24 -56 7 0 -5 -6 -10 -14 -10 -17 0 -66 -56 -66 -76 0 -13 -13 -19 -34 -15 -4 1 -14 -4 -22 -10 -15 -13 -17 -9 -8 15 3 9 14 16 23 16 13 0 13 2 2 9 -27 17 29 119 113 205 12 11 37 41 56 66 19 25 37 47 40 50 3 3 16 27 30 53 24 45 46 72 119 141 17 16 31 36 31 44 0 8 25 39 55 68 30 30 55 62 55 71 0 9 28 44 63 77 62 60 129 145 156 199 8 15 18 27 22 27 15 0 147 149 155 175 4 10 12 24 18 31 6 6 22 26 36 43 14 18 37 45 53 62 15 16 27 31 27 33 0 8 85 96 92 96 4 0 8 -7 8 -16z m-820 -124 c-5 -10 -8 -19 -5 -21 2 -3 -5 -15 -16 -29 -16 -21 -20 -23 -29 -10 -14 22 -12 34 10 60 11 13 20 30 20 39 1 13 3 13 15 -3 10 -13 11 -24 5 -36z m193 -18 c-3 -12 -9 -19 -14 -16 -5 3 -4 14 2 25 13 26 20 21 12 -9z m-250 -51 c3 -11 -6 -41 -19 -68 -42 -81 -62 -87 -23 -6 11 24 25 43 30 43 5 0 9 5 9 10 0 6 -7 10 -15 10 -16 0 -20 12 -8 23 11 12 21 8 26 -12z m-40 -41 c-3 -11 -9 -20 -14 -20 -10 0 -12 24 -2 33 13 13 21 7 16 -13z m-32 -44 c-7 -9 -10 -25 -6 -38 5 -18 4 -20 -4 -8 -11 16 -15 8 -11 -24 1 -12 -2 -16 -11 -11 -8 5 -10 4 -5 -3 9 -15 -9 -49 -34 -62 -16 -8 -20 -8 -20 4 0 8 7 21 15 30 9 8 16 19 16 23 2 24 55 120 63 112 5 -5 4 -14 -3 -23z m833 -241 c6 -11 16 -23 21 -27 6 -5 5 -8 -2 -8 -7 0 -13 -7 -13 -15 0 -8 -9 -29 -20 -47 -11 -18 -20 -46 -20 -62 0 -18 -9 -35 -25 -48 -14 -11 -25 -26 -25 -34 0 -17 -12 -33 -52 -71 -16 -15 -28 -32 -28 -39 0 -8 -11 -21 -25 -30 -14 -9 -25 -24 -25 -33 0 -10 -12 -29 -27 -43 -40 -37 -103 -111 -103 -121 0 -11 -90 -131 -102 -135 -4 -2 -8 -8 -8 -14 0 -6 -25 -35 -55 -66 -31 -31 -63 -73 -72 -94 -9 -21 -20 -38 -25 -38 -4 0 -8 -6 -8 -14 0 -8 -13 -27 -30 -43 -19 -18 -30 -38 -30 -55 0 -20 -5 -28 -17 -28 -20 0 -143 -126 -143 -146 0 -8 -4 -14 -10 -14 -5 0 -10 -9 -10 -20 0 -11 -9 -24 -19 -28 -11 -4 -30 -23 -43 -42 -17 -25 -30 -34 -46 -32 -18 3 -22 -2 -23 -25 l-1 -28 -9 30 c-6 22 -5 31 6 38 8 4 15 15 15 22 0 18 16 20 24 3 3 -7 3 0 -1 16 -3 15 -2 31 3 35 13 9 34 49 34 65 0 8 7 16 15 20 9 3 15 18 15 38 0 47 49 143 102 199 9 9 19 26 22 37 4 10 29 38 56 61 28 23 53 54 56 68 14 54 40 89 82 112 22 12 72 81 72 101 0 5 10 20 21 31 17 17 23 19 31 8 8 -11 9 -11 5 1 -3 9 8 29 24 44 16 16 29 34 29 39 0 5 6 7 14 4 9 -4 12 0 9 12 -2 10 3 23 11 30 9 8 16 18 16 23 0 5 20 28 45 50 25 22 45 45 45 52 0 6 9 22 20 36 11 14 20 32 20 40 0 8 25 39 55 68 30 30 55 60 55 67 0 21 51 76 68 73 8 -2 20 -12 26 -23z m-806 -301 c12 -4 22 -13 22 -20 0 -20 -27 -17 -34 3 -6 15 -10 13 -31 -12 -35 -43 -40 -64 -18 -80 10 -8 13 -15 6 -15 -7 0 -11 -6 -9 -12 1 -7 1 -10 -1 -5 -3 4 -11 7 -19 7 -13 0 -15 -6 -18 -52 -2 -27 -17 -34 -32 -14 -8 11 -14 26 -14 33 0 19 18 16 24 -4 3 -10 4 -4 1 12 -4 33 24 91 65 136 28 31 27 31 58 23z m2 -45 c13 -9 12 -10 -2 -5 -10 3 -18 4 -18 2 0 -3 -3 -13 -6 -23 -5 -15 -4 -15 5 -3 9 13 11 13 11 -1 0 -9 -7 -19 -15 -23 -11 -4 -15 2 -15 23 0 41 12 50 40 30z m713 -93 c-4 -17 -12 -23 -29 -23 -13 0 -24 4 -24 9 0 6 9 8 21 5 14 -4 19 -2 15 8 -5 13 2 25 14 25 4 0 5 -11 3 -24z m-793 -36 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-60 -64 c0 -5 -7 -1 -15 10 -8 10 -14 24 -14 29 0 6 6 1 14 -9 8 -11 15 -24 15 -30z m807 22 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m508 -8 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-620 -140 c3 -5 1 -10 -4 -10 -6 0 -11 -7 -11 -15 0 -9 -7 -18 -15 -21 -8 -4 -15 -11 -15 -18 -1 -12 -35 -56 -44 -56 -3 0 3 14 12 30 15 26 15 32 2 40 -8 5 -11 12 -7 17 5 4 12 1 18 -7 8 -13 12 -11 28 10 11 13 17 28 15 32 -3 4 -1 8 5 8 5 0 13 -4 16 -10z m-40 -10 c-3 -5 -10 -10 -16 -10 -5 0 -9 5 -9 10 0 6 7 10 16 10 8 0 12 -4 9 -10z m-63 -72 c-7 -7 -12 -8 -12 -2 0 14 12 26 19 19 2 -3 -1 -11 -7 -17z m698 -24 c0 -19 -4 -33 -9 -29 -6 3 -14 -3 -20 -12 -8 -15 -10 -10 -11 23 0 43 5 54 27 54 8 0 13 -13 13 -36z m-730 -20 c-12 -13 -11 -17 1 -25 22 -14 32 -11 24 9 -5 13 -4 14 6 5 10 -10 5 -19 -19 -44 -18 -18 -32 -40 -32 -49 0 -37 -15 -27 -26 17 -7 26 -9 52 -4 57 4 4 8 2 7 -5 -1 -31 4 -49 13 -49 6 0 10 7 10 15 0 9 7 18 15 22 13 5 12 8 -5 20 -20 14 -20 16 -4 34 20 23 33 17 14 -7z m754 -30 c3 -8 2 -12 -4 -9 -6 3 -10 10 -10 16 0 14 7 11 14 -7z m-818 -61 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m-22 -45 c-5 -17 -3 -19 15 -13 12 3 21 4 21 1 0 -7 -120 -126 -128 -126 -3 0 5 11 18 25 15 16 24 38 25 61 0 23 7 39 18 45 9 6 17 17 17 25 0 8 5 12 10 9 6 -4 8 -16 4 -27z m156 7 c-7 -9 -10 -19 -6 -22 4 -4 11 -1 16 7 8 13 10 13 10 -1 0 -21 -24 -31 -38 -17 -11 11 5 48 22 48 4 0 3 -7 -4 -15z m-238 -76 c-17 -21 -52 -44 -52 -35 0 9 51 56 60 56 6 0 2 -9 -8 -21z m210 -6 c-5 -24 -35 -32 -48 -11 -5 8 0 9 15 5 17 -4 21 -2 16 12 -3 11 0 18 8 18 9 0 12 -9 9 -24z m-698 -18 c-4 -8 -8 -15 -10 -15 -2 0 -4 7 -4 15 0 8 4 15 10 15 5 0 7 -7 4 -15z m656 -25 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-688 -32 c-7 -7 -12 -8 -12 -2 0 14 12 26 19 19 2 -3 -1 -11 -7 -17z m459 9 c-1 -4 -1 -14 -1 -22 0 -10 -10 -15 -32 -15 l-33 1 28 15 c15 8 25 20 21 26 -4 6 -1 9 5 7 7 -3 12 -8 12 -12z m30 -48 c-9 -22 -10 -22 -10 -3 -1 11 2 24 6 27 12 12 14 0 4 -24z m317 19 c7 -7 12 -17 12 -22 0 -6 -5 -4 -11 4 -8 11 -9 6 -5 -20 4 -25 3 -31 -4 -20 -7 11 -10 8 -10 -17 0 -17 -5 -35 -11 -39 -8 -5 -10 1 -7 20 3 16 0 33 -8 41 -8 8 -10 16 -5 19 5 4 11 0 14 -6 2 -7 8 -9 13 -5 4 4 3 16 -3 26 -18 28 2 42 25 19z m-188 -16 c0 -13 -12 -22 -22 -16 -10 6 -1 24 13 24 5 0 9 -4 9 -8z m-168 -35 c20 -10 22 -15 12 -24 -7 -7 -19 -22 -28 -35 -9 -12 -19 -19 -22 -15 -4 4 3 18 16 32 26 27 25 29 -7 39 -18 6 -21 4 -16 -16 4 -18 3 -20 -6 -8 -27 38 2 53 51 27z m311 -79 c9 -6 9 -8 0 -8 -7 0 -13 -4 -13 -9 0 -5 -16 -32 -35 -61 -19 -29 -35 -57 -35 -62 0 -6 -15 -29 -32 -51 -18 -23 -33 -44 -33 -48 0 -4 -22 -29 -50 -56 -27 -27 -61 -72 -75 -99 -62 -119 -85 -156 -134 -206 -28 -29 -59 -69 -68 -88 -9 -19 -28 -46 -42 -59 -14 -14 -26 -30 -26 -38 0 -7 -4 -13 -9 -13 -5 0 -19 -21 -32 -47 -22 -46 -31 -58 -95 -132 -17 -20 -41 -51 -54 -70 -21 -30 -25 -32 -35 -17 -22 29 -27 95 -10 119 8 12 15 30 15 39 0 10 21 40 48 66 26 26 61 74 77 107 16 33 38 66 48 73 34 26 67 67 67 84 0 10 3 18 8 18 4 0 18 18 32 40 13 21 26 37 28 35 7 -7 70 71 84 105 9 19 43 64 77 99 33 35 61 69 61 77 0 7 11 21 25 32 14 11 25 23 25 26 0 4 11 19 25 34 14 15 28 35 31 45 3 11 22 34 42 53 32 30 36 32 48 16 7 -9 16 -14 20 -9 4 4 2 7 -4 7 -13 0 -17 52 -4 64 4 4 8 -7 10 -25 2 -19 9 -37 15 -41z m-159 41 c-3 -5 -10 -7 -15 -3 -5 3 -7 10 -3 15 3 5 10 7 15 3 5 -3 7 -10 3 -15z m-226 -13 c-8 -6 -17 -19 -21 -29 -4 -10 -11 -15 -17 -12 -13 8 31 65 44 57 5 -3 2 -10 -6 -16z m192 -7 c0 -11 -4 -17 -10 -14 -5 3 -7 0 -4 -8 6 -16 -21 -41 -35 -33 -6 4 -1 22 11 46 22 40 38 44 38 9z m-178 -37 c-7 -2 -12 -10 -12 -18 0 -8 -4 -14 -10 -14 -14 0 -13 7 7 37 11 17 19 21 22 12 2 -7 -1 -15 -7 -17z m-60 -19 c22 -20 23 -34 2 -26 -13 5 -15 2 -9 -17 5 -16 4 -20 -5 -15 -7 4 -9 17 -6 31 5 18 3 22 -9 18 -15 -6 -21 7 -8 19 9 10 15 9 35 -10z m163 -3 c-5 -14 -2 -20 9 -20 20 0 20 -14 1 -30 -8 -7 -15 -19 -15 -27 0 -8 -5 -11 -10 -8 -6 3 -22 -3 -36 -14 -22 -17 -23 -21 -9 -21 23 0 11 -13 -13 -15 -11 0 -31 -11 -46 -22 -23 -18 -26 -25 -17 -42 6 -11 11 -24 11 -30 0 -20 -15 -11 -28 17 -24 48 -24 52 -9 52 20 0 97 76 97 97 0 16 49 81 63 82 5 1 5 -8 2 -19z m-211 -62 c-5 -17 -3 -19 15 -13 29 9 26 1 -14 -39 -21 -21 -35 -30 -35 -21 0 9 -6 12 -15 9 -17 -7 -21 -44 -5 -44 6 0 10 -7 10 -15 0 -8 -4 -15 -10 -15 -5 0 -10 7 -10 15 0 13 -19 19 -57 18 -23 -1 -14 8 23 23 20 8 34 18 31 21 -6 5 7 24 36 51 9 9 17 22 17 30 0 7 5 10 10 7 6 -4 8 -16 4 -27z m-214 -38 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m56 -25 c1 -8 -4 -15 -11 -15 -7 0 -12 8 -10 18 2 9 4 19 4 21 2 9 15 -10 17 -24z m-56 -1 c0 -4 -6 -12 -14 -18 -18 -14 -31 -56 -17 -56 6 0 11 9 11 20 0 10 10 24 21 31 12 6 20 7 17 2 -23 -50 -34 -63 -47 -61 -21 4 -26 35 -10 64 11 22 39 34 39 18z m330 -54 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-220 -17 c-8 -3 -18 -11 -22 -17 -5 -7 -8 -4 -8 7 0 11 7 17 23 16 15 0 17 -2 7 -6z m146 -28 c3 -14 10 -25 15 -25 19 0 8 -21 -31 -60 -21 -21 -51 -62 -65 -89 -14 -28 -39 -60 -55 -73 -17 -12 -30 -29 -30 -37 -1 -13 -2 -13 -11 2 -5 9 -15 17 -21 17 -7 0 -6 -5 2 -15 10 -12 7 -23 -15 -62 -16 -26 -39 -57 -52 -69 -12 -12 -23 -27 -23 -34 0 -8 -9 -10 -27 -6 -16 3 -22 3 -15 0 8 -4 10 -10 4 -17 -5 -7 -15 -29 -22 -50 -15 -47 -32 -44 -36 8 -4 38 -3 39 12 20 16 -20 16 -20 11 4 -7 29 11 61 110 190 1 2 9 -2 18 -9 10 -8 15 -9 15 -1 0 6 -4 11 -10 11 -5 0 -10 4 -10 10 0 14 32 50 45 50 6 0 19 17 30 37 32 60 88 131 82 106 -7 -29 -3 -29 38 4 33 26 37 53 8 53 -9 0 -13 -6 -9 -15 3 -9 0 -15 -9 -15 -12 0 -11 9 7 45 26 51 35 55 44 20z m384 -5 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m30 -11 c0 -5 -4 -9 -10 -9 -5 0 -10 7 -10 16 0 8 5 12 10 9 6 -3 10 -10 10 -16z m-753 -11 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m1263 -30 c10 -34 8 -45 -9 -79 -12 -22 -22 -50 -22 -62 -1 -17 -2 -18 -6 -4 -3 10 0 32 6 50 9 26 9 29 -1 19 -8 -8 -13 -36 -12 -73 1 -37 -2 -55 -7 -47 -6 8 -9 0 -9 -24 0 -20 -4 -40 -10 -43 -6 -4 -10 5 -10 21 0 15 -2 25 -5 22 -4 -3 -6 -44 -6 -92 0 -68 -3 -86 -14 -86 -21 0 -29 47 -15 89 6 20 14 61 17 91 3 30 9 63 14 72 5 9 9 28 9 42 0 14 5 26 10 26 6 0 10 7 10 16 0 9 5 12 12 8 7 -5 8 -3 4 5 -5 7 -5 32 -1 56 8 55 30 51 45 -7z m-530 7 c15 5 20 2 20 -12 0 -10 -4 -14 -8 -8 -4 6 -18 10 -31 10 -13 0 -27 7 -29 15 -4 13 -3 13 11 2 9 -8 25 -11 37 -7z m-69 -43 c-6 -10 -7 -28 -4 -40 3 -13 1 -22 -6 -22 -12 0 -15 38 -5 64 3 9 10 16 15 16 6 0 6 -7 0 -18z m38 -38 c-6 -16 -13 -24 -16 -17 -5 13 16 58 23 50 3 -2 -1 -17 -7 -33z m-48 -74 c5 0 9 9 9 20 0 11 5 20 11 20 13 0 3 -37 -21 -70 -9 -14 -21 -41 -25 -60 -4 -19 -19 -57 -34 -84 -14 -27 -34 -65 -45 -85 -10 -20 -21 -38 -25 -41 -3 -3 -13 -18 -21 -35 -8 -16 -21 -36 -27 -43 -7 -7 -13 -19 -13 -26 0 -7 -10 -25 -22 -38 -13 -14 -38 -44 -57 -67 -18 -22 -38 -38 -44 -34 -6 4 -8 0 -4 -10 3 -9 1 -20 -6 -24 -7 -5 -17 -17 -24 -28 -79 -130 -140 -219 -180 -261 -26 -28 -54 -64 -62 -80 -7 -16 -20 -45 -29 -64 -9 -19 -24 -43 -33 -52 -35 -35 -69 -85 -69 -102 0 -10 -9 -20 -20 -23 -11 -3 -20 -11 -20 -18 0 -21 -43 -84 -57 -85 -7 0 -13 -4 -13 -9 0 -5 -15 -24 -34 -43 -19 -19 -45 -54 -57 -79 -13 -24 -31 -55 -41 -68 -10 -13 -18 -34 -18 -47 0 -13 -6 -27 -13 -31 -14 -9 -34 -39 -74 -110 -14 -26 -31 -57 -37 -67 -6 -11 -18 -28 -27 -38 -15 -17 -16 -16 -29 21 -7 22 -10 51 -6 65 7 29 41 68 50 58 3 -3 6 0 6 7 0 7 13 32 29 56 16 24 32 53 36 64 3 12 13 21 21 21 8 0 14 6 15 13 2 30 9 50 23 66 9 10 16 24 16 33 0 8 8 26 19 39 28 36 51 85 52 111 1 19 2 20 6 4 5 -17 6 -16 19 5 7 13 16 31 20 39 4 8 10 17 13 20 14 12 40 79 52 130 11 54 90 190 110 190 5 0 9 5 9 11 0 6 7 17 16 26 8 9 13 22 10 30 -3 8 -1 11 4 8 6 -4 18 8 28 26 9 18 25 40 35 51 9 10 17 22 17 27 0 5 4 11 9 13 13 5 111 158 111 174 0 7 14 23 30 36 17 12 45 45 63 73 34 53 43 65 121 154 26 31 52 66 57 79 5 12 13 22 19 22 5 0 10 11 10 25 0 17 4 23 15 19 9 -4 24 9 42 40 15 25 31 46 34 46 4 0 10 -11 13 -25 7 -26 20 -32 31 -15 3 6 2 10 -2 10 -14 0 -34 40 -27 52 5 8 11 2 17 -15 5 -15 13 -27 18 -27z m-581 28 c0 -19 -18 -43 -25 -36 -4 3 -2 16 5 27 12 24 20 27 20 9z m496 -493 c17 -26 14 -33 -105 -261 -7 -14 -22 -35 -32 -45 -10 -10 -19 -25 -19 -33 0 -8 -3 -16 -7 -18 -29 -12 -138 -170 -149 -214 -4 -16 -18 -40 -31 -54 -12 -13 -23 -28 -23 -32 0 -5 -5 -8 -11 -8 -17 0 -32 -20 -68 -90 -44 -85 -80 -133 -97 -126 -7 3 -11 0 -8 -7 2 -7 -9 -27 -26 -45 -16 -18 -30 -35 -30 -37 0 -2 -20 -36 -45 -77 -25 -40 -48 -81 -51 -91 -4 -10 -28 -29 -55 -43 l-48 -24 -15 28 c-10 19 -11 33 -5 43 5 8 14 31 20 53 11 42 64 97 85 89 8 -3 11 2 7 16 -5 21 -4 23 56 92 23 25 41 54 41 63 0 9 9 24 20 33 11 10 20 21 20 26 0 4 13 25 29 45 16 20 39 57 52 81 13 24 36 57 50 72 24 26 106 154 120 189 12 29 72 89 82 83 6 -4 7 -1 2 7 -5 8 -2 17 6 24 24 19 95 120 128 182 32 59 68 104 83 104 4 0 15 -11 24 -25z m-2031 -74 c33 -5 175 -14 315 -21 286 -13 355 -22 370 -50 14 -26 12 -62 -4 -82 -12 -16 -32 -18 -172 -18 -87 0 -202 5 -254 10 -275 28 -716 22 -1150 -16 -103 -9 -316 -16 -515 -18 -249 -2 -405 -8 -585 -24 -322 -28 -691 -51 -1026 -63 -289 -10 -300 -11 -824 -88 -36 -6 -114 -15 -175 -21 -168 -17 -327 -47 -417 -80 -65 -24 -98 -30 -160 -30 -47 0 -93 -6 -115 -15 -19 -8 -55 -15 -80 -15 -26 0 -66 -10 -96 -24 -34 -16 -76 -26 -120 -28 -38 -2 -71 -9 -75 -14 -11 -16 -90 -36 -130 -33 -40 3 -82 -8 -82 -20 0 -5 -21 -11 -46 -15 -84 -11 -183 -46 -189 -67 -4 -11 -15 -19 -29 -19 -23 0 -65 -25 -56 -33 13 -13 57 -10 80 5 14 9 58 21 98 27 40 5 84 17 97 25 13 9 42 16 64 16 22 0 43 5 46 10 3 6 24 10 45 10 21 0 40 5 42 10 2 6 36 12 76 15 40 3 87 12 105 22 24 12 63 17 153 19 94 1 127 6 147 19 17 11 62 20 126 25 56 5 109 13 118 18 10 5 55 12 99 15 45 3 112 13 150 21 63 14 122 20 444 46 98 8 562 47 835 70 168 14 376 30 535 40 81 5 153 15 180 26 36 13 88 17 270 19 124 1 239 5 255 7 17 3 48 8 70 12 72 12 994 24 1235 15 640 -23 900 -38 941 -54 8 -3 20 -17 27 -32 13 -30 16 -121 4 -140 -5 -7 -44 -15 -97 -19 -50 -3 -106 -13 -125 -22 -30 -14 -113 -16 -595 -21 -308 -3 -566 -10 -574 -15 -14 -9 -229 -27 -363 -30 -80 -2 -103 -10 -78 -26 9 -6 329 -10 768 -10 661 0 759 2 801 16 60 19 99 15 117 -12 33 -49 -30 -74 -201 -79 -238 -7 -501 -26 -525 -37 -18 -9 -124 -13 -380 -14 -306 0 -363 -3 -414 -18 -40 -12 -89 -17 -150 -16 -87 1 -145 -6 -156 -19 -3 -4 -18 -13 -35 -21 -28 -14 -23 -15 96 -18 116 -2 127 -4 132 -22 5 -21 8 -20 -93 -44 -86 -20 -594 -27 -656 -8 -58 17 -100 6 -149 -42 -23 -23 -61 -48 -85 -56 -31 -11 -48 -24 -59 -47 -11 -22 -23 -33 -39 -33 -22 0 -28 -2 -90 -33 -19 -9 -38 -17 -43 -17 -6 0 -22 -14 -36 -30 -14 -17 -42 -38 -62 -46 -20 -8 -51 -29 -69 -47 -68 -67 -78 -74 -102 -82 -14 -4 -32 -13 -40 -21 -9 -7 -36 -22 -62 -34 -25 -11 -53 -31 -62 -45 -9 -14 -22 -25 -29 -25 -7 0 -31 -9 -52 -20 -29 -15 -60 -21 -112 -21 -40 0 -77 2 -83 6 -17 10 -11 43 9 50 10 3 30 16 42 29 13 13 49 29 79 36 97 22 129 45 140 100 3 15 13 26 25 28 50 7 63 14 101 51 24 23 59 44 83 51 30 8 42 17 47 35 3 14 13 25 20 25 20 0 194 89 194 100 0 4 19 17 43 28 23 11 53 31 67 44 14 14 41 30 61 37 20 6 45 21 54 31 10 11 23 20 30 20 11 0 34 17 80 59 11 10 32 21 47 25 15 3 32 15 38 26 6 11 19 20 28 20 10 0 22 4 27 9 6 5 18 11 28 13 11 1 25 18 33 37 12 30 12 32 -2 27 -9 -3 -24 -6 -35 -6 -11 0 -16 -5 -13 -14 4 -9 -6 -16 -29 -20 -24 -4 -37 -13 -40 -28 -4 -15 -11 -19 -27 -15 -15 4 -29 -2 -44 -17 -11 -13 -36 -27 -55 -31 -37 -8 -121 -62 -160 -102 -14 -14 -29 -22 -39 -18 -15 5 -122 -52 -122 -66 0 -4 -13 -12 -30 -18 -16 -5 -30 -16 -30 -24 0 -15 -20 -27 -46 -27 -19 0 -74 -50 -74 -67 0 -8 -13 -13 -38 -13 -32 0 -41 -5 -50 -25 -8 -17 -20 -25 -37 -25 -36 0 -82 -26 -90 -49 -3 -11 -15 -23 -25 -26 -10 -3 -22 -15 -25 -26 -5 -14 -15 -19 -41 -19 -37 0 -80 -18 -129 -55 -23 -17 -50 -23 -112 -28 -75 -6 -82 -5 -76 11 9 25 60 72 78 72 25 0 66 31 76 57 5 13 16 23 24 23 27 0 125 51 138 71 6 10 17 19 22 19 6 0 26 16 45 35 19 19 45 35 57 35 12 0 41 16 65 35 24 19 58 41 76 49 18 8 35 22 38 31 3 8 12 15 20 15 18 0 49 17 99 56 22 17 55 36 73 42 31 11 124 72 147 96 12 13 51 32 81 41 28 7 50 55 32 66 -22 14 -41 10 -67 -14 -15 -13 -44 -29 -67 -35 -22 -7 -54 -25 -70 -42 -16 -16 -38 -30 -50 -30 -19 0 -105 -56 -112 -72 -2 -5 -15 -8 -28 -8 -16 0 -24 -6 -24 -17 0 -12 -19 -26 -58 -43 -31 -13 -63 -32 -71 -43 -7 -10 -19 -16 -26 -13 -15 5 -95 -60 -95 -78 0 -6 -14 -17 -31 -23 -17 -7 -28 -16 -25 -21 3 -5 -12 -12 -33 -16 -21 -3 -44 -13 -51 -21 -7 -8 -20 -15 -30 -15 -9 0 -25 -9 -35 -20 -10 -12 -25 -18 -32 -15 -8 2 -11 0 -8 -5 9 -14 -26 -46 -58 -54 -15 -4 -25 -11 -22 -16 3 -5 -18 -17 -47 -27 -28 -10 -66 -33 -85 -50 -18 -18 -35 -33 -38 -33 -4 0 -21 -11 -39 -25 -25 -19 -45 -25 -84 -25 -44 0 -52 3 -52 19 0 12 9 21 28 25 49 12 82 28 82 41 0 13 62 55 80 55 15 0 60 42 60 56 0 6 9 14 21 17 12 3 19 12 17 22 -1 9 -6 15 -9 13 -3 -2 -13 3 -22 10 -13 11 -20 8 -47 -18 -37 -36 -104 -80 -123 -80 -7 0 -24 -12 -38 -26 -13 -14 -39 -33 -58 -42 -19 -9 -29 -18 -23 -20 7 -2 12 -8 12 -14 0 -6 -6 -8 -14 -5 -13 5 -85 -27 -96 -43 -3 -4 -22 -10 -42 -14 -40 -7 -50 -21 -20 -30 14 -4 14 -5 -3 -4 -40 1 -47 -3 -107 -62 -34 -33 -67 -60 -73 -60 -17 0 -81 -37 -132 -76 -26 -20 -58 -40 -71 -45 -13 -5 -26 -18 -29 -29 -3 -11 -11 -20 -17 -20 -7 0 -37 -12 -67 -27 -30 -14 -67 -28 -84 -29 -16 -2 -43 -5 -59 -7 -16 -2 -32 -10 -35 -18 -3 -8 -13 -14 -21 -14 -9 0 -17 -13 -20 -35 -4 -28 -14 -40 -50 -62 -38 -23 -57 -27 -125 -28 -104 -2 -105 -2 -105 10 0 14 52 37 73 33 10 -3 17 1 17 10 0 9 14 17 39 21 44 7 66 32 76 90 6 29 12 36 30 36 12 0 28 7 35 15 7 9 48 34 90 56 43 22 91 52 108 67 17 15 41 34 53 42 13 8 32 24 44 35 29 28 72 55 87 55 16 0 68 51 68 67 0 7 11 13 25 13 14 0 25 6 25 13 0 8 4 7 10 -3 9 -13 12 -13 21 3 6 9 14 15 18 13 4 -3 25 13 46 34 22 22 45 40 51 40 7 0 41 27 76 60 35 33 67 60 71 60 14 0 37 28 37 45 0 23 -28 30 -49 11 -10 -9 -21 -16 -25 -16 -5 0 -29 -14 -54 -31 -44 -30 -122 -51 -122 -34 0 5 7 16 14 24 10 11 12 22 6 31 -7 11 -15 9 -47 -13 -22 -15 -44 -27 -50 -27 -15 0 -87 -41 -91 -52 -2 -5 -28 -20 -58 -34 -30 -14 -72 -41 -92 -60 -20 -19 -56 -44 -79 -55 -23 -10 -55 -35 -70 -54 -17 -21 -37 -35 -50 -35 -13 0 -23 -4 -23 -9 0 -5 -8 -12 -19 -16 -10 -3 -30 -16 -43 -29 -14 -12 -39 -28 -55 -35 -17 -7 -53 -35 -79 -62 -27 -27 -52 -49 -56 -49 -4 0 -32 -16 -62 -35 -30 -19 -61 -35 -69 -35 -14 0 -26 -9 -99 -75 -20 -18 -53 -36 -73 -39 -19 -4 -33 -11 -30 -17 4 -5 1 -9 -5 -9 -23 0 -100 -43 -100 -56 0 -7 -9 -18 -20 -24 -14 -7 -20 -7 -20 0 0 5 -4 10 -10 10 -5 0 -6 -8 -3 -17 5 -13 2 -15 -12 -10 -30 12 -113 -4 -138 -27 -15 -13 -37 -21 -62 -22 -22 -1 -32 1 -22 3 9 3 17 8 17 13 0 5 -15 4 -32 -1 -40 -11 -48 -11 -48 -1 0 4 20 15 44 25 67 27 96 57 96 95 0 28 3 32 19 27 11 -3 21 0 24 9 3 8 30 30 59 50 29 19 67 49 85 66 18 16 39 30 47 30 8 0 26 14 39 30 14 17 30 30 34 30 26 0 95 44 125 80 19 22 39 40 44 40 23 1 85 38 104 63 12 15 27 27 34 27 7 0 25 11 40 25 15 14 31 25 35 25 4 0 16 9 25 19 10 11 31 23 46 26 16 4 45 24 65 46 19 22 66 55 104 75 38 20 77 44 88 55 10 11 26 27 36 37 9 9 17 22 17 28 0 7 6 14 13 17 6 2 9 7 6 11 -10 10 -152 -67 -229 -125 -19 -14 -91 -63 -159 -109 -69 -46 -133 -92 -143 -102 -10 -10 -23 -18 -30 -18 -18 0 -78 -50 -78 -66 0 -7 -6 -14 -12 -14 -29 0 -88 -22 -88 -32 0 -14 -60 -68 -75 -68 -7 0 -33 -18 -58 -40 -49 -44 -60 -46 -190 -33 -54 5 -67 9 -65 21 2 9 17 19 34 24 18 4 56 31 85 59 30 28 62 55 72 60 9 5 17 16 17 23 0 18 -47 39 -56 25 -3 -6 -17 -8 -30 -5 -18 5 -22 3 -18 -9 4 -8 1 -15 -5 -15 -6 0 -11 5 -11 11 0 5 -5 7 -12 3 -9 -6 -9 -9 0 -12 16 -5 15 -22 -1 -22 -14 0 -47 -35 -47 -50 0 -6 -5 -10 -10 -10 -6 0 -24 -13 -42 -30 -18 -18 -42 -30 -57 -30 -19 0 -22 3 -12 9 10 7 11 13 2 27 -10 18 -10 18 -11 -3 0 -15 -6 -23 -17 -24 -17 -1 -17 -2 0 -6 9 -2 17 -7 17 -9 0 -14 -73 -74 -90 -74 -11 0 -25 -10 -31 -22 -8 -18 -19 -23 -49 -23 -39 -1 -39 -1 -25 22 30 45 15 80 -29 69 -26 -6 -89 -61 -84 -73 2 -4 -10 -12 -27 -18 -16 -5 -38 -19 -48 -30 -11 -11 -21 -15 -25 -10 -4 6 -23 16 -43 23 -30 10 -41 10 -65 -3 -16 -8 -39 -15 -51 -15 -12 0 -24 -3 -27 -8 -6 -10 -96 -2 -96 9 0 5 -10 9 -22 9 -19 0 -9 12 49 68 89 83 100 92 112 92 6 0 20 14 33 30 12 17 28 30 35 30 7 0 13 4 13 9 0 5 13 11 30 14 19 4 37 19 52 42 13 19 30 35 38 35 23 0 117 57 133 80 7 11 29 25 47 32 18 6 42 18 52 27 10 9 28 18 41 21 29 8 32 63 3 68 -19 4 -108 -39 -141 -69 -11 -9 -32 -21 -47 -24 -16 -4 -28 -11 -28 -16 0 -5 -6 -9 -14 -9 -7 0 -21 -12 -31 -26 -9 -14 -33 -33 -54 -42 -41 -19 -131 -94 -131 -110 0 -5 -15 -13 -34 -16 -37 -7 -62 -27 -89 -68 -10 -16 -24 -28 -32 -28 -8 0 -15 -4 -15 -10 0 -5 -6 -10 -13 -10 -7 0 -22 -8 -33 -18 -10 -10 -35 -28 -54 -40 -19 -12 -60 -47 -90 -77 -38 -38 -62 -55 -80 -55 -14 0 -31 -5 -38 -12 -7 -7 -27 -17 -44 -22 -22 -8 -34 -18 -36 -33 -2 -13 -11 -24 -20 -24 -15 -1 -15 -2 1 -6 9 -2 17 -9 17 -14 0 -5 -8 -12 -17 -16 -10 -3 -31 -16 -48 -27 -44 -31 -141 -76 -164 -76 -12 0 -21 6 -21 12 0 7 -7 2 -16 -10 -14 -21 -64 -32 -64 -14 0 10 69 72 79 72 10 0 51 56 51 70 0 5 7 10 15 10 8 0 23 9 32 20 10 11 23 20 30 20 6 0 13 10 15 22 2 11 10 22 18 24 46 7 109 47 134 84 14 22 33 40 41 40 8 0 15 9 15 20 0 11 6 20 13 20 21 0 67 24 67 35 0 6 14 19 32 30 18 10 65 52 105 92 40 40 79 73 86 73 23 0 95 62 108 92 6 15 18 28 25 28 8 0 14 10 14 23 -1 20 -2 21 -14 5 -7 -10 -18 -18 -24 -18 -14 0 -83 -32 -98 -45 -7 -5 -26 -21 -44 -35 -18 -14 -37 -29 -44 -35 -7 -5 -19 -14 -27 -20 -54 -35 -89 -61 -89 -68 0 -12 -33 -43 -53 -50 -11 -4 -21 -16 -24 -27 -3 -11 -12 -20 -19 -20 -8 0 -17 -7 -20 -15 -3 -8 -22 -19 -42 -26 -49 -16 -118 -72 -126 -104 -4 -14 -12 -25 -19 -25 -6 -1 -25 -19 -42 -40 -16 -22 -40 -42 -52 -46 -12 -3 -27 -12 -34 -20 -6 -8 -18 -14 -25 -14 -8 0 -22 -8 -32 -17 -10 -10 -30 -27 -44 -38 -13 -11 -27 -28 -31 -37 -3 -9 -14 -15 -24 -14 -10 2 -12 1 -5 -1 18 -6 9 -28 -12 -27 -9 1 -16 -3 -16 -9 0 -15 -32 -36 -55 -37 -11 0 -42 -25 -70 -55 -45 -50 -56 -57 -108 -66 -58 -10 -87 -3 -87 23 0 15 33 45 58 52 12 4 22 12 22 17 0 5 7 9 15 9 23 0 87 72 82 92 -4 14 -1 17 18 12 17 -4 26 0 35 15 6 12 8 26 5 31 -3 5 0 7 8 4 20 -7 33 16 16 27 -20 12 -4 24 66 48 33 12 65 28 71 36 6 8 26 15 45 15 30 0 109 43 109 59 0 30 -69 42 -90 16 -7 -8 -19 -15 -26 -15 -8 0 -14 -4 -14 -10 0 -5 -12 -10 -26 -10 -14 0 -60 -12 -101 -26 -69 -24 -77 -25 -91 -10 -18 17 -12 24 67 83 13 10 37 30 53 46 16 15 34 27 39 27 5 0 9 9 9 20 0 13 11 25 28 32 27 12 125 81 150 104 6 7 12 17 12 23 0 6 4 11 9 11 4 0 23 16 42 35 19 19 39 35 45 35 24 0 64 27 79 52 37 63 -26 66 -87 6 -46 -46 -52 -50 -122 -87 -39 -21 -126 -100 -118 -108 9 -10 -2 -24 -22 -29 -13 -3 -26 -14 -29 -25 -3 -11 -14 -19 -26 -19 -11 0 -35 -15 -53 -33 -49 -48 -115 -88 -156 -94 -21 -2 -46 -8 -57 -13 -11 -4 -33 -13 -48 -19 -15 -6 -38 -11 -51 -11 -13 0 -29 -7 -36 -15 -14 -17 -50 -17 -52 0 -1 6 14 20 33 33 19 13 36 28 38 35 5 13 42 46 53 47 17 0 86 65 133 123 16 20 35 37 42 37 18 0 63 45 63 64 0 9 6 16 14 16 8 0 16 7 19 14 3 8 24 20 46 26 25 6 48 22 60 39 25 35 26 41 4 41 -23 0 -83 -22 -83 -31 0 -16 -82 -89 -100 -89 -11 0 -36 -18 -56 -40 -21 -22 -43 -40 -51 -40 -7 0 -13 -7 -13 -15 0 -8 -6 -15 -12 -15 -7 0 -31 -16 -53 -35 -59 -52 -58 -51 -111 -79 -27 -14 -61 -26 -76 -26 -15 0 -30 -5 -33 -11 -4 -6 -13 -8 -21 -5 -8 3 -14 2 -14 -2 0 -13 -74 -36 -78 -24 -1 5 -12 7 -23 5 -18 -5 -20 -2 -17 28 3 21 10 34 19 35 41 2 139 76 139 104 0 6 8 14 18 17 22 9 42 29 42 43 0 10 42 32 65 34 6 1 21 11 35 24 13 12 27 22 32 22 4 0 8 6 8 13 0 16 68 73 122 102 24 13 43 28 42 34 -1 6 -2 18 -2 26 -2 13 -11 10 -49 -12 -27 -15 -57 -35 -67 -45 -11 -10 -26 -18 -33 -18 -7 0 -13 -3 -13 -8 0 -4 -14 -13 -30 -21 -34 -14 -91 -70 -118 -113 -9 -16 -23 -28 -32 -28 -17 0 -122 -60 -142 -82 -7 -7 -19 -25 -26 -39 -8 -14 -27 -36 -44 -50 -17 -13 -42 -35 -56 -49 -13 -14 -28 -24 -32 -23 -13 4 -70 -50 -70 -64 0 -7 -6 -13 -12 -13 -7 -1 -29 -14 -48 -30 -25 -22 -45 -30 -72 -30 -21 0 -38 -5 -38 -11 0 -6 9 -9 20 -6 11 3 22 1 26 -4 3 -5 -13 -8 -35 -7 -23 1 -55 -6 -73 -14 -18 -8 -67 -32 -108 -52 -41 -20 -82 -36 -90 -36 -9 0 -24 -6 -35 -14 -11 -7 -36 -16 -55 -19 -19 -3 -42 -8 -52 -12 -20 -8 -36 31 -19 48 8 8 11 6 11 -7 0 -12 27 9 82 63 46 45 87 81 93 81 5 0 19 14 30 31 20 32 98 74 156 86 33 6 119 50 119 61 0 3 -7 13 -16 23 -20 22 -8 47 55 110 25 26 54 56 63 66 18 20 32 28 106 58 23 10 54 29 68 41 33 31 49 39 110 53 29 7 61 21 72 31 24 23 74 44 125 54 21 4 46 15 56 25 10 10 53 29 95 42 74 23 76 24 76 56 0 31 -1 32 -37 26 -21 -3 -49 -11 -63 -18 -55 -28 -239 -94 -300 -108 -36 -8 -89 -30 -117 -47 -29 -18 -84 -43 -124 -57 -39 -13 -85 -34 -103 -47 -17 -13 -44 -26 -60 -30 -15 -4 -40 -16 -55 -26 -14 -11 -48 -24 -74 -30 -42 -9 -91 -32 -107 -50 -3 -3 -25 -12 -50 -19 -91 -26 -252 -127 -347 -216 -20 -19 -50 -37 -66 -41 -16 -3 -46 -21 -66 -39 -20 -18 -52 -36 -71 -40 -37 -8 -87 -39 -107 -66 -7 -9 -25 -20 -40 -24 -15 -3 -34 -11 -40 -17 -31 -26 -1 -75 42 -70 27 4 41 -13 23 -27 -7 -6 -29 -23 -48 -39 -19 -16 -60 -46 -92 -65 -54 -35 -57 -36 -87 -21 -17 8 -39 13 -48 10 -20 -7 -60 -69 -87 -136 -24 -60 -32 -192 -16 -261 52 -216 226 -440 466 -600 316 -211 856 -450 1369 -607 366 -113 1095 -292 1187 -292 61 -1 229 -19 353 -39 360 -58 355 -58 860 -105 629 -60 1351 -107 2240 -146 613 -26 1056 -21 1525 19 124 11 313 22 420 26 662 21 1607 108 1985 184 28 5 124 24 215 41 824 154 1639 338 2135 482 409 118 915 290 1210 411 33 14 101 41 150 61 50 21 108 46 130 56 22 10 96 44 164 74 69 31 147 73 175 94 77 57 117 80 158 87 35 7 37 9 35 43 -2 35 0 37 50 55 48 18 53 23 74 73 15 38 33 63 59 82 108 77 229 382 230 575 0 137 -33 209 -148 321 -42 41 -102 99 -132 128 -30 30 -84 87 -119 127 -98 111 -194 175 -355 235 -80 30 -121 34 -112 10 3 -9 6 -25 6 -36 0 -43 160 -169 331 -263 36 -20 81 -49 100 -65 32 -27 33 -29 17 -46 -10 -10 -31 -17 -50 -17 -18 1 -192 3 -387 6 -281 4 -355 8 -362 18 -6 11 -51 14 -204 14 -107 0 -195 -2 -195 -5 1 -3 22 -15 48 -28 52 -25 199 -41 387 -42 55 0 129 -5 165 -10 36 -6 103 -13 150 -16 47 -3 92 -10 102 -15 9 -5 23 -9 32 -9 20 0 176 -72 176 -82 0 -17 -62 -23 -210 -21 -165 2 -267 14 -340 41 -63 23 -270 30 -270 8 0 -10 -18 -17 -62 -23 -88 -11 -86 -34 5 -49 37 -6 73 -18 80 -26 16 -21 87 -37 116 -26 43 16 280 6 345 -14 32 -10 70 -18 85 -18 14 0 32 -4 39 -8 17 -12 -29 -32 -71 -32 -43 0 -167 31 -167 41 0 13 -38 11 -42 -2 -6 -19 -80 -29 -138 -19 -33 6 -67 6 -86 1 -23 -6 -46 -4 -85 9 -46 16 -75 18 -196 13 -138 -6 -143 -7 -143 -28 0 -18 10 -23 73 -38 39 -9 119 -18 177 -21 67 -3 116 -10 135 -20 16 -9 54 -21 82 -27 29 -7 53 -13 53 -15 0 -31 -10 -32 -298 -27 -257 3 -292 6 -334 23 -32 14 -70 20 -123 20 -47 0 -90 6 -113 16 -67 28 -127 44 -130 34 -6 -16 -79 -12 -85 4 -7 16 -63 46 -88 46 -37 0 -27 18 14 24 23 4 51 13 62 20 13 9 66 15 152 18 117 3 136 6 162 26 36 26 102 29 145 7 31 -16 86 -20 86 -6 0 4 20 14 45 21 32 9 45 18 45 30 0 26 -24 28 -245 25 -158 -3 -209 -7 -245 -20 -60 -23 -203 -42 -207 -28 -4 10 -23 7 -93 -13 -14 -4 -27 -10 -30 -14 -3 -4 -85 -10 -182 -12 -165 -5 -178 -4 -197 14 -48 44 -5 82 111 98 46 7 103 16 128 22 53 12 85 13 122 3 20 -5 34 -2 54 14 22 17 35 20 78 15 43 -5 56 -3 71 12 15 15 40 20 134 25 65 3 138 12 166 22 28 9 69 21 93 27 74 19 46 35 -68 38 -93 2 -107 0 -133 -18 -24 -19 -42 -21 -135 -21 -59 0 -141 -4 -182 -10 -159 -21 -250 -22 -289 -4 -20 9 -41 15 -47 14 -24 -4 -55 2 -49 11 8 13 -18 13 -31 0 -6 -6 -18 -8 -28 -4 -26 10 0 34 39 34 19 0 39 8 49 19 14 15 35 19 110 23 62 2 101 9 117 20 16 10 59 18 124 22 54 3 103 10 109 16 5 5 20 10 33 10 13 0 23 4 23 9 0 5 11 12 25 15 65 16 -8 42 -96 34 -27 -3 -57 -12 -67 -21 -18 -16 -12 -16 -464 -21 -42 -1 -74 -4 -72 -8 2 -4 -10 -9 -28 -11 -18 -2 8 -3 57 -1 l90 3 -70 -9 c-38 -5 -100 -10 -138 -12 -50 -3 -71 -9 -81 -23 -12 -17 -13 -17 -20 1 -7 19 -8 19 -22 0 -8 -12 -14 -15 -14 -7 0 10 -3 11 -14 2 -9 -8 -21 -8 -39 -2 -14 5 -28 7 -33 3 -4 -4 -4 -1 0 5 4 7 22 12 39 10 27 -2 32 1 29 19 -3 25 37 46 76 39 15 -3 21 -2 15 1 -7 3 -13 10 -13 15 0 6 6 9 13 8 18 -3 77 13 77 20 0 7 8 7 222 -5 115 -6 128 -5 134 11 4 10 1 20 -6 25 -25 15 -2 40 37 40 43 0 97 17 136 43 14 9 31 17 37 17 18 0 11 17 -9 23 -38 9 -213 1 -220 -11 -4 -7 -61 -16 -147 -22 -76 -5 -154 -14 -173 -19 -35 -11 -115 2 -136 20 -5 5 -25 9 -45 10 -28 1 -31 2 -12 7 13 4 23 12 23 17 0 6 12 8 26 7 21 -3 25 -1 19 13 -5 14 -2 16 13 12 11 -2 50 4 88 14 105 29 150 39 175 38 53 -1 255 14 273 21 l20 8 -20 8 c-11 4 -32 15 -46 25 -17 12 -76 25 -170 39 -79 11 -157 25 -173 30 -16 6 -49 10 -73 10 -40 0 -43 2 -29 15 8 8 30 15 48 15 18 0 39 4 46 8 16 11 6 40 -17 47 -27 8 -248 -12 -272 -26 -27 -14 -156 -18 -184 -5 -20 10 -26 11 -82 22 -32 6 -33 8 -33 58 0 29 3 56 7 60 4 3 8 14 9 24 1 9 12 59 24 110 24 97 21 93 83 95 67 2 449 -40 569 -64 80 -15 204 -39 283 -54 63 -11 132 -28 235 -55 19 -5 71 -18 115 -29 44 -11 107 -26 140 -35 33 -8 96 -24 140 -35 44 -11 109 -29 145 -41 36 -11 85 -27 110 -35 25 -8 72 -19 104 -25 129 -22 146 -8 70 59 -53 46 -131 79 -224 93 -54 8 -244 68 -315 99 -28 12 -156 51 -325 98 -174 48 -312 75 -481 96 -70 8 -198 28 -285 44 -88 16 -179 32 -204 36 -25 4 -53 14 -62 23 -31 27 -20 130 16 154 39 26 444 -31 646 -92 52 -15 120 -31 150 -34 93 -11 337 -55 504 -92 274 -61 483 -126 708 -220 73 -31 165 -62 203 -69 112 -22 259 -76 360 -130 22 -12 72 -39 110 -60 165 -90 381 -216 518 -303 127 -80 248 -202 351 -350 104 -150 176 -327 176 -432 0 -83 -37 -187 -99 -278 -65 -96 -101 -163 -101 -188 0 -29 -62 -134 -104 -174 -22 -21 -78 -58 -125 -82 -75 -37 -103 -59 -224 -179 -174 -174 -259 -231 -562 -378 -252 -123 -281 -136 -567 -261 -113 -49 -396 -163 -458 -183 -25 -8 -70 -25 -100 -37 -116 -47 -506 -175 -748 -246 -444 -130 -1029 -268 -1313 -309 -57 -9 -167 -24 -244 -35 -169 -24 -328 -51 -495 -85 -222 -46 -536 -89 -940 -130 -595 -60 -780 -67 -1680 -66 -790 1 -996 8 -1216 37 -139 19 -179 14 -225 -30 l-26 -24 -309 9 c-293 8 -387 15 -514 40 -99 19 -218 69 -273 115 -33 27 -47 24 -47 -12 0 -18 10 -31 35 -45 30 -18 33 -24 23 -36 -10 -12 -33 -14 -133 -8 -66 3 -142 12 -170 20 -30 9 -114 16 -210 18 -116 3 -170 8 -196 19 -20 9 -83 19 -140 22 -828 54 -1585 172 -2384 372 -374 93 -565 171 -738 300 -99 74 -131 83 -213 64 -62 -15 -75 -11 -181 56 -376 235 -480 297 -523 316 -108 48 -128 59 -155 88 -34 37 -141 110 -162 110 -27 0 -14 -58 21 -98 34 -37 34 -37 15 -61 -14 -16 -19 -39 -19 -78 0 -55 0 -55 -26 -49 -45 12 -62 43 -69 131 -22 271 -43 329 -177 471 -121 131 -168 244 -152 372 8 70 64 232 99 283 14 21 25 41 25 45 0 7 114 165 156 216 52 63 257 259 318 304 34 25 70 53 81 62 11 9 76 54 145 100 130 86 326 187 515 265 434 179 701 283 835 327 84 28 273 106 353 147 40 20 99 42 132 50 33 7 98 22 145 32 153 34 474 119 775 206 125 36 476 125 599 151 303 66 525 106 741 133 88 11 187 22 220 26 33 4 97 15 141 26 45 10 115 19 155 19 42 1 84 6 98 14 20 11 31 11 69 0 42 -13 49 -12 87 6 27 13 62 20 101 20 37 0 68 6 81 15 12 9 39 15 60 14 71 -2 577 30 878 55 515 43 978 62 1850 76 546 8 774 6 870 -9z m1432 -23 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m-212 -146 c12 -8 18 -52 8 -52 -15 0 -41 33 -36 46 6 16 13 17 28 6z m77 -114 c-7 -7 -12 -8 -12 -2 0 14 12 26 19 19 2 -3 -1 -11 -7 -17z m-142 -47 c0 -16 -44 -96 -60 -108 -20 -15 -23 -11 -30 47 -6 47 -5 50 19 59 34 12 71 13 71 2z m-97 -103 c8 -6 9 -10 1 -15 -6 -5 -14 -17 -17 -27 -13 -33 -15 -13 -9 59 6 55 8 62 10 30 2 -22 9 -43 15 -47z m897 59 c0 -27 -37 -122 -74 -187 -13 -25 -39 -72 -57 -105 -17 -33 -35 -62 -38 -65 -3 -3 -18 -21 -33 -42 -15 -20 -33 -42 -40 -50 -25 -26 -78 -106 -78 -117 0 -6 -4 -11 -10 -11 -5 0 -10 -8 -10 -18 0 -10 -13 -31 -30 -47 -16 -16 -30 -35 -30 -42 0 -7 -3 -13 -7 -13 -5 0 -21 -21 -38 -48 -16 -26 -45 -64 -65 -85 -19 -21 -47 -59 -61 -85 -14 -27 -44 -73 -67 -104 -23 -30 -42 -58 -42 -61 0 -17 -123 -147 -139 -147 -12 0 -25 48 -22 80 3 29 20 52 32 44 5 -3 9 0 9 6 0 6 17 28 38 49 20 21 43 51 51 67 7 16 17 36 22 44 5 8 12 23 15 33 4 9 10 17 15 17 5 0 9 5 9 11 0 6 11 24 25 41 14 16 25 36 25 43 0 7 4 15 8 17 11 5 104 120 110 138 3 8 16 29 29 46 13 17 23 37 23 44 0 6 6 10 14 7 9 -4 12 0 9 12 -4 17 56 107 116 170 17 19 48 67 67 106 22 45 50 84 72 102 20 17 55 62 76 101 27 49 45 72 58 72 12 0 18 -7 18 -23z m-740 -97 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m-150 -34 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m80 -90 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m3 -34 c4 9 6 9 6 -2 1 -13 -15 -42 -35 -69 -2 -2 -11 2 -19 9 -14 12 -15 10 -9 -15 6 -23 4 -27 -9 -22 -9 3 -18 -1 -21 -9 -3 -9 -1 -12 4 -9 14 9 12 -7 -4 -28 -16 -21 -27 -10 -21 21 7 37 79 131 92 120 7 -6 13 -4 16 4z m-6393 -22 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m5690 -165 c0 -8 4 -15 9 -15 10 0 -3 -67 -14 -78 -4 -4 -4 8 0 25 3 18 3 42 0 54 -7 20 -12 21 -64 16 -34 -3 -48 -2 -36 3 11 5 39 9 63 9 31 1 42 -3 42 -14z m604 -19 c-6 -16 -24 -23 -24 -8 0 10 22 33 27 28 2 -2 1 -11 -3 -20z m-1734 -12 c0 -13 12 -14 85 -8 56 4 85 3 85 -4 0 -12 -66 -26 -80 -17 -6 3 -10 -1 -10 -9 0 -8 10 -17 23 -19 17 -3 14 -5 -9 -6 -17 0 -43 -10 -57 -21 -21 -17 -43 -21 -112 -23 -47 -2 -97 2 -111 8 l-25 10 28 31 c31 34 71 49 121 45 22 -2 34 2 38 13 8 21 24 21 24 0z m915 8 c-16 -2 -33 -9 -37 -15 -5 -8 -10 -8 -20 0 -7 6 -22 13 -33 15 -11 3 12 4 50 4 39 0 57 -2 40 -4z m752 -14 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-1343 -6 c3 -5 -8 -6 -25 -4 -16 2 -29 6 -29 8 0 8 49 4 54 -4z m636 -7 c0 -8 -4 -15 -10 -15 -5 0 -10 -7 -10 -15 0 -18 -4 -18 -28 -6 -9 6 -38 13 -64 16 -27 3 -48 10 -48 15 0 5 16 7 35 4 19 -2 51 -6 70 -8 26 -4 35 -1 35 10 0 8 5 14 10 14 6 0 10 -7 10 -15z m-740 -17 c-11 -12 -23 -18 -27 -14 -5 4 1 14 11 22 30 21 39 17 16 -8z m100 -8 c0 -5 18 -10 40 -10 22 0 40 -4 40 -10 0 -5 -18 -10 -40 -10 -22 0 -40 5 -40 11 0 7 -16 10 -44 8 -32 -3 -42 -1 -39 9 6 14 83 17 83 2z m-720 -20 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m1225 0 c-3 -5 -18 -10 -33 -9 l-27 1 25 8 c35 11 42 11 35 0z m-1162 -7 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m554 1 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m260 0 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m206 -1 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m400 0 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m-788 -13 c8 -13 -25 -13 -45 0 -12 8 -9 10 12 10 15 0 30 -4 33 -10z m293 3 c-16 -2 -40 -2 -55 0 -16 2 -3 4 27 4 30 0 43 -2 28 -4z m172 -3 c0 -5 -9 -10 -20 -10 -11 0 -20 5 -20 10 0 6 9 10 20 10 11 0 20 -4 20 -10z m-334 -8 c-3 -5 -29 -9 -58 -9 -48 -1 -49 0 -18 7 50 11 82 11 76 2z m264 -2 c0 -5 -15 -10 -32 -10 -25 0 -29 3 -18 10 20 13 50 13 50 0z m-1733 -69 c22 4 43 -3 57 -16 11 -11 21 -13 33 -7 23 12 210 24 241 16 37 -10 25 -25 -15 -19 -21 3 -65 1 -98 -4 l-60 -10 75 5 c71 4 74 3 48 -11 -15 -8 -29 -24 -33 -34 -3 -10 -20 -26 -38 -35 -18 -9 -39 -20 -47 -25 -55 -31 -69 -34 -115 -21 -25 7 -45 15 -45 17 0 3 18 23 40 45 44 44 47 53 26 61 -27 11 -83 -13 -115 -48 -17 -19 -38 -35 -46 -35 -21 0 -101 -45 -127 -72 -13 -13 -36 -28 -53 -33 -16 -6 -34 -20 -40 -33 -5 -12 -18 -22 -28 -22 -11 0 -39 -18 -64 -40 -25 -22 -52 -40 -59 -40 -8 0 -14 -5 -14 -11 0 -5 -15 -16 -34 -24 -19 -8 -47 -26 -62 -40 -15 -14 -32 -25 -39 -25 -7 0 -39 -12 -71 -27 -50 -22 -72 -27 -149 -27 -100 0 -145 8 -145 27 0 11 13 19 92 57 15 7 36 20 45 29 10 9 41 32 68 51 28 19 52 38 53 43 2 4 10 7 18 7 8 0 14 4 14 10 0 5 11 12 25 16 14 3 25 10 25 15 0 5 6 9 13 9 6 0 32 18 57 40 24 22 50 40 57 40 8 0 18 11 24 24 8 16 22 26 46 29 22 4 47 19 68 41 28 30 48 39 133 61 55 14 119 25 141 24 22 -2 43 0 47 4 4 3 15 2 25 -3 10 -6 22 -10 26 -9z m891 -17 c12 -13 11 -18 -12 -39 -14 -13 -36 -27 -48 -31 -13 -3 -25 -10 -28 -13 -3 -3 -23 -18 -45 -32 -34 -22 -55 -27 -135 -31 -98 -5 -140 2 -140 23 0 20 31 49 52 49 10 0 21 7 24 15 4 8 12 15 20 15 8 0 14 4 14 9 0 5 10 13 23 17 12 4 24 10 27 13 23 31 218 35 248 5z m452 15 c0 -5 -28 -9 -62 -10 -35 0 -85 -5 -113 -9 -39 -7 -32 -7 33 -3 56 3 82 2 82 -6 0 -6 -18 -11 -42 -11 -64 0 -40 -9 30 -11 34 -1 62 -5 62 -8 0 -3 -16 -14 -35 -23 -27 -14 -49 -16 -95 -11 -64 6 -82 22 -27 24 18 1 24 3 14 6 -10 3 -29 2 -43 -1 -19 -5 -24 -13 -24 -36 0 -17 5 -30 10 -30 6 0 10 7 10 15 0 16 23 18 53 6 25 -9 -67 -33 -133 -34 -27 0 -47 -4 -44 -9 3 -4 -11 -8 -30 -8 -19 0 -38 5 -41 10 -4 7 3 9 22 5 26 -5 26 -5 5 5 -15 6 -38 7 -63 1 -23 -5 -41 -5 -45 0 -3 5 11 9 30 9 20 0 36 5 36 10 0 6 -11 10 -25 10 -14 0 -25 5 -25 10 0 6 18 10 40 10 27 0 38 4 35 13 -6 17 84 57 128 57 21 0 37 4 37 10 0 5 37 10 83 12 45 2 94 3 110 4 15 1 27 -3 27 -7z m318 -18 c11 -13 10 -17 -2 -19 -9 -2 -16 -7 -16 -12 0 -4 -15 -14 -32 -21 -18 -7 -42 -21 -52 -31 -11 -10 -25 -17 -30 -17 -29 3 -46 -2 -46 -16 0 -23 -34 -18 -58 8 l-22 24 23 25 c12 13 29 22 36 20 8 -3 11 0 7 6 -10 16 15 26 26 11 8 -11 9 -10 5 3 -3 9 0 21 6 26 30 25 134 20 155 -7z m383 19 c40 0 48 -3 54 -22 6 -20 8 -20 12 -5 5 19 33 24 33 4 0 -21 -39 -40 -56 -27 -15 13 -244 18 -263 5 -7 -4 -15 -4 -19 0 -17 17 41 27 157 28 86 0 101 2 46 4 -56 3 -75 7 -65 14 8 5 24 7 35 4 11 -2 41 -5 66 -5z m-1521 -15 c0 -8 -7 -15 -15 -15 -16 0 -20 12 -8 23 11 12 23 8 23 -8z m1393 8 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m1537 -13 c12 -23 -4 -100 -20 -100 -6 0 -10 -8 -10 -17 0 -10 -7 -27 -16 -38 -13 -17 -16 -18 -25 -5 -8 11 -9 10 -4 -8 5 -18 -3 -38 -34 -83 -23 -33 -41 -64 -41 -69 0 -6 -4 -10 -10 -10 -5 0 -10 -7 -10 -15 0 -8 -3 -15 -8 -15 -4 0 -12 -9 -17 -19 -41 -80 -60 -111 -67 -111 -4 0 -8 -5 -8 -10 0 -12 -15 -32 -42 -58 -10 -9 -18 -23 -18 -30 0 -7 -6 -20 -12 -27 -29 -33 -38 -45 -38 -53 0 -5 -9 -17 -21 -28 -12 -10 -37 -43 -56 -71 -36 -54 -63 -68 -63 -33 0 10 -8 24 -19 29 -24 13 -38 46 -16 37 10 -3 13 -2 9 5 -7 11 36 99 48 99 5 0 8 6 8 13 0 6 22 32 49 57 51 47 101 119 101 145 0 8 5 15 10 15 6 0 15 10 20 23 7 18 191 270 230 314 5 7 10 15 10 20 0 6 50 63 57 63 1 0 7 -9 13 -20z m-2095 -10 c-3 -5 -19 -10 -36 -10 -16 0 -29 5 -29 10 0 6 16 10 36 10 21 0 33 -4 29 -10z m-910 -30 c-3 -5 -13 -10 -21 -10 -8 0 -14 5 -14 10 0 6 9 10 21 10 11 0 17 -4 14 -10z m1483 -1 c-4 -13 -155 -79 -162 -71 -3 3 -6 0 -6 -6 0 -7 -12 -12 -27 -12 -31 0 -61 15 -51 25 3 4 15 1 27 -6 26 -17 40 -3 15 15 -18 14 -18 15 -1 22 10 3 23 2 30 -5 14 -14 54 -14 63 0 5 8 -3 10 -25 7 -21 -3 -31 0 -31 9 0 13 17 18 58 14 12 -1 22 3 22 9 0 5 21 10 46 10 28 0 44 -4 42 -11z m142 -8 c-13 -25 -13 -31 0 -31 6 0 10 7 10 15 0 9 9 15 24 15 14 0 28 5 31 10 7 12 25 13 25 2 0 -4 -15 -14 -32 -21 -18 -8 -39 -21 -46 -28 -21 -21 -39 -15 -47 14 -3 15 -12 31 -18 35 -7 4 5 8 26 8 34 0 37 -2 27 -19z m2660 -36 c0 -12 -3 -16 -8 -9 -9 14 -422 30 -422 16 0 -5 21 -8 48 -7 31 2 34 1 10 -2 -21 -2 -38 -8 -38 -14 0 -5 44 -7 113 -3 101 6 294 -2 284 -12 -2 -2 -37 -7 -78 -10 -41 -3 -78 -8 -84 -11 -7 -4 -7 -2 0 5 6 6 28 13 50 15 22 3 -33 4 -123 2 -129 -2 -165 0 -177 11 -7 8 -20 14 -27 14 -8 1 -5 7 7 16 17 13 52 15 232 12 205 -3 213 -4 213 -23z m50 2 c0 -7 -9 -18 -20 -25 -12 -7 -20 -8 -20 -2 0 5 5 10 10 10 6 0 10 7 10 15 0 8 5 15 10 15 6 0 10 -6 10 -13z m-495 -35 c-6 -7 -55 11 -50 18 3 5 16 3 29 -3 14 -7 23 -13 21 -15z m-85 -22 c-12 -16 -26 -30 -31 -30 -14 0 -11 6 14 34 31 35 43 33 17 -4z m333 13 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m-48 -13 c-3 -5 -17 -10 -31 -10 -13 0 -24 5 -24 10 0 6 14 10 31 10 17 0 28 -4 24 -10z m-245 -29 c0 -12 -29 -35 -36 -28 -11 10 5 37 21 37 8 0 15 -4 15 -9z m238 -2 c9 -1 4 -5 -13 -8 -34 -8 -48 -4 -39 10 3 6 13 8 21 5 8 -3 22 -7 31 -7z m-3952 -41 c4 -15 1 -26 -12 -35 -11 -8 -30 -24 -44 -36 -41 -36 -122 -71 -175 -77 -49 -5 -50 -5 -53 -42 -2 -22 -8 -38 -16 -38 -19 0 -88 -36 -111 -57 -31 -30 -61 -34 -86 -12 -12 10 -26 19 -31 19 -4 0 -18 10 -29 21 -24 24 -24 24 53 64 26 14 59 25 73 25 18 0 28 7 35 25 5 13 22 31 37 39 36 20 73 52 73 63 0 11 67 36 79 29 4 -3 19 3 31 14 18 16 38 20 96 20 66 0 73 -2 80 -22z m434 8 c0 -8 -16 -16 -40 -20 -24 -4 -40 -12 -40 -20 0 -7 -14 -16 -31 -20 -17 -3 -28 -10 -24 -16 3 -6 0 -7 -9 -4 -8 3 -29 -4 -46 -16 -17 -12 -37 -19 -45 -16 -9 3 -12 0 -9 -8 6 -15 -57 -36 -110 -36 -50 0 -69 19 -53 54 12 25 21 28 82 28 23 0 25 1 8 5 -31 6 -29 19 5 31 15 5 38 19 52 30 22 19 38 21 143 22 93 0 117 -3 117 -14z m3288 -7 c33 -2 34 -2 8 -6 -37 -6 -96 5 -96 17 0 6 10 6 26 0 14 -6 42 -11 62 -11z m-2962 -17 c1 -16 0 -17 -3 -3 -3 13 -10 17 -24 14 -11 -3 -19 0 -19 7 0 6 10 10 23 8 15 -2 22 -10 23 -26z m34 18 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m254 -6 c4 -9 5 -18 4 -19 -2 -1 -18 -9 -36 -18 -29 -14 -36 -14 -48 -3 -12 12 -10 17 14 35 33 25 58 27 66 5z m2774 9 c-10 -2 -26 -2 -35 0 -10 3 -2 5 17 5 19 0 27 -2 18 -5z m-3158 -28 c-7 -8 -18 -15 -24 -15 -6 0 -2 7 8 15 25 19 32 19 16 0z m147 -7 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-1357 -5 c0 -7 -9 -13 -20 -13 -11 0 -20 -3 -20 -7 0 -5 -19 -17 -41 -28 -23 -11 -46 -30 -52 -42 -6 -13 -18 -23 -27 -23 -10 0 -28 -8 -41 -19 -13 -10 -64 -37 -113 -61 -83 -39 -93 -41 -145 -35 -48 6 -53 9 -37 19 10 6 26 19 35 29 8 9 21 17 28 17 7 0 15 11 19 25 5 19 13 25 33 25 33 0 69 25 81 55 5 14 20 26 39 30 17 4 34 13 38 20 9 16 41 20 146 20 55 0 77 -4 77 -12z m1030 13 c0 -2 3 -11 6 -20 5 -13 -1 -16 -27 -15 -24 1 -27 3 -11 6 24 5 29 18 10 26 -8 3 -6 6 5 6 9 1 17 -1 17 -3z m210 -14 c0 -5 -6 -16 -13 -27 -12 -16 -18 -16 -47 -7 -18 7 -37 9 -43 5 -6 -3 -7 -1 -3 6 4 6 16 9 27 6 10 -3 28 -8 39 -11 15 -4 20 -1 20 15 0 12 5 21 10 21 6 0 10 -4 10 -8z m91 -25 c-8 -8 -11 -7 -11 4 0 9 3 19 7 23 4 4 9 2 11 -4 3 -7 -1 -17 -7 -23z m449 23 c0 -5 -9 -10 -20 -10 -11 0 -20 5 -20 10 0 6 9 10 20 10 11 0 20 -4 20 -10z m904 -53 c-9 -25 -34 -29 -34 -6 0 11 5 17 10 14 6 -3 10 -1 10 4 0 6 -5 11 -11 11 -5 0 -7 5 -4 10 9 15 36 -16 29 -33z m-1718 5 c-13 -13 -16 -13 -29 0 -13 13 -12 15 14 15 26 0 28 -2 15 -15z m284 -2 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m-150 -26 c0 -8 -4 -12 -10 -9 -5 3 -10 10 -10 16 0 5 5 9 10 9 6 0 10 -7 10 -16z m37 -6 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m58 12 c3 -5 -3 -10 -14 -10 -12 0 -21 5 -21 10 0 6 6 10 14 10 8 0 18 -4 21 -10z m8920 -17 c28 -42 127 -133 152 -139 13 -4 23 -11 23 -17 0 -16 98 -107 115 -107 8 0 15 -5 15 -11 0 -17 87 -99 105 -99 8 0 15 -6 15 -14 0 -8 8 -21 18 -28 9 -7 33 -33 52 -58 62 -80 145 -139 196 -140 31 0 69 -31 76 -61 1 -9 -16 -35 -39 -58 -43 -41 -56 -83 -34 -106 5 -6 16 -33 25 -62 10 -28 24 -57 32 -64 8 -6 21 -37 30 -68 15 -51 58 -139 74 -151 12 -8 21 -77 15 -103 -5 -20 -15 -26 -48 -31 -72 -11 -502 -25 -537 -17 -43 9 -52 31 -12 31 39 0 82 35 82 66 0 26 -5 28 -100 43 -45 7 -48 9 -19 10 19 0 44 9 55 20 12 10 36 22 54 26 18 4 42 15 52 25 17 15 17 18 3 30 -8 7 -15 19 -15 26 0 18 -30 17 -54 -1 -12 -9 -42 -15 -77 -15 -41 0 -63 -5 -82 -20 -14 -11 -40 -20 -59 -20 -48 0 -78 -10 -78 -26 0 -16 -14 -18 -38 -5 -27 14 -105 17 -109 4 -3 -7 12 -13 39 -16 42 -3 42 -4 -9 -5 -56 -2 -68 11 -38 41 13 13 21 13 67 1 67 -17 78 -17 54 1 -11 8 -34 16 -50 16 -28 1 -28 2 8 9 22 4 45 15 52 25 8 11 32 19 73 22 68 6 80 20 24 26 -21 2 -16 3 12 2 49 -2 82 5 140 30 17 7 55 23 85 35 30 12 69 28 85 35 17 7 43 16 60 20 16 4 36 11 42 17 18 15 16 45 -3 52 -26 10 -144 7 -144 -4 0 -5 -15 -11 -32 -11 l-33 -2 35 -7 c28 -6 21 -8 -36 -9 -55 -1 -77 -6 -97 -21 -14 -11 -36 -20 -50 -20 -13 0 -35 -8 -48 -19 -13 -10 -45 -21 -71 -25 -34 -5 -49 -12 -53 -27 -6 -16 -16 -19 -80 -19 -55 0 -74 -4 -79 -15 -8 -21 -23 -19 -37 7 -10 18 -9 20 5 15 10 -4 15 -3 11 3 -3 6 -15 10 -26 10 -10 0 -19 6 -19 13 0 26 25 37 81 37 62 0 92 7 84 20 -8 13 15 23 52 22 22 -1 41 6 54 19 15 15 73 33 128 40 3 0 -3 4 -14 9 -18 8 -18 9 6 9 14 1 31 -5 37 -11 10 -10 15 -10 20 -1 4 6 23 14 44 18 29 5 37 12 41 33 7 38 -22 63 -76 64 -41 0 -45 3 -57 36 -11 30 -10 36 3 44 9 4 23 15 31 23 8 8 30 15 50 15 32 0 56 19 56 44 0 7 -169 176 -261 259 -40 37 -91 75 -112 85 -27 12 -39 25 -44 45 -3 16 -25 44 -54 68 -27 23 -49 47 -49 54 0 7 15 19 33 28 46 21 57 24 108 26 40 1 49 -2 64 -26z m-12335 -3 c0 -11 -7 -20 -15 -20 -8 0 -15 -7 -15 -15 0 -8 -9 -15 -20 -15 -13 0 -24 -10 -30 -25 -5 -14 -17 -25 -28 -25 -10 0 -26 -8 -36 -18 -21 -24 -72 -26 -80 -5 -4 9 -5 16 -4 17 2 1 17 11 35 24 18 12 38 22 46 22 7 0 32 18 56 40 48 45 91 54 91 20z m11900 10 c0 -5 -13 -7 -30 -3 -38 7 -40 -12 -2 -25 l27 -10 -27 -1 c-16 -1 -28 4 -28 10 0 6 -7 9 -15 5 -18 -7 -20 5 -3 22 14 14 78 16 78 2z m-11120 -45 c0 -8 6 -15 13 -15 6 0 26 -11 42 -25 22 -18 26 -24 13 -25 -9 0 -23 -9 -31 -20 -8 -11 -16 -17 -19 -14 -8 7 -78 -23 -78 -34 0 -5 -18 -15 -40 -22 -22 -7 -40 -17 -40 -22 0 -4 -6 -8 -13 -8 -7 0 -23 -9 -35 -21 -20 -18 -24 -19 -38 -5 -18 19 -59 30 -73 21 -6 -3 -11 -2 -11 4 0 16 62 72 98 87 17 8 32 18 32 22 0 10 75 47 113 56 15 4 30 13 33 21 8 20 34 19 34 0z m5690 11 c0 -2 -7 -6 -15 -10 -8 -3 -15 -1 -15 4 0 6 7 10 15 10 8 0 15 -2 15 -4z m6148 -62 c-4 -3 -19 7 -34 22 -25 27 -26 28 -19 6 6 -20 4 -23 -11 -20 -23 4 -32 38 -10 38 9 0 16 5 16 11 0 5 14 -4 32 -20 18 -17 29 -33 26 -37z m-6048 47 c0 -5 -9 -7 -20 -4 -11 3 -20 7 -20 9 0 2 9 4 20 4 11 0 20 -4 20 -9z m-6050 -16 c0 -8 -7 -15 -15 -15 -8 0 -15 -7 -15 -17 0 -9 -3 -13 -7 -10 -8 8 17 57 29 57 4 0 8 -7 8 -15z m5900 -5 c0 -5 -4 -10 -9 -10 -6 0 -13 5 -16 10 -3 6 1 10 9 10 9 0 16 -4 16 -10z m-5970 -10 c0 -5 -7 -10 -15 -10 -8 0 -15 5 -15 10 0 6 7 10 15 10 8 0 15 -4 15 -10z m1640 -9 c0 -4 -13 -17 -28 -28 -29 -21 -49 -19 -46 5 1 6 2 16 3 21 2 18 71 20 71 2z m710 8 c0 -4 -4 -11 -10 -14 -5 -3 -10 -14 -10 -25 0 -18 -19 -30 -49 -30 -9 0 -32 -11 -50 -25 -30 -22 -42 -24 -115 -22 -45 1 -87 6 -94 10 -16 11 -6 27 17 27 10 0 26 9 37 21 21 23 74 50 119 59 42 9 155 8 155 -1z m3573 -18 c-12 -9 -23 -23 -26 -31 -4 -11 -6 -10 -6 4 -1 24 28 58 42 49 5 -3 1 -13 -10 -22z m128 20 c11 6 25 8 32 6 19 -7 -39 -26 -62 -20 -16 4 -21 1 -21 -15 0 -20 -26 -49 -36 -39 -3 3 -2 12 2 19 5 7 9 17 9 21 0 13 50 37 53 26 2 -5 12 -4 23 2z m-3211 -16 c0 -9 -7 -18 -16 -22 -9 -3 -31 -22 -51 -42 -29 -30 -41 -36 -81 -37 -51 -1 -102 13 -102 27 0 5 6 9 13 9 7 0 24 11 39 25 38 35 86 53 146 54 40 1 52 -2 52 -14z m2312 -17 c-6 -6 -12 -6 -17 3 -5 8 -4 10 3 5 7 -4 12 0 13 11 0 12 2 13 6 5 3 -8 1 -18 -5 -24z m6404 -11 c-2 -37 -65 -33 -66 4 0 4 6 9 14 12 8 3 13 -1 12 -11 0 -9 7 -18 17 -20 9 -2 17 1 17 7 0 6 -6 11 -12 11 -9 0 -8 4 2 10 11 7 11 10 2 10 -7 0 -10 5 -6 11 9 15 22 -6 20 -34z m794 23 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m-12420 -8 c0 -13 -12 -22 -22 -16 -10 6 -1 24 13 24 5 0 9 -4 9 -8z m12210 -14 c0 -16 -3 -19 -11 -11 -6 6 -8 16 -5 22 11 17 16 13 16 -11z m50 7 c-7 -9 -15 -13 -17 -11 -7 7 7 26 19 26 6 0 6 -6 -2 -15z m-12213 -1 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m2510 -1 c-12 -3 -16 -11 -12 -22 9 -30 -38 -54 -88 -46 l-41 7 55 27 c30 14 56 29 57 34 2 4 13 6 25 6 18 -1 19 -2 4 -6z m9960 -25 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m30 10 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-9282 3 c3 -5 1 -12 -4 -15 -12 -8 -41 3 -41 15 0 12 37 12 45 0z m225 -1 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m245 -1 c11 -16 -2 -22 -32 -15 -21 6 -24 9 -12 17 19 12 36 11 44 -2z m-3775 -9 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m6055 -21 c-6 -9 -35 -1 -35 10 0 4 3 11 7 14 8 9 34 -13 28 -24z m5145 21 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m1182 -34 c25 -24 53 -48 64 -55 17 -10 16 -11 -8 -5 -15 3 -33 2 -40 -2 -25 -16 -45 -13 -64 7 -16 17 -16 22 -4 30 12 8 10 10 -8 6 -18 -4 -21 -3 -12 8 9 11 15 11 37 0 14 -8 30 -20 34 -27 7 -10 9 -9 9 5 0 9 -10 22 -23 28 -24 11 -54 49 -39 49 5 0 29 -20 54 -44z m-92 6 c0 -15 -2 -15 -10 -2 -13 20 -13 33 0 25 6 -3 10 -14 10 -23z m230 3 c13 -14 19 -25 14 -25 -5 0 0 -7 10 -15 14 -11 16 -15 5 -15 -8 1 -26 19 -41 40 -31 45 -24 53 12 15z m-12460 5 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m6367 -4 c-18 -14 -18 -14 0 -18 10 -2 -8 -4 -39 -4 -82 1 -76 15 12 29 44 7 45 7 27 -7z m-6447 -6 c0 -5 -7 -10 -16 -10 -8 0 -12 5 -9 10 3 6 10 10 16 10 5 0 9 -4 9 -10z m12587 -12 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m37 7 c3 -8 1 -15 -4 -15 -6 0 -10 7 -10 15 0 8 2 15 4 15 2 0 6 -7 10 -15z m-12588 -23 c-8 -9 -19 -13 -22 -9 -10 9 16 38 28 31 6 -4 4 -13 -6 -22z m11489 17 c11 -16 1 -19 -13 -3 -7 8 -8 14 -3 14 5 0 13 -5 16 -11z m-15771 -66 c-10 -7 -50 -44 -90 -83 -39 -38 -75 -70 -80 -70 -4 0 -15 -6 -23 -14 -24 -21 -134 -47 -143 -33 -4 6 -4 15 -1 20 3 5 -5 6 -18 2 l-24 -7 24 26 c14 14 30 26 36 26 6 0 22 12 36 26 13 14 44 37 69 50 25 14 61 34 80 46 19 11 60 31 90 43 55 21 55 21 58 1 2 -11 -4 -26 -14 -33z m4163 25 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m76 25 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m1418 -13 c5 0 9 -8 9 -17 0 -13 -3 -14 -12 -5 -19 19 -30 14 -23 -9 5 -14 3 -20 -7 -18 -7 1 -26 1 -43 -1 -26 -1 -27 -3 -10 -10 17 -7 15 -9 -12 -9 -22 -1 -33 4 -33 13 0 16 21 26 56 26 13 0 24 5 24 10 0 17 -53 11 -88 -10 -18 -11 -41 -20 -51 -20 -11 0 -21 -6 -24 -12 -2 -7 -8 -10 -12 -6 -12 11 4 27 43 44 39 17 138 34 160 28 8 -2 18 -4 23 -4z m11209 0 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-1150 -10 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-11590 -10 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m100 -10 c-19 -13 -30 -13 -30 0 0 6 10 10 23 10 18 0 19 -2 7 -10z m1013 -6 c26 -9 47 -19 47 -23 0 -51 -280 -82 -326 -36 -19 19 -8 25 91 52 99 26 129 27 188 7z m11511 -3 c3 -5 -1 -11 -9 -14 -9 -4 -12 -1 -8 9 6 16 10 17 17 5z m-10084 -10 c0 -12 -23 -18 -70 -20 -29 -1 -32 1 -17 10 10 6 25 8 33 5 8 -3 14 -1 14 4 0 6 9 10 20 10 11 0 20 -4 20 -9z m293 -10 c17 -17 -9 -43 -64 -62 -64 -23 -99 -24 -99 -5 0 25 12 46 26 46 8 0 14 4 14 8 0 27 98 38 123 13z m430 12 c-13 -2 -35 -2 -50 0 -16 2 -5 4 22 4 28 0 40 -2 28 -4z m8397 -2 c0 -6 -4 -13 -10 -16 -5 -3 -10 1 -10 9 0 9 5 16 10 16 6 0 10 -4 10 -9z m-8422 -13 c26 -1 28 -3 18 -24 -6 -14 -20 -24 -32 -24 -12 0 -33 -9 -47 -20 -14 -11 -35 -20 -47 -20 -11 0 -19 -4 -15 -9 11 -18 -48 -65 -82 -65 -20 0 -28 -3 -20 -8 7 -4 -11 -8 -40 -8 -29 0 -53 3 -53 8 0 4 14 20 30 36 34 31 54 28 25 -4 -20 -23 -11 -28 11 -6 8 8 14 26 14 40 0 20 6 27 28 32 15 4 40 20 57 37 37 37 62 47 97 41 15 -3 40 -6 56 -6z m219 6 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m9123 -2 c0 -4 -5 -13 -11 -19 -8 -8 -7 -13 1 -18 7 -4 17 -1 22 6 8 12 9 11 5 -1 -2 -8 -12 -15 -23 -15 -14 0 -19 7 -20 28 -1 16 4 27 12 27 8 0 14 -4 14 -8z m261 -27 c5 4 9 -1 9 -9 0 -9 -4 -16 -8 -16 -12 0 -32 47 -24 55 4 4 8 -3 10 -14 2 -12 8 -19 13 -16z m24 17 c-3 -3 -11 0 -18 7 -9 10 -8 11 6 5 10 -3 15 -9 12 -12z m-12859 -29 c-4 -4 -11 -1 -16 7 -16 25 -11 35 7 17 9 -9 13 -20 9 -24z m1367 30 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z m11334 -60 c35 -37 63 -71 62 -77 0 -6 -3 -5 -6 2 -2 6 -10 12 -17 12 -7 0 -18 12 -25 26 -9 21 -14 24 -26 14 -11 -9 -15 -9 -15 -1 0 6 5 11 11 11 5 0 7 5 3 12 -5 8 -11 5 -17 -10 -6 -12 -14 -22 -19 -22 -13 0 -10 12 8 31 16 17 15 19 -10 28 -14 6 -26 17 -26 26 0 25 12 18 77 -52z m-12347 38 c0 -21 -19 -31 -56 -31 -17 0 -22 -4 -18 -15 5 -11 -1 -15 -19 -15 -13 0 -36 -9 -50 -20 -35 -28 -70 -25 -106 9 -35 33 -38 46 -13 60 9 6 13 11 9 11 -5 0 -5 5 -2 10 4 6 58 10 131 10 115 0 124 -1 124 -19z m2156 -7 c-26 -18 -48 -18 -72 2 -10 8 -14 13 -9 11 6 -3 28 -2 50 2 48 9 57 4 31 -15z m1152 -5 c-12 -16 -24 -26 -26 -20 -3 10 28 49 41 50 4 1 -3 -13 -15 -30z m3012 21 c0 -5 -15 -9 -32 -9 l-33 1 30 8 c17 4 31 8 33 9 1 0 2 -3 2 -9z m-6735 -10 c4 -6 11 -8 16 -5 10 7 13 -8 3 -18 -9 -8 -54 14 -48 24 7 12 21 11 29 -1z m6906 -10 c17 -10 20 -15 9 -18 -7 -3 -16 0 -18 7 -2 6 -20 11 -40 10 l-37 -1 40 -14 c22 -8 48 -17 58 -20 19 -7 21 -13 8 -33 -7 -10 -40 -17 -113 -22 -57 -3 -116 -12 -131 -18 -36 -14 -38 -14 -31 4 4 10 20 15 45 15 21 0 39 3 39 8 0 4 -19 6 -42 5 l-43 -3 34 11 c23 7 43 7 64 0 16 -6 57 -10 91 -9 l61 1 -45 7 -45 8 47 -1 c26 -1 48 3 48 8 0 6 -51 9 -125 7 -80 -1 -125 1 -125 8 0 6 33 10 80 10 44 0 80 4 80 9 0 10 -134 3 -174 -10 -45 -14 -54 -10 -18 8 50 24 31 26 -28 3 -29 -11 -58 -19 -64 -17 -6 2 14 12 44 22 40 14 81 19 150 18 72 -1 87 1 60 7 -28 7 -22 8 31 6 36 -2 76 -9 90 -16z m6044 10 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-9280 -10 c-3 -5 -12 -10 -20 -10 -8 0 -17 5 -20 10 -4 6 5 10 20 10 15 0 24 -4 20 -10z m-5 -40 l35 -8 -32 -1 c-17 -1 -34 -5 -37 -10 -3 -5 -14 -8 -24 -6 -9 1 -11 0 -4 -2 24 -9 12 -21 -25 -25 -43 -6 -54 -1 -33 12 10 7 11 10 3 10 -7 0 -13 9 -13 19 0 20 18 31 51 31 10 0 19 5 19 12 0 6 6 4 13 -6 7 -10 29 -21 47 -26z m-3705 16 c14 -13 10 -26 -7 -26 -5 0 -6 5 -3 10 3 6 -3 10 -14 10 -12 0 -21 5 -21 10 0 15 29 12 45 -4z m3433 -5 c-10 -16 -38 -19 -38 -5 0 4 34 20 48 23 1 1 -3 -8 -10 -18z m9612 -28 c0 -3 -9 2 -20 12 -11 10 -20 22 -20 27 0 4 9 -1 20 -12 11 -11 20 -23 20 -27z m-13689 22 c11 6 11 5 2 -5 -14 -15 -47 -5 -37 11 5 8 9 8 14 -1 5 -7 14 -9 21 -5z m2578 6 c17 -11 -62 -25 -100 -18 -16 3 -8 5 21 7 42 3 41 4 -20 10 l-65 7 75 1 c41 1 81 -2 89 -7z m3408 -31 c-8 -20 -17 -28 -30 -27 -24 2 -34 -20 -12 -25 15 -3 14 -7 -5 -31 -21 -26 -23 -27 -37 -10 -14 17 -14 17 -9 1 3 -10 8 -24 11 -31 3 -7 -3 -24 -15 -37 -11 -13 -20 -30 -20 -37 0 -19 -35 -64 -44 -56 -3 3 -6 -1 -6 -10 0 -9 -5 -17 -10 -17 -6 0 -10 -6 -8 -13 4 -16 -60 -137 -73 -137 -5 0 -9 -6 -9 -13 0 -8 -10 -22 -21 -33 l-22 -19 7 30 c4 17 19 42 32 56 20 20 24 32 18 54 -4 18 -2 30 6 35 7 4 9 13 5 19 -5 9 -11 9 -22 -1 -15 -12 -15 -11 -2 12 8 14 20 29 27 33 6 4 12 13 12 18 0 6 12 26 27 46 24 31 28 33 34 17 12 -31 10 -42 -8 -38 -14 4 -22 -6 -34 -40 -15 -42 -10 -80 8 -63 4 5 2 12 -6 16 -10 7 -10 9 2 14 8 3 17 19 20 35 4 21 12 29 24 28 13 -1 19 7 21 32 2 20 9 32 18 32 8 0 14 4 14 9 0 13 -27 21 -47 15 -11 -4 -14 -2 -8 3 6 4 25 25 43 46 31 37 33 37 40 16 7 -17 11 -19 17 -9 5 9 4 15 -3 18 -17 5 -14 23 8 52 17 21 21 23 30 10 9 -13 11 -12 9 5 -2 31 0 35 15 29 11 -4 12 -11 3 -34z m1731 33 c-15 -2 -42 -2 -60 0 -18 2 -6 4 27 4 33 0 48 -2 33 -4z m5641 -4 c6 9 11 10 15 2 4 -6 1 -11 -6 -11 -10 0 -9 -3 2 -10 8 -5 12 -12 8 -15 -8 -8 -48 26 -48 40 0 5 5 3 10 -5 8 -12 11 -13 19 -1z m-12789 -10 c-13 -6 -28 -15 -32 -22 -6 -9 -8 -9 -8 0 0 14 29 33 50 32 8 0 4 -5 -10 -10z m3077 0 c-14 -8 -22 -8 -30 0 -8 8 -3 11 19 11 25 -1 27 -2 11 -11z m-1212 -9 c3 -5 2 -10 -4 -10 -5 0 -13 5 -16 10 -3 6 -2 10 4 10 5 0 13 -4 16 -10z m4749 -6 c4 -10 -1 -25 -10 -36 -10 -10 -15 -21 -11 -24 9 -9 28 6 22 17 -4 5 10 9 29 9 29 0 34 3 29 18 -3 9 -3 14 1 10 6 -5 12 -24 15 -49 1 -4 15 -5 32 -4 53 5 17 -13 -41 -20 -43 -5 -52 -4 -40 5 12 9 9 11 -17 6 -20 -3 -45 2 -70 14 -30 15 -34 19 -15 20 12 0 22 5 22 10 0 7 -15 9 -37 6 -37 -6 -37 -5 -8 4 17 6 45 8 64 4 31 -5 33 -4 22 10 -8 9 -9 16 -3 16 5 0 13 -7 16 -16z m515 12 c-12 -10 -60 -16 -54 -6 3 5 18 10 32 10 15 0 24 -2 22 -4z m5965 -22 c3 -8 2 -12 -4 -9 -6 3 -10 10 -10 16 0 14 7 11 14 -7z m-13164 -4 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m1463 3 c-13 -2 -33 -2 -45 0 -13 2 -3 4 22 4 25 0 35 -2 23 -4z m1420 -4 c-8 -8 -22 -8 -50 -1 l-38 10 50 1 c36 1 46 -2 38 -10z m6794 5 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m2063 -17 c11 -5 9 -6 -4 -4 -11 1 -21 9 -23 17 -3 10 -2 11 4 4 4 -6 15 -14 23 -17z m1253 -47 c15 0 30 -24 20 -33 -8 -8 -92 56 -92 71 -1 7 -5 10 -11 7 -11 -7 -14 8 -3 19 4 4 22 -9 40 -29 17 -19 38 -35 46 -35z m222 60 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-16774 -23 c-10 -9 -11 -8 -5 6 3 10 9 15 12 12 3 -3 0 -11 -7 -18z m5249 13 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m1149 -13 c58 0 78 -16 23 -18 -22 0 -23 -2 -9 -8 16 -6 15 -9 -10 -21 -15 -8 -32 -21 -36 -27 -5 -9 -30 -12 -70 -11 -60 2 -61 2 -12 5 28 2 55 9 60 14 7 7 -4 8 -32 3 -23 -3 -54 -3 -68 0 -22 6 -25 9 -15 22 7 8 30 17 51 20 29 5 37 10 29 19 -13 16 0 28 16 14 8 -6 40 -11 73 -12z m-2764 3 c-3 -5 -12 -10 -18 -10 -7 0 -6 4 3 10 19 12 23 12 15 0z m9545 0 c0 -5 -7 -10 -15 -10 -8 0 -15 5 -15 10 0 6 7 10 15 10 8 0 15 -4 15 -10z m167 -10 c1 0 0 -7 -3 -15 -4 -10 0 -15 11 -15 9 0 13 5 10 10 -8 13 5 13 25 0 13 -8 12 -10 -2 -10 -11 0 -18 -8 -18 -20 0 -25 -5 -25 -46 1 -21 12 -31 25 -27 35 3 7 0 14 -6 14 -6 0 -11 -7 -11 -15 0 -8 -7 -15 -15 -15 -8 0 -15 -4 -15 -10 0 -5 13 -10 28 -10 18 0 38 -10 56 -29 l27 -28 -25 4 c-14 3 -26 9 -26 14 0 5 -6 9 -13 9 -7 0 -28 11 -45 24 l-33 24 27 6 c14 4 24 9 21 13 -3 3 -1 11 6 18 8 8 21 10 42 4 16 -5 31 -9 32 -9z m2326 6 c21 -16 22 -45 1 -53 -18 -7 -94 14 -94 26 0 12 42 40 60 40 8 0 23 -6 33 -13z m-12073 -6 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m13180 -28 c0 -1 -9 2 -20 8 -11 6 -20 15 -20 20 0 6 9 2 20 -7 11 -10 20 -19 20 -21z m-14454 -9 c3 -26 0 -33 -14 -33 -15 0 -15 2 -2 10 13 9 12 12 -4 25 -20 15 -20 15 0 17 10 0 -1 4 -26 8 l-45 8 44 -2 c42 -1 44 -3 47 -33z m5406 20 c4 -46 -9 -72 -35 -73 -12 0 -57 51 -57 66 0 7 16 14 38 17 20 2 40 4 45 5 4 1 8 -6 9 -15z m-7652 -3 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m1906 -16 c-14 -25 -44 -53 -58 -54 -5 0 -8 7 -8 15 0 8 -4 15 -9 15 -5 0 -11 -7 -15 -15 -6 -16 -36 -21 -36 -7 0 5 14 18 30 31 17 12 28 26 25 32 -4 5 13 9 39 9 l45 0 -13 -26z m153 5 c-11 -11 -23 -19 -25 -16 -3 3 2 12 11 21 9 9 21 16 26 16 5 0 0 -9 -12 -21z m871 5 c0 -2 -16 -4 -36 -4 -19 0 -33 4 -30 8 5 8 66 4 66 -4z m120 12 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m1128 -8 c12 0 22 -4 22 -9 0 -6 -17 -9 -37 -7 -36 3 -38 1 -41 -28 -4 -42 -43 -65 -68 -40 -12 12 -15 27 -11 51 3 21 1 36 -6 39 -7 4 17 3 53 0 36 -4 75 -6 88 -6z m257 2 c3 -5 -3 -10 -14 -10 -11 0 -23 5 -26 10 -3 6 3 10 14 10 11 0 23 -4 26 -10z m1565 0 c0 -5 -10 -10 -22 -9 -22 0 -22 1 -3 9 11 5 21 9 23 9 1 1 2 -3 2 -9z m9977 -35 c64 -63 57 -80 -31 -80 -47 0 -71 4 -74 13 -2 6 -10 12 -17 12 -14 0 -25 21 -25 50 0 19 51 49 84 50 10 0 39 -20 63 -45z m-16037 25 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m16601 -83 c-5 -5 -11 -4 -15 2 -4 6 -2 11 4 11 7 0 5 9 -4 22 -9 12 -16 32 -16 43 0 12 8 3 21 -24 12 -27 16 -48 10 -54z m-17339 60 c-12 -6 -22 -14 -22 -19 0 -4 -8 -8 -17 -8 -14 1 -11 6 11 25 17 13 34 21 40 18 5 -4 0 -11 -12 -16z m4223 3 c-3 -5 -10 -10 -16 -10 -5 0 -9 5 -9 10 0 6 7 10 16 10 8 0 12 -4 9 -10z m2583 -2 c32 -4 -2 -29 -36 -27 -10 1 -7 4 8 9 21 7 19 8 -17 9 -23 1 -44 5 -48 10 -4 8 15 8 93 -1z m1542 2 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m5790 2 c0 -11 -22 -32 -32 -32 -5 0 -4 9 2 20 11 20 30 28 30 12z m-14090 -10 c0 -13 -12 -22 -22 -16 -10 6 -1 24 13 24 5 0 9 -4 9 -8z m750 -17 c0 -3 -9 -5 -20 -5 -11 0 -20 7 -20 15 0 13 4 14 20 5 11 -6 20 -13 20 -15z m2020 21 c0 -2 -7 -7 -16 -10 -8 -3 -12 -2 -9 4 6 10 25 14 25 6z m13380 -6 l-45 -7 45 -3 45 -3 -44 -6 c-57 -8 -68 -31 -15 -31 29 0 35 -3 26 -12 -9 -9 -21 -8 -52 1 -22 6 -40 15 -40 18 0 4 10 17 22 30 16 17 31 23 62 21 l41 -1 -45 -7z m-14046 -16 c9 -24 7 -27 -9 -10 -17 17 -19 26 -6 26 5 0 12 -7 15 -16z m2026 12 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m4150 -17 c0 -6 -4 -7 -10 -4 -5 3 -10 11 -10 16 0 6 5 7 10 4 6 -3 10 -11 10 -16z m9215 11 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-9285 -21 c0 -6 9 -8 23 -4 15 4 18 3 8 -3 -16 -12 -6 -85 15 -103 7 -6 47 -15 88 -20 41 -4 102 -13 136 -19 34 -6 87 -8 118 -5 32 4 53 3 47 -2 -5 -4 -11 -40 -12 -79 -1 -39 -13 -116 -27 -172 -14 -55 -26 -113 -26 -129 0 -15 -9 -66 -19 -113 -11 -47 -23 -101 -26 -121 -5 -36 -6 -36 -62 -42 -88 -9 -94 -36 -29 -148 70 -123 132 -181 231 -214 42 -15 216 -19 500 -13 73 1 73 1 210 -71 104 -54 130 -61 244 -61 97 0 115 3 159 25 33 17 67 25 99 25 28 0 72 7 98 15 49 14 129 11 151 -7 7 -5 41 -7 77 -6 l65 3 26 95 c35 125 43 191 32 270 -16 114 -11 178 22 275 35 103 47 116 94 95 25 -11 87 -15 256 -16 l224 -2 40 41 c25 26 48 41 59 39 12 -2 19 3 19 12 0 19 16 29 31 20 8 -4 7 -9 -2 -15 -10 -6 -11 -9 -2 -9 9 0 11 -12 8 -37 -7 -69 -8 -118 0 -138 4 -11 9 -26 11 -32 2 -8 22 -13 54 -13 35 0 52 -5 56 -14 3 -8 23 -21 43 -30 21 -8 69 -38 106 -67 57 -43 80 -54 139 -66 39 -7 85 -11 103 -8 29 5 66 38 76 68 2 8 8 8 18 -3 28 -28 31 -52 10 -72 -20 -18 -19 -38 1 -64 16 -21 98 -39 119 -26 23 15 76 16 84 2 4 -6 -6 -10 -23 -10 -43 0 -120 -64 -128 -105 -9 -50 2 -71 45 -83 49 -15 136 -15 164 0 67 35 90 128 42 166 -13 11 -21 22 -17 26 3 4 6 19 7 34 0 22 6 28 40 38 43 12 115 8 115 -7 0 -5 6 -9 13 -9 8 0 12 -18 13 -55 0 -65 11 -79 107 -142 96 -62 169 -93 223 -93 68 0 105 -22 143 -86 18 -30 31 -60 28 -67 -2 -7 -28 -21 -57 -31 -41 -15 -66 -17 -123 -12 -74 7 -88 10 -222 57 -104 36 -218 63 -425 98 -69 12 -147 28 -175 36 -27 8 -86 16 -130 19 -44 3 -123 14 -175 25 -68 15 -133 21 -227 21 -93 0 -135 4 -143 13 -5 6 -20 25 -31 40 -21 28 -22 28 -124 25 -57 -2 -101 -6 -98 -10 2 -5 -24 -8 -58 -8 -58 0 -63 -2 -98 -37 -79 -83 -101 -114 -90 -134 5 -10 19 -23 30 -30 14 -7 18 -16 13 -27 -4 -9 -11 -48 -15 -87 -7 -63 -12 -73 -43 -100 -19 -17 -55 -42 -81 -55 -147 -78 -134 -74 -235 -74 -52 0 -126 4 -165 8 -57 7 -85 4 -154 -13 -51 -13 -117 -21 -170 -22 -47 0 -106 -4 -131 -9 -25 -4 -62 -11 -82 -15 -73 -14 -121 19 -166 113 -13 29 -36 62 -51 73 -23 19 -34 20 -101 15 -41 -4 -82 -7 -90 -8 -15 -1 -123 10 -350 37 -398 46 -416 48 -450 30 -38 -20 -158 -31 -224 -21 -36 6 -46 11 -46 26 0 29 40 65 95 85 28 10 54 22 59 26 4 4 -5 27 -21 51 -37 55 -53 93 -53 123 0 23 37 113 51 125 14 11 69 140 69 160 0 37 -31 90 -61 106 -24 12 -82 15 -307 16 -303 1 -376 -8 -543 -68 -93 -33 -328 -156 -429 -224 -54 -37 -201 -100 -310 -134 -63 -20 -135 -43 -160 -51 -97 -32 -227 -39 -371 -22 -192 24 -229 27 -473 37 -183 7 -221 12 -237 26 -25 22 -24 31 7 71 40 53 31 64 -56 67 -73 2 -152 29 -188 63 -22 21 -81 26 -151 13 -126 -23 -176 -28 -286 -29 -60 -1 -141 -6 -180 -11 -60 -7 -74 -13 -97 -39 -23 -26 -28 -41 -28 -85 0 -35 5 -56 13 -59 6 -2 34 7 61 20 84 42 108 36 203 -53 l51 -49 -27 -40 -27 -40 -92 -7 c-51 -4 -128 -14 -173 -23 -117 -22 -236 -20 -290 5 -68 31 -90 26 -143 -27 -68 -69 -89 -119 -81 -187 11 -85 -14 -113 -109 -125 -45 -5 -51 -9 -54 -31 -9 -73 -36 -96 -125 -106 -29 -3 -62 -12 -75 -20 -31 -20 -129 -27 -230 -17 -72 8 -89 7 -125 -10 -102 -45 -200 -59 -452 -63 -132 -2 -264 -6 -293 -9 -57 -7 -167 -36 -198 -53 -88 -48 -149 -72 -183 -74 -48 -2 -100 19 -103 41 -2 31 4 66 14 78 6 7 8 19 5 26 -6 15 -97 10 -97 -6 0 -19 -69 -74 -102 -81 -30 -6 -87 -1 -118 11 -8 3 -19 7 -25 8 -53 13 -248 60 -315 76 -104 26 -318 93 -375 119 -11 4 -80 34 -153 64 -165 70 -271 119 -272 127 0 3 23 16 51 29 28 14 61 33 72 43 12 10 31 26 42 36 129 110 239 161 505 235 380 106 581 166 940 282 198 63 234 74 249 74 9 0 21 4 26 9 6 5 39 16 75 24 36 8 117 29 180 45 283 72 352 85 445 83 250 -6 247 -6 306 21 31 14 90 48 130 76 101 67 157 91 239 101 80 10 107 25 167 89 54 58 61 78 34 106 -24 26 -28 56 -7 56 8 0 28 11 44 25 44 37 116 32 166 -12 15 -13 30 -23 35 -23 5 0 11 -7 14 -15 10 -25 114 -48 217 -48 108 1 156 11 249 56 67 31 213 62 219 46 2 -5 22 -27 45 -49 70 -67 111 -66 178 5 41 44 97 77 152 90 22 6 27 4 27 -12 0 -10 -9 -25 -21 -33 -11 -8 -27 -28 -35 -43 -14 -25 -14 -31 0 -52 9 -13 24 -26 35 -30 25 -7 92 35 111 70 7 14 16 25 20 25 3 0 22 14 40 30 18 17 42 30 52 30 15 0 18 -9 18 -52 1 -80 14 -92 99 -86 41 3 85 13 108 25 21 11 61 31 88 46 74 38 167 47 300 30 89 -12 123 -12 175 -2 36 6 70 15 75 19 6 4 21 11 34 15 77 24 221 147 221 190 0 26 24 36 33 13 3 -8 9 -1 16 15 6 15 18 27 26 27 15 0 15 -2 1 -15 -8 -9 -18 -32 -22 -52 -9 -48 8 -60 91 -62 35 -1 75 -6 87 -11 77 -32 191 -50 327 -50 142 0 171 -6 220 -42 13 -10 34 -18 48 -18 29 0 127 49 192 95 27 19 52 35 56 35 4 0 23 13 41 30 46 40 79 47 120 25 23 -12 37 -15 46 -8 17 14 64 22 178 33 59 5 112 16 140 29 52 24 60 25 60 10z m-8290 -15 c0 -2 -11 -4 -25 -4 -14 0 -25 4 -25 9 0 4 11 6 25 3 14 -2 25 -6 25 -8z m1130 6 c0 -5 -4 -10 -9 -10 -6 0 -13 5 -16 10 -3 6 1 10 9 10 9 0 16 -4 16 -10z m65 0 c3 -6 -5 -14 -19 -20 -14 -5 -26 -14 -26 -20 0 -5 -5 -10 -12 -10 -6 0 -4 7 5 18 10 10 17 24 17 30 0 15 26 16 35 2z m140 0 c3 -5 -1 -10 -9 -10 -8 0 -18 5 -21 10 -3 6 1 10 9 10 8 0 18 -4 21 -10z m1090 -1 c9 -14 -4 -27 -13 -13 -4 6 -14 14 -22 17 -10 4 -8 6 7 6 12 1 25 -4 28 -10z m165 -5 c0 -8 -5 -12 -10 -9 -6 4 -8 11 -5 16 9 14 15 11 15 -7z m90 6 c12 -8 11 -10 -7 -10 -12 0 -25 -4 -28 -10 -3 -5 -15 -10 -25 -10 -10 0 -23 -7 -28 -16 -8 -14 -12 -14 -30 -3 -12 8 -22 17 -22 21 0 12 24 10 36 -2 8 -8 15 -6 24 5 7 8 21 15 32 15 10 0 16 5 13 10 -8 13 15 13 35 0z m185 0 c-28 -12 -37 -12 -30 0 3 6 16 10 28 9 21 0 21 -1 2 -9z m1332 -10 c3 -10 2 -11 -4 -4 -4 6 -15 14 -23 17 -11 5 -9 6 4 4 11 -1 21 -9 23 -17z m12073 11 c0 -6 -17 -7 -37 -4 -52 8 -54 13 -5 13 23 0 42 -4 42 -9z m-14000 -53 c0 -5 -9 -8 -20 -8 -11 0 -20 -4 -20 -10 0 -5 14 -10 31 -10 27 0 29 -2 15 -15 -18 -18 -27 -19 -59 -2 l-26 13 25 19 c14 11 24 28 24 44 l1 26 14 -25 c8 -14 14 -28 15 -32z m100 42 c0 -5 7 -10 15 -10 8 0 15 -4 15 -10 0 -15 -19 -12 -36 4 -16 17 -18 26 -4 26 6 0 10 -4 10 -10z m14205 -8 c34 -14 57 -44 49 -65 -3 -8 -18 -24 -35 -36 -24 -18 -36 -20 -56 -14 -15 5 -29 15 -31 21 -2 8 2 10 13 6 12 -5 16 -2 13 12 -2 14 4 20 26 22 16 2 32 -2 37 -10 6 -9 9 -7 9 9 0 31 -57 50 -76 25 -7 -9 -14 -12 -14 -7 -1 6 -5 1 -10 -10 -8 -19 -9 -19 -9 2 -1 34 10 58 20 42 6 -10 9 -9 15 4 3 10 9 16 13 14 3 -2 20 -9 36 -15z m-15485 -11 c0 -6 -9 -9 -19 -8 -11 0 -17 5 -15 9 7 11 34 10 34 -1z m1107 -23 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m763 28 c0 -11 -19 -15 -25 -6 -3 5 1 10 9 10 9 0 16 -2 16 -4z m588 -23 c-4 -32 -38 -46 -38 -16 0 20 18 43 33 43 4 0 7 -12 5 -27z m546 2 c-10 -8 -26 -14 -34 -14 -11 0 -10 3 4 14 11 8 27 15 35 15 11 0 10 -4 -5 -15z m2275 1 c15 -18 0 -29 -26 -19 -10 3 -15 3 -11 -2 11 -12 -36 -44 -60 -42 -25 1 -26 5 -12 41 7 19 18 26 47 29 21 2 41 4 44 5 4 1 12 -4 18 -12z m4886 5 c7 -12 -48 -23 -95 -20 -56 4 -96 0 -83 -9 7 -4 -9 -8 -35 -9 l-47 -1 64 18 c35 11 66 22 69 25 9 9 121 5 127 -4z m6132 -38 c-3 -10 -5 -2 -5 17 0 19 2 27 5 18 2 -10 2 -26 0 -35z m-16711 21 c-7 -7 -20 -8 -36 -3 -14 4 -32 9 -40 12 -8 2 8 4 36 3 36 -1 47 -4 40 -12z m139 6 c-3 -5 -13 -10 -21 -10 -8 0 -14 5 -14 10 0 6 9 10 21 10 11 0 17 -4 14 -10z m225 0 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m1068 -5 c13 -13 -7 -13 -43 1 l-40 15 39 -5 c21 -3 41 -8 44 -11z m2035 -5 c-3 -12 -8 -19 -11 -16 -5 6 5 36 12 36 2 0 2 -9 -1 -20z m417 10 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m6790 0 l-45 -7 45 -3 c35 -2 38 -4 16 -7 -15 -3 -40 -2 -54 2 -37 9 -8 25 43 23 l40 -1 -45 -7z m-8809 -10 c26 -14 24 -25 -6 -38 -17 -8 -25 -8 -25 -1 0 6 -4 8 -9 5 -12 -8 -41 4 -41 16 0 6 6 8 13 5 48 -18 57 -18 57 -2 0 11 -5 15 -15 11 -8 -3 -15 -1 -15 4 0 13 16 13 41 0z m326 4 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m4420 0 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m4120 -16 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-10297 3 c0 -5 -7 -11 -15 -15 -15 -5 -20 5 -8 17 9 10 23 9 23 -2z m1255 -12 c-10 -15 -25 -10 -19 6 4 8 10 12 15 9 5 -3 7 -10 4 -15z m-1382 4 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m87 -3 c0 -5 -7 -10 -16 -10 -8 0 -12 5 -9 10 3 6 10 10 16 10 5 0 9 -4 9 -10z m313 3 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z m9877 -3 c-14 -4 -38 -8 -55 -8 l-30 0 30 8 c17 4 41 8 55 8 l25 0 -25 -8z m-10350 -4 c0 -9 -30 -14 -35 -6 -4 6 3 10 14 10 12 0 21 -2 21 -4z m1110 -1 c0 -16 -30 -75 -39 -75 -19 0 -23 21 -7 39 9 10 16 23 16 29 0 7 7 12 15 12 8 0 15 -2 15 -5z m1860 -5 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m5911 -33 c-8 -8 -11 -8 -11 0 0 6 -3 20 -7 30 -7 17 -6 17 11 0 14 -14 16 -21 7 -30z m1187 24 c-7 -12 -23 -19 -42 -19 -17 0 -65 -2 -106 -5 -41 -2 -59 -3 -40 -1 57 6 154 26 170 35 25 14 31 10 18 -10z m5368 -23 c1 -24 -1 -33 -3 -20 -4 18 -9 22 -26 16 -21 -6 -21 -5 3 19 14 14 25 26 25 26 1 1 1 -18 1 -41z m1264 27 c0 -8 6 -15 14 -15 19 0 40 -60 26 -74 -13 -13 -13 -36 0 -36 6 0 10 7 10 16 0 20 16 10 23 -15 4 -16 0 -19 -22 -18 -19 2 -27 9 -29 27 -2 14 -9 31 -14 38 -7 8 -7 12 0 12 6 0 13 -6 15 -12 3 -7 6 -3 6 9 1 20 -1 22 -24 11 -24 -11 -34 -28 -17 -28 4 0 13 -13 19 -30 9 -24 9 -30 -2 -30 -7 0 -16 11 -19 25 -4 14 -15 34 -25 44 -19 19 -19 19 5 25 33 9 30 26 -3 27 -27 0 -27 1 -5 9 12 5 22 14 22 20 0 5 5 10 10 10 6 0 10 -7 10 -15z m-16890 -4 c0 -5 -12 -13 -27 -19 -52 -20 -73 -24 -73 -13 0 6 10 11 23 11 13 0 32 7 43 15 22 17 34 19 34 6z m3405 -1 c-3 -5 -10 -10 -16 -10 -5 0 -9 5 -9 10 0 6 7 10 16 10 8 0 12 -4 9 -10z m7025 1 c0 -5 15 -12 33 -16 l32 -7 -45 -9 c-25 -5 -52 -7 -60 -5 -8 2 -3 4 13 5 34 1 36 21 2 21 -14 0 -25 5 -25 10 0 6 11 10 25 10 14 0 25 -4 25 -9z m198 -2 c-43 -4 -87 -13 -98 -19 -11 -6 -20 -7 -20 -3 0 18 49 31 120 30 l75 0 -77 -8z m-10454 -37 c-18 -4 -46 17 -38 29 3 5 16 1 29 -8 17 -13 19 -19 9 -21z m151 28 c3 -5 -1 -10 -9 -10 -9 0 -16 5 -16 10 0 6 4 10 9 10 6 0 13 -4 16 -10z m295 6 c0 -11 -19 -15 -25 -6 -3 5 1 10 9 10 9 0 16 -2 16 -4z m-1370 -24 c0 -8 -6 -12 -15 -9 -8 4 -17 2 -20 -3 -3 -4 1 -11 7 -13 7 -3 -3 -6 -22 -7 -31 -2 -32 -3 -10 -9 l24 -7 -31 -22 c-17 -12 -33 -22 -36 -22 -7 0 -97 -92 -97 -99 0 -7 -60 -35 -115 -53 -22 -7 -43 -16 -46 -21 -3 -4 -24 -9 -47 -11 -36 -3 -42 -1 -42 16 0 14 5 18 15 14 9 -3 15 0 15 9 0 8 12 22 26 32 14 10 51 39 82 64 31 25 83 56 115 68 31 13 57 26 57 30 0 8 58 44 85 52 32 10 55 6 55 -9z m855 8 c3 -5 -1 -10 -9 -10 -9 0 -16 5 -16 10 0 6 4 10 9 10 6 0 13 -4 16 -10z m428 3 c-13 -2 -23 -8 -23 -13 0 -4 -16 -11 -36 -15 -20 -3 -43 -13 -50 -20 -16 -16 -19 -45 -4 -45 6 0 10 -9 10 -20 0 -13 5 -18 15 -14 11 5 13 2 9 -10 -7 -18 -7 -18 -28 -10 -9 3 -16 16 -16 29 0 17 -8 24 -32 30 l-33 7 28 12 c15 7 34 22 43 34 9 13 26 22 42 22 15 0 34 5 42 10 8 5 24 9 35 8 17 -1 17 -1 -2 -5z m932 -2 l20 -2 -20 -9 c-33 -14 -155 -12 -155 3 0 11 81 15 155 8z m14275 -7 c0 -2 -7 -4 -15 -4 -8 0 -15 4 -15 10 0 5 7 7 15 4 8 -4 15 -8 15 -10z m-12435 -4 c-3 -5 -13 -10 -21 -10 -8 0 -12 5 -9 10 3 6 13 10 21 10 8 0 12 -4 9 -10z m7762 4 l91 -7 -5 -38 c-3 -23 -1 -45 6 -53 10 -12 5 -15 -26 -20 -21 -3 -59 -4 -84 -3 -25 2 -68 0 -95 -4 l-49 -8 53 3 c37 2 50 0 43 -7 -7 -7 -81 -12 -193 -13 -191 -2 -194 1 -18 15 l105 8 -143 2 c-93 1 -141 -2 -137 -9 11 -18 -25 -10 -45 10 -11 11 -29 20 -40 20 -32 0 -23 19 13 24 17 3 49 8 69 11 21 3 44 13 53 21 10 10 38 16 82 18 38 2 79 6 93 10 14 4 18 3 8 -1 -10 -5 24 -9 77 -10 52 -1 97 3 100 8 6 9 -20 13 -70 10 -17 -1 -42 2 -55 8 -22 8 -18 10 26 10 28 1 92 -2 141 -5z m6128 -4 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-14248 -35 c62 -9 43 -21 -45 -28 -63 -5 -73 -4 -68 9 3 9 1 12 -4 9 -6 -3 -10 -1 -10 4 0 6 14 11 30 11 20 0 33 6 38 18 6 15 7 15 10 1 2 -11 18 -19 49 -24z m7293 25 c0 -5 -12 -10 -26 -10 -14 0 -23 -4 -20 -8 5 -9 -60 -4 -84 6 -8 3 7 9 35 12 80 11 95 11 95 0z m5355 -10 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-15481 -12 c-15 -7 -28 -7 -40 1 -16 9 -12 10 21 10 35 0 37 -2 19 -11z m415 -5 c-7 -10 -15 -20 -16 -22 -2 -2 -3 5 -3 17 0 14 6 22 16 22 14 0 15 -3 3 -17z m1414 5 c26 -12 35 -27 20 -29 -104 -18 -133 -16 -133 10 0 15 8 21 33 24 17 2 37 5 43 5 5 1 22 -4 37 -10z m7099 -10 c-7 -7 -12 -8 -12 -2 0 14 12 26 19 19 2 -3 -1 -11 -7 -17z m6678 12 c0 -5 -8 -10 -17 -10 -15 0 -16 2 -3 10 19 12 20 12 20 0z m-15585 -26 c-21 -14 -47 -23 -59 -21 -21 3 -21 4 -1 11 11 4 31 14 45 21 43 25 55 16 15 -11z m2445 15 c0 6 8 11 18 10 10 0 12 -3 5 -6 -7 -2 -13 -11 -13 -18 0 -7 -6 -15 -12 -18 -9 -3 -10 -8 -2 -16 8 -8 14 -5 24 14 12 23 40 35 40 17 0 -10 -56 -52 -70 -52 -5 0 -10 7 -10 15 0 8 -4 15 -10 15 -5 0 -10 -7 -10 -15 0 -8 -4 -15 -10 -15 -5 0 -10 5 -10 11 0 5 -4 7 -10 4 -5 -3 -10 -2 -10 3 0 5 9 12 21 15 11 3 23 15 26 26 4 17 8 19 19 10 10 -8 14 -8 14 0z m8810 -18 c0 -16 6 -33 13 -38 7 -5 -12 -10 -47 -13 -79 -7 -126 -1 -126 16 0 8 -10 14 -25 14 -18 0 -25 5 -25 19 0 26 9 28 118 30 l92 2 0 -30z m4647 -25 c-13 -14 -16 -14 -27 -1 -7 8 -23 15 -36 15 -12 0 -25 4 -28 8 -3 5 0 9 7 9 7 0 22 3 35 7 18 6 22 4 22 -13 0 -32 20 -25 21 7 0 26 1 26 11 5 8 -17 7 -25 -5 -37z m-15977 34 c0 -5 -7 -10 -15 -10 -18 0 -20 -16 -2 -23 6 -3 -3 -6 -22 -6 l-34 -1 24 24 c25 25 49 33 49 16z m15610 0 c0 -5 -9 -10 -20 -10 -11 0 -20 5 -20 10 0 6 9 10 20 10 11 0 20 -4 20 -10z m-14480 -44 l-22 -21 18 35 c10 21 19 30 22 21 2 -7 -6 -23 -18 -35z m14308 27 c16 -30 3 -43 -41 -43 -39 0 -77 14 -67 23 14 13 67 36 82 37 10 0 21 -8 26 -17z m1832 -13 c0 -16 -4 -30 -8 -30 -5 0 -7 14 -4 30 2 17 6 30 8 30 2 0 4 -13 4 -30z m-15726 -15 c-20 -15 -44 -20 -44 -7 1 24 38 46 54 31 6 -6 2 -15 -10 -24z m11037 19 c12 -14 11 -16 -5 -13 -11 2 -21 10 -24 17 -5 17 13 15 29 -4z m-13098 -1 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m1893 -28 c-20 -19 -43 -35 -53 -34 -14 0 -13 2 4 9 14 6 21 15 17 24 -3 9 5 17 23 24 45 17 46 14 9 -23z m7370 6 c10 8 14 8 14 0 0 -6 -4 -11 -9 -11 -5 0 -19 -16 -31 -36 -32 -51 -45 -28 -18 32 19 41 23 45 26 26 3 -19 6 -21 18 -11z m3734 25 c0 -2 -9 -6 -20 -9 -11 -3 -18 -1 -14 4 5 9 34 13 34 5z m395 -12 c39 -21 85 -26 78 -7 -7 18 5 16 34 -7 21 -16 35 -18 91 -14 65 5 66 5 49 -13 -26 -27 -306 -26 -427 1 -47 10 -89 23 -94 27 -33 30 216 41 269 13z m2940 0 c-22 -9 -53 -18 -70 -20 -27 -3 -27 -3 5 7 19 6 39 15 45 20 5 5 20 9 35 9 21 -1 19 -3 -15 -16z m257 -6 c-7 -7 -12 -8 -12 -2 0 14 12 26 19 19 2 -3 -1 -11 -7 -17z m-16852 8 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m591 -19 c-10 -9 -11 -8 -5 6 3 10 9 15 12 12 3 -3 0 -11 -7 -18z m469 4 c-18 -34 -13 -71 10 -71 24 0 27 -15 4 -24 -25 -10 -34 -7 -28 8 4 11 -5 16 -38 18 -43 4 -43 4 -15 16 15 6 31 23 37 36 7 20 18 30 38 35 1 1 -2 -8 -8 -18z m15610 9 c0 -5 -7 -10 -16 -10 -8 0 -12 5 -9 10 3 6 10 10 16 10 5 0 9 -4 9 -10z m-16465 -18 c-3 -3 -11 0 -18 7 -9 10 -8 11 6 5 10 -3 15 -9 12 -12z m16418 1 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m87 -3 c-13 -9 -13 -10 0 -10 11 -1 10 -4 -4 -15 -27 -20 -42 -19 -25 2 12 15 12 16 -3 10 -20 -7 -35 9 -16 16 7 3 24 6 38 6 20 1 22 -1 10 -9z m-16150 -15 c0 -8 -4 -15 -10 -15 -5 0 -10 7 -10 15 0 8 5 15 10 15 6 0 10 -7 10 -15z m2452 4 c17 -9 18 -13 7 -20 -13 -9 -83 -32 -104 -35 -5 0 -18 -4 -28 -9 -10 -4 -28 -3 -40 3 -12 5 -29 12 -38 15 -9 3 -19 17 -21 31 l-5 26 104 0 c57 0 114 -5 125 -11z m6828 -26 c-11 -17 -11 -17 -6 0 3 10 6 24 7 30 0 9 2 9 5 0 3 -7 0 -20 -6 -30z m6650 33 c0 -11 -19 -15 -25 -6 -3 5 1 10 9 10 9 0 16 -2 16 -4z m267 -2 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m972 -62 c6 -12 14 -47 17 -77 7 -58 1 -65 -40 -49 -24 9 -19 24 8 24 20 0 23 4 18 22 -5 21 -6 21 -13 2 -4 -10 -8 -14 -8 -9 -1 6 -4 21 -8 34 -4 17 -3 22 5 17 8 -5 12 2 12 18 0 30 -7 32 -34 11 -11 -8 -25 -15 -30 -15 -6 0 -5 4 2 9 10 6 10 10 -3 21 -18 15 -19 32 -3 48 13 13 60 -20 77 -56z m-17515 34 c-10 -8 -21 -12 -23 -10 -3 2 4 11 15 18 10 8 21 12 23 10 3 -2 -4 -11 -15 -18z m10798 4 c24 -14 51 -20 98 -20 75 0 99 -10 76 -29 -10 -8 -31 -11 -58 -7 -24 3 -35 3 -25 0 40 -12 4 -33 -83 -49 -26 -5 -31 -3 -20 4 10 7 11 11 3 11 -7 0 -21 -8 -31 -18 -20 -20 -93 -42 -139 -42 -38 0 -133 23 -133 32 0 5 11 8 25 8 37 0 31 18 -7 23 l-33 3 33 8 c17 5 32 12 32 16 0 5 13 11 30 15 16 4 32 11 35 16 4 5 18 9 33 10 20 0 109 26 129 38 2 0 17 -8 35 -19z m1978 10 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m260 0 c0 -6 -25 -9 -57 -8 l-58 1 50 7 c28 4 53 8 58 8 4 1 7 -2 7 -8z m4374 -6 c9 -24 7 -28 -9 -14 -17 14 -20 30 -6 30 5 0 12 -7 15 -16z m-17144 -9 c0 -8 -7 -15 -16 -15 -14 0 -14 3 -4 15 7 8 14 15 16 15 2 0 4 -7 4 -15z m1565 5 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m14445 -22 c0 -5 -6 -8 -14 -8 -16 0 -38 24 -30 33 7 7 44 -14 44 -25z m-14690 12 c8 -5 11 -12 8 -16 -4 -3 -14 1 -23 10 -18 17 -9 21 15 6z m-40 -7 c0 -5 -4 -15 -10 -23 -11 -18 -25 -7 -17 15 6 15 27 21 27 8z m720 -3 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m1310 -33 c-8 -9 -10 -8 -5 6 6 14 1 17 -31 18 l-39 2 35 6 c39 7 62 -11 40 -32z m-2960 -7 c0 -34 -3 -40 -21 -40 -27 0 -86 -36 -116 -70 -13 -14 -27 -29 -34 -35 -6 -5 -20 -19 -32 -31 -12 -11 -30 -23 -39 -27 -10 -3 -18 -13 -18 -20 0 -48 -196 -142 -324 -154 l-49 -5 18 29 c16 26 154 164 209 209 12 10 25 27 29 37 4 9 13 17 22 17 8 0 15 4 15 9 0 5 10 13 23 16 34 10 151 59 157 65 7 9 110 37 138 39 19 1 22 -4 22 -39z m107 18 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m1501 -3 c-3 -3 -9 2 -12 12 -6 14 -5 15 5 6 7 -7 10 -15 7 -18z m14192 21 c0 -2 -9 -6 -20 -9 -11 -3 -20 -1 -20 4 0 5 9 9 20 9 11 0 20 -2 20 -4z m-16596 -14 c2 -4 -7 -8 -22 -9 -24 -2 -24 -1 -7 7 11 5 21 9 22 9 1 1 4 -3 7 -7z m401 -14 c7 -7 1 -8 -20 -3 -16 3 -40 7 -52 8 -11 1 -19 6 -16 10 7 11 75 -1 88 -15z m2075 12 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m7320 -6 c0 -8 -5 -12 -10 -9 -6 4 -8 11 -5 16 9 14 15 11 15 -7z m2803 9 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z m-10813 -19 c0 -2 -9 -4 -20 -4 -11 0 -20 4 -20 9 0 5 9 7 20 4 11 -3 20 -7 20 -9z m7954 1 c-4 -8 -8 -15 -10 -15 -2 0 -4 7 -4 15 0 8 4 15 10 15 5 0 7 -7 4 -15z m-9687 -1 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m53 -9 c-14 -7 -27 -11 -30 -9 -6 7 22 24 40 23 9 0 5 -6 -10 -14z m877 9 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m533 -8 c0 -9 8 -13 23 -9 21 4 21 4 4 -10 -16 -13 -35 -14 -75 -1 -11 3 -11 6 0 18 17 19 48 20 48 2z m1804 -16 c-16 -14 -54 -22 -54 -11 0 6 6 11 14 11 7 0 20 7 27 16 9 11 14 13 17 4 2 -6 0 -15 -4 -20z m33 -7 c-3 -10 -5 -4 -5 12 0 17 2 24 5 18 2 -7 2 -21 0 -30z m8726 30 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m2727 -82 c9 -26 23 -85 30 -130 15 -92 7 -146 -32 -209 l-21 -34 -13 23 c-10 18 -13 80 -14 234 0 196 1 208 16 186 9 -12 24 -44 34 -70z m2856 49 c2 -45 -10 -53 -20 -14 -5 20 6 54 18 54 1 0 2 -18 2 -40z m184 8 c-1 -26 -3 -30 -10 -16 -6 9 -7 23 -4 32 9 25 14 19 14 -16z m40 16 c0 -8 -4 -12 -10 -9 -5 3 -10 10 -10 16 0 5 5 9 10 9 6 0 10 -7 10 -16z m-17443 -11 c-9 -9 -19 -14 -23 -11 -10 10 6 28 24 28 15 0 15 -1 -1 -17z m1468 7 c3 -5 2 -10 -4 -10 -5 0 -13 5 -16 10 -3 6 -2 10 4 10 5 0 13 -4 16 -10z m485 0 c0 -5 -12 -10 -26 -10 -14 0 -23 4 -19 10 3 6 15 10 26 10 10 0 19 -4 19 -10z m1050 -5 c11 -13 8 -15 -19 -16 -17 -1 -36 -2 -43 -3 -19 -2 -20 22 -1 27 34 9 51 7 63 -8z m-3550 -4 c0 -11 -25 -21 -53 -21 -19 1 -18 3 8 15 37 16 45 18 45 6z m390 -1 c0 -5 -10 -10 -22 -10 -19 0 -20 2 -8 10 19 13 30 13 30 0z m587 -20 c3 -16 11 -30 19 -30 15 0 29 -19 20 -27 -3 -3 -12 0 -21 7 -12 10 -15 10 -15 -4 0 -20 -50 -42 -60 -26 -4 7 -18 8 -33 4 -32 -7 -38 11 -7 21 11 3 20 12 20 20 0 17 22 25 49 18 21 -5 29 11 11 22 -13 8 -13 25 0 25 6 0 13 -13 17 -30z m8713 21 c0 -6 -4 -13 -10 -16 -5 -3 -10 1 -10 9 0 9 5 16 10 16 6 0 10 -4 10 -9z m2090 -1 c0 -5 -8 -10 -17 -10 -15 0 -16 2 -3 10 19 12 20 12 20 0z m1614 4 l48 -7 -37 -13 c-49 -16 -180 -17 -193 -1 -8 9 10 12 81 11 87 -2 89 -1 27 5 -59 7 -61 8 -19 9 25 1 67 -1 93 -4z m-3504 -8 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m3300 0 c0 -11 -19 -15 -25 -6 -3 5 1 10 9 10 9 0 16 -2 16 -4z m365 -12 c36 -4 65 -10 65 -14 0 -5 -37 -12 -82 -16 l-83 -8 50 -7 c28 -4 83 -8 123 -8 61 -1 72 1 72 16 0 14 3 14 12 5 25 -25 -14 -33 -134 -29 -65 1 -118 -1 -118 -5 0 -4 62 -9 138 -10 119 -2 125 -3 42 -6 -116 -4 -262 7 -254 19 3 5 16 9 30 9 15 0 23 4 19 11 -5 6 -26 8 -60 4 -34 -5 -55 -3 -59 4 -5 8 28 11 111 11 80 0 113 3 103 10 -8 5 -27 10 -42 10 -16 0 -28 5 -28 11 0 6 7 9 15 5 8 -3 44 -8 80 -12z m-13425 -9 c-14 -7 -27 -11 -30 -9 -6 7 22 24 40 23 9 0 5 -6 -10 -14z m355 0 c-31 -13 -50 -11 -40 6 4 5 21 9 38 8 l32 -1 -30 -13z m582 -7 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m70 0 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m11857 13 c11 -4 20 -15 22 -24 2 -15 -8 -17 -76 -17 -60 0 -79 3 -84 15 -5 15 8 21 69 28 47 6 49 6 69 -2z m-13066 -18 c16 -16 16 -16 -1 -10 -10 4 -23 7 -28 7 -6 0 -7 5 -4 10 9 14 14 13 33 -7z m92 7 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m320 0 c0 -5 8 -10 18 -10 9 0 24 -5 32 -11 12 -8 11 -9 -6 -4 -12 3 -43 1 -69 -5 -26 -6 -50 -9 -52 -6 -3 2 15 9 39 14 23 5 35 10 26 11 -22 1 -24 21 -3 21 8 0 15 -4 15 -10z m1660 -5 c-7 -9 -15 -13 -17 -11 -7 7 7 26 19 26 6 0 6 -6 -2 -15z m8737 -7 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-7627 2 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m10563 -5 c-1 -5 -15 -11 -30 -12 -15 -1 -22 0 -15 3 6 3 9 10 6 16 -4 6 4 8 17 6 13 -1 23 -7 22 -13z m-13419 -10 c-7 -16 -24 -21 -24 -6 0 8 7 13 27 20 1 1 0 -6 -3 -14z m1906 5 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m7707 -22 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m3433 25 c0 -9 -99 -8 -107 1 -4 3 19 6 50 6 32 0 57 -3 57 -7z m500 -3 c0 -5 13 -10 29 -10 17 0 33 -4 36 -10 4 -6 -5 -10 -20 -10 -15 0 -24 -4 -20 -10 8 -13 -55 -13 -75 0 -12 8 -12 12 5 29 22 21 45 27 45 11z m4180 -15 c0 -7 6 -15 13 -18 6 -2 9 -8 4 -12 -4 -5 -14 0 -22 11 -16 22 -20 48 -5 39 6 -3 10 -12 10 -20z m47 3 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-18167 2 c0 -12 -53 -61 -59 -54 -3 3 8 18 24 34 34 33 35 33 35 20z m191 -1 c-14 -5 -28 -6 -32 -2 -4 4 6 9 24 10 30 1 31 1 8 -8z m1354 1 c3 -6 26 -15 51 -21 25 -7 43 -14 42 -18 -21 -40 -47 -71 -64 -75 -12 -3 -42 3 -66 14 -23 11 -51 20 -60 20 -27 0 -11 25 32 49 22 12 40 26 40 32 0 12 17 12 25 -1z m1968 3 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z m-3384 -19 c2 -2 2 -7 -2 -10 -8 -9 -47 6 -47 17 0 9 37 3 49 -7z m367 1 c-11 -8 -29 -14 -40 -14 -20 1 -21 1 -1 6 11 3 24 9 30 14 5 5 14 9 20 9 5 0 1 -7 -9 -15z m11001 9 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m343 2 c0 -2 -9 -6 -20 -9 -11 -3 -18 -1 -14 4 5 9 34 13 34 5z m-8850 -16 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m210 0 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m37 4 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m6679 -34 c0 -22 -4 -36 -9 -31 -8 8 -1 71 8 71 1 0 2 -18 1 -40z m1667 33 c-13 -2 -33 -2 -45 0 -13 2 -3 4 22 4 25 0 35 -2 23 -4z m577 -3 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m157 4 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m6033 -4 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m-17930 -21 c0 -14 -17 -10 -23 5 -4 10 -1 13 9 9 7 -3 14 -9 14 -14z m17779 -13 c21 -33 29 -106 12 -106 -5 0 -9 6 -8 13 1 35 -4 74 -12 86 -14 21 -38 -7 -34 -38 3 -25 3 -25 -6 -3 -11 23 -5 52 10 52 5 0 9 7 9 15 0 22 6 18 29 -19z m-17825 8 c9 -24 8 -26 -14 -19 -11 4 -20 2 -20 -4 0 -6 -4 -11 -10 -11 -16 0 -12 22 8 36 22 18 29 17 36 -2z m936 0 c0 -8 -5 -12 -10 -9 -6 4 -8 11 -5 16 9 14 15 11 15 -7z m10233 9 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m6787 -14 c0 -6 -4 -7 -10 -4 -5 3 -10 11 -10 16 0 6 5 7 10 4 6 -3 10 -11 10 -16z m37 1 c-4 -17 -2 -20 14 -15 11 4 19 2 19 -4 0 -14 -47 -14 -55 -1 -3 6 -1 10 4 10 6 0 11 7 11 15 0 8 3 15 6 15 4 0 4 -9 1 -20z m-5864 -1 c38 -9 52 -9 55 0 4 13 22 15 22 2 0 -20 -79 -35 -185 -36 -60 -1 -120 -5 -132 -9 -14 -5 -23 -3 -23 3 0 6 12 11 28 12 15 0 21 3 14 6 -23 9 -62 -6 -56 -22 5 -12 -6 -15 -57 -17 -155 -5 -198 -4 -193 4 3 4 15 9 27 9 14 1 9 4 -13 9 -22 5 -27 8 -13 9 12 0 23 6 25 13 4 12 63 16 351 26 56 2 120 -2 150 -9z m3665 -18 c2 -15 0 -21 -7 -16 -6 3 -9 11 -6 16 4 5 -5 9 -19 9 -14 0 -26 5 -26 11 0 6 12 9 28 7 20 -2 28 -9 30 -27z m-13608 4 c0 -2 -10 -15 -22 -28 -42 -43 -157 -58 -208 -27 -11 7 -8 11 13 19 16 6 40 11 54 11 13 0 35 8 47 18 17 12 36 16 69 14 26 -2 47 -6 47 -7z m-2625 -5 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m60 0 c8 -13 -5 -13 -25 0 -13 8 -13 10 2 10 9 0 20 -4 23 -10z m42 -6 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m966 -1 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m67 3 c0 -2 -7 -6 -15 -10 -8 -3 -15 -1 -15 4 0 6 7 10 15 10 8 0 15 -2 15 -4z m8895 -16 c-10 -11 -23 -20 -28 -20 -6 0 -2 9 8 20 10 11 23 20 28 20 6 0 2 -9 -8 -20z m1943 3 c-10 -2 -28 -2 -40 0 -13 2 -5 4 17 4 22 1 32 -1 23 -4z m-10633 -14 c4 -6 5 -13 2 -16 -8 -7 -47 7 -47 18 0 13 37 11 45 -2z m10550 1 c-11 -5 -31 -8 -45 -8 -23 0 -22 1 5 8 42 11 65 11 40 0z m4305 -1 c0 -5 -16 -9 -36 -9 -19 0 -33 3 -31 8 7 10 67 11 67 1z m1755 -86 c11 -24 23 -43 28 -43 4 0 7 -8 6 -17 0 -11 -3 -13 -6 -5 -5 14 -33 17 -33 3 0 -6 5 -13 10 -16 6 -3 10 -11 10 -18 0 -6 -10 -1 -22 11 -17 17 -20 24 -10 34 17 17 15 33 -3 18 -12 -10 -18 -8 -35 11 -20 25 -27 55 -10 44 6 -3 10 -12 10 -20 0 -8 5 -17 10 -20 20 -13 9 25 -15 51 -24 26 -24 28 -9 46 17 17 18 17 33 -9 9 -16 25 -47 36 -70z m-17995 77 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m1100 -5 c-43 -17 -73 -19 -65 -4 4 6 13 8 21 5 8 -3 14 -1 14 4 0 6 15 10 33 9 l32 -1 -35 -13z m10895 5 c4 -6 -6 -10 -22 -9 -25 0 -26 1 -8 9 11 5 21 9 22 9 1 1 5 -3 8 -9z m-11953 -12 c-9 -9 -15 -9 -24 0 -9 9 -7 12 12 12 19 0 21 -3 12 -12z m16649 -31 c-16 -16 -20 -5 -8 23 9 22 11 23 14 6 3 -10 0 -23 -6 -29z m-16686 13 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m14125 -6 c0 -2 -12 -4 -27 -4 -21 0 -24 3 -14 9 13 8 41 5 41 -5z m75 6 c3 -5 -1 -10 -10 -10 -9 0 -13 5 -10 10 3 6 8 10 10 10 2 0 7 -4 10 -10z m3935 1 c0 -5 -7 -12 -16 -15 -14 -5 -15 -4 -4 9 14 17 20 19 20 6z m-17940 -17 c0 -13 -3 -14 -14 -5 -7 6 -22 9 -32 5 -16 -5 -16 -4 -4 5 22 16 50 13 50 -5z m349 12 c-2 -2 -15 -9 -29 -15 -24 -11 -24 -11 -6 3 16 13 49 24 35 12z m13816 -6 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m2235 0 c-8 -5 -22 -9 -30 -9 -10 0 -8 3 5 9 27 12 43 12 25 0z m-2404 -21 c-26 -6 -43 -6 -50 1 -7 7 6 10 40 9 l49 -1 -39 -9z m-14079 -24 c-15 -16 -22 -11 -13 10 3 9 10 13 16 10 6 -4 5 -11 -3 -20z m373 10 c0 -9 -25 -40 -55 -70 -30 -31 -55 -59 -55 -64 0 -5 -15 -19 -32 -30 -18 -11 -44 -30 -58 -43 -23 -21 -40 -30 -122 -68 -14 -7 -32 -10 -40 -8 -7 3 -25 -4 -40 -14 -29 -20 -57 -18 -78 7 -9 11 -7 19 14 38 14 13 26 29 26 35 0 6 9 13 19 17 11 3 21 12 24 19 5 12 58 41 152 81 22 10 56 30 75 45 19 15 58 33 85 40 28 7 57 17 65 21 20 11 20 11 20 -6z m730 -10 c7 -14 17 -25 22 -25 5 0 6 -5 3 -10 -4 -6 -11 -8 -16 -5 -5 3 -7 0 -4 -7 5 -15 -55 -48 -86 -48 -12 0 -32 9 -46 20 -20 15 -22 20 -9 20 9 0 19 7 23 16 6 16 71 62 89 63 6 1 17 -10 24 -24z m15300 10 c-7 -9 -15 -13 -17 -11 -7 7 7 26 19 26 6 0 6 -6 -2 -15z m-16350 -2 c0 -9 -52 -54 -57 -49 -2 2 7 15 19 30 23 25 38 33 38 19z m1110 -8 c-7 -9 -15 -13 -17 -11 -7 7 7 26 19 26 6 0 6 -6 -2 -15z m640 5 c13 -8 12 -11 -5 -24 -21 -16 -32 -19 -54 -17 -7 2 -10 -2 -6 -8 4 -7 -5 -11 -23 -11 -16 0 -50 -3 -76 -6 -30 -5 -46 -3 -46 4 0 7 26 12 63 14 l62 3 -67 5 c-36 3 -64 2 -61 -2 2 -5 0 -8 -6 -8 -27 0 -16 20 22 39 45 23 168 30 197 11z m805 0 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m10060 0 c16 -7 11 -9 -20 -9 -22 -1 -55 -5 -73 -10 -18 -6 -55 -7 -83 -4 -49 6 -64 18 -31 26 30 8 186 6 207 -3z m-12702 -7 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m14135 -10 c-10 -2 -28 -2 -40 0 -13 2 -5 4 17 4 22 1 32 -1 23 -4z m-14131 -29 c10 -10 6 -14 -19 -23 -17 -6 -32 -10 -33 -9 -1 2 -7 13 -14 25 -8 16 -8 22 2 26 17 5 49 -4 64 -19z m12063 22 c0 -2 3 -11 6 -20 5 -13 -2 -16 -37 -15 -34 0 -39 2 -24 9 13 6 15 9 5 9 -13 1 -13 2 0 11 15 10 50 14 50 6z m-280 -32 c0 -2 -7 -4 -15 -4 -8 0 -15 4 -15 10 0 5 7 7 15 4 8 -4 15 -8 15 -10z m-9765 -17 c24 -18 11 -37 -23 -36 l-27 1 30 14 30 15 -30 -6 c-16 -3 -34 -7 -40 -8 -21 -4 -15 18 7 25 34 9 33 9 53 -5z m11158 -1 c117 -3 152 -8 166 -20 10 -9 21 -16 25 -16 4 0 14 -6 22 -14 18 -18 8 -22 -96 -33 l-75 -8 100 -6 100 -5 -110 -1 c-132 -2 -231 9 -302 33 -51 17 -69 34 -38 34 8 0 15 7 15 15 0 11 -7 14 -25 9 -14 -3 -25 -2 -25 3 0 18 13 22 54 18 22 -3 108 -7 189 -9z m3517 -18 c0 -5 -7 -3 -15 6 -8 8 -15 18 -15 22 0 3 7 1 15 -6 8 -7 15 -17 15 -22z m-15841 6 c10 -10 -39 -43 -56 -38 -15 5 -15 4 -3 -4 12 -9 12 -14 -5 -31 -10 -12 -25 -20 -33 -19 -8 2 -17 -3 -20 -11 -3 -9 0 -11 8 -6 9 5 11 4 6 -3 -4 -6 -23 -14 -44 -18 -20 -4 -44 -10 -52 -14 -16 -8 -50 10 -50 26 0 6 12 17 28 26 15 9 36 25 47 35 38 35 119 72 145 67 14 -3 27 -8 29 -10z m13101 5 c0 -8 -64 -19 -120 -19 -66 -1 -109 -40 -57 -54 12 -3 39 -6 60 -6 25 0 36 -4 31 -11 -7 -12 -93 -3 -108 12 -6 5 -21 10 -35 10 -26 2 -26 2 -2 6 l23 5 -24 12 c-14 7 -42 16 -64 20 -72 13 -83 20 -39 26 56 7 335 6 335 -1z m-12560 -6 c0 -5 -22 -8 -49 -8 -27 0 -47 3 -44 8 2 4 24 7 49 7 24 0 44 -3 44 -7z m17120 -14 c0 -6 -4 -7 -10 -4 -5 3 -10 11 -10 16 0 6 5 7 10 4 6 -3 10 -11 10 -16z m-17214 -24 c18 -15 18 -15 0 -8 -13 4 -17 3 -12 -5 4 -7 4 -12 -1 -13 -4 0 -19 -2 -32 -3 -13 -2 -38 0 -55 4 l-31 6 30 17 c38 20 76 21 101 2z m12547 8 c-13 -2 -33 -2 -45 0 -13 2 -3 4 22 4 25 0 35 -2 23 -4z m124 0 c-20 -2 -52 -2 -70 0 -17 2 0 4 38 4 39 0 53 -2 32 -4z m3038 -3 c-28 -7 -27 -8 13 -9 23 0 42 4 42 10 0 5 5 7 11 3 21 -13 -15 -24 -68 -22 -72 4 -66 26 7 26 22 0 22 -1 -5 -8z m1485 -5 c0 -8 -4 -15 -10 -15 -5 0 -10 7 -10 15 0 8 5 15 10 15 6 0 10 -7 10 -15z m55 4 c11 -16 1 -19 -13 -3 -7 8 -8 14 -3 14 5 0 13 -5 16 -11z m-18092 -16 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m13553 -6 c4 -4 -34 -7 -84 -7 -51 0 -92 4 -92 8 0 11 166 9 176 -1z m53 -42 c0 -19 0 -19 -14 -2 -13 18 -14 17 -17 -5 -2 -19 -10 -24 -40 -26 -21 -2 -45 1 -54 6 -11 6 0 8 35 4 49 -4 51 -4 51 21 0 14 3 33 6 41 6 15 8 15 20 -1 7 -10 13 -27 13 -38z m2581 45 c-20 -13 -33 -13 -25 0 3 6 14 10 23 10 15 0 15 -2 2 -10z m-4520 -25 c0 -8 4 -15 9 -15 5 0 16 -11 25 -25 9 -14 12 -25 7 -25 -15 0 -72 61 -65 71 8 14 24 11 24 -6z m-10480 -5 c0 -13 -11 -13 -30 0 -12 8 -11 10 8 10 12 0 22 -4 22 -10z m14910 0 c0 -5 -7 -10 -16 -10 -8 0 -12 5 -9 10 3 6 10 10 16 10 5 0 9 -4 9 -10z m1965 0 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-18751 -15 c-4 -8 -10 -15 -14 -15 -4 0 -10 7 -14 15 -4 10 1 15 14 15 13 0 18 -5 14 -15z m1396 11 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m357 -32 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m17093 -4 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-17040 -6 c0 -10 -26 -31 -48 -38 -12 -4 -22 -12 -22 -17 0 -5 -4 -9 -10 -9 -21 0 -9 18 25 36 19 10 35 22 35 26 0 5 5 8 10 8 6 0 10 -3 10 -6z m-135 -14 c3 -6 -4 -10 -17 -10 -18 0 -20 2 -8 10 19 12 18 12 25 0z m17182 -22 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-17222 -6 c-3 -3 -11 0 -18 7 -9 10 -8 11 6 5 10 -3 15 -9 12 -12z m11650 8 c4 -6 11 -8 16 -5 5 4 9 0 9 -9 0 -20 -86 -20 -94 0 -3 8 -2 12 3 9 5 -3 12 -1 16 5 3 5 15 10 25 10 10 0 22 -5 25 -10z m-12655 -6 c0 -4 -8 -13 -17 -20 -17 -13 -17 -13 0 -14 9 0 17 -4 17 -8 0 -12 -47 -32 -55 -24 -4 4 -12 7 -18 7 -7 0 -11 8 -9 18 2 9 -3 17 -10 18 -7 1 5 7 27 14 46 15 65 18 65 9z m480 -4 c0 -5 8 -10 17 -10 10 0 2 -11 -23 -29 -43 -33 -60 -33 -23 0 22 19 22 20 4 16 -27 -5 -53 20 -27 26 31 8 52 7 52 -3z m592 -7 c4 -15 -3 -18 -41 -20 l-46 -1 38 10 c20 5 37 14 37 19 0 15 7 10 12 -8z m16965 -5 c4 -7 6 -23 4 -35 -1 -13 2 -23 8 -23 6 0 11 -7 11 -15 0 -30 185 -296 268 -385 13 -14 49 -56 80 -95 31 -38 70 -86 87 -106 51 -61 62 -75 114 -151 110 -162 215 -393 261 -576 70 -278 68 -643 -5 -988 -80 -377 -207 -727 -499 -1367 -42 -92 -76 -169 -76 -172 0 -3 -16 -39 -35 -81 -19 -41 -35 -77 -35 -79 0 -3 -11 -28 -24 -57 -61 -133 -116 -258 -116 -262 0 -21 -235 -491 -343 -686 -44 -80 -90 -163 -102 -185 -124 -224 -311 -523 -404 -645 -144 -189 -479 -501 -811 -755 -103 -79 -357 -251 -430 -291 -19 -10 -42 -24 -50 -30 -19 -14 -151 -85 -296 -158 -250 -125 -503 -202 -794 -241 -113 -15 -222 -32 -350 -56 -78 -14 -238 -11 -269 6 -34 17 -41 32 -41 91 0 42 27 113 54 139 40 40 193 83 461 130 390 67 506 106 855 284 421 215 705 413 1010 706 111 107 250 252 300 313 19 24 43 53 54 65 46 54 133 163 167 210 117 160 379 569 379 592 0 4 9 19 19 34 19 27 255 494 304 601 22 50 70 156 128 285 111 251 318 797 459 1215 40 118 80 236 90 261 30 76 109 360 119 429 38 256 18 423 -82 682 -155 400 -367 661 -693 854 -193 113 -357 159 -579 159 -173 0 -241 -11 -410 -67 -127 -42 -152 -53 -360 -154 -121 -59 -177 -88 -390 -204 -110 -60 -287 -176 -365 -240 -102 -83 -253 -243 -306 -322 -27 -40 -52 -75 -55 -78 -3 -3 -24 -32 -45 -65 -204 -307 -336 -487 -369 -505 -41 -22 -48 -4 -53 129 -5 142 12 241 65 373 30 76 151 277 190 316 7 7 13 17 13 20 0 4 10 18 23 32 12 14 45 54 72 90 147 193 368 383 596 514 25 14 66 45 90 69 24 24 62 50 83 57 38 12 365 209 457 275 26 18 62 41 80 51 19 9 37 21 40 26 9 14 79 28 79 16 0 -12 63 -38 94 -38 14 0 42 9 63 19 21 10 93 27 161 37 119 17 124 17 160 -1 28 -14 72 -20 182 -26 80 -4 159 -12 175 -18 24 -9 40 -8 74 4 69 24 137 19 265 -21 64 -20 122 -34 129 -31 9 3 16 28 20 61 3 30 8 60 12 66 8 14 22 13 32 -2z m-17130 -20 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-533 -3 c11 -8 18 -15 15 -16 -2 0 -12 -2 -22 -4 -14 -3 -17 1 -12 13 4 12 3 14 -5 6 -7 -7 -7 -18 -1 -35 9 -21 10 -22 11 -4 1 12 4 15 7 7 4 -10 8 -10 19 -1 12 10 13 9 8 -5 -3 -9 -1 -16 5 -16 6 0 11 -7 11 -15 0 -8 -7 -15 -16 -15 -9 0 -12 5 -8 12 5 8 0 9 -14 6 -13 -4 -22 -1 -22 5 0 8 -4 7 -12 -1 -7 -7 -21 -12 -32 -11 -17 0 -16 2 7 11 15 5 27 16 27 24 0 19 -17 18 -29 -3 -5 -10 -13 -14 -17 -10 -7 7 43 67 55 67 3 0 15 -7 25 -15z m511 -5 c3 -5 -1 -10 -9 -10 -9 0 -16 5 -16 10 0 6 4 10 9 10 6 0 13 -4 16 -10z m10978 -7 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m1357 3 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m-13380 -13 c-1 -10 -50 -46 -50 -37 0 11 32 44 42 44 4 0 8 -3 8 -7z m1128 0 c-10 -2 -26 -2 -35 0 -10 3 -2 5 17 5 19 0 27 -2 18 -5z m-2360 -148 c62 -93 115 -155 133 -155 13 0 39 -67 54 -139 8 -40 16 -129 17 -199 1 -71 3 -99 5 -62 2 36 8 69 14 75 5 5 9 19 9 32 0 26 20 73 31 73 4 0 11 -30 15 -67 3 -37 15 -85 25 -108 14 -30 16 -49 9 -71 -6 -21 -9 -23 -9 -9 -1 17 -3 17 -11 5 -13 -21 -12 -30 3 -30 24 0 37 -49 37 -140 0 -65 3 -89 12 -87 9 1 13 -31 16 -118 5 -173 -12 -204 -84 -149 l-34 26 -10 -27 c-17 -45 -12 -60 39 -103 58 -50 98 -121 117 -211 7 -36 14 -69 14 -73 0 -5 -20 -8 -45 -8 -39 0 -47 -4 -57 -25 -10 -22 -8 -30 9 -53 11 -15 33 -29 49 -32 25 -4 30 -10 32 -40 5 -45 18 -60 53 -60 41 0 49 -24 49 -150 0 -93 -3 -112 -16 -117 -28 -10 -46 25 -39 77 4 32 2 51 -9 65 -9 11 -16 16 -16 10 -1 -5 -3 -30 -6 -55 -2 -25 -4 -53 -5 -63 0 -25 -33 -17 -37 9 -2 11 -16 28 -32 37 -28 17 -29 17 -48 -8 l-20 -25 94 -97 c80 -83 97 -107 96 -143 0 -3 -3 -42 -6 -87 -4 -53 -2 -83 4 -83 5 0 13 -1 16 -2 4 -2 7 29 7 67 -1 39 4 75 9 82 5 7 6 17 2 24 -4 7 -2 10 6 7 39 -13 75 -175 42 -186 -7 -2 -12 -9 -12 -17 0 -7 -6 -18 -14 -24 -11 -10 -16 -8 -21 8 -5 16 -15 21 -39 21 -21 0 -39 7 -47 19 -20 27 -68 36 -76 15 -4 -10 0 -22 9 -28 8 -6 17 -16 19 -23 7 -21 100 -113 114 -113 7 0 16 -10 19 -22 3 -13 20 -30 38 -38 39 -19 57 -72 51 -156 -6 -86 -22 -94 -86 -44 -27 22 -54 40 -58 40 -12 0 -49 -38 -49 -49 0 -18 44 -62 115 -114 88 -66 115 -105 115 -166 0 -76 -8 -94 -39 -86 -14 4 -46 20 -71 37 -35 23 -52 28 -79 24 -18 -3 -36 -7 -38 -10 -12 -12 90 -135 145 -176 49 -36 67 -58 93 -112 18 -37 31 -69 28 -71 -34 -29 -105 -69 -128 -73 -46 -10 -55 -27 -36 -67 9 -19 31 -49 50 -67 28 -27 35 -42 35 -71 0 -43 -11 -54 -55 -51 -73 4 -70 -22 15 -128 29 -36 61 -83 71 -105 19 -41 26 -145 10 -145 -4 0 -32 10 -60 22 -31 12 -56 17 -61 12 -19 -20 4 -66 57 -111 70 -60 93 -106 100 -198 6 -81 3 -86 -62 -95 -36 -4 -40 -8 -43 -36 -3 -27 4 -37 41 -68 24 -20 49 -36 55 -36 7 0 14 -12 18 -27 17 -76 25 -103 34 -108 6 -3 10 -31 10 -61 l0 -54 -39 0 c-76 0 -95 -55 -32 -94 41 -26 89 -83 109 -128 13 -31 19 -33 55 -19 13 5 28 6 33 3 30 -20 67 -89 94 -172 16 -52 39 -112 50 -132 20 -35 20 -88 0 -88 -12 0 -86 53 -136 99 -67 60 -89 69 -114 46 -28 -26 -25 -44 15 -85 35 -36 36 -37 25 -84 -6 -26 -8 -70 -4 -96 8 -59 -2 -120 -20 -120 -6 0 -20 -6 -31 -13 -29 -22 -12 -59 61 -137 44 -46 63 -73 58 -82 -5 -7 -10 -29 -11 -48 -1 -19 -5 -63 -9 -98 -7 -64 -4 -74 42 -178 13 -28 26 -70 30 -92 7 -44 -11 -135 -32 -167 -20 -29 -18 -36 28 -105 41 -62 41 -64 42 -155 1 -72 -3 -97 -15 -111 -34 -39 -31 -54 15 -98 l44 -41 2 -101 c1 -80 -2 -104 -15 -114 -20 -16 -19 -26 3 -48 38 -38 52 -68 52 -109 l0 -43 36 15 c36 15 37 14 59 -11 25 -29 35 -65 35 -126 0 -21 7 -50 16 -63 15 -24 14 -55 -3 -55 -4 0 -28 27 -51 60 -24 33 -47 60 -52 60 -16 0 -50 -53 -50 -79 0 -20 21 -46 93 -112 97 -90 137 -151 137 -209 0 -19 6 -41 14 -49 7 -9 18 -44 23 -78 8 -56 8 -63 -7 -63 -22 0 -40 20 -40 44 0 14 -13 27 -36 39 -43 21 -48 21 -68 1 -31 -31 -18 -55 78 -148 101 -99 141 -157 152 -223 6 -39 5 -42 -20 -49 -18 -4 -33 -1 -45 10 -10 9 -32 16 -49 16 -28 0 -32 -3 -32 -28 0 -39 57 -196 95 -262 8 -14 15 -36 15 -50 0 -14 6 -34 14 -45 7 -11 19 -46 26 -78 7 -31 19 -62 27 -68 7 -6 13 -24 13 -39 0 -15 8 -38 19 -51 10 -13 26 -59 36 -102 9 -42 28 -94 42 -114 14 -21 27 -57 30 -87 3 -28 14 -62 25 -75 12 -16 18 -40 18 -77 0 -40 4 -55 17 -63 22 -12 21 -12 -49 -40 -55 -22 -98 -22 -98 1 0 6 -15 29 -33 52 -19 23 -40 59 -47 81 -7 22 -35 78 -62 125 -78 134 -125 238 -151 335 -13 50 -46 133 -72 185 -111 221 -215 518 -290 829 -25 102 -68 281 -96 396 -28 116 -80 316 -116 445 -105 384 -136 519 -208 910 -23 123 -61 397 -85 610 -22 193 -52 381 -94 585 -36 176 -62 379 -96 750 -17 181 -42 406 -55 500 -62 429 -122 971 -145 1305 -12 166 -47 600 -74 915 -39 441 -48 647 -43 970 5 307 10 368 47 585 13 74 68 299 77 314 8 12 61 -49 121 -139z m1300 123 c2 -13 -3 -18 -17 -18 -12 0 -21 2 -21 4 0 2 -3 12 -6 21 -5 13 -2 16 17 13 13 -1 25 -11 27 -20z m14842 -15 c0 -10 -6 -13 -16 -9 -9 3 -20 6 -25 6 -6 0 -5 9 1 21 9 16 14 18 26 8 8 -6 14 -18 14 -26z m-14890 8 c0 -5 -9 -11 -21 -14 -16 -4 -18 -3 -8 9 13 16 29 19 29 5z m416 -17 c-2 -27 30 -41 51 -22 12 11 23 14 33 8 17 -11 16 -12 -32 -28 -21 -7 -43 -10 -50 -6 -7 5 -9 2 -6 -7 4 -9 -1 -15 -11 -16 -9 0 -32 -3 -51 -7 l-35 -6 33 10 c17 6 32 15 32 20 0 13 -17 13 -25 0 -3 -5 -13 -10 -21 -10 -8 0 -14 5 -14 10 0 6 5 10 12 10 6 0 20 8 30 17 16 15 21 15 28 3 5 -8 12 -11 16 -7 4 3 2 13 -5 21 -9 11 -9 15 1 19 7 3 14 6 14 6 1 1 1 -6 0 -15z m-166 -4 c0 -5 -7 -10 -16 -10 -8 0 -12 5 -9 10 3 6 10 10 16 10 5 0 9 -4 9 -10z m12888 -2 c-3 -8 -25 -13 -59 -14 l-54 -1 53 4 c30 2 50 8 47 14 -4 5 -1 9 5 9 7 0 10 -6 8 -12z m-12953 -25 c-16 -8 -38 -22 -47 -31 -10 -8 -18 -11 -18 -6 0 15 54 53 75 53 16 0 14 -3 -10 -16z m12992 11 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-12927 -23 c0 -5 -10 -11 -23 -15 -13 -3 -29 -16 -36 -28 -10 -20 -18 -23 -56 -20 -32 3 -45 0 -47 -9 0 -8 -2 -18 -2 -24 -1 -5 -13 -22 -28 -38 -22 -24 -27 -25 -38 -12 -10 12 -10 15 3 15 9 0 19 9 22 20 4 11 17 32 30 46 20 22 31 25 65 22 22 -2 41 0 41 4 1 5 2 13 3 20 0 7 12 15 26 19 36 10 40 10 40 0z m500 -12 c0 -5 -23 -9 -51 -9 -35 0 -48 -3 -43 -12 5 -7 3 -8 -5 -3 -7 4 -9 11 -4 15 16 16 103 23 103 9z m-131 -41 c49 -3 58 -13 37 -41 -10 -13 -29 -19 -59 -20 -25 -1 -40 -5 -34 -9 13 -8 11 -10 -25 -26 -16 -6 -41 -9 -57 -6 l-30 6 21 32 c24 37 91 88 98 76 3 -5 25 -10 49 -12z m91 2 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-574 -35 c-22 -17 -46 -20 -46 -6 0 10 22 18 50 20 11 0 10 -4 -4 -14z m704 -49 c0 -2 -9 -6 -20 -9 -11 -3 -18 -1 -14 4 5 9 34 13 34 5z m14074 -72 c17 -44 -3 -96 -54 -141 -32 -27 -40 -21 -40 31 0 42 21 82 60 113 20 17 27 16 34 -3z m-14744 -13 c0 -5 -7 -12 -16 -15 -14 -5 -15 -4 -4 9 14 17 20 19 20 6z m-15 -61 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m339 0 c-7 -7 -19 -7 -35 -1 -23 9 -22 10 11 10 23 1 31 -2 24 -9z m-94 -10 c-8 -5 -19 -10 -25 -10 -5 0 -3 5 5 10 8 5 20 10 25 10 6 0 3 -5 -5 -10z m18440 -241 c0 -11 -4 -17 -10 -14 -5 3 -10 13 -10 21 0 8 5 14 10 14 6 0 10 -9 10 -21z m-1912 -45 c17 -20 38 -57 47 -83 10 -25 50 -109 89 -185 69 -136 70 -141 69 -210 -1 -91 -36 -333 -70 -481 -96 -428 -269 -925 -493 -1419 -17 -39 -37 -84 -45 -100 -20 -47 -142 -310 -187 -406 -22 -47 -56 -121 -75 -165 -80 -182 -225 -443 -330 -595 -41 -58 -108 -147 -123 -160 -3 -3 -23 -27 -45 -55 -62 -78 -233 -245 -315 -307 -129 -97 -237 -154 -595 -311 -112 -49 -119 -50 -146 -28 -33 27 -37 122 -10 271 44 247 135 937 151 1146 14 183 54 519 80 674 33 198 60 428 71 615 12 201 16 211 87 234 108 36 193 135 298 350 66 134 151 285 183 323 6 7 31 40 56 72 144 190 384 407 653 590 46 31 85 56 88 56 2 0 23 12 46 26 127 81 376 183 445 184 36 0 46 -5 71 -36z m-17569 -60 c51 -59 54 -83 8 -80 -58 4 -100 60 -81 110 10 27 30 18 73 -30z m-196 -144 c3 -11 16 -24 30 -29 43 -17 46 -67 4 -73 -57 -9 -87 24 -87 93 0 32 45 40 53 9z m205 -13 c6 -5 12 -15 12 -21 0 -7 -4 -6 -9 2 -6 10 -10 8 -14 -8 -5 -18 -2 -21 14 -17 19 5 28 -16 10 -27 -16 -10 -47 28 -43 53 2 15 0 21 -7 17 -13 -9 -33 2 -26 14 6 9 44 2 63 -13z m162 19 c0 -15 -14 -35 -21 -30 -15 9 -10 34 6 34 8 0 15 -2 15 -4z m90 -68 c0 -5 -7 -8 -15 -8 -8 0 -15 -4 -15 -10 0 -5 7 -10 15 -10 8 0 15 -4 15 -10 0 -13 -17 -12 -60 5 l-35 13 33 12 c17 7 32 16 32 21 0 11 2 11 -38 0 -37 -11 -42 0 -16 38 l16 23 34 -34 c18 -18 34 -36 34 -40z m4585 12 c-3 -5 -13 -10 -21 -10 -8 0 -12 5 -9 10 3 6 13 10 21 10 8 0 12 -4 9 -10z m10687 -88 c0 -51 -5 -68 -29 -104 -35 -52 -58 -60 -67 -22 -12 45 6 99 58 177 26 38 38 22 38 -51z m-15501 -35 c23 -14 25 -45 4 -53 -8 -3 -22 1 -30 10 -9 9 -24 16 -34 16 -10 0 -23 10 -29 23 -22 44 -19 51 23 57 36 4 40 3 43 -18 2 -12 12 -28 23 -35z m179 2 c17 -14 21 -22 12 -26 -6 -2 -10 -9 -6 -14 11 -19 -26 -8 -46 13 -23 25 -25 34 -7 41 19 8 20 8 47 -14z m264 -4 c9 -14 24 -25 34 -25 10 0 13 -3 6 -8 -6 -4 -14 -14 -17 -22 -4 -10 -6 -8 -6 8 -1 17 -7 22 -28 22 -37 0 -57 14 -50 34 9 24 43 19 61 -9z m-224 -35 c0 -6 11 -15 25 -20 33 -12 36 -53 3 -48 -15 2 -22 11 -23 27 -1 14 -7 27 -13 29 -15 5 -16 22 -2 22 6 0 10 -5 10 -10z m-9 -35 c-1 -15 -24 -12 -29 3 -3 9 2 13 12 10 10 -1 17 -7 17 -13z m-34 -50 c9 -25 -7 -32 -23 -11 -9 13 -14 15 -14 6 0 -7 -3 -11 -6 -7 -9 9 5 27 22 27 8 0 17 -7 21 -15z m13404 -23 c-9 -16 -62 -52 -78 -52 -1 0 -3 9 -3 20 0 11 5 20 11 20 7 0 23 12 36 26 28 31 53 21 34 -14z m-13540 -26 c16 -16 29 -38 29 -48 0 -18 -33 -58 -48 -58 -4 0 -27 19 -50 43 -33 34 -40 48 -37 72 2 17 4 33 4 37 2 15 74 -18 102 -46z m14559 33 c0 -5 -7 -9 -15 -9 -15 0 -20 12 -9 23 8 8 24 -1 24 -14z m-14056 -28 c3 -5 -3 -11 -14 -14 -22 -6 -37 8 -18 16 20 8 26 8 32 -2z m-86 -33 c7 -1 28 -16 45 -33 18 -17 41 -37 52 -44 14 -8 16 -14 8 -17 -18 -8 -16 -25 2 -18 17 7 20 -13 6 -35 -20 -31 -174 92 -177 141 -1 16 3 19 25 14 14 -4 32 -7 39 -8z m13664 -48 c-3 -18 -10 -30 -19 -30 -12 0 -13 3 -4 14 6 7 9 21 5 30 -4 10 -1 16 8 16 10 0 13 -9 10 -30z m-13887 -7 c51 -35 74 -62 75 -90 1 -58 -20 -64 -114 -33 -73 25 -96 44 -96 83 0 68 65 87 135 40z m580 -9 c58 -34 95 -82 102 -133 5 -33 2 -42 -12 -47 -18 -7 -119 38 -132 60 -5 6 -29 29 -56 50 -47 38 -66 74 -52 97 12 19 99 3 150 -27z m222 6 l26 -20 -24 -2 c-54 -3 -78 8 -79 35 0 15 53 6 77 -13z m13043 11 c0 -5 -6 -12 -12 -15 -10 -3 -8 -9 5 -19 19 -16 22 -27 6 -27 -6 0 -17 -7 -26 -15 -33 -34 -36 13 -3 63 15 23 30 29 30 13z m-12840 -91 c0 -5 -7 -10 -15 -10 -8 0 -15 5 -15 10 0 6 7 10 15 10 8 0 15 -4 15 -10z m14220 -15 c9 -10 10 -35 5 -87 -7 -74 -16 -101 -42 -127 -32 -32 -48 38 -25 107 10 30 9 33 -5 27 -15 -5 -15 -4 0 13 9 10 17 24 17 31 0 17 19 51 29 51 5 0 14 -7 21 -15z m-15436 -21 c69 -47 76 -58 78 -127 2 -100 -9 -107 -95 -50 -66 43 -93 94 -82 152 4 20 9 39 11 43 10 16 50 7 88 -18z m445 -18 c13 -13 34 -27 47 -30 25 -7 49 -40 39 -56 -9 -15 -41 -12 -55 5 -7 8 -23 15 -37 15 -43 0 -63 18 -63 55 0 30 3 35 23 35 13 0 34 -11 46 -24z m605 -23 c23 -16 44 -32 48 -38 14 -19 8 -62 -12 -80 -41 -37 -144 15 -156 80 -13 68 47 87 120 38z m-330 2 c-4 -8 -1 -15 7 -15 7 0 10 -2 7 -5 -3 -3 -13 -3 -22 1 -13 5 -14 9 -5 20 15 18 20 18 13 -1z m579 -39 c9 -7 17 -17 17 -22 0 -5 9 -15 20 -22 24 -15 18 -32 -12 -32 -26 0 -93 41 -81 49 5 3 12 14 16 24 8 20 16 21 40 3z m11942 -46 c0 -16 -6 -26 -19 -28 -25 -5 -39 12 -31 38 10 31 50 24 50 -10z m2083 0 c-7 -10 -14 -18 -15 -16 -6 6 9 36 18 36 5 0 4 -9 -3 -20z m-15148 -24 c0 -14 5 -28 11 -32 8 -4 9 1 5 17 -7 23 -6 23 5 4 20 -32 34 -43 60 -47 13 -1 28 -13 34 -25 5 -13 13 -23 17 -23 5 0 8 -7 8 -15 0 -22 -24 -14 -30 10 -7 24 -52 32 -68 12 -7 -8 -13 -26 -14 -41 -2 -21 -7 -26 -30 -26 -22 0 -26 4 -21 18 5 14 3 15 -8 5 -7 -7 -15 -13 -18 -13 -4 0 -7 34 -9 76 -2 64 0 78 15 90 27 20 43 17 43 -10z m1454 -50 c65 -36 116 -78 116 -95 0 -6 -9 -15 -19 -21 -23 -12 -113 -14 -126 -2 -6 4 -35 16 -65 26 -64 21 -90 47 -90 87 0 16 7 33 18 39 28 17 101 2 166 -34z m11512 5 c-11 -18 -36 -13 -36 7 0 10 3 22 7 26 10 10 37 -20 29 -33z m-11926 19 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m14107 -12 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-15458 -130 c1 -49 -2 -88 -5 -88 -3 0 -12 6 -20 14 -17 18 -19 147 -2 179 11 21 11 21 19 2 4 -11 8 -59 8 -107z m13567 107 c4 -8 4 -22 0 -30 -4 -13 -9 -13 -25 -3 -15 9 -17 15 -8 30 14 22 26 23 33 3z m-12976 1 c0 -2 3 -12 6 -21 6 -13 1 -16 -22 -13 -38 4 -47 38 -10 38 14 0 26 -2 26 -4z m11940 0 c0 -2 3 -11 6 -20 10 -25 -43 -21 -56 4 -10 18 -8 20 20 20 16 0 30 -2 30 -4z m480 -41 c0 -19 -2 -35 -4 -35 -2 0 -6 16 -8 35 -2 19 0 35 4 35 4 0 8 -16 8 -35z m-23 -22 c-3 -10 -5 -4 -5 12 0 17 2 24 5 18 2 -7 2 -21 0 -30z m-12057 6 c0 -11 -7 -15 -24 -14 -55 6 -65 37 -11 33 25 -1 35 -7 35 -19z m-351 -10 c-16 -10 -23 -4 -14 10 3 6 11 8 17 5 6 -4 5 -9 -3 -15z m46 12 c-3 -5 3 -12 12 -14 15 -4 15 -5 -2 -6 -12 0 -26 -6 -32 -12 -8 -8 -13 -8 -17 0 -4 6 0 11 8 11 10 0 13 6 10 15 -4 10 0 15 11 15 9 0 14 -4 10 -9z m-450 -37 c38 -35 39 -37 46 -122 3 -48 12 -101 20 -119 7 -18 10 -35 7 -38 -11 -11 -102 42 -143 84 -46 46 -53 64 -54 143 -1 48 2 59 21 72 34 24 61 19 103 -20z m513 17 c3 -8 -1 -12 -9 -9 -7 2 -15 10 -17 17 -3 8 1 12 9 9 7 -2 15 -10 17 -17z m11402 -21 c0 -5 -10 -6 -22 -3 -19 4 -20 3 -8 -6 17 -12 6 -14 -28 -5 l-23 7 23 11 c24 13 58 10 58 -4z m2010 6 c0 -21 -21 -31 -31 -15 -14 22 -11 29 11 29 11 0 20 -6 20 -14z m-13450 -6 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m315 -8 c-3 -3 -11 0 -18 7 -9 10 -8 11 6 5 10 -3 15 -9 12 -12z m519 3 c-5 -12 -10 -13 -20 -4 -19 15 -18 19 6 19 13 0 18 -5 14 -15z m-575 -23 c62 3 71 1 71 -14 0 -10 11 -25 25 -34 32 -21 32 -48 -1 -62 -20 -10 -30 -9 -47 3 -12 8 -30 15 -40 15 -25 0 -52 26 -34 34 6 3 -7 2 -29 -1 -35 -4 -44 -2 -57 17 -12 17 -13 28 -5 46 10 22 13 23 29 8 13 -12 34 -15 88 -12z m-204 7 c11 -17 2 -18 -25 -4 -24 14 -24 14 -3 15 12 0 25 -5 28 -11z m-248 -13 c0 0 4 -24 7 -53 7 -68 -8 -76 -50 -27 -38 45 -40 51 -17 76 13 15 44 17 60 4z m766 2 c46 -24 65 -78 27 -78 -27 0 -100 47 -100 63 0 29 34 36 73 15z m1364 -10 c8 -6 12 -17 9 -25 -3 -7 1 -13 8 -13 7 0 27 -7 45 -16 26 -13 30 -20 25 -37 -13 -44 -19 -50 -35 -35 -8 8 -21 17 -29 21 -8 4 -26 14 -40 22 -14 8 -37 15 -53 15 -35 0 -55 36 -37 70 10 19 17 21 53 16 23 -4 47 -12 54 -18z m10723 -31 c0 -31 -14 -57 -32 -57 -13 0 -9 65 4 78 20 20 28 14 28 -21z m-12758 -10 c7 -8 26 -17 42 -21 16 -4 30 -16 33 -27 3 -10 16 -22 28 -25 17 -4 24 -15 29 -42 6 -39 0 -54 -13 -33 -6 10 -10 9 -15 -4 -4 -13 -13 -15 -32 -11 -48 12 -88 66 -99 134 -7 44 2 54 27 29z m1310 -12 c6 -14 8 -28 5 -32 -11 -10 -57 15 -57 31 0 13 13 23 33 25 4 1 13 -10 19 -24z m417 11 c7 -8 8 -16 4 -19 -13 -8 -55 12 -48 23 9 14 31 12 44 -4z m9557 -3 c21 -27 17 -41 -16 -58 -28 -14 -32 -14 -46 -1 -14 14 -13 19 3 46 20 34 40 38 59 13z m84 -10 c-15 -52 -24 -68 -56 -102 -19 -21 -36 -31 -44 -26 -8 5 -1 16 23 36 19 16 45 49 57 74 25 51 32 58 20 18z m-11640 6 c0 -5 4 -8 8 -5 11 7 42 -30 42 -50 0 -11 -6 -14 -22 -8 -13 3 -29 11 -35 16 -15 12 -17 58 -3 58 6 0 10 -5 10 -11z m14584 -20 c-3 -5 -10 -7 -15 -3 -5 3 -7 10 -3 15 3 5 10 7 15 3 5 -3 7 -10 3 -15z m-13338 -21 c2 -14 -5 -18 -31 -18 -28 0 -32 3 -28 21 7 26 55 23 59 -3z m537 6 c44 -15 77 -48 63 -62 -4 -3 -30 -5 -59 -3 -42 2 -58 8 -82 32 -25 25 -28 31 -15 39 21 14 40 12 93 -6z m12723 -39 c-1 -49 -16 -64 -16 -16 0 27 8 61 15 61 1 0 2 -20 1 -45z m747 -11 c2 -24 -4 -32 -32 -46 -40 -20 -51 -34 -51 -69 0 -14 -6 -34 -14 -45 -14 -18 -15 -17 -30 18 -21 49 -7 89 53 150 51 52 70 50 74 -8z m-14369 20 c32 -17 31 -34 -3 -34 -35 0 -58 29 -39 48 7 7 14 9 17 4 3 -4 15 -12 25 -18z m525 4 c25 -6 51 -15 58 -20 7 -5 16 -7 21 -5 12 8 92 -30 93 -45 1 -7 1 -20 0 -28 0 -10 1 -11 5 -2 10 22 21 13 27 -24 10 -58 3 -65 -61 -58 -60 6 -123 28 -187 64 -48 28 -65 47 -65 75 0 30 29 67 47 60 9 -3 36 -10 62 -17z m9942 5 c-11 -4 -11 -7 0 -14 7 -4 10 -11 6 -16 -9 -9 -28 17 -21 29 3 4 11 8 17 7 8 0 7 -3 -2 -6z m1129 -23 c0 -11 -4 -20 -9 -20 -14 0 -23 18 -16 30 10 17 25 11 25 -10z m-1200 -30 c0 -22 -4 -40 -10 -40 -5 0 -10 18 -10 40 0 22 5 40 10 40 6 0 10 -18 10 -40z m110 26 c0 -19 -29 -48 -41 -41 -16 11 -10 25 11 25 11 0 20 7 20 15 0 8 2 15 5 15 3 0 5 -6 5 -14z m1570 -44 c0 -5 9 -12 20 -15 16 -4 20 -14 20 -50 0 -40 -3 -46 -32 -60 -30 -15 -33 -14 -46 4 -16 23 -19 64 -8 132 l7 48 20 -25 c10 -13 19 -29 19 -34z m-12816 33 c3 -8 12 -15 20 -15 7 0 16 -11 18 -25 5 -22 2 -25 -21 -24 -48 1 -58 11 -49 47 9 34 22 41 32 17z m11106 -37 c0 -12 -8 -16 -29 -16 l-29 1 21 29 c21 29 37 23 37 -14z m-10544 11 c10 -16 -12 -26 -46 -21 -38 5 -39 19 -2 25 15 2 30 5 34 6 4 0 10 -4 14 -10z m1533 -35 c15 -34 14 -36 -11 -32 -18 2 -24 11 -26 35 -3 25 0 32 11 27 8 -3 19 -16 26 -30z m791 6 c-11 -7 -4 -10 28 -10 23 0 42 -4 42 -10 0 -5 -9 -10 -19 -10 -11 0 -25 -2 -33 -5 -7 -3 -22 1 -33 10 -17 13 -18 16 -5 25 8 5 20 10 25 10 6 0 3 -5 -5 -10z m7913 1 c19 -2 4 -28 -24 -38 -26 -10 -35 -9 -55 4 l-25 16 23 11 c19 10 39 11 81 7z m-11183 -48 c0 -15 -26 -17 -35 -3 -3 6 -3 19 0 31 7 19 7 20 21 2 7 -10 14 -24 14 -30z m828 20 c42 -60 41 -123 -2 -123 -43 0 -73 56 -61 116 8 43 35 46 63 7z m10944 -4 c-5 -32 -15 -29 -27 9 -5 17 -2 22 13 22 15 0 18 -6 14 -31z m503 11 c18 -20 18 -21 -1 -35 -27 -20 -82 -38 -94 -30 -7 4 -3 21 12 46 25 44 54 51 83 19z m-11188 -12 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-799 -20 c18 -18 14 -38 -7 -38 -17 0 -31 18 -31 41 0 13 24 11 38 -3z m886 -4 c9 -24 7 -27 -9 -10 -17 17 -19 26 -6 26 5 0 12 -7 15 -16z m49 -4 c3 -11 1 -20 -4 -20 -5 0 -9 2 -9 4 0 2 -3 11 -6 20 -3 9 -2 16 4 16 5 0 12 -9 15 -20z m2395 -11 c23 -10 42 -25 42 -33 0 -12 -19 -15 -105 -15 l-105 -1 0 40 0 40 63 -7 c34 -3 81 -14 105 -24z m9350 19 c18 -18 14 -56 -8 -68 -10 -6 -22 -26 -26 -45 -7 -41 -21 -45 -34 -9 -11 29 -13 117 -3 127 11 11 58 8 71 -5z m5692 2 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m-18567 -17 c72 -42 117 -111 117 -180 0 -36 -3 -43 -19 -43 -10 0 -21 7 -25 15 -5 15 -36 21 -36 7 0 -4 12 -19 28 -33 15 -14 36 -38 47 -54 11 -15 26 -34 33 -41 16 -17 15 -35 -3 -61 -12 -17 -20 -20 -49 -13 -44 10 -86 36 -114 71 -21 25 -24 43 -28 141 -4 107 2 208 13 208 3 0 19 -8 36 -17z m2471 8 c3 -5 -5 -11 -19 -13 -17 -4 -25 -1 -25 8 0 15 36 19 44 5z m-555 -54 c14 -40 14 -47 -4 -47 -8 0 -15 6 -15 13 0 9 -2 9 -9 -1 -7 -11 -9 -11 -14 2 -4 9 -13 16 -21 16 -21 0 -29 17 -17 38 16 30 67 17 80 -21z m914 28 c27 -4 50 -12 53 -20 3 -7 14 -15 26 -18 25 -7 20 -40 -7 -46 -34 -6 -185 30 -185 45 0 8 -4 14 -10 14 -5 0 -10 5 -10 11 0 8 5 8 15 -1 12 -10 18 -10 30 0 13 11 13 15 3 22 -8 6 -4 7 12 4 14 -3 47 -8 73 -11z m8248 -6 c12 -20 12 -23 -13 -51 -17 -19 -40 -29 -86 -36 -73 -13 -88 -9 -94 22 -6 28 30 73 63 79 45 8 121 0 130 -14z m-10787 -11 c11 -42 7 -58 -14 -58 -24 0 -38 44 -20 65 17 21 27 19 34 -7z m5809 15 c-13 -2 -33 -2 -45 0 -13 2 -3 4 22 4 25 0 35 -2 23 -4z m-3983 -12 c0 -5 22 -11 49 -15 55 -7 84 -32 79 -68 -2 -19 -10 -23 -45 -26 -35 -3 -47 2 -77 30 -33 30 -46 65 -29 81 9 10 23 9 23 -2z m3997 -8 c-20 -2 -52 -2 -70 0 -17 2 0 4 38 4 39 0 53 -2 32 -4z m4338 -25 c28 -12 34 -48 11 -67 -27 -22 -100 -29 -150 -13 l-47 15 31 29 c17 15 43 28 58 29 15 0 36 4 47 9 11 5 21 9 22 9 1 1 14 -4 28 -11z m-9896 -31 c48 -23 71 -62 71 -122 0 -28 -4 -35 -19 -35 -11 0 -23 5 -26 10 -3 6 -13 10 -21 10 -10 0 -14 -12 -14 -40 0 -53 -21 -53 -78 -1 -49 45 -57 89 -20 113 l22 15 -22 28 c-35 44 -30 58 21 50 23 -4 62 -17 86 -28z m587 25 c17 -11 34 -48 34 -76 0 -60 -133 -34 -174 35 -9 15 -16 32 -16 38 0 12 138 15 156 3z m421 -12 c35 -21 36 -43 2 -61 -16 -8 -25 -4 -49 20 -17 16 -30 37 -30 45 0 22 38 20 77 -4z m2428 10 l-50 -7 54 -1 c35 -1 61 -8 73 -19 25 -22 23 -29 -14 -42 -27 -10 -42 -7 -102 16 -39 15 -74 31 -77 36 -3 5 -10 8 -15 7 -5 -1 -10 3 -12 9 -2 7 28 10 95 9 81 -1 90 -2 48 -8z m3445 -35 c0 -28 -30 -41 -60 -25 -26 14 -25 28 1 51 27 23 59 9 59 -26z m3345 25 c0 -8 -8 -16 -19 -18 -11 -3 -16 0 -12 7 5 7 1 9 -8 5 -16 -6 -22 7 -9 20 12 12 48 2 48 -14z m-9901 -11 c-3 -5 -10 -7 -15 -3 -5 3 -7 10 -3 15 3 5 10 7 15 3 5 -3 7 -10 3 -15z m1670 -4 c-4 -8 -11 -12 -16 -9 -6 4 -5 10 3 15 19 12 19 11 13 -6z m534 -7 c13 -17 -4 -32 -42 -36 -23 -3 -27 0 -22 13 3 9 6 21 6 26 0 14 46 11 58 -3z m-616 -32 c27 -32 22 -46 -16 -46 -75 0 -127 40 -90 67 25 18 85 6 106 -21z m11979 -6 l6 -35 2 35 c1 28 5 36 21 37 29 2 27 -47 -4 -76 -20 -19 -28 -21 -45 -12 -22 12 -25 29 -15 68 9 33 28 23 35 -17z m-13069 -10 c41 -40 42 -41 22 -60 -10 -10 -39 -21 -63 -24 -60 -6 -78 -26 -24 -26 25 0 53 -8 74 -23 32 -21 34 -27 37 -85 l3 -63 -28 7 c-44 10 -88 33 -101 52 -48 70 -60 94 -65 138 -4 27 -10 61 -13 75 -7 30 20 47 78 48 30 1 45 -7 80 -39z m1878 30 c0 -5 -4 -10 -9 -10 -6 0 -13 5 -16 10 -3 6 1 10 9 10 9 0 16 -4 16 -10z m8646 -27 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m-9921 -16 l38 -33 -24 -15 c-36 -23 -111 -24 -137 -2 -21 18 -36 65 -25 77 4 3 30 6 58 6 44 0 57 -5 90 -33z m10348 26 c-26 -10 -12 -22 32 -29 25 -3 45 -10 45 -14 0 -16 -40 -41 -60 -38 -32 5 -23 23 11 20 49 -4 32 14 -26 28 -58 14 -70 26 -32 33 31 6 44 6 30 0z m-8626 -18 c7 -4 -30 -45 -40 -45 -22 1 -50 29 -44 44 5 11 16 13 44 9 21 -3 39 -7 40 -8z m5893 -16 c0 -19 -11 -36 -37 -58 -34 -27 -35 -30 -16 -31 33 0 47 -31 20 -45 -39 -19 -62 -7 -75 38 -29 103 -26 113 38 119 67 6 70 5 70 -23z m2795 21 c18 -8 17 -9 -7 -9 -16 -1 -28 4 -28 9 0 12 8 12 35 0z m-9638 -37 c35 -29 54 -38 84 -38 44 0 46 -2 22 -21 -26 -20 -76 -17 -133 8 -42 18 -50 26 -50 49 0 23 8 33 28 38 2 1 24 -16 49 -36z m10590 31 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m1298 -28 c-27 -19 -40 -8 -19 15 12 13 21 16 28 9 7 -7 4 -14 -9 -24z m-11194 12 c21 -6 46 -19 55 -29 16 -17 16 -19 -1 -25 -26 -10 -106 18 -123 44 -13 21 -13 22 8 22 13 0 40 -5 61 -12z m289 -24 c0 -20 -5 -24 -27 -24 l-28 1 23 19 c14 11 20 24 16 31 -4 8 -3 9 4 5 7 -4 12 -18 12 -32z m8970 6 c0 -20 -5 -30 -15 -30 -10 0 -15 10 -15 30 0 20 5 30 15 30 10 0 15 -10 15 -30z m-11770 -20 c0 -35 -24 -50 -45 -29 -22 21 -8 59 21 59 20 0 24 -5 24 -30z m1179 -1 c-13 -10 -21 -20 -18 -24 11 -10 59 14 59 30 0 8 7 15 16 15 10 0 14 -6 11 -15 -4 -8 -2 -17 3 -20 6 -4 10 -1 10 6 0 7 9 2 20 -11 42 -49 14 -66 -63 -39 -27 9 -55 23 -63 31 -12 12 -12 17 6 36 12 12 26 19 32 16 7 -4 2 -14 -13 -25z m981 11 c24 -12 59 -20 90 -20 41 0 56 -5 75 -25 34 -33 33 -77 -2 -96 -31 -17 -53 -14 -99 12 -19 10 -41 19 -49 19 -8 0 -15 5 -15 11 0 12 -40 48 -54 49 -16 0 -33 33 -28 52 6 23 33 23 82 -2z m2637 7 c3 -3 -2 -13 -11 -22 -20 -20 -20 -29 0 -49 8 -9 11 -16 6 -16 -5 0 -17 11 -26 25 -9 14 -25 25 -35 25 -23 0 -45 25 -36 41 7 11 89 8 102 -4z m-1815 -22 c20 -14 41 -25 46 -25 5 0 16 -8 23 -17 13 -16 12 -17 -4 -4 -13 11 -23 11 -40 3 -12 -6 -36 -14 -53 -17 -26 -5 -34 -2 -48 20 -13 19 -14 30 -6 45 14 27 38 25 82 -5z m7812 10 c-4 -8 -18 -18 -33 -21 -41 -9 -48 -12 -25 -13 15 -1 27 -13 39 -37 27 -58 5 -82 -45 -47 -14 10 -31 18 -38 20 -25 3 -24 11 4 62 25 48 30 51 65 51 30 0 37 -3 33 -15z m-10947 -27 c7 -5 16 -32 19 -60 6 -44 10 -50 35 -55 36 -7 44 -17 58 -70 7 -24 16 -43 21 -43 6 0 10 -14 10 -30 0 -44 -27 -50 -59 -13 -14 16 -45 44 -68 62 -30 23 -43 40 -43 57 0 14 -11 47 -25 74 -24 47 -32 90 -19 103 7 7 52 -9 71 -25z m11783 17 c0 -8 -4 -15 -10 -15 -5 0 -10 7 -10 15 0 8 5 15 10 15 6 0 10 -7 10 -15z m1417 9 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-7809 -26 c24 -12 30 -38 8 -38 -7 0 -19 -6 -25 -14 -9 -10 -24 -13 -49 -9 -54 8 -72 21 -72 48 0 20 6 24 38 28 43 4 68 0 100 -15z m1725 -3 c20 -11 37 -22 37 -25 0 -11 -204 -20 -237 -11 -41 12 -76 31 -69 39 26 26 213 24 269 -3z m5784 0 c3 -22 -41 -60 -57 -50 -13 8 -13 31 1 56 13 26 53 22 56 -6z m-11948 -11 c25 -32 29 -63 6 -44 -11 9 -15 9 -15 1 0 -6 -13 -2 -30 11 -32 23 -38 43 -17 51 25 10 36 6 56 -19z m4061 18 c0 -4 -16 -6 -35 -4 -19 2 -35 6 -35 8 0 2 16 4 35 4 19 0 35 -4 35 -8z m-5445 -26 c16 -17 25 -43 30 -84 9 -76 -4 -105 -43 -96 -15 3 -37 7 -48 9 -19 4 -22 14 -28 85 -8 90 -1 110 42 110 13 0 35 -11 47 -24z m717 6 c7 -9 30 -28 50 -42 44 -29 48 -37 41 -73 -4 -18 -12 -27 -24 -27 -27 0 -101 31 -120 49 -12 13 -39 72 -39 87 0 3 56 21 72 23 4 1 13 -7 20 -17z m1369 4 c19 -8 56 -17 84 -21 27 -3 55 -11 62 -17 19 -15 16 -42 -6 -62 -17 -15 -30 -17 -80 -11 -62 7 -87 23 -132 87 -19 27 -19 27 3 31 13 2 26 5 29 6 4 0 22 -5 40 -13z m1904 -6 c44 -11 89 -20 100 -20 12 0 28 -13 39 -31 18 -30 18 -32 -2 -51 -11 -12 -39 -22 -65 -25 -38 -5 -52 -1 -99 30 -47 29 -98 88 -98 111 0 11 43 6 125 -14z m5813 13 c-15 -2 -42 -2 -60 0 -18 2 -6 4 27 4 33 0 48 -2 33 -4z m1112 -10 c0 -11 -16 -25 -39 -35 -46 -22 -58 -22 -77 -4 -16 17 -19 36 -4 36 6 0 10 -4 10 -9 0 -14 32 -23 44 -11 7 7 5 10 -7 10 -9 0 -17 7 -17 15 0 11 12 15 45 15 36 0 45 -3 45 -17z m-5465 -13 c-3 -5 -18 -9 -33 -9 l-27 1 30 8 c17 4 31 8 33 9 2 0 0 -3 -3 -9z m5292 -12 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-1233 2 c39 -15 31 -26 -29 -40 -49 -12 -60 -11 -90 3 -19 9 -35 22 -35 27 0 6 3 9 8 7 4 -3 16 -1 27 4 28 11 89 11 119 -1z m-5885 -39 c-6 -2 -15 3 -20 10 -15 24 -10 29 11 11 12 -10 16 -18 9 -21z m2915 30 c10 -16 -15 -71 -32 -71 -40 1 -77 64 -43 73 30 8 70 7 75 -2z m5036 -11 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m-8005 -10 c8 -13 -5 -13 -25 0 -13 8 -13 10 2 10 9 0 20 -4 23 -10z m9173 -7 c12 -20 -3 -59 -26 -68 -20 -8 -55 27 -47 47 6 14 39 36 57 37 4 1 11 -7 16 -16z m-8314 -3 c29 -11 33 -27 13 -54 -12 -17 -17 -17 -52 -5 -42 16 -53 32 -35 54 14 17 38 19 74 5z m4287 -7 c23 -14 29 -24 29 -52 0 -19 -3 -32 -6 -29 -3 3 -31 0 -62 -8 -74 -17 -91 -17 -99 1 -6 16 43 71 82 93 26 15 22 15 56 -5z m279 -13 c0 -12 -10 -19 -30 -22 -37 -6 -44 2 -25 29 18 25 55 20 55 -7z m1693 23 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m1117 -19 c0 -17 -24 -29 -39 -20 -6 4 -4 14 6 26 18 20 33 18 33 -6z m-10551 -18 c27 -19 67 -50 88 -70 21 -19 49 -44 63 -55 21 -16 23 -21 10 -35 -10 -13 -23 -16 -54 -11 -23 4 -45 11 -50 16 -6 5 -34 9 -64 9 -52 0 -84 10 -109 36 -13 12 -12 51 3 122 7 33 52 29 113 -12z m1174 5 c33 -16 69 -39 82 -51 24 -22 24 -50 0 -50 -7 0 -15 -9 -18 -20 -4 -17 0 -20 33 -20 43 0 58 -13 40 -35 -16 -19 -74 -12 -135 17 -56 26 -63 47 -22 66 39 19 25 32 -34 32 l-49 0 0 45 c0 40 2 45 23 45 12 0 48 -13 80 -29z m902 20 c-3 -5 4 -12 15 -16 11 -3 20 -11 20 -17 0 -6 3 -8 6 -5 4 4 1 14 -7 23 -12 15 -12 17 1 12 9 -2 16 -19 18 -40 4 -42 -11 -44 -75 -10 -46 24 -50 31 -31 50 14 14 62 16 53 3z m4011 -13 c-2 -16 -10 -23 -27 -24 -32 -1 -59 -13 -59 -28 0 -6 -9 -12 -20 -12 -15 0 -20 7 -20 27 0 53 8 59 71 59 55 0 59 -1 55 -22z m1033 -4 c35 -29 41 -69 14 -90 -28 -21 -105 -18 -131 6 -22 21 -21 37 8 76 29 41 67 43 109 8z m-6558 -1 c32 -19 36 -34 15 -52 -30 -25 -103 18 -90 53 8 21 38 20 75 -1z m1325 2 c10 -8 29 -15 42 -15 25 0 29 -22 7 -40 -39 -32 8 -75 94 -85 49 -6 67 -13 87 -33 26 -28 30 -47 14 -57 -5 -3 -10 -19 -10 -35 0 -15 -7 -30 -15 -33 -18 -8 -28 8 -20 32 7 23 -4 27 -98 37 -57 5 -77 12 -115 42 -26 19 -48 39 -50 44 -2 4 -10 8 -18 8 -19 0 -18 6 6 30 16 16 18 24 9 50 -6 16 -15 30 -20 30 -5 0 -9 6 -9 14 0 26 66 34 96 11z m4714 -2 c0 -15 2 -16 10 -3 12 20 18 12 26 -37 5 -33 2 -45 -15 -62 -67 -67 -134 -9 -100 88 9 27 16 31 45 31 26 0 34 -4 34 -17z m3700 12 c0 -2 -9 -9 -20 -15 -16 -9 -20 -8 -20 5 0 8 9 15 20 15 11 0 20 -2 20 -5z m-319 -38 c-8 -8 -11 -7 -11 4 0 9 3 19 7 23 4 4 9 2 11 -4 3 -7 -1 -17 -7 -23z m-6558 4 c16 -6 32 -11 37 -11 8 0 24 -30 22 -42 -1 -4 4 -5 12 -2 16 6 38 -42 42 -92 4 -53 -33 -45 -115 28 -28 25 -58 40 -84 45 -37 6 -39 7 -33 37 11 54 49 66 119 37z m1997 9 c0 -5 -7 -10 -16 -10 -8 0 -12 5 -9 10 3 6 10 10 16 10 5 0 9 -4 9 -10z m972 -20 c-4 -25 -1 -30 17 -30 17 0 21 -6 21 -35 0 -30 -4 -36 -27 -41 -16 -4 -31 -9 -36 -11 -11 -7 12 -43 28 -43 8 0 15 -9 15 -20 0 -12 -7 -20 -16 -20 -9 0 -28 -7 -44 -16 -17 -11 -37 -14 -54 -10 -22 5 -26 12 -26 41 0 19 5 35 11 35 8 0 10 21 5 70 -7 69 -7 70 19 80 14 6 37 10 51 10 13 0 24 5 24 10 0 6 4 10 8 10 5 0 7 -13 4 -30z m-7382 5 c0 -8 -4 -15 -10 -15 -5 0 -10 7 -10 15 0 8 5 15 10 15 6 0 10 -7 10 -15z m2569 -49 c45 -32 81 -64 81 -69 0 -7 -4 -7 -12 1 -15 15 -32 16 -23 1 11 -17 -140 -4 -170 15 -46 30 -61 102 -22 108 49 8 69 1 146 -56z m3881 56 c0 -15 -24 -32 -44 -31 -20 0 -20 1 2 9 12 5 22 14 22 20 0 5 5 10 10 10 6 0 10 -4 10 -8z m3905 -2 c4 -6 -6 -10 -22 -11 -15 0 -37 -4 -48 -9 -14 -6 -6 -7 25 -4 25 3 50 7 57 9 6 2 18 -6 26 -19 13 -19 13 -27 3 -47 -6 -13 -17 -24 -24 -23 -7 1 -25 2 -42 3 -33 1 -41 17 -12 24 9 2 7 3 -5 2 -13 -1 -28 4 -34 11 -8 10 -3 12 28 9 32 -4 30 -3 -9 6 -36 8 -48 16 -48 29 0 18 11 22 82 28 9 1 20 -2 23 -8z m495 0 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m1970 -5 c0 -16 -27 -32 -37 -21 -7 7 16 36 28 36 5 0 9 -7 9 -15z m290 -1 c0 -8 -4 -12 -10 -9 -5 3 -10 10 -10 16 0 5 5 9 10 9 6 0 10 -7 10 -16z m-13213 -18 c10 -13 29 -27 42 -31 30 -9 91 -63 91 -81 0 -13 57 -34 93 -34 39 0 14 -19 -30 -23 l-48 -3 52 -2 c37 -1 51 -6 48 -14 -8 -22 18 -42 77 -62 31 -10 59 -25 62 -33 3 -8 10 -12 15 -9 5 4 21 -8 35 -25 24 -28 26 -38 26 -122 0 -99 7 -140 21 -131 5 3 9 -1 9 -8 0 -8 -12 -15 -28 -16 -26 -2 -30 2 -46 53 -9 31 -26 61 -37 68 -15 9 -19 24 -20 72 l-2 60 -7 -60 c-4 -38 -2 -63 4 -67 7 -5 2 -16 -13 -30 l-23 -23 6 30 c5 29 5 29 -6 5 -7 -14 -13 -26 -14 -28 -4 -8 -34 12 -34 24 0 8 -7 14 -15 14 -8 0 -15 6 -15 14 0 8 -6 16 -14 19 -11 5 -27 57 -30 100 -2 25 -62 27 -78 3 -4 -6 -16 1 -30 19 -13 16 -31 36 -40 44 -10 9 -18 21 -18 28 0 6 -7 16 -15 21 -9 4 -19 33 -25 65 -5 32 -18 70 -28 85 -13 19 -18 38 -14 65 5 43 22 48 49 13z m4909 9 c43 -8 84 -21 92 -28 19 -20 6 -84 -19 -92 -26 -8 -142 15 -152 31 -4 7 -21 15 -38 19 -34 8 -44 24 -35 60 8 30 36 32 152 10z m7489 6 c3 -5 1 -12 -5 -16 -5 -3 -10 1 -10 9 0 18 6 21 15 7z m-10489 -17 l39 -16 -24 -19 c-28 -23 -49 -24 -72 -3 -18 17 -15 54 6 54 7 0 30 -7 51 -16z m10794 -8 c0 -15 -11 -33 -26 -45 -34 -27 -40 -26 -48 4 -10 38 9 65 44 65 25 0 30 -4 30 -24z m-13012 -22 c-4 -3 -12 5 -18 18 -12 22 -12 22 6 6 10 -10 15 -20 12 -24z m8322 9 c8 -7 -32 -33 -52 -33 -21 0 -22 4 -7 31 7 15 16 18 32 13 12 -3 24 -9 27 -11z m1850 6 c76 -23 72 -74 -9 -103 -69 -24 -83 -21 -104 24 -29 63 -17 80 62 89 7 0 30 -4 51 -10z m-10210 -9 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m1740 0 c8 -5 12 -12 9 -15 -8 -8 -39 5 -39 16 0 11 11 11 30 -1z m2042 -16 c52 -26 52 -26 27 -39 -53 -28 -112 -17 -134 25 -8 15 -11 30 -8 34 14 14 67 5 115 -20z m1932 20 c14 -5 14 -9 1 -34 -24 -47 -54 -47 -92 0 -24 29 -15 40 31 40 24 0 51 -3 60 -6z m1521 -4 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m4875 4 c0 -3 -6 -12 -14 -20 -11 -10 -17 -11 -22 -3 -3 6 0 15 7 20 16 10 29 12 29 3z m510 -14 c-12 -23 -30 -27 -30 -7 0 17 10 27 27 27 11 0 11 -5 3 -20z m5597 -2 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-3988 -33 c0 -5 -4 -3 -9 5 -5 8 -9 22 -9 30 0 16 17 -16 18 -35z m-14159 25 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m1630 -12 c0 -16 -3 -19 -11 -11 -6 6 -8 16 -5 22 11 17 16 13 16 -11z m4300 16 c40 -9 48 -28 26 -68 -28 -52 -149 -91 -179 -58 -29 34 -30 60 -2 84 45 40 96 53 155 42z m3940 -28 c-1 -6 -12 -24 -25 -41 -20 -25 -28 -28 -42 -19 -26 16 -27 40 -5 62 21 21 72 20 72 -2z m8296 -13 c-11 -11 -19 6 -11 24 8 17 8 17 12 0 3 -10 2 -21 -1 -24z m-14061 7 c11 -12 31 -20 51 -20 22 0 42 -8 58 -25 14 -14 30 -25 36 -25 5 0 10 -6 10 -14 0 -33 -153 -24 -213 13 -28 17 -67 67 -67 85 0 3 24 6 53 6 41 0 58 -5 72 -20z m2241 7 c3 -3 3 -20 -1 -37 -7 -30 -9 -32 -44 -27 -42 5 -103 28 -113 42 -4 5 -2 16 5 23 8 10 29 13 79 9 38 -2 71 -7 74 -10z m-6488 -44 c18 -20 31 -43 28 -52 -24 -89 -28 -123 -16 -151 7 -17 18 -30 25 -30 22 0 26 -29 5 -40 -54 -29 -123 15 -139 90 -12 56 -30 130 -37 151 -3 9 7 30 22 48 34 41 64 36 112 -16z m112 37 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m30 -10 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m1726 -1 c3 -6 1 -16 -6 -22 -10 -9 -11 -9 -5 2 4 8 2 17 -6 22 -9 6 -10 9 -2 9 6 0 15 -5 19 -11z m54 -30 c0 -10 -4 -19 -9 -19 -5 0 -8 11 -8 25 0 13 3 22 8 19 5 -3 9 -14 9 -25z m7551 21 c26 -15 26 -73 -1 -100 -26 -26 -108 -39 -121 -19 -40 63 54 155 122 119z m-7393 -25 c-3 -3 -9 2 -12 12 -6 14 -5 15 5 6 7 -7 10 -15 7 -18z m39 19 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m3481 0 c33 -9 27 -22 -14 -30 -25 -5 -39 -3 -44 7 -17 26 8 36 58 23z m-5345 -30 c15 -14 29 -42 33 -61 5 -26 10 -33 23 -28 12 5 13 3 4 -6 -8 -8 -23 -5 -62 16 -48 26 -51 31 -51 67 0 46 16 49 53 12z m717 2 c27 -30 21 -56 -15 -56 -32 0 -55 41 -35 65 17 20 23 19 50 -9z m330 -17 c31 -32 40 -49 40 -75 0 -29 -3 -34 -24 -34 -21 0 -75 43 -115 93 -12 15 -11 20 4 37 27 30 51 24 95 -21z m7547 25 c11 -28 -12 -77 -50 -107 -20 -17 -40 -28 -43 -24 -4 4 -9 29 -12 57 -4 43 -1 52 19 70 29 23 77 26 86 4z m1003 -24 l0 -40 -49 0 c-31 0 -53 5 -61 15 -15 18 -11 23 38 46 61 28 72 25 72 -21z m1733 26 c25 -19 23 -66 -4 -66 -11 0 -34 -9 -50 -21 -68 -48 -99 23 -32 74 40 30 59 33 86 13z m257 -1 c0 -8 -7 -15 -15 -15 -16 0 -20 12 -8 23 11 12 23 8 23 -8z m-9959 -22 c12 -15 12 -16 -3 -10 -9 3 -18 1 -20 -5 -2 -6 -10 -8 -16 -4 -17 10 -15 26 3 20 8 -4 15 -1 15 5 0 15 5 14 21 -6z m628 -7 c15 -16 28 -106 15 -106 -40 2 -109 30 -124 51 -10 13 -22 20 -26 16 -4 -4 1 -16 11 -27 18 -20 18 -21 -1 -35 -28 -21 -69 -18 -109 8 -30 19 -35 28 -35 60 0 50 21 57 77 27 l43 -23 26 28 c22 24 30 27 67 21 23 -4 48 -13 56 -20z m11377 -1 c15 -23 15 -26 -1 -41 -23 -23 -39 -5 -30 35 8 37 10 38 31 6z m-10769 -7 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m1576 10 c43 -22 49 -35 30 -58 -23 -26 -44 -25 -86 3 -60 40 -10 90 56 55z m2132 -19 c0 -17 -11 -29 -39 -45 -22 -12 -45 -20 -53 -17 -18 7 -16 32 3 40 9 3 27 17 40 30 29 29 49 26 49 -8z m426 9 c31 -17 38 -26 33 -42 -4 -12 -7 -21 -8 -22 0 0 -13 -8 -28 -17 -35 -22 -31 -22 -73 14 -42 38 -45 64 -7 77 38 15 40 14 83 -10z m79 3 c0 -20 -17 -37 -27 -28 -7 8 7 47 18 47 5 0 9 -9 9 -19z m346 -8 c23 -25 25 -33 19 -78 -3 -27 -10 -54 -14 -58 -5 -5 -53 -7 -107 -5 l-99 3 -3 37 c-2 23 4 48 14 65 31 49 55 63 112 63 45 0 57 -4 78 -27z m688 14 c24 -18 12 -71 -15 -64 -9 3 -31 -4 -48 -14 -55 -34 -66 -25 -63 50 1 14 7 28 14 33 20 12 92 9 112 -5z m249 6 c-50 -6 -39 -23 15 -25 l47 -1 -44 -4 c-45 -4 -69 7 -57 26 4 6 22 10 39 9 l32 -1 -32 -4z m3384 -4 c18 -18 3 -39 -28 -39 -33 0 -40 23 -11 39 22 13 26 13 39 0z m-2780 -14 c6 -17 -23 -55 -42 -55 -6 0 -21 -11 -33 -25 -12 -14 -29 -25 -37 -25 -13 0 -15 7 -9 38 8 44 19 53 56 45 24 -5 28 -2 28 16 0 24 28 29 37 6z m3313 -40 c0 -5 -5 -3 -10 5 -9 13 -11 13 -20 0 -8 -12 -10 -11 -10 6 0 11 3 24 7 27 7 7 32 -22 33 -38z m-9348 11 c10 -15 -6 -29 -28 -24 -11 2 -20 13 -22 27 -3 20 -1 22 20 16 13 -4 26 -13 30 -19z m10012 -8 c6 -4 7 -10 3 -15 -10 -9 -27 16 -26 37 1 13 1 13 6 0 3 -8 11 -18 17 -22z m-11538 12 c21 0 24 -5 24 -34 0 -19 4 -37 9 -40 5 -3 7 -15 4 -26 -7 -28 -59 -28 -68 0 -3 11 -12 20 -18 20 -24 1 -59 38 -62 65 -3 27 -3 27 42 21 25 -3 56 -6 69 -6z m3253 -13 c9 -8 29 -17 44 -21 32 -8 47 -34 26 -47 -19 -11 -129 0 -155 17 -28 17 -37 61 -15 68 26 8 82 -2 100 -17z m3666 13 c3 -6 -1 -7 -9 -4 -18 7 -21 14 -7 14 6 0 13 -4 16 -10z m2553 -8 c2 -7 -7 -12 -22 -12 -27 0 -35 15 -13 23 17 7 30 3 35 -11z m-11005 -45 c4 7 3 14 -3 18 -5 3 -10 11 -10 17 0 6 11 1 25 -12 13 -12 23 -26 21 -29 -2 -3 0 -33 5 -66 10 -71 4 -111 -21 -145 -23 -30 -32 -23 -32 26 0 21 -4 48 -9 61 -5 14 -5 23 1 23 6 0 9 21 8 48 -1 40 -2 42 -5 12 -6 -49 -19 -58 -27 -18 -4 19 -2 34 4 36 5 2 10 22 11 45 l1 42 12 -34 c7 -21 15 -30 19 -24z m2701 38 c3 -9 -1 -18 -10 -22 -19 -7 -26 0 -18 21 8 20 20 21 28 1z m950 -1 c4 -11 0 -15 -16 -12 -12 2 -23 9 -26 16 -6 18 35 15 42 -4z m244 4 c15 -15 16 -45 2 -53 -17 -10 -49 5 -55 25 -4 11 -3 24 0 30 8 14 38 13 53 -2z m1766 -19 c34 -40 33 -64 -4 -100 -31 -32 -37 -32 -106 -4 -26 11 -31 18 -32 52 -2 55 22 75 100 82 9 0 28 -13 42 -30z m2893 -1 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m-5334 1 c5 -18 11 -21 36 -16 23 5 31 3 31 -8 0 -14 -41 -42 -50 -34 -3 2 -6 -4 -8 -13 -2 -13 6 -18 35 -23 21 -3 61 -10 88 -15 28 -5 76 -12 108 -16 l57 -6 0 -71 0 -70 -51 6 c-35 4 -74 20 -120 47 -37 22 -72 40 -77 40 -5 0 -15 13 -22 30 -7 16 -22 40 -35 52 -26 27 -35 118 -11 118 7 0 16 -10 19 -21z m7591 5 c9 -8 16 -22 16 -29 0 -16 -27 -45 -41 -45 -16 0 -59 31 -59 43 0 17 32 47 51 47 10 0 25 -7 33 -16z m696 -32 c0 -24 -34 -90 -54 -104 -16 -11 -54 -10 -77 3 -19 10 -19 12 -5 28 9 10 34 27 56 37 31 15 41 26 46 52 5 26 9 30 20 21 8 -6 14 -23 14 -37z m1326 22 c11 -16 11 -24 -1 -47 -7 -15 -11 -27 -7 -27 3 0 1 -5 -5 -11 -8 -8 -18 -6 -38 7 -22 15 -26 22 -21 48 6 31 32 59 50 53 5 -2 15 -12 22 -23z m-1897 -5 c-16 -10 -23 -4 -14 10 3 6 11 8 17 5 6 -4 5 -9 -3 -15z m126 11 c3 -5 -1 -10 -10 -10 -9 0 -13 5 -10 10 3 6 8 10 10 10 2 0 7 -4 10 -10z m-10102 -35 c22 -26 26 -40 21 -61 -4 -14 -15 -29 -25 -31 -11 -3 -19 -10 -19 -15 0 -11 -53 24 -97 66 -57 52 -43 73 47 74 39 0 49 -4 73 -33z m2011 -1 c112 -23 142 -71 105 -168 -17 -46 -19 -60 -9 -66 7 -4 10 -15 7 -25 -8 -20 -27 -10 -27 15 0 13 -10 21 -32 25 -17 4 -52 26 -77 50 -25 23 -60 50 -78 59 -55 28 -71 88 -33 126 16 16 24 18 47 9 15 -6 59 -17 97 -25z m2300 15 c31 -25 32 -33 5 -60 -17 -17 -28 -20 -57 -14 -21 4 -46 9 -57 10 -11 1 -21 3 -23 4 -6 2 89 81 97 81 5 0 20 -9 35 -21z m3266 -15 c0 -8 -10 -14 -25 -14 -28 0 -29 3 -14 31 8 16 13 18 25 8 8 -6 14 -18 14 -25z m3860 26 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m-10627 -57 c44 -72 38 -83 -49 -83 l-63 0 -14 48 c-18 62 -1 91 54 92 33 0 39 -5 72 -57z m769 32 c6 -9 23 -15 44 -15 28 0 35 -4 32 -17 -3 -19 -69 -56 -78 -44 -3 3 -22 15 -42 25 -31 16 -38 25 -38 49 0 29 1 29 37 24 20 -4 41 -13 45 -22z m1601 -1 c16 -9 42 -27 56 -40 14 -13 30 -24 35 -24 4 0 3 -7 -4 -15 -7 -8 -24 -15 -39 -14 l-26 1 25 8 c31 10 23 12 -67 14 -52 1 -73 -3 -73 -11 0 -7 7 -10 15 -7 8 4 15 1 15 -5 0 -18 -30 -13 -36 7 -4 9 -13 32 -21 50 -12 27 -12 36 -2 49 15 18 73 12 122 -13z m938 13 c-1 -12 -15 -9 -19 4 -3 6 1 10 8 8 6 -3 11 -8 11 -12z m3223 7 c10 -4 16 -18 16 -40 0 -29 -3 -34 -24 -34 -28 0 -48 21 -52 55 -2 20 2 25 21 25 13 0 30 -3 39 -6z m3970 -19 c3 -8 1 -15 -4 -15 -6 0 -10 7 -10 15 0 8 2 15 4 15 2 0 6 -7 10 -15z m1321 5 c7 -12 -12 -50 -25 -50 -11 0 -14 43 -3 53 9 10 21 9 28 -3z m-5585 -18 c16 -7 20 -25 8 -37 -4 -4 -23 -7 -43 -7 -41 0 -84 30 -63 44 15 9 77 9 98 0z m2947 2 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-9027 -14 c0 -5 0 -13 0 -17 0 -5 -11 -9 -25 -10 -27 -2 -32 6 -13 25 15 15 38 16 38 2z m2613 -24 c31 -17 42 -29 42 -47 0 -20 -6 -25 -33 -27 -19 -2 -44 4 -57 12 -14 9 -35 16 -47 16 -13 1 -36 11 -52 25 -26 21 -28 26 -16 40 19 23 107 13 163 -19z m1521 19 c3 -9 0 -15 -9 -15 -9 0 -12 6 -9 15 4 8 7 15 9 15 2 0 5 -7 9 -15z m1746 6 c0 -17 -18 -21 -24 -6 -3 9 0 15 9 15 8 0 15 -4 15 -9z m2576 -3 c9 -14 -27 -41 -38 -30 -12 12 1 42 17 42 8 0 17 -5 21 -12z m-10108 -21 c2 -10 -3 -17 -12 -17 -10 0 -16 9 -16 21 0 24 23 21 28 -4z m5636 -12 c31 -20 35 -61 9 -81 -25 -18 -94 -17 -121 2 -28 19 -28 44 0 79 17 22 27 26 54 22 18 -3 44 -13 58 -22z m550 -6 c10 -9 -3 -24 -58 -67 -33 -25 -70 -21 -98 10 -36 41 18 82 97 73 28 -4 54 -10 59 -16z m3630 15 c23 -9 20 -40 -6 -58 -31 -22 -55 -20 -68 4 -13 24 -6 38 24 50 27 11 31 11 50 4z m-8980 -44 c26 -39 33 -88 20 -137 -8 -29 -18 -29 -58 2 -29 22 -33 31 -35 74 -2 57 12 101 32 101 8 0 26 -18 41 -40z m4349 34 c10 -10 -22 -36 -40 -32 -15 3 -15 4 1 21 18 18 29 21 39 11z m-4253 -14 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m2597 4 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m38 -4 c3 -5 -1 -10 -9 -10 -9 0 -16 5 -16 10 0 6 4 10 9 10 6 0 13 -4 16 -10z m7839 -6 c10 -26 7 -44 -9 -44 -21 0 -37 34 -23 48 16 16 25 15 32 -4z m1280 7 c3 -5 -1 -14 -9 -21 -13 -10 -15 -9 -15 9 0 21 14 28 24 12z m-12768 -16 c17 -16 11 -68 -9 -93 -5 -7 -14 -36 -18 -65 -5 -31 -16 -57 -26 -65 -17 -12 -18 -7 -21 77 -2 80 0 94 20 125 26 40 33 43 54 21z m1974 11 c0 -2 -9 -6 -20 -9 -11 -3 -18 -1 -14 4 5 9 34 13 34 5z m7760 -25 c0 -21 -6 -30 -22 -34 -27 -7 -68 2 -68 14 0 18 41 49 65 49 21 0 25 -5 25 -29z m317 23 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m2373 -7 c9 -7 22 -31 29 -54 8 -24 18 -43 23 -43 13 0 9 -27 -6 -40 -12 -9 -21 -7 -45 11 -28 21 -31 28 -31 81 0 60 4 66 30 45z m1287 -24 c-3 -10 -5 -4 -5 12 0 17 2 24 5 18 2 -7 2 -21 0 -30z m-12497 3 c8 -7 32 -21 53 -31 20 -11 37 -23 37 -27 0 -5 6 -8 13 -8 19 0 57 -72 57 -109 0 -17 5 -31 10 -31 14 0 31 -46 24 -65 -9 -21 -42 -19 -56 5 -7 11 -23 20 -35 20 -12 0 -27 9 -33 20 -6 11 -16 20 -23 20 -7 0 -21 14 -31 31 -10 17 -32 39 -48 49 -40 24 -68 68 -68 107 0 25 5 32 23 36 27 5 57 -2 77 -17z m2400 14 c0 -5 -7 -10 -15 -10 -8 0 -15 -4 -15 -8 0 -8 33 -25 107 -52 25 -9 34 -20 39 -45 3 -19 3 -38 -1 -44 -11 -19 -50 -12 -100 20 -27 17 -59 35 -72 40 -32 12 -30 47 5 81 28 27 52 36 52 18z m465 0 c-3 -5 -10 -10 -16 -10 -5 0 -9 5 -9 10 0 6 7 10 16 10 8 0 12 -4 9 -10z m2550 -4 c36 2 45 -2 51 -18 7 -24 7 -25 -37 -33 -30 -6 -41 -2 -65 19 -24 22 -27 27 -14 35 8 6 16 7 17 3 2 -4 23 -6 48 -6z m368 -6 c35 -28 41 -53 22 -90 -18 -35 -16 -34 -59 -16 -62 26 -93 109 -43 119 44 8 55 7 80 -13z m5667 10 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m1077 -27 c-3 -10 -5 -4 -5 12 0 17 2 24 5 18 2 -7 2 -21 0 -30z m-6213 5 c12 -20 -16 -58 -44 -58 -18 0 -32 42 -23 67 7 19 53 12 67 -9z m1814 6 c41 -35 3 -81 -59 -72 -34 5 -50 53 -23 73 25 19 59 19 82 -1z m2527 -4 c7 -22 -2 -60 -14 -60 -5 0 -20 12 -35 27 -26 25 -26 28 -10 40 26 19 52 16 59 -7z m-7907 -14 c4 -17 -1 -18 -38 -13 -49 6 -60 14 -40 28 25 16 74 6 78 -15z m762 9 c0 -20 -50 -32 -60 -14 -13 19 -2 29 31 29 19 0 29 -5 29 -15z m191 5 c10 -6 19 -21 19 -35 0 -18 -7 -25 -30 -30 -40 -9 -52 1 -46 38 2 18 5 33 5 35 2 6 34 1 52 -8z m2352 -10 c4 -16 0 -20 -17 -20 -28 0 -36 8 -29 26 8 21 40 17 46 -6z m-5322 -17 c-8 -15 -10 -15 -11 -2 0 17 10 32 18 25 2 -3 -1 -13 -7 -23z m2056 5 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m10193 18 c0 -11 -19 -15 -25 -6 -3 5 1 10 9 10 9 0 16 -2 16 -4z m-12611 -24 c-11 -7 -17 -17 -14 -22 3 -4 -1 -11 -7 -14 -7 -3 -4 -5 7 -5 43 2 55 -2 55 -19 0 -9 9 -23 20 -30 18 -11 22 -9 32 14 13 28 19 28 102 -3 77 -28 98 -54 94 -116 -3 -43 -6 -52 -23 -54 -16 -1 -16 -1 -2 3 9 3 17 10 17 15 0 8 -18 10 -109 13 -13 1 -26 8 -29 16 -3 8 -19 31 -36 50 l-32 36 -57 -12 c-62 -12 -72 -7 -63 31 5 18 11 22 28 17 14 -3 19 -2 14 6 -4 7 -13 12 -21 12 -7 0 -16 6 -18 13 -3 6 -6 2 -6 -10 -1 -32 -15 -28 -28 7 -11 29 -10 30 18 30 18 0 28 4 24 10 -3 6 -24 10 -46 10 -21 0 -39 4 -39 10 0 6 29 9 69 8 61 -2 67 -4 50 -16z m2460 -33 c-21 -13 -29 -11 -29 9 0 14 2 15 10 2 7 -12 10 -8 11 15 0 29 1 30 12 7 8 -19 8 -25 -4 -33z m43 16 c-2 -14 -8 -25 -13 -25 -10 0 -11 7 -3 37 8 31 23 20 16 -12z m2370 19 c24 -13 28 -18 17 -26 -10 -6 -3 -7 21 -3 26 5 31 4 20 -4 -8 -6 -33 -11 -55 -12 -29 0 -35 -2 -21 -8 19 -7 19 -8 -2 -13 -12 -4 -20 -2 -16 3 3 5 -2 12 -10 15 -10 4 -16 18 -16 35 0 34 16 37 62 13z m7708 -17 c0 -5 -4 -5 -10 -2 -5 3 -10 14 -10 23 0 15 2 15 10 2 5 -8 10 -19 10 -23z m-12188 -9 c-9 -9 -12 -7 -12 12 0 19 3 21 12 12 9 -9 9 -15 0 -24z m540 4 c36 -21 54 -94 26 -105 -15 -5 -94 37 -120 64 -21 21 -24 55 -5 62 18 8 68 -3 99 -21z m6632 6 c9 -36 8 -38 -28 -38 -61 0 -96 11 -96 31 0 19 19 25 81 28 30 1 38 -3 43 -21z m1680 -21 c-15 -9 -44 7 -44 23 0 16 35 16 47 0 9 -12 8 -17 -3 -23z m-5554 20 c0 -8 -9 -22 -21 -33 -20 -18 -21 -18 -35 0 -10 14 -11 23 -3 33 15 17 59 17 59 0z m5330 -11 c0 -22 -4 -24 -32 -21 -63 8 -60 44 5 45 22 0 27 -4 27 -24z m-10510 5 c0 -5 10 -12 23 -15 12 -4 41 -30 65 -58 41 -51 42 -53 42 -130 0 -43 7 -97 15 -123 19 -55 11 -75 -17 -45 -12 12 -36 29 -54 36 -19 8 -34 21 -34 29 0 8 -9 19 -20 25 -31 16 -52 66 -62 148 -10 81 2 142 28 142 8 0 14 -4 14 -9z m2914 0 c3 -5 -1 -11 -9 -15 -9 -3 -15 0 -15 9 0 16 16 20 24 6z m7351 -2 c4 -6 4 -13 0 -17 -4 -4 -10 -2 -12 5 -2 7 -11 9 -19 6 -8 -3 -14 0 -14 6 0 14 37 14 45 0z m-10135 -9 c12 -8 9 -10 -12 -10 -16 0 -28 5 -28 10 0 13 20 13 40 0z m4340 0 c8 -5 11 -10 6 -10 -5 0 -3 -7 5 -16 10 -12 24 -14 58 -10 39 4 42 4 16 -4 -34 -11 -117 -3 -127 13 -8 14 1 37 16 37 6 0 18 -5 26 -10z m2240 -10 c0 -11 -4 -20 -9 -20 -11 0 -22 26 -14 34 12 12 23 5 23 -14z m1170 0 c3 -3 28 -17 55 -31 51 -26 68 -56 43 -76 -26 -22 -108 -20 -108 2 0 8 -5 15 -11 15 -5 0 -7 5 -4 10 3 6 -1 10 -9 10 -12 0 -16 10 -16 38 0 21 3 41 6 45 6 6 35 -2 44 -13z m-6938 -22 c31 -37 34 -54 13 -82 -14 -18 -15 -18 -34 5 -20 23 -30 109 -14 109 4 0 20 -15 35 -32z m1139 19 c-6 -8 -8 -17 -4 -20 3 -4 -3 -7 -15 -7 -15 0 -20 6 -19 20 1 14 8 20 25 20 19 0 22 -3 13 -13z m3317 -16 c7 -9 12 -29 10 -46 -3 -30 -3 -30 -73 -33 -109 -4 -158 34 -94 72 63 37 131 40 157 7z m-5831 2 c4 -10 21 -32 39 -48 20 -19 38 -51 48 -84 16 -56 22 -186 8 -195 -4 -2 -26 8 -49 22 -43 28 -50 47 -44 119 1 12 -8 41 -20 64 -14 28 -20 55 -17 80 2 25 0 35 -6 29 -12 -12 -36 -13 -36 -2 0 10 38 30 58 31 7 1 16 -7 19 -16z m4231 -2 c20 -10 52 -22 71 -26 18 -4 43 -15 55 -25 11 -10 31 -27 44 -37 12 -10 24 -29 27 -42 4 -23 3 -23 -53 -18 -81 8 -179 33 -207 51 -29 19 -33 60 -9 94 18 27 25 27 72 3z m722 9 c8 -5 11 -10 5 -10 -5 0 -17 5 -25 10 -8 5 -10 10 -5 10 6 0 17 -5 25 -10z m3204 -6 c18 -17 20 -32 7 -53 -8 -12 -13 -12 -35 3 -29 19 -30 20 -16 47 13 23 24 24 44 3z m-7094 -8 c0 -7 12 -16 28 -19 31 -6 54 -55 56 -122 1 -53 -24 -55 -39 -3 -5 20 -16 43 -23 50 -6 6 -12 17 -12 24 0 10 -53 29 -72 25 -5 0 -8 4 -8 9 0 6 9 10 20 10 11 0 20 -4 20 -10 0 -5 7 -10 17 -10 15 0 15 1 0 18 -21 23 -22 42 -2 42 8 0 15 -6 15 -14z m1584 -1 c-4 -8 -10 -12 -15 -9 -14 8 -10 24 6 24 9 0 12 -6 9 -15z m4226 5 c0 -5 -7 -10 -16 -10 -8 0 -12 5 -9 10 3 6 10 10 16 10 5 0 9 -4 9 -10z m3660 3 c0 -8 -42 -23 -50 -18 -17 11 -1 25 25 23 14 -1 25 -3 25 -5z m8100 -8 c0 -8 -4 -15 -10 -15 -5 0 -10 7 -10 15 0 8 5 15 10 15 6 0 10 -7 10 -15z m-17650 -16 c0 -5 -7 -9 -15 -9 -15 0 -20 12 -9 23 8 8 24 -1 24 -14z m1710 11 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m346 -15 c18 -14 37 -25 42 -25 5 0 15 -7 22 -15 22 -26 -5 -45 -66 -45 -50 0 -55 2 -70 31 -13 26 -14 36 -3 55 16 31 34 30 75 -1z m10531 -1 c7 -18 -12 -34 -39 -34 -21 0 -24 20 -6 38 17 17 37 15 45 -4z m-10109 -25 c18 -10 49 -19 68 -19 42 0 68 -12 112 -53 39 -37 41 -63 6 -71 l-25 -7 37 -33 c32 -29 35 -35 25 -54 -6 -12 -16 -22 -21 -22 -6 0 -10 -10 -10 -22 0 -19 -2 -20 -17 -7 -10 8 -36 21 -58 28 -51 17 -80 48 -80 86 0 26 -4 30 -30 31 -37 2 -93 25 -122 51 -18 16 -23 31 -23 66 0 44 1 46 33 50 41 5 64 -1 105 -24z m1873 21 c29 -16 23 -28 -17 -36 -28 -5 -39 -2 -54 14 -18 19 -18 21 -2 25 31 8 53 7 73 -3z m866 -5 c20 -8 33 -18 30 -22 -4 -3 -13 0 -21 6 -12 10 -18 9 -32 -7 -18 -21 -49 -19 -58 5 -14 35 21 43 81 18z m3663 -5 c-12 -23 -50 -26 -83 -8 l-22 12 25 7 c14 4 40 7 58 8 30 1 32 -1 22 -19z m160 12 c24 -11 22 -32 -2 -33 -13 -1 -34 -3 -48 -4 -28 -3 -50 11 -50 31 0 15 71 19 100 6z m-7360 -12 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m1970 -5 c23 -8 57 -15 76 -15 41 0 64 -29 64 -82 0 -31 -5 -40 -22 -47 -30 -11 -100 -2 -113 14 -5 7 -22 15 -37 19 -44 10 -81 50 -72 78 7 24 32 47 50 48 6 0 31 -7 54 -15z m4050 5 c0 -5 -2 -10 -4 -10 -2 0 -12 -3 -20 -6 -12 -5 -15 -2 -10 10 7 17 34 22 34 6z m95 -8 c-3 -3 -11 0 -18 7 -9 10 -8 11 6 5 10 -3 15 -9 12 -12z m2323 0 c3 -10 -4 -13 -24 -10 -15 2 -29 9 -32 16 -3 10 4 13 24 10 15 -2 29 -9 32 -16z m892 5 c31 -24 50 -62 50 -100 0 -45 -17 -65 -67 -79 -30 -8 -40 -7 -62 10 -32 24 -35 38 -21 106 8 38 17 56 33 64 29 14 49 14 67 -1z m513 -8 c20 -28 10 -59 -18 -59 -26 0 -36 25 -24 58 10 28 24 28 42 1z m-8698 1 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m9929 -6 c20 -20 20 -39 0 -73 -16 -27 -63 -56 -73 -45 -3 3 -6 30 -6 60 0 38 5 58 15 64 22 14 47 12 64 -6z m-11296 -20 c12 -2 22 -11 22 -20 0 -9 9 -18 20 -21 11 -3 24 -20 31 -42 7 -20 16 -39 21 -42 5 -3 2 -12 -7 -19 -13 -11 -15 -10 -9 4 5 12 0 16 -19 16 -40 0 -69 18 -98 58 -24 36 -28 37 -73 34 -46 -4 -47 -4 -34 17 13 22 38 29 38 11 0 -5 5 -10 10 -10 6 0 9 3 9 8 -1 4 -1 10 0 13 1 5 45 2 89 -7z m4134 -57 c10 -12 18 -30 18 -39 0 -44 -130 -64 -210 -32 -33 13 -40 21 -40 43 0 33 15 53 58 79 l34 20 61 -24 c34 -14 70 -34 79 -47z m412 36 c37 -36 55 -95 35 -119 -17 -20 -115 -18 -159 4 -70 35 -63 106 13 134 57 20 71 18 111 -19z m667 16 c13 -21 11 -34 -9 -60 -15 -18 -29 -23 -71 -23 -61 -1 -81 17 -81 72 l0 35 76 -5 c50 -3 79 -10 85 -19z m4496 -1 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m1118 -27 c-9 -40 -22 -40 -30 0 -5 22 -3 34 6 40 21 13 32 -6 24 -40z m-12240 -4 c9 -40 31 -84 56 -110 23 -25 25 -70 4 -87 -12 -10 -23 -4 -61 32 -46 44 -47 46 -50 111 -2 50 1 71 12 82 20 20 31 12 39 -28z m485 23 c7 -13 21 -20 40 -20 24 0 30 -4 30 -21 0 -12 8 -23 19 -26 10 -2 24 -14 30 -26 7 -12 28 -33 46 -47 42 -30 43 -37 8 -51 -16 -6 -37 -16 -48 -21 -13 -8 -20 -7 -23 1 -2 6 -14 11 -26 11 -36 0 -101 54 -125 103 -22 45 -21 67 7 100 20 22 29 22 42 -3z m4550 -12 c14 -17 31 -38 38 -45 22 -21 8 -39 -42 -53 -37 -10 -55 -10 -91 0 -44 12 -45 14 -45 53 0 54 22 77 74 77 34 0 45 -6 66 -32z m145 13 c-8 -13 -35 -15 -35 -2 0 5 8 11 18 13 21 5 26 2 17 -11z m1743 7 c17 -17 15 -28 -7 -28 -10 0 -21 9 -24 20 -6 22 12 27 31 8z m1487 -11 c27 -4 27 -5 -4 -3 -21 0 -36 7 -38 16 -3 10 -2 11 4 3 4 -6 22 -13 38 -16z m9141 -14 c-11 -11 -19 6 -11 24 8 17 8 17 12 0 3 -10 2 -21 -1 -24z m-10511 17 c3 -6 -1 -7 -9 -4 -10 4 -16 1 -16 -7 0 -7 -3 -10 -6 -6 -7 7 4 27 16 27 5 0 12 -4 15 -10z m2346 -7 c0 -10 2 -26 4 -35 3 -15 -5 -18 -51 -18 -30 0 -54 4 -54 10 0 11 69 59 88 59 6 1 12 -7 13 -16z m2625 9 c28 -19 32 -45 12 -91 -28 -64 -40 -74 -77 -66 -17 4 -31 13 -31 21 0 8 -4 14 -10 14 -14 0 -12 32 4 70 19 46 72 73 102 52z m-9072 -37 c88 -20 100 -27 116 -65 21 -50 3 -57 -138 -52 -62 2 -64 3 -123 59 -54 51 -58 58 -44 73 17 19 53 16 189 -15z m-1934 5 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m712 -21 c15 -10 34 -19 43 -19 8 0 15 -5 15 -11 0 -8 12 -10 35 -6 19 3 35 2 35 -4 0 -5 -8 -9 -17 -9 -10 0 -24 -4 -32 -9 -11 -7 -9 -14 14 -35 15 -14 25 -29 22 -32 -10 -10 -76 -10 -76 -1 0 9 -52 57 -62 57 -3 0 -12 11 -19 25 -7 14 -21 25 -31 25 -24 0 -33 18 -19 35 15 18 54 11 92 -16z m4438 16 c0 -15 -46 -32 -57 -22 -3 4 -3 13 0 22 8 20 57 20 57 0z m-2237 -21 c15 -8 27 -19 27 -24 0 -6 11 -16 25 -22 18 -8 25 -19 25 -39 0 -18 7 -32 20 -39 11 -6 20 -8 20 -5 0 4 7 -1 16 -9 21 -21 12 -31 -44 -51 -26 -9 -55 -21 -64 -26 -26 -13 -28 -12 -28 17 0 20 -4 25 -16 20 -26 -10 -64 4 -64 25 0 15 7 19 40 19 27 0 40 4 40 14 0 13 -29 44 -37 39 -14 -11 -45 2 -63 27 -20 28 -20 31 -4 55 14 22 22 25 48 19 17 -3 43 -13 59 -20z m5027 7 c0 -10 -9 -21 -20 -24 -23 -6 -24 -3 -8 23 16 25 28 26 28 1z m1638 -16 c2 -27 -3 -33 -43 -52 -56 -29 -80 -29 -99 -1 -12 17 -13 25 -3 36 25 31 72 52 107 50 31 -3 35 -6 38 -33z m-10313 -9 c19 -19 35 -38 35 -43 0 -5 8 -18 18 -29 61 -67 62 -70 62 -193 0 -135 -8 -156 -43 -123 -13 12 -29 22 -35 22 -7 0 -12 6 -12 13 0 6 -20 25 -44 40 -60 37 -73 75 -76 212 -3 142 -5 135 30 135 20 0 41 -11 65 -34z m8523 22 c7 -7 12 -20 12 -29 0 -14 -16 -18 -98 -23 -112 -8 -148 -2 -155 24 -5 20 15 26 123 33 95 7 106 7 118 -5z m-9095 -20 c12 -6 38 -24 57 -40 19 -15 39 -28 44 -28 13 0 32 -27 66 -92 22 -43 32 -78 37 -133 l6 -75 -54 23 c-30 12 -60 30 -67 40 -7 9 -24 17 -36 17 -27 0 -41 14 -50 53 -4 15 -15 36 -25 46 -11 11 -22 28 -26 40 -3 12 -11 21 -16 21 -5 0 -9 32 -9 70 0 68 1 70 26 70 14 0 35 -5 47 -12z m237 -4 c0 -8 -4 -12 -10 -9 -5 3 -10 10 -10 16 0 5 5 9 10 9 6 0 10 -7 10 -16z m908 -44 c-4 -53 -29 -75 -53 -45 -8 11 -13 28 -11 38 2 9 0 15 -5 11 -5 -3 -9 2 -9 11 0 18 61 48 73 36 5 -5 7 -28 5 -51z m159 28 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m313 17 c0 -16 -27 -32 -37 -21 -7 7 16 36 28 36 5 0 9 -7 9 -15z m500 5 c0 -5 -8 -10 -17 -10 -15 0 -16 2 -3 10 19 12 20 12 20 0z m371 -16 c25 -24 29 -35 29 -86 0 -55 -1 -58 -24 -58 -13 0 -44 16 -68 36 -23 20 -53 41 -66 47 -23 11 -38 47 -29 70 3 9 26 14 67 16 56 2 66 -1 91 -25z m2079 11 c11 -13 9 -19 -10 -35 -13 -11 -33 -20 -46 -20 -24 0 -49 32 -41 53 7 19 82 20 97 2z m13272 -7 c-7 -7 -12 -8 -12 -2 0 14 12 26 19 19 2 -3 -1 -11 -7 -17z m-5262 2 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-13103 -32 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m9053 7 c0 -8 -8 -15 -17 -15 -15 0 -16 -2 -3 -10 11 -7 3 -10 -30 -10 -49 0 -72 13 -63 36 8 21 113 19 113 -1z m-4816 -11 c10 -27 7 -84 -5 -84 -24 0 -129 53 -129 66 0 21 31 33 81 34 34 0 49 -4 53 -16z m4506 1 c-7 -9 -16 -12 -19 -8 -4 4 -10 11 -15 16 -5 4 3 7 19 7 24 0 26 -2 15 -15z m4588 -8 c5 -26 -25 -67 -48 -67 -11 0 -20 5 -20 10 0 6 -7 10 -15 10 -18 0 -18 5 -4 31 20 38 81 49 87 16z m-11579 4 c18 -11 16 -91 -1 -102 -19 -12 -26 1 -30 59 -3 52 3 61 31 43z m2651 -6 c0 -9 12 -18 30 -21 16 -4 35 -13 41 -20 6 -8 17 -14 25 -14 7 0 25 -5 39 -12 23 -10 25 -16 25 -79 0 -73 -11 -91 -39 -65 -17 16 -20 16 -36 0 -14 -14 -21 -15 -36 -6 -10 6 -36 15 -59 18 -30 5 -40 11 -40 25 0 10 -9 23 -20 29 -16 9 -20 21 -20 66 0 46 4 59 23 75 27 23 67 25 67 4z m810 -2 c63 -43 55 -63 -25 -63 -70 0 -72 3 -37 58 17 26 29 28 62 5z m436 -31 c22 -42 23 -45 6 -70 -22 -35 -35 -48 -47 -47 -21 2 -60 18 -73 31 -7 8 -26 14 -42 14 -22 0 -30 7 -40 31 -24 57 20 91 114 87 59 -3 60 -3 82 -46z m3039 38 c16 -7 12 -8 -17 -7 -20 1 -34 5 -31 10 5 9 22 8 48 -3z m2255 -6 c0 -14 -3 -15 -17 -3 -10 7 -20 15 -22 16 -2 2 5 3 17 3 14 0 22 -6 22 -16z m674 1 c-4 -8 -10 -15 -16 -15 -5 0 -16 7 -24 15 -14 13 -12 15 15 15 23 0 29 -4 25 -15z m919 9 c3 -3 2 -14 -3 -23 -5 -9 -11 -24 -14 -35 -5 -14 -12 -17 -32 -12 -23 6 -24 5 -14 -14 15 -28 25 -25 60 13 27 29 29 30 30 11 0 -14 -8 -24 -22 -28 l-23 -6 25 -15 25 -14 -38 -1 c-78 0 -99 37 -49 87 15 15 26 31 25 35 -3 9 21 11 30 2z m-10593 -30 c0 -19 -14 -17 -34 5 -16 18 -16 18 9 14 14 -3 25 -12 25 -19z m355 16 c3 -5 2 -10 -4 -10 -5 0 -13 5 -16 10 -3 6 -2 10 4 10 5 0 13 -4 16 -10z m8412 -12 c47 -44 17 -94 -51 -82 -44 7 -56 17 -56 48 0 52 66 73 107 34z m-3179 -1 c8 0 12 -19 12 -59 0 -32 -2 -58 -4 -58 -18 0 -106 66 -106 79 0 34 30 54 65 44 11 -4 26 -6 33 -6z m849 -9 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-6115 -25 c85 -46 114 -92 85 -136 -15 -23 -18 -23 -94 -14 -83 9 -130 31 -157 72 -19 28 -21 68 -5 97 10 18 18 20 65 15 30 -3 76 -18 106 -34z m560 15 c-1 -9 7 -22 18 -28 26 -14 26 -36 0 -43 -16 -4 -20 0 -20 20 0 20 -4 24 -20 20 -17 -4 -20 0 -20 25 0 25 3 29 23 26 14 -2 21 -9 19 -20z m1208 12 c12 -7 11 -12 -5 -30 -18 -20 -18 -21 3 -42 16 -17 32 -21 71 -19 34 1 64 -5 90 -19 33 -16 40 -26 46 -60 4 -26 12 -40 22 -40 13 0 14 -9 8 -57 -4 -32 -8 -59 -10 -61 -2 -2 -14 7 -28 20 -14 13 -32 28 -39 34 -8 7 -25 24 -37 40 l-21 27 -21 -21 c-11 -12 -26 -22 -34 -22 -8 0 -15 -9 -15 -20 0 -14 7 -20 23 -20 12 0 41 -18 65 -40 23 -22 45 -40 48 -40 3 0 12 -7 20 -15 8 -8 23 -19 32 -24 14 -8 17 -25 16 -106 -1 -52 -4 -98 -7 -102 -4 -3 -24 2 -46 11 -21 10 -52 16 -67 14 -16 -3 -23 -3 -16 -1 11 4 10 9 -4 24 -9 10 -22 19 -28 19 -19 0 -99 97 -117 142 -10 24 -18 69 -18 101 -1 51 1 57 19 57 25 0 25 1 -5 58 -31 59 -33 122 -4 168 21 35 34 40 59 24z m4648 1 c-67 -10 -71 -21 -8 -21 67 0 62 -5 -12 -14 -52 -6 -58 -4 -58 12 0 26 2 27 67 29 l58 1 -47 -7z m72 -6 c-7 -9 -15 -13 -17 -11 -7 7 7 26 19 26 6 0 6 -6 -2 -15z m-8571 -75 c18 -59 22 -91 17 -127 -11 -73 -15 -83 -39 -83 -54 1 -84 53 -92 163 -9 102 3 127 60 127 31 0 32 -2 54 -80z m3014 51 c43 -23 93 -71 102 -99 13 -43 47 -69 98 -74 31 -4 53 -12 62 -24 17 -23 19 -68 4 -96 -10 -18 -17 -20 -62 -14 -34 5 -62 17 -86 37 -19 16 -41 29 -48 29 -7 0 -13 5 -13 10 0 16 -37 12 -44 -5 -3 -8 -2 -15 2 -15 4 0 7 -21 7 -47 l0 -48 51 3 c43 3 59 -1 94 -25 24 -15 50 -32 59 -38 41 -26 81 -57 81 -63 0 -4 -4 -13 -9 -21 -14 -21 -58 1 -63 31 -5 34 -33 34 -47 0 -7 -16 -11 -35 -9 -43 2 -10 -7 -14 -37 -13 -71 2 -121 22 -169 69 -50 48 -57 74 -26 105 23 23 27 70 6 70 -23 0 -30 20 -12 38 12 12 19 13 27 5 6 -6 18 -9 25 -6 19 7 17 40 -3 52 -14 8 -15 12 -4 25 7 9 20 16 27 16 8 0 14 5 14 10 0 6 0 13 1 18 0 4 -21 12 -48 17 l-48 11 -3 56 c-3 53 -2 56 18 51 11 -3 35 -13 53 -22z m4652 -2 c0 -34 -29 -31 -33 3 -3 21 1 26 15 24 12 -2 18 -11 18 -27z m2588 24 c-36 -5 -44 -19 -15 -26 9 -2 7 -3 -5 -2 -12 1 -24 -4 -27 -11 -3 -8 -1 -14 4 -14 6 0 10 -7 10 -16 0 -14 -3 -14 -15 -4 -34 29 -2 81 49 78 l31 -1 -32 -4z m1539 -42 c4 -24 13 -50 20 -58 10 -13 14 -12 26 4 13 17 14 17 28 -1 16 -23 19 -72 4 -81 -13 -8 -77 14 -112 39 -15 11 -35 35 -44 54 l-17 36 32 28 c18 16 38 27 44 25 7 -2 15 -23 19 -46z m1098 -27 c0 -30 -35 -84 -61 -95 -49 -20 -62 -7 -57 55 2 30 11 61 19 70 8 8 20 23 28 31 12 15 16 13 42 -16 16 -18 29 -38 29 -45z m-11165 56 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m4115 -8 c24 -20 22 -49 -6 -77 -21 -21 -25 -20 -79 21 l-48 37 24 18 c31 24 81 24 109 1z m1210 2 c0 -2 -7 -4 -15 -4 -8 0 -15 4 -15 10 0 5 7 7 15 4 8 -4 15 -8 15 -10z m3257 -16 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m7808 12 c-3 -5 -11 -10 -16 -10 -6 0 -7 5 -4 10 3 6 11 10 16 10 6 0 7 -4 4 -10z m-16409 -46 c6 -25 1 -38 -17 -40 -5 -1 -11 -3 -14 -4 -25 -12 -55 3 -55 28 0 9 10 26 21 38 26 28 55 18 65 -22z m637 22 c26 -1 47 -4 47 -8 0 -11 50 -58 61 -58 6 0 7 -4 4 -10 -3 -5 0 -8 7 -5 7 2 21 -7 31 -21 20 -27 13 -70 -14 -87 -20 -13 -86 18 -117 55 -13 16 -32 28 -42 28 -10 0 -21 8 -24 18 -4 10 -22 31 -41 46 -48 39 -47 61 3 51 20 -5 58 -9 85 -9z m3901 5 c3 -4 -6 -19 -19 -31 l-25 -23 0 25 c0 30 31 51 44 29z m4981 -26 c0 -16 -5 -30 -12 -32 -14 -5 -28 40 -18 57 12 19 30 4 30 -25z m858 21 c8 -20 -2 -26 -42 -26 -30 1 -33 2 -18 11 9 6 15 14 12 20 -4 5 5 9 18 9 14 0 27 -6 30 -14z m5492 4 c-3 -5 -13 -10 -21 -10 -8 0 -14 5 -14 10 0 6 9 10 21 10 11 0 17 -4 14 -10z m-14047 -26 c29 -14 52 -30 52 -34 0 -5 20 -18 44 -29 49 -21 80 -60 49 -62 -10 0 -29 -2 -43 -3 -14 -1 -43 -3 -65 -4 l-40 -2 30 -20 c21 -14 47 -20 86 -20 55 0 57 -1 63 -31 12 -64 8 -88 -18 -95 -20 -5 -37 4 -81 40 -33 26 -67 46 -81 46 -24 0 -29 11 -25 58 1 13 -4 22 -12 22 -8 0 -20 7 -27 16 -8 8 -28 21 -46 29 -38 16 -53 53 -35 91 15 34 79 33 149 -2z m132 16 c0 -5 -4 -10 -9 -10 -6 0 -13 5 -16 10 -3 6 1 10 9 10 9 0 16 -4 16 -10z m2740 -17 c20 -26 20 -28 4 -40 -38 -28 -64 -11 -64 43 0 33 33 32 60 -3z m414 12 c3 -8 13 -15 21 -15 30 0 12 -35 -19 -38 -31 -4 -46 10 -46 46 0 26 34 31 44 7z m3158 -2 c5 -22 -17 -69 -26 -55 -3 6 -1 14 5 17 6 4 8 18 5 31 -4 13 -2 24 3 24 5 0 11 -8 13 -17z m318 1 c0 -2 -12 -4 -27 -4 -21 0 -24 3 -14 9 13 8 41 5 41 -5z m-2770 -8 c8 -1 16 -15 18 -29 3 -25 0 -27 -32 -27 -26 0 -38 6 -46 21 -17 30 -5 53 23 45 12 -4 29 -8 37 -10z m-2246 -21 c6 -11 19 -26 29 -33 38 -29 4 -106 -50 -110 -32 -2 -78 34 -93 74 -13 32 -2 82 19 88 37 10 84 1 95 -19z m-5654 -50 c0 -56 3 -65 18 -65 14 0 21 -14 31 -62 7 -35 14 -67 15 -73 2 -5 6 9 10 33 3 24 10 41 15 38 4 -3 5 -25 2 -48 -7 -48 -4 -78 9 -78 9 0 21 43 17 62 -2 7 1 3 7 -9 5 -13 13 -23 18 -23 4 0 8 -18 8 -40 0 -54 -20 -51 -21 3 -1 34 -2 37 -8 17 -4 -16 -15 -26 -29 -28 -17 -3 -21 -8 -17 -23 4 -11 2 -19 -4 -19 -6 0 -11 9 -11 20 0 11 -3 20 -7 20 -5 0 -30 20 -57 43 l-49 44 7 76 c6 70 5 77 -14 89 -22 14 -27 50 -7 66 10 9 34 17 60 21 4 0 7 -28 7 -64z m7608 20 c26 -24 60 -55 76 -68 l28 -23 -41 -27 c-50 -34 -96 -34 -135 -3 -28 24 -31 33 -40 129 -3 36 -2 37 31 37 27 0 44 -10 81 -45z m2636 21 c15 -24 15 -25 -16 -40 -41 -21 -52 -20 -84 7 -41 35 -27 57 35 57 41 0 51 -4 65 -24z m63 2 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-5010 -2 c-3 -7 0 -19 6 -25 20 -20 -18 -13 -41 8 -30 25 -28 31 9 31 22 0 30 -4 26 -14z m732 -8 c56 -35 71 -51 71 -74 0 -25 -13 -37 -59 -52 -32 -11 -35 -10 -77 30 -24 24 -44 48 -44 54 0 12 55 64 67 64 3 0 22 -10 42 -22z m4035 3 c16 -17 16 -20 1 -35 -9 -9 -26 -16 -37 -16 -17 0 -18 3 -8 15 7 8 17 12 22 9 6 -4 8 2 6 12 -2 10 -14 21 -28 25 l-25 7 26 1 c14 1 34 -7 43 -18z m616 10 c0 -11 -30 -19 -48 -14 -6 3 -10 9 -6 14 7 12 54 12 54 0z m2860 -6 c0 -8 -2 -15 -4 -15 -2 0 -6 7 -10 15 -3 8 -1 15 4 15 6 0 10 -7 10 -15z m750 -28 l0 -31 -22 21 c-18 18 -19 24 -9 37 18 22 31 11 31 -27z m-12710 -8 c0 -11 57 -69 68 -69 6 0 14 -9 17 -20 3 -11 10 -20 15 -20 14 0 110 -99 110 -113 -1 -23 -28 -49 -42 -41 -7 5 -24 10 -38 11 -24 3 -24 2 -7 -11 11 -8 24 -13 31 -10 7 3 22 -16 35 -44 20 -42 26 -48 47 -44 13 2 35 -3 49 -12 13 -9 30 -16 36 -16 25 0 158 -71 204 -109 38 -31 48 -47 50 -73 1 -18 8 -62 15 -98 10 -54 19 -71 48 -98 30 -27 34 -36 26 -50 -6 -9 -16 -17 -23 -16 -6 1 -22 2 -34 3 -17 1 -31 14 -51 51 -15 27 -31 52 -36 55 -16 10 -11 22 11 28 22 6 21 34 -1 29 -7 -2 -20 4 -30 13 -36 33 -212 115 -246 115 -19 0 -34 5 -34 11 0 14 -65 79 -79 79 -5 0 -30 14 -55 30 -30 21 -47 40 -51 60 -4 17 -10 30 -15 30 -4 0 -14 23 -21 50 -7 28 -19 50 -26 50 -8 0 -13 13 -13 39 0 23 -12 60 -30 94 -35 66 -37 80 -11 106 17 17 24 18 50 8 17 -6 31 -14 31 -18z m1487 5 c6 -15 126 -104 141 -104 17 0 31 -25 23 -39 -6 -10 -22 -11 -62 -6 -45 6 -61 15 -102 54 -26 25 -54 49 -62 54 -20 11 -19 47 0 47 8 0 15 4 15 9 0 14 41 0 47 -15z m2416 15 c-6 -6 -9 -19 -5 -27 5 -15 4 -15 -10 -2 -16 14 -16 16 0 28 20 15 30 16 15 1z m-549 -44 c31 -34 53 -47 91 -56 52 -12 85 -33 85 -55 0 -7 7 -20 17 -29 11 -11 18 -40 21 -90 4 -64 2 -75 -17 -94 -22 -22 -29 -61 -11 -61 6 0 10 -7 10 -15 0 -20 -17 -19 -29 2 -5 10 -13 14 -17 10 -4 -4 3 -31 15 -60 45 -103 61 -169 61 -259 0 -48 5 -90 10 -93 26 -16 -4 -85 -37 -85 -21 0 -27 -29 -10 -48 34 -38 26 -44 -58 -45 -71 -2 -80 -4 -80 -21 0 -16 9 -18 90 -20 84 -1 90 -2 103 -26 17 -32 10 -258 -10 -289 -11 -19 -10 -24 14 -46 29 -27 28 -47 -4 -100 -20 -34 -23 -62 -7 -67 17 -6 31 -119 17 -135 -15 -19 -71 -16 -90 5 -44 45 -55 50 -125 57 -56 5 -76 12 -93 30 l-21 23 20 40 c21 40 21 48 6 189 -4 34 -1 44 14 53 29 15 41 7 111 -75 48 -57 66 -72 76 -64 10 8 10 18 -2 52 -15 41 -14 42 11 61 29 21 20 36 -21 36 -12 0 -27 6 -33 14 -6 7 -30 16 -52 20 -26 4 -52 18 -73 39 -29 28 -35 43 -49 126 -9 52 -13 99 -9 105 4 6 7 29 7 50 0 34 5 42 32 59 37 21 68 16 76 -13 4 -17 14 -20 66 -20 53 0 61 2 61 19 0 20 -84 101 -105 101 -7 0 -15 -9 -18 -20 -8 -30 -67 -27 -97 5 -13 14 -25 34 -27 45 -2 17 3 20 32 20 37 0 43 6 22 24 -18 15 -60 365 -51 429 5 37 11 47 25 47 12 0 19 -7 19 -20 0 -31 107 -127 145 -129 13 -1 65 47 65 59 0 5 -12 13 -27 16 -16 4 -39 17 -53 30 -14 12 -51 33 -82 45 -49 18 -60 27 -76 63 -23 50 -36 160 -22 187 16 30 39 23 84 -26z m1526 36 c0 -15 63 -81 77 -81 7 0 13 -5 13 -11 0 -18 -20 -49 -33 -49 -7 0 -29 -14 -51 -30 -21 -16 -51 -32 -67 -35 -33 -8 -63 10 -55 32 3 7 1 13 -4 13 -26 0 5 142 34 162 16 11 86 10 86 -1z m560 -31 c0 -42 -14 -44 -51 -8 l-33 33 35 6 c44 7 49 4 49 -31z m2810 20 c0 -5 -5 -12 -11 -16 -12 -7 -31 15 -23 28 6 9 34 -1 34 -12z m1675 12 c6 -4 16 -15 24 -25 13 -17 11 -17 -30 -11 -52 8 -53 9 -46 29 7 16 35 20 52 7z m2020 -10 c-3 -3 -11 0 -18 7 -9 10 -8 11 6 5 10 -3 15 -9 12 -12z m-13011 -7 c3 -8 11 -15 17 -15 20 0 79 -50 79 -67 0 -9 7 -21 15 -27 9 -7 15 -34 17 -76 3 -64 2 -65 -24 -68 -20 -2 -32 5 -53 32 -28 37 -58 123 -58 169 0 16 -5 27 -13 27 -15 0 -19 22 -7 33 10 11 20 8 27 -8z m546 4 c0 -7 18 -31 39 -54 43 -47 82 -116 101 -182 10 -34 19 -43 41 -48 20 -5 29 -13 29 -26 0 -11 5 -28 12 -38 9 -15 9 -25 0 -45 -15 -34 -38 -33 -50 2 -7 20 -20 30 -53 40 -61 19 -86 36 -93 69 -4 15 -19 55 -35 88 -15 33 -36 85 -46 117 -15 48 -16 58 -4 72 16 18 59 21 59 5z m836 -14 c18 -14 37 -25 42 -25 15 0 22 -38 22 -122 0 -70 2 -78 19 -78 12 0 20 -9 23 -25 3 -14 2 -25 -3 -25 -21 0 -39 14 -39 30 0 18 -52 36 -71 24 -5 -3 -9 0 -9 6 0 6 -11 28 -24 49 -23 36 -30 82 -27 169 1 29 26 28 67 -3z m1289 15 c-3 -5 -10 -10 -16 -10 -5 0 -9 5 -9 10 0 6 7 10 16 10 8 0 12 -4 9 -10z m2022 -52 c-2 -13 -4 -3 -4 22 0 25 2 35 4 23 2 -13 2 -33 0 -45z m20 0 c-2 -13 -4 -3 -4 22 0 25 2 35 4 23 2 -13 2 -33 0 -45z m1403 18 c0 -34 -48 -47 -71 -20 -11 13 -10 17 4 25 9 6 17 17 17 25 0 12 4 12 25 -2 14 -9 25 -22 25 -28z m6345 19 c37 -22 44 -31 49 -70 4 -24 4 -60 0 -80 -9 -50 -39 -55 -112 -18 -55 28 -57 31 -60 73 -3 39 1 47 35 81 21 21 39 38 41 39 2 0 23 -11 47 -25z m-2990 5 c3 -5 -3 -10 -14 -10 -12 0 -21 5 -21 10 0 6 6 10 14 10 8 0 18 -4 21 -10z m2481 -18 c-8 -9 -18 -13 -22 -10 -8 9 19 37 29 31 5 -3 2 -12 -7 -21z m-10263 -20 c34 -30 15 -102 -29 -102 -27 0 -40 8 -90 60 -33 34 -33 35 -14 50 25 19 108 14 133 -8z m3263 -33 c28 -39 30 -56 8 -88 l-17 -23 -24 26 c-29 32 -34 32 -32 4 4 -50 -1 -68 -20 -68 -10 0 -21 6 -24 14 -4 10 -24 16 -54 18 -32 2 -47 7 -45 16 1 6 -4 12 -11 12 -8 0 -19 11 -26 24 -21 38 9 74 62 78 33 2 41 7 39 20 -2 13 7 17 40 20 50 3 70 -7 104 -53z m3997 42 c14 -14 -23 -42 -47 -35 -33 10 -41 21 -26 39 13 16 55 14 73 -4z m-6833 -6 c7 -9 10 -18 7 -22 -8 -7 -37 15 -37 28 0 14 16 11 30 -6z m9870 7 c0 -8 -54 -52 -65 -52 -3 0 -5 7 -5 15 0 8 6 15 14 15 7 0 19 7 26 15 13 16 30 20 30 7z m-5610 -12 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m250 -5 c0 -8 -7 -15 -15 -15 -8 0 -15 7 -15 15 0 8 7 15 15 15 8 0 15 -7 15 -15z m892 0 c0 -5 -5 -11 -11 -13 -6 -2 -11 4 -11 13 0 9 5 15 11 13 6 -2 11 -8 11 -13z m-3441 -21 c7 -8 30 -24 51 -35 21 -11 38 -24 38 -29 0 -6 11 -10 24 -10 29 0 66 -43 66 -77 0 -13 7 -40 15 -60 8 -19 15 -50 15 -68 0 -28 -4 -33 -36 -43 -30 -9 -36 -8 -41 6 -14 37 -43 42 -43 7 0 -20 5 -25 25 -25 16 0 25 -6 25 -15 0 -8 6 -15 13 -15 35 0 70 -86 48 -119 -7 -11 -16 -6 -42 23 l-33 38 -14 -27 c-16 -31 -8 -41 39 -51 28 -6 59 -46 40 -52 -6 -2 -11 -10 -11 -17 0 -16 -27 -27 -50 -20 -9 3 -23 -1 -29 -9 -10 -12 -6 -16 23 -25 46 -12 99 -64 83 -80 -6 -6 -20 -11 -31 -12 -12 0 -30 -4 -41 -9 -17 -7 -14 -11 28 -29 26 -11 47 -22 47 -25 0 -2 5 -39 11 -81 9 -68 8 -79 -7 -96 -9 -10 -30 -19 -46 -19 -21 0 -28 -5 -28 -20 0 -11 4 -20 10 -20 18 0 60 -51 60 -75 0 -21 -4 -23 -36 -19 -19 2 -45 11 -57 18 -12 8 -49 21 -82 30 -73 19 -89 37 -80 91 9 61 25 72 74 50 22 -9 49 -26 61 -37 23 -22 53 -17 44 7 -3 8 -10 15 -14 15 -13 0 -141 132 -150 155 -5 13 -6 32 -3 44 5 21 16 25 66 21 23 -1 28 2 25 17 -2 11 -13 19 -30 21 -18 2 -25 8 -22 17 4 9 -4 16 -23 21 -15 4 -34 11 -40 17 -18 13 -16 37 2 37 8 0 15 6 15 14 0 31 61 35 89 5 11 -12 24 -18 30 -14 18 10 13 25 -9 25 -11 0 -20 7 -20 15 0 24 -68 85 -95 85 -15 0 -26 7 -30 21 -8 25 4 139 15 139 4 0 10 8 14 18 3 9 11 25 18 35 11 15 9 20 -14 40 -39 32 -44 117 -8 117 20 0 19 1 -5 25 -27 28 -33 60 -12 68 25 11 55 7 68 -9z m4529 1 c0 -21 -28 -31 -43 -16 -9 9 -8 14 3 21 22 14 40 12 40 -5z m5330 -10 c-6 -16 -6 -34 0 -51 13 -32 13 -44 0 -44 -6 0 -15 11 -21 24 -15 31 -3 96 16 96 11 0 12 -6 5 -25z m-8582 -2 c-2 -10 -10 -18 -18 -18 -8 0 -16 8 -18 18 -2 12 3 17 18 17 15 0 20 -5 18 -17z m1039 -5 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m3693 -1 c0 -22 -35 -54 -44 -39 -2 4 -2 19 1 35 7 35 43 39 43 4z m1558 -4 c-15 -34 -48 -65 -62 -60 -14 5 -19 32 -12 63 5 20 12 24 46 24 39 0 40 0 28 -27z m-11993 -33 c3 -5 19 -11 35 -15 48 -10 61 -41 63 -144 2 -70 -1 -94 -14 -106 -8 -9 -22 -13 -30 -10 -23 10 -59 98 -59 146 0 24 -7 57 -15 73 -9 16 -12 32 -9 35 4 3 9 0 11 -6 5 -15 33 -18 33 -4 0 5 -8 11 -17 15 -10 3 -24 9 -30 12 -9 4 -13 -2 -13 -17 0 -33 -6 -20 -14 29 l-7 44 30 -22 c17 -11 33 -25 36 -30z m4545 41 c0 -5 -7 -11 -15 -15 -9 -3 -15 0 -15 9 0 8 7 15 15 15 8 0 15 -4 15 -9z m2060 -9 c-37 -5 -48 -21 -14 -20 16 0 48 -7 72 -15 29 -10 42 -11 39 -4 -2 7 -19 18 -38 25 l-34 12 40 -6 c47 -7 60 -17 52 -38 -7 -17 -43 -22 -49 -7 -1 4 -20 11 -40 15 -34 6 -38 5 -38 -14 0 -11 -5 -20 -11 -20 -6 0 -9 7 -5 15 6 18 -5 20 -22 3 -9 -9 -9 -4 -2 23 6 18 10 35 10 36 0 5 37 8 50 4 10 -4 7 -7 -10 -9z m504 3 c3 -8 15 -15 26 -15 18 0 20 -6 20 -66 l0 -66 -59 4 c-81 6 -111 27 -111 79 0 29 5 41 18 45 9 3 31 12 47 19 40 18 52 18 59 0z m3111 -46 c-5 -15 -14 -19 -33 -17 -36 4 -42 40 -11 62 21 14 24 14 36 -4 8 -12 11 -29 8 -41z m2031 38 c9 3 12 -3 10 -24 -2 -15 4 -38 12 -51 13 -21 13 -24 -4 -37 -10 -8 -27 -15 -37 -15 -10 0 -21 -8 -24 -17 -14 -39 -40 -42 -53 -7 -8 20 -6 36 9 69 10 24 22 57 26 74 6 29 8 30 27 17 11 -8 26 -12 34 -9z m2051 -24 c-3 -10 -5 -2 -5 17 0 19 2 27 5 18 2 -10 2 -26 0 -35z m-1007 22 c0 -8 -2 -15 -4 -15 -2 0 -6 7 -10 15 -3 8 -1 15 4 15 6 0 10 -7 10 -15z m-7631 -10 c8 -9 -11 -76 -23 -81 -13 -5 -96 44 -96 57 0 34 14 41 64 34 28 -3 52 -8 55 -10z m4184 3 c36 -18 40 -34 14 -58 -31 -30 -86 -24 -106 11 -20 37 -9 59 32 59 18 0 45 -6 60 -12z m3417 8 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m-10910 -32 c0 -8 5 -14 10 -14 6 0 10 -6 10 -14 0 -22 -50 -26 -70 -6 -10 10 -23 19 -29 21 -7 3 -10 11 -6 19 7 20 85 14 85 -6z m6019 8 c8 -16 5 -18 -25 -19 -34 -1 -35 0 -18 18 21 24 31 24 43 1z m1252 7 c11 -6 18 -17 15 -24 -3 -9 0 -12 10 -8 19 7 18 -12 -2 -31 -19 -20 -17 -20 -64 4 -41 21 -49 37 -28 58 15 15 43 15 69 1z m362 4 c8 -7 -11 -33 -24 -33 -5 0 -9 9 -9 20 0 19 20 27 33 13z m1811 -14 c20 -16 26 -29 26 -60 l0 -39 -44 0 c-35 0 -48 5 -60 22 -16 23 -22 79 -9 91 13 14 61 6 87 -14z m-9574 -33 c30 -20 59 -36 63 -36 5 0 7 -10 4 -22 -8 -29 9 -58 34 -58 36 0 69 -44 69 -93 0 -75 -20 -79 -103 -20 -26 18 -52 33 -57 33 -6 0 -10 6 -10 14 0 8 -11 17 -25 20 -14 4 -25 13 -25 21 0 8 -12 27 -26 42 -30 32 -54 85 -54 118 0 21 4 23 38 21 22 -2 59 -18 92 -40z m398 17 c11 -16 38 -41 60 -58 49 -36 58 -63 35 -110 l-17 -36 33 -28 c41 -36 39 -65 -5 -69 -18 -2 -38 3 -46 11 -8 8 -30 22 -48 32 -47 25 -60 44 -58 85 l3 35 -41 -3 c-63 -5 -88 21 -85 88 1 30 6 59 12 67 7 8 34 13 75 13 57 0 64 -2 82 -27z m3426 5 c3 -13 6 -53 6 -89 0 -53 -4 -70 -21 -88 -49 -52 -92 -46 -166 23 -30 28 -43 48 -43 66 0 31 29 61 62 66 13 2 48 12 78 23 71 25 77 25 84 -1z m-5758 -2 c8 -8 14 -22 14 -30 0 -9 8 -16 20 -16 15 0 19 -6 18 -26 -2 -23 -6 -25 -32 -20 -40 8 -67 54 -52 91 7 19 14 19 32 1z m12984 -1 c0 -8 -4 -15 -10 -15 -5 0 -7 7 -4 15 4 8 8 15 10 15 2 0 4 -7 4 -15z m4567 -7 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-15911 -7 c-8 -12 22 -44 72 -75 l43 -27 -3 -92 c-3 -80 -5 -92 -22 -95 -25 -5 -87 62 -97 107 -5 20 -9 53 -9 75 0 28 -4 37 -14 33 -21 -8 -28 44 -9 66 16 17 49 25 39 8z m3604 1 c0 -10 33 -46 61 -65 26 -19 18 -57 -13 -57 -11 0 -36 -9 -55 -21 -25 -16 -42 -19 -68 -15 -19 4 -35 11 -35 16 0 6 -6 10 -14 10 -20 0 -28 42 -15 79 7 20 23 37 43 46 34 15 96 20 96 7z m1230 4 c0 -11 -19 -15 -25 -6 -3 5 1 10 9 10 9 0 16 -2 16 -4z m805 -14 c0 -18 -20 -15 -23 4 -3 10 1 15 10 12 7 -3 13 -10 13 -16z m1509 12 c19 -7 21 -55 4 -72 -7 -7 -29 -12 -49 -12 -38 0 -49 14 -49 68 0 19 5 22 39 22 22 0 46 -3 55 -6z m440 -71 c-38 -28 -101 -10 -90 25 7 21 59 48 75 38 5 -4 13 -1 18 6 5 9 9 1 11 -22 3 -24 -2 -38 -14 -47z m4133 55 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-10041 -15 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m8452 15 c19 -19 14 -73 -8 -93 -18 -16 -20 -16 -55 5 -44 27 -45 52 -2 79 37 24 48 26 65 9z m-9176 -11 c20 -7 59 -31 85 -54 27 -22 59 -44 73 -48 26 -8 59 -43 60 -62 0 -28 -156 -26 -167 3 -3 7 -15 16 -26 20 -68 21 -118 102 -87 139 15 18 15 18 62 2z m5273 3 c-3 -5 -10 -10 -16 -10 -5 0 -9 5 -9 10 0 6 7 10 16 10 8 0 12 -4 9 -10z m3282 -27 c-3 -10 -5 -4 -5 12 0 17 2 24 5 18 2 -7 2 -21 0 -30z m6408 27 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-11132 -25 c-23 -30 -43 -39 -43 -18 0 17 28 42 48 43 9 0 8 -7 -5 -25z m2082 6 c8 -13 -23 -41 -46 -41 -26 0 -24 25 4 38 28 14 35 14 42 3z m2588 -11 c4 -15 0 -20 -14 -20 -17 0 -18 3 -9 20 6 11 12 20 14 20 2 0 6 -9 9 -20z m1154 0 c33 -38 26 -77 -18 -101 -14 -7 -25 -3 -49 21 -34 33 -37 46 -14 78 19 27 58 29 81 2z m-5970 -12 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m4623 -3 c0 -31 -34 -67 -55 -59 -17 7 -30 47 -21 63 3 5 0 12 -6 14 -7 3 8 6 35 6 44 1 47 -1 47 -24z m225 15 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m1617 -23 c10 -12 18 -27 18 -32 0 -14 -37 -45 -55 -45 -7 0 -17 -5 -20 -10 -10 -17 -35 9 -35 35 0 12 3 36 6 52 5 27 9 30 37 26 18 -2 40 -13 49 -26z m493 3 c-4 -14 -9 -27 -11 -29 -6 -7 -12 2 -19 29 -5 21 -3 26 15 26 18 0 20 -5 15 -26z m4555 15 c0 -8 -9 -15 -21 -15 -11 0 -17 5 -14 10 4 6 11 8 16 5 5 -4 9 -1 9 4 0 6 2 11 5 11 3 0 5 -7 5 -15z m-17501 -51 c11 -31 21 -68 21 -84 0 -15 7 -40 14 -56 19 -35 13 -44 -29 -44 -33 0 -33 1 -59 81 -15 47 -24 91 -20 103 7 23 33 56 44 56 4 0 17 -25 29 -56z m8681 46 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m1790 -42 c-3 -38 -5 -45 -8 -23 -2 16 -9 33 -15 37 -7 4 -7 11 2 22 22 26 26 19 21 -36z m-10320 9 c45 -26 110 -87 110 -104 0 -7 6 -14 13 -14 6 -1 19 -2 27 -3 9 0 17 -16 21 -37 3 -21 13 -44 22 -54 21 -20 21 -25 1 -53 -18 -26 -34 -29 -34 -4 0 9 -12 28 -25 41 -21 19 -28 21 -40 11 -8 -7 -15 -25 -15 -41 0 -25 4 -29 30 -29 16 0 55 -13 86 -29 44 -22 62 -38 78 -72 32 -63 59 -78 129 -72 63 6 70 14 31 31 -51 24 -94 66 -94 93 0 48 21 52 76 15 72 -49 119 -103 104 -121 -9 -11 -5 -22 21 -53 18 -22 38 -59 43 -83 10 -38 9 -47 -8 -66 -25 -29 -38 -29 -74 2 -17 14 -35 25 -41 25 -6 0 -11 5 -11 10 0 6 -6 10 -13 10 -7 0 -32 21 -55 46 -40 45 -43 46 -84 40 -72 -12 -74 -21 -13 -83 l55 -54 0 -95 c0 -98 7 -112 36 -69 11 17 15 40 12 75 -1 27 -1 50 2 50 21 -1 30 -22 29 -69 -2 -45 1 -56 24 -77 17 -16 27 -35 27 -53 0 -16 7 -42 15 -57 14 -28 21 -94 9 -94 -8 0 -48 22 -54 29 -3 4 -21 19 -40 35 -100 81 -141 127 -161 178 -11 29 -31 73 -45 97 -13 24 -24 58 -24 76 0 21 -6 35 -16 39 -23 9 -24 8 -24 -12 0 -10 -5 -23 -10 -28 -6 -6 -12 -44 -13 -85 -2 -58 -5 -74 -17 -74 -8 0 -17 11 -20 25 -8 41 -22 55 -69 70 -64 21 -91 45 -91 84 0 35 -43 126 -65 139 -33 18 -62 174 -38 198 40 40 239 -173 272 -290 10 -35 41 -37 41 -2 0 54 24 68 84 49 5 -2 10 9 10 24 1 14 -2 24 -6 22 -4 -3 -8 1 -8 9 0 8 -42 54 -94 102 -84 78 -97 95 -122 159 -15 39 -31 76 -34 81 -4 6 -17 36 -30 68 -19 49 -21 60 -9 68 17 10 42 4 89 -24z m4379 -49 c1 -51 0 -50 91 -60 19 -2 26 -11 33 -43 17 -84 -11 -106 -81 -61 -55 35 -65 51 -59 92 5 30 3 37 -14 41 -31 8 -35 48 -8 81 29 35 37 23 38 -50z m1241 64 c0 -5 19 -15 43 -21 50 -16 67 -28 67 -50 -1 -18 -28 -54 -50 -64 -8 -4 -23 -12 -32 -19 -14 -10 -21 -8 -41 10 -28 27 -37 20 -37 -28 0 -29 -5 -39 -25 -50 -14 -7 -25 -17 -25 -22 0 -4 -18 -8 -40 -8 -39 0 -42 2 -65 51 -24 53 -23 71 3 102 20 22 39 22 80 -3 18 -11 39 -20 47 -20 17 0 20 17 5 22 -6 2 -13 20 -16 40 -6 32 -3 38 22 52 32 17 64 21 64 8z m293 1 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z m4737 -12 c0 -11 -60 -20 -80 -12 -9 3 -2 8 20 12 53 10 60 10 60 0z m40 -1 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m194 -52 c-2 -61 -45 -94 -58 -44 -3 13 -8 31 -12 39 -7 20 24 49 50 45 17 -2 21 -9 20 -40z m-11383 10 c19 -21 26 -58 12 -58 -22 1 -67 55 -58 69 10 17 26 13 46 -11z m3553 -2 c18 -8 46 -33 62 -56 16 -23 39 -53 52 -67 12 -14 22 -30 22 -34 0 -18 -42 -50 -57 -45 -8 3 -27 6 -43 6 -19 0 -29 6 -33 20 -3 11 -13 20 -22 20 -9 0 -29 8 -43 19 -15 10 -36 21 -47 25 -11 4 -37 28 -59 53 -36 44 -37 48 -20 60 24 17 145 17 188 -1z m7529 -7 c4 -15 1 -19 -11 -17 -21 4 -29 38 -9 38 8 0 17 -9 20 -21z m1966 -5 c38 -32 39 -50 5 -57 -31 -6 -69 26 -60 50 3 8 6 19 6 24 0 16 17 10 49 -17z m-13335 0 c3 -8 2 -12 -4 -9 -6 3 -10 10 -10 16 0 14 7 11 14 -7z m5355 -13 c26 -36 26 -53 2 -75 -19 -17 -20 -17 -33 3 -7 12 -18 21 -25 21 -15 0 -17 16 -4 24 4 3 6 17 3 31 -6 36 31 34 57 -4z m396 -14 c4 -13 5 -48 3 -78 -3 -49 -5 -54 -28 -57 -13 -2 -54 11 -92 29 -37 18 -70 30 -74 27 -3 -4 10 -31 30 -61 41 -61 43 -73 19 -99 -31 -34 -77 -24 -133 31 -27 27 -50 53 -50 58 1 25 64 73 96 73 13 0 32 11 43 25 10 14 48 41 83 59 68 36 93 34 103 -7z m1339 21 c25 -36 19 -54 -28 -79 -54 -28 -76 -17 -76 40 0 31 4 39 28 48 42 17 60 15 76 -9z m4940 -9 c14 -17 26 -34 26 -39 0 -19 -49 -60 -71 -61 l-24 0 25 -11 c21 -9 22 -12 7 -15 -38 -9 -48 4 -45 59 2 29 -1 63 -5 76 -8 20 -5 22 26 22 27 0 41 -7 61 -31z m-10104 11 c0 -5 -4 -10 -9 -10 -6 0 -13 5 -16 10 -3 6 1 10 9 10 9 0 16 -4 16 -10z m5578 -10 c34 -9 42 -15 42 -34 0 -48 -99 -59 -151 -17 l-23 18 27 27 c17 16 34 25 45 22 9 -3 36 -10 60 -16z m3489 14 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m6323 2 c0 -11 -19 -15 -25 -6 -3 5 1 10 9 10 9 0 16 -2 16 -4z m-10391 -31 c12 -12 12 -19 2 -41 -13 -29 -28 -29 -103 -2 -41 14 -45 22 -25 43 28 27 99 28 126 0z m8138 -7 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m-13769 16 c26 -7 52 -51 52 -87 0 -37 11 -40 42 -10 l29 27 43 -23 c42 -23 43 -26 71 -125 15 -56 31 -105 35 -109 9 -10 0 -57 -11 -57 -5 0 -9 8 -10 18 0 9 -3 12 -5 6 -3 -6 2 -23 9 -38 l14 -27 6 31 c9 42 27 38 20 -4 -4 -26 0 -39 17 -56 20 -20 22 -29 16 -76 -6 -51 -5 -55 26 -81 49 -43 138 -137 138 -147 0 -17 -44 -86 -55 -86 -6 0 -16 5 -23 12 -6 6 -15 8 -19 4 -4 -4 0 -12 10 -17 15 -9 25 -39 12 -39 -21 0 -125 35 -125 42 0 5 -17 46 -38 91 -63 134 -72 155 -72 166 0 6 -5 11 -11 11 -5 0 -7 5 -3 11 6 11 97 5 133 -9 13 -5 13 -3 -1 12 -10 9 -18 31 -18 47 0 18 -7 33 -20 41 -11 7 -20 20 -21 28 0 10 -2 11 -6 3 -3 -9 -11 -8 -31 5 -37 23 -46 37 -61 88 -7 24 -17 44 -22 44 -5 0 -9 5 -9 11 0 6 -9 23 -19 38 -11 15 -23 39 -26 54 -6 22 -9 24 -25 14 -15 -9 -23 -8 -39 7 -45 40 -70 187 -32 186 3 0 16 -3 29 -6z m958 -40 c20 -20 42 -33 50 -30 10 4 14 -3 14 -23 0 -23 10 -37 43 -63 79 -62 78 -61 75 -119 -2 -42 -7 -55 -20 -57 -11 -2 -18 3 -18 11 0 9 -13 18 -32 22 -18 4 -41 14 -51 23 -9 8 -33 18 -53 21 -27 4 -47 18 -75 51 -37 44 -38 46 -26 90 6 25 14 47 17 50 3 3 11 17 17 33 7 15 15 27 18 27 3 0 22 -16 41 -36z m3600 19 c0 -11 6 -18 19 -19 11 -1 28 -5 38 -9 27 -11 1 -38 -30 -30 -13 3 -23 1 -23 -5 0 -5 5 -10 10 -10 6 0 10 -5 10 -11 0 -14 -42 -1 -57 19 -18 22 -16 35 7 60 25 27 28 27 26 5z m854 -11 c11 -15 38 -39 60 -52 52 -32 75 -75 68 -127 l-6 -41 39 -6 c21 -3 39 -7 40 -9 0 -1 3 -23 5 -48 7 -63 -10 -79 -81 -79 -60 0 -82 15 -92 62 -6 30 -8 32 -55 42 -33 7 -79 55 -95 98 -6 18 -12 54 -12 79 -1 42 3 51 34 78 44 38 68 39 95 3z m1958 10 c3 -9 -2 -13 -14 -10 -9 1 -19 9 -22 16 -3 9 2 13 14 10 9 -1 19 -9 22 -16z m3219 -8 c-9 -9 -28 6 -21 18 4 6 10 6 17 -1 6 -6 8 -13 4 -17z m979 5 c19 -11 34 -29 34 -38 0 -21 -37 -65 -62 -74 -14 -5 -18 -18 -18 -62 0 -31 -4 -54 -9 -51 -5 3 -6 24 -4 46 l5 40 -50 0 c-56 0 -64 9 -56 62 7 38 19 57 54 81 33 23 65 21 106 -4z m670 -6 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m-326 -15 c0 -3 -6 -9 -12 -11 -10 -4 -10 -8 1 -15 11 -8 9 -14 -9 -32 l-22 -22 -22 22 -21 22 28 -6 c24 -6 40 8 18 16 -5 2 -7 15 -4 30 4 24 7 25 24 15 10 -6 19 -15 19 -19z m-13242 -15 c76 -57 128 -136 139 -210 3 -21 14 -47 25 -59 23 -26 58 -115 58 -149 0 -18 8 -28 26 -35 34 -13 25 -35 -14 -34 -33 2 -38 5 -113 77 -27 26 -54 47 -59 47 -17 0 -51 84 -57 140 -7 59 -33 120 -70 160 -29 31 -29 55 -1 74 28 20 25 21 66 -11z m454 10 c40 -45 108 -213 108 -265 0 -17 5 -28 13 -28 8 0 19 -11 25 -24 9 -20 7 -27 -8 -41 -20 -19 -40 -13 -40 12 0 10 -6 13 -16 9 -19 -7 -72 47 -121 123 -33 50 -35 58 -31 121 2 49 9 74 22 89 23 26 29 26 48 4z m7867 -2 c9 -16 6 -20 -17 -24 -34 -7 -50 7 -32 28 17 20 37 19 49 -4z m2245 -3 c24 -34 20 -67 -8 -78 -37 -14 -39 -26 -10 -55 23 -23 25 -32 20 -67 -8 -52 -29 -69 -70 -57 -16 5 -37 15 -45 24 -17 17 -7 43 35 89 46 49 11 54 -73 9 -65 -34 -73 -31 -73 25 0 58 12 72 63 72 30 0 46 7 69 30 35 36 71 39 92 8z m412 4 c32 -27 39 -60 18 -83 -16 -18 -16 -20 9 -43 27 -25 32 -50 21 -93 -7 -25 -56 -40 -99 -29 -35 9 -31 28 15 72 22 21 40 41 40 45 0 4 -15 11 -32 14 -47 10 -58 23 -58 64 0 40 7 55 30 64 25 9 34 7 56 -11z m312 -10 c2 -12 -8 -43 -23 -67 -21 -37 -23 -46 -11 -51 38 -14 23 -74 -19 -74 -31 0 -38 12 -20 36 20 26 18 48 -5 69 -20 18 -27 69 -12 91 8 14 39 23 67 21 13 -1 21 -10 23 -25z m200 6 c6 -6 12 -32 12 -60 0 -42 -5 -54 -37 -88 -28 -31 -44 -40 -69 -40 -61 0 -84 73 -42 133 51 75 91 90 136 55z m1069 -6 c3 -25 -24 -54 -57 -59 -17 -2 -20 3 -20 32 0 22 6 38 18 44 27 17 55 9 59 -17z m-4739 6 c27 -27 12 -31 -46 -13 -18 6 -20 10 -10 16 19 12 42 11 56 -3z m2992 8 c0 -2 -7 -20 -15 -40 -16 -38 -29 -43 -57 -22 -37 28 -14 66 39 66 18 0 33 -2 33 -4z m3560 -11 c10 -12 10 -15 -4 -15 -9 0 -16 7 -16 15 0 8 2 15 4 15 2 0 9 -7 16 -15z m-11751 -17 c15 -13 40 -32 56 -43 15 -11 57 -46 91 -79 51 -47 67 -69 79 -109 30 -101 12 -136 -44 -83 -15 13 -44 33 -66 45 -43 22 -96 65 -153 120 -33 34 -34 37 -29 92 8 86 19 96 66 57z m2545 14 c-6 -4 -14 -14 -17 -22 -4 -10 -6 -8 -6 8 -1 15 5 22 17 22 10 0 13 -3 6 -8z m1001 -10 c-3 -3 -11 0 -18 7 -9 10 -8 11 6 5 10 -3 15 -9 12 -12z m4095 -13 c0 -23 -4 -30 -17 -27 -22 4 -29 28 -8 28 11 0 15 5 11 15 -3 8 -1 15 4 15 6 0 10 -14 10 -31z m1594 0 c28 -25 40 -64 30 -103 -5 -22 -11 -26 -45 -26 -46 0 -68 26 -76 90 -5 33 -3 40 11 40 9 0 16 5 16 10 0 18 39 11 64 -11z m5793 -16 c-3 -10 -5 -4 -5 12 0 17 2 24 5 18 2 -7 2 -21 0 -30z m-11095 -15 c-16 -16 -37 4 -28 28 6 16 8 16 23 1 13 -13 14 -19 5 -29z m-3497 12 c10 -11 25 -20 34 -20 9 0 27 -18 41 -41 14 -22 35 -45 48 -50 12 -5 22 -15 22 -24 0 -20 -79 -21 -106 0 -10 8 -23 14 -29 14 -5 0 -2 -4 8 -10 12 -7 15 -17 11 -34 -5 -22 -1 -25 61 -44 79 -25 95 -26 95 -7 0 20 16 29 41 21 26 -9 20 -28 -12 -35 -15 -4 -24 -13 -24 -25 0 -17 8 -21 50 -23 27 -2 57 -10 66 -18 9 -8 25 -16 36 -18 11 -2 35 -14 54 -25 19 -12 46 -21 62 -21 21 0 27 -5 27 -23 0 -14 18 -40 45 -67 33 -32 45 -52 45 -73 0 -60 40 -113 98 -131 19 -6 22 -4 22 19 0 18 -6 29 -19 32 -16 4 -18 10 -11 34 5 16 8 51 6 79 -1 36 2 50 11 50 7 0 13 -4 13 -9 0 -5 8 -12 18 -15 34 -13 72 -37 72 -47 0 -5 18 -9 41 -9 22 0 53 -6 67 -14 15 -8 45 -19 67 -25 23 -6 50 -20 62 -31 12 -11 26 -20 30 -20 4 0 23 -16 42 -35 18 -19 51 -42 72 -52 21 -10 39 -24 39 -30 0 -7 11 -15 24 -19 14 -3 49 -32 80 -63 59 -62 74 -102 61 -167 -6 -34 -8 -36 -33 -28 -15 4 -60 7 -99 7 -51 0 -73 4 -73 13 0 13 -22 24 -49 24 -10 0 -26 8 -35 19 -9 10 -34 21 -55 25 -21 3 -66 24 -100 47 -33 22 -65 37 -71 34 -6 -4 -16 -2 -23 3 -19 15 -87 25 -87 12 0 -6 -5 -8 -11 -4 -20 12 20 26 62 22 22 -2 39 1 39 7 0 10 -79 49 -94 46 -4 -1 -6 15 -3 36 4 21 4 32 1 26 -8 -18 -27 -16 -21 1 4 10 1 13 -8 10 -12 -5 -10 -15 11 -56 14 -27 23 -52 20 -55 -2 -3 -22 -2 -43 2 -26 4 -42 13 -48 28 -7 15 -18 21 -33 20 -13 -2 -25 4 -28 12 -4 8 -10 12 -15 9 -5 -3 -7 -10 -4 -15 7 -11 -15 -12 -32 -1 -6 4 -13 25 -15 47 -2 31 -9 43 -30 55 -22 12 -30 12 -40 2 -9 -9 -7 -16 11 -33 14 -14 21 -29 18 -41 -8 -30 2 -48 27 -48 13 0 32 -11 45 -23 12 -13 49 -32 82 -43 34 -10 64 -25 66 -31 3 -7 12 -13 21 -13 9 0 53 -19 99 -41 68 -35 83 -47 88 -70 5 -24 12 -29 36 -29 16 0 47 9 69 20 49 25 60 25 60 1 0 -19 25 -31 66 -31 12 0 24 -7 28 -15 3 -8 16 -15 29 -15 13 0 62 -20 109 -45 56 -29 99 -45 122 -45 25 0 36 -4 36 -15 0 -10 10 -15 34 -15 48 0 195 -75 206 -106 5 -13 9 -53 8 -89 -1 -64 -1 -65 -22 -52 -23 15 -120 53 -176 68 -88 25 -90 27 -90 84 0 28 -3 54 -6 58 -3 3 -16 -5 -28 -19 -11 -14 -37 -28 -56 -33 -37 -8 -101 6 -122 27 -6 6 -18 12 -25 12 -7 0 -13 11 -13 23 0 13 -9 32 -20 42 -20 18 -50 14 -50 -7 0 -7 -13 -19 -30 -26 -16 -8 -30 -17 -30 -21 0 -10 69 -45 76 -38 11 11 -7 27 -32 27 -13 0 -24 5 -24 10 0 16 50 12 56 -5 4 -8 12 -15 20 -15 8 0 14 -7 14 -15 0 -8 7 -15 15 -15 8 0 28 -13 44 -29 16 -16 43 -37 59 -46 15 -9 41 -38 57 -64 54 -87 85 -121 111 -121 21 0 23 3 14 19 -14 27 -13 88 3 94 37 14 275 -62 262 -84 -3 -5 -2 -26 2 -46 l8 -38 6 45 6 45 2 -40 c2 -60 13 -70 41 -38 15 17 19 28 12 31 -7 2 -12 8 -12 13 0 14 27 11 43 -5 8 -8 44 -17 83 -20 37 -4 71 -10 74 -14 3 -4 22 -16 43 -27 21 -11 44 -29 51 -40 25 -38 74 -85 89 -85 9 0 17 -5 19 -12 2 -6 12 -9 21 -5 12 5 16 14 12 29 -10 43 6 51 70 38 41 -9 60 -9 68 -1 6 6 19 11 29 11 10 0 18 4 18 9 0 8 56 6 127 -5 27 -4 32 -9 38 -43 6 -35 11 -41 53 -57 26 -11 50 -20 54 -22 5 -2 8 3 8 12 0 9 -4 16 -10 16 -19 0 -10 27 15 40 17 9 49 11 107 8 82 -5 108 2 108 31 0 10 24 21 46 21 8 0 28 -14 44 -31 22 -25 34 -30 53 -25 17 4 29 0 42 -14 10 -11 25 -20 34 -20 9 0 27 -16 40 -36 22 -32 55 -54 82 -54 5 0 9 20 9 44 0 40 2 43 23 39 14 -3 31 2 42 13 16 17 16 18 -1 31 -10 7 -44 13 -76 13 -66 0 -128 21 -128 44 0 13 -33 40 -51 41 -3 0 -21 17 -39 38 -19 20 -43 37 -52 37 -11 0 -18 8 -18 20 0 11 -13 29 -29 41 -16 12 -32 32 -35 45 -4 13 -13 24 -21 24 -24 0 -17 30 9 40 13 5 58 5 102 1 44 -5 82 -6 87 -4 4 2 20 -5 36 -16 16 -12 34 -21 40 -21 7 0 14 -7 17 -15 7 -16 34 -21 34 -5 0 5 12 16 27 23 24 13 30 12 72 -15 25 -16 56 -40 69 -53 13 -14 29 -25 38 -25 8 0 20 -12 26 -27 14 -31 42 -63 57 -63 5 0 30 -21 55 -46 57 -56 55 -87 -5 -113 -21 -9 -39 -19 -39 -23 0 -14 66 -28 131 -28 52 0 73 -4 87 -17 10 -10 31 -28 47 -40 25 -19 29 -20 43 -7 27 28 56 32 178 28 66 -2 132 -4 147 -4 15 0 27 -6 27 -12 1 -23 38 -58 62 -58 13 0 30 9 38 20 13 18 26 20 111 20 91 0 100 -2 165 -36 38 -20 84 -48 103 -62 18 -15 42 -32 53 -38 11 -7 26 -22 32 -35 7 -13 18 -23 25 -21 7 1 10 -2 6 -7 -8 -13 43 -71 73 -82 12 -5 25 -16 29 -25 11 -29 -19 -43 -98 -45 -62 -2 -80 1 -94 15 -13 12 -32 17 -69 16 -78 -3 -238 17 -246 30 -4 7 -44 14 -91 17 -89 5 -149 19 -149 34 0 5 -6 9 -14 9 -8 0 -28 12 -45 26 -37 31 -65 28 -69 -6 -5 -33 -13 -41 -54 -49 l-33 -7 32 -17 c21 -11 56 -17 101 -17 66 0 70 -2 109 -37 22 -21 45 -48 52 -60 6 -13 18 -23 26 -23 8 0 15 -4 15 -10 0 -5 7 -10 16 -10 9 0 36 -21 61 -46 41 -43 43 -48 29 -63 -13 -13 -39 -16 -134 -16 -73 0 -127 5 -144 13 -33 15 -48 15 -48 1 0 -6 7 -8 16 -5 10 4 14 1 12 -6 -8 -22 -28 -20 -37 4 -9 22 -10 22 -10 -7 -1 -29 1 -30 47 -32 30 -1 40 1 28 6 -13 5 -16 10 -8 15 6 4 22 0 34 -8 13 -8 57 -17 98 -21 242 -22 324 -51 365 -129 11 -21 23 -38 28 -37 4 0 11 1 15 1 13 0 -12 90 -27 100 -41 25 111 16 158 -9 53 -29 66 -65 26 -75 -14 -4 -25 -11 -25 -16 0 -6 -15 -10 -34 -10 -26 0 -36 -5 -41 -20 -3 -11 -12 -20 -20 -20 -9 0 -13 -17 -13 -60 l0 -59 77 -3 76 -3 3 -41 c4 -48 -6 -54 -100 -54 -45 0 -58 -3 -58 -15 0 -11 12 -15 43 -16 56 -2 127 -5 154 -7 12 -1 24 -11 28 -21 7 -24 -14 -61 -36 -61 -9 0 -24 -8 -33 -19 -9 -10 -35 -21 -56 -25 -41 -6 -48 -14 -29 -33 7 -7 5 -21 -8 -46 -15 -31 -23 -37 -51 -37 -33 0 -33 0 -30 -42 l3 -43 48 -3 c30 -2 47 -8 46 -15 -3 -27 2 -37 19 -37 15 0 17 -6 14 -33 -3 -31 -1 -35 30 -46 88 -34 108 -46 106 -65 -3 -22 -17 -25 -106 -27 -52 -1 -67 3 -86 20 l-22 21 -38 -26 c-33 -23 -45 -25 -85 -20 -56 8 -82 9 -89 2 -8 -9 19 -36 37 -36 9 0 31 -14 49 -30 32 -30 41 -50 22 -50 -5 0 -10 7 -10 15 0 19 -3 19 -52 -5 -54 -26 -83 -25 -113 3 -31 30 -67 57 -76 57 -4 0 -12 -7 -19 -15 -17 -21 -178 -20 -249 1 -53 15 -53 16 -47 49 9 49 -1 79 -32 93 -26 11 -83 88 -72 97 3 2 -4 11 -15 19 -17 13 -18 18 -7 35 12 20 10 21 -37 21 -62 0 -97 13 -106 39 -10 33 -165 58 -165 26 0 -12 -16 -15 -80 -15 -44 0 -80 -3 -80 -8 0 -20 44 -33 93 -27 46 6 61 2 134 -32 46 -21 83 -43 83 -50 0 -6 14 -20 30 -30 17 -9 32 -25 35 -34 3 -9 33 -44 67 -77 51 -49 60 -63 50 -75 -15 -18 -61 -10 -82 15 -11 13 -21 16 -40 11 -14 -5 -26 -12 -27 -18 0 -5 -3 -19 -5 -30 -3 -19 3 -20 107 -23 100 -3 114 -6 155 -31 25 -16 59 -34 77 -41 27 -10 33 -18 39 -56 3 -24 9 -44 12 -44 14 0 72 53 72 66 0 7 7 14 16 14 9 0 28 8 42 19 33 23 109 32 116 14 3 -7 20 -22 37 -32 33 -20 48 -20 137 0 62 14 109 3 116 -26 6 -22 36 -45 79 -61 12 -4 16 -13 12 -25 -4 -11 -3 -18 2 -17 14 4 53 -13 53 -23 0 -5 7 -9 15 -9 8 0 15 -5 15 -11 0 -8 4 -8 15 1 15 12 14 14 -22 55 -7 7 -13 16 -13 20 0 4 -7 13 -15 22 -24 24 0 45 49 43 58 -3 66 -1 66 10 0 6 -15 10 -33 10 -18 0 -37 4 -42 9 -6 5 -21 11 -35 13 l-25 5 24 10 c16 6 20 12 13 17 -7 4 -27 0 -46 -9 -32 -15 -38 -15 -85 2 -40 14 -52 23 -56 45 -11 48 -2 51 113 45 74 -4 109 -11 122 -22 17 -15 50 -11 50 6 0 16 50 9 93 -12 52 -27 80 -58 74 -81 -3 -10 0 -18 5 -18 6 0 5 -6 -2 -15 -16 -19 -40 -19 -40 0 0 11 -8 13 -32 8 -18 -3 -35 -8 -38 -10 -8 -7 24 -23 37 -18 14 5 35 -18 32 -37 -3 -27 1 -48 11 -48 18 0 70 43 70 58 0 10 7 12 28 7 36 -9 72 -32 72 -48 0 -12 41 -40 93 -64 15 -7 30 -19 33 -28 3 -8 14 -15 23 -15 15 0 51 -62 51 -87 0 -14 -24 -23 -60 -23 -16 0 -51 -5 -79 -12 -61 -14 -96 0 -106 41 -5 20 -2 29 16 41 13 8 32 23 43 32 20 16 20 17 3 35 -17 17 -18 17 -23 -5 -4 -12 -13 -22 -20 -22 -8 0 -19 -10 -25 -22 -10 -24 -59 -60 -95 -72 -34 -10 -71 9 -77 40 -3 15 1 52 9 81 17 65 17 72 1 53 -17 -21 -53 -40 -76 -40 -10 0 -21 -9 -24 -19 -3 -14 -1 -18 10 -14 13 5 13 3 2 -15 l-13 -21 -14 20 c-11 15 -11 24 -3 32 6 6 11 15 11 19 0 13 -27 9 -40 -7 -10 -12 -8 -19 8 -40 12 -14 18 -34 15 -45 -6 -21 12 -29 19 -8 6 17 88 20 88 3 0 -8 -7 -11 -17 -9 -12 3 -22 -4 -30 -21 -8 -19 -8 -25 0 -26 7 -1 -4 -5 -23 -10 -27 -6 -38 -4 -47 7 -9 12 -40 16 -140 20 -189 5 -221 9 -240 26 -10 9 -35 18 -55 22 -22 4 -38 13 -38 20 0 22 -38 27 -43 5 -6 -22 -62 -34 -100 -20 -17 7 -36 7 -51 1 -31 -11 -139 11 -165 34 -11 10 -17 24 -14 32 3 9 -2 14 -16 14 -12 0 -21 -6 -21 -15 0 -10 -10 -15 -31 -15 -17 0 -39 -5 -50 -10 -15 -8 -47 -3 -136 20 -118 30 -179 35 -267 21 -37 -6 -53 -5 -63 5 -8 7 -30 16 -51 19 -70 11 -113 26 -130 46 -9 10 -23 19 -32 19 -19 0 -55 -39 -62 -67 -6 -22 -3 -23 54 -23 48 0 65 -4 82 -21 89 -87 106 -99 137 -99 l33 0 -22 20 c-24 22 -27 37 -13 59 18 28 165 -8 305 -73 54 -26 100 -46 102 -46 2 0 -1 9 -8 20 -10 15 -10 25 -2 38 16 25 44 27 51 4 4 -17 13 -20 51 -20 103 3 416 -3 423 -8 4 -2 5 -12 2 -23 -4 -17 -16 -19 -150 -19 -143 0 -162 -4 -163 -34 0 -5 31 -8 69 -8 52 0 70 -4 75 -15 4 -12 32 -15 162 -15 100 0 171 -5 193 -12 37 -13 66 -43 66 -67 0 -9 21 -20 53 -29 54 -15 75 -11 54 10 -7 7 -12 27 -12 44 0 31 3 33 54 48 89 26 143 18 174 -25 12 -17 14 -17 48 3 28 17 46 20 92 15 71 -6 130 -33 134 -61 2 -12 9 -20 15 -19 20 4 28 -39 9 -49 -9 -5 -16 -17 -16 -26 0 -15 10 -17 77 -15 42 2 78 5 81 7 2 3 -6 21 -18 40 -16 28 -28 36 -50 36 -38 0 -60 9 -60 25 0 8 -9 17 -20 20 -29 9 -25 42 8 59 57 29 98 22 125 -23 l17 -29 67 24 c86 30 102 30 144 0 46 -33 127 -76 144 -76 22 0 61 -42 69 -73 4 -18 1 -35 -10 -52 -13 -21 -15 -39 -10 -91 6 -62 5 -67 -19 -90 -30 -28 -54 -30 -95 -9 -26 13 -32 13 -60 -3 -26 -15 -32 -15 -40 -2 -11 18 -4 30 21 30 16 0 14 5 -13 29 -29 26 -32 34 -30 80 2 46 0 51 -22 57 -13 3 -38 4 -57 2 -28 -2 -33 -7 -31 -23 12 -67 -22 -136 -76 -156 -15 -6 -40 -16 -55 -24 -35 -18 -57 -10 -57 20 0 28 -16 35 -52 23 -16 -6 -28 -18 -30 -31 -2 -14 -11 -23 -25 -25 -19 -3 -23 1 -23 23 0 16 -12 42 -29 61 -25 28 -31 31 -41 18 -19 -22 -60 -18 -60 6 0 13 -7 20 -20 20 -10 0 -33 18 -51 40 -18 22 -36 37 -40 34 -5 -3 -6 1 -4 8 7 19 -24 58 -32 40 -4 -10 -9 -7 -17 10 -8 15 -20 22 -34 21 -12 -2 -22 2 -22 8 0 6 -5 9 -11 7 -13 -4 -43 -107 -34 -116 2 -3 15 2 27 10 23 15 98 29 96 18 -1 -5 7 -28 43 -111 20 -47 23 -49 60 -49 24 0 39 -5 39 -12 0 -10 2 -10 8 -1 10 16 52 13 52 -4 0 -28 -24 -63 -44 -64 -62 -3 -167 -8 -297 -14 l-147 -6 -27 25 c-16 15 -37 26 -47 26 -10 0 -34 12 -53 27 -28 23 -32 30 -24 50 14 36 11 45 -11 38 -12 -4 -20 -2 -20 5 0 11 -155 90 -177 90 -16 0 -16 -8 -2 -49 7 -19 18 -31 28 -31 10 0 44 -25 77 -56 32 -30 69 -59 81 -64 20 -8 22 -15 17 -52 -7 -63 4 -74 60 -58 l45 12 52 -41 c28 -22 58 -41 65 -41 24 0 26 21 6 43 -39 41 -21 45 223 45 231 -1 295 -9 295 -39 0 -6 -18 -29 -39 -50 -38 -36 -71 -87 -71 -108 0 -6 20 -10 48 -8 45 2 48 1 65 -36 16 -31 18 -50 12 -112 -7 -74 -8 -75 -36 -75 -16 0 -29 -5 -29 -10 0 -6 -8 -5 -20 2 -24 16 -41 1 -17 -16 27 -20 20 -51 -17 -80 -33 -25 -40 -26 -165 -26 -107 0 -131 -3 -131 -14 0 -11 24 -16 100 -21 89 -7 100 -10 100 -26 0 -24 11 -24 43 1 23 19 32 20 88 11 34 -6 66 -16 71 -23 11 -18 10 -375 -1 -382 -5 -3 -14 0 -20 8 -21 25 -60 28 -87 7 -25 -19 -42 -20 -408 -21 -318 0 -390 2 -425 15 -53 18 -61 19 -61 1 0 -8 -19 -16 -52 -22 -38 -7 -52 -14 -54 -27 -2 -15 4 -18 29 -16 42 3 168 -11 187 -21 9 -5 39 -2 68 5 38 10 141 14 402 14 l350 1 0 -40 c0 -40 0 -40 40 -40 l40 0 0 -79 c0 -57 -4 -84 -15 -95 -19 -18 -19 -36 -1 -36 29 0 36 -121 10 -159 -16 -22 -21 -23 -88 -17 -88 8 -87 8 -168 0 -67 -6 -68 -7 -68 -36 0 -39 17 -54 72 -62 36 -5 47 -4 51 9 5 12 23 15 86 15 45 0 83 -5 86 -10 4 -6 0 -21 -7 -33 -26 -40 -29 -57 -10 -55 57 4 66 -15 36 -78 -16 -33 -16 -36 5 -58 26 -28 29 -97 5 -121 -13 -12 -14 -19 -5 -28 18 -18 13 -42 -14 -67 -23 -22 -26 -22 -43 -7 -23 21 -46 22 -62 2 -18 -22 -278 -21 -287 1 -3 8 -13 14 -23 14 -12 0 -20 9 -22 23 -2 17 -10 23 -38 25 l-35 2 27 -24 c15 -13 32 -26 39 -28 7 -2 10 -11 7 -20 -6 -13 -40 -15 -277 -14 -248 1 -271 0 -271 -16 0 -28 20 -32 125 -30 74 2 114 -1 150 -14 41 -13 77 -16 201 -12 116 4 156 2 170 -9 10 -7 30 -13 44 -13 20 0 29 -7 38 -33 10 -28 18 -34 42 -35 17 0 28 4 25 9 -4 5 -13 9 -21 9 -8 0 -14 8 -14 19 0 10 -7 24 -15 31 -36 30 -17 38 98 42 61 3 115 2 119 -1 24 -20 18 -191 -7 -191 -7 0 -15 7 -19 15 -4 10 -20 15 -51 15 -32 0 -45 4 -45 14 0 17 -27 29 -35 16 -3 -5 3 -15 15 -22 22 -14 27 -54 8 -61 -7 -3 1 -10 17 -16 72 -27 108 -61 121 -113 l6 -28 -108 -2 c-60 -2 -195 -1 -300 1 -163 3 -195 1 -214 -12 l-23 -16 24 -5 c13 -3 65 -7 114 -10 50 -2 97 -7 106 -10 8 -4 32 0 52 9 42 17 123 20 132 4 4 -6 40 -10 88 -9 129 2 125 3 132 -29 9 -43 54 -57 103 -32 34 17 68 25 99 22 6 -1 22 -19 34 -41 19 -34 28 -40 56 -40 27 0 44 -10 83 -48 28 -27 50 -56 50 -64 0 -22 -49 -61 -104 -82 -42 -16 -85 -19 -310 -22 -347 -4 -373 -5 -358 -11 6 -2 12 -12 12 -20 0 -14 13 -15 97 -9 54 4 200 1 325 -5 179 -10 245 -10 306 0 48 7 99 9 137 4 l60 -8 3 -37 c3 -34 0 -39 -40 -65 -68 -44 -74 -66 -33 -107 14 -14 25 -31 25 -39 0 -40 -151 -54 -237 -23 -37 13 -43 13 -43 1 0 -11 -13 -15 -52 -15 -29 0 -82 -3 -118 -6 -65 -6 -65 -6 -68 20 -1 17 3 26 13 26 9 0 20 11 25 25 11 28 25 32 34 10 3 -10 -7 -27 -27 -45 -17 -16 -27 -30 -20 -30 23 0 66 49 60 70 -3 11 -1 20 5 20 5 0 6 5 3 10 -11 18 -35 11 -71 -22 -25 -23 -34 -39 -31 -54 3 -20 -5 -25 -67 -45 -66 -22 -84 -23 -261 -20 -104 2 -193 5 -197 8 -5 2 -8 19 -8 38 0 41 -17 124 -30 145 -8 13 -12 12 -30 -5 -17 -17 -21 -35 -23 -103 -2 -68 -5 -82 -18 -82 -9 0 -22 7 -29 15 -17 20 -33 19 -55 -5 -39 -43 -110 -16 -107 41 7 130 4 220 -9 235 -16 20 -39 -1 -39 -35 0 -15 -6 -36 -14 -47 -17 -24 -15 -80 4 -111 12 -19 12 -24 -2 -40 -11 -12 -19 -47 -24 -108 -7 -89 -8 -91 -47 -126 -23 -21 -46 -35 -56 -32 -21 5 -71 -49 -71 -77 0 -16 6 -19 33 -16 21 2 35 10 42 24 7 16 19 22 41 22 48 0 60 -21 40 -69 -12 -31 -13 -47 -5 -71 16 -43 -6 -72 -84 -108 -35 -17 -76 -44 -90 -61 -14 -17 -33 -31 -43 -31 -27 0 -13 153 20 226 29 63 29 69 -1 69 -11 0 -25 3 -29 7 -13 13 18 38 47 38 40 0 38 27 -3 38 -20 5 -38 18 -45 33 -16 33 -6 139 13 139 16 0 19 31 4 46 -13 13 -31 150 -24 180 4 14 2 24 -5 24 -6 0 -11 -15 -11 -34 0 -19 -4 -38 -10 -41 -5 -3 -10 -44 -10 -91 0 -70 -4 -92 -22 -124 -22 -37 -22 -39 -5 -58 14 -15 17 -34 15 -88 l-3 -69 -60 -2 c-72 -3 -108 15 -82 41 9 9 32 16 51 16 22 0 36 5 37 13 0 6 4 3 9 -8 8 -18 9 -17 9 8 1 16 -3 26 -9 22 -5 -3 -10 -1 -10 4 0 6 -15 12 -32 12 -24 1 -27 3 -10 6 12 2 22 8 22 13 0 4 9 10 20 13 24 6 27 27 4 27 -18 0 -75 -37 -87 -56 -9 -16 -61 -27 -86 -19 -27 8 -35 38 -32 113 1 38 -2 62 -9 62 -5 0 -10 -18 -10 -40 0 -22 -4 -40 -10 -40 -5 0 -10 5 -10 10 0 18 -18 11 -25 -10 -8 -24 -22 -25 -64 -4 -43 22 -61 13 -61 -31 l0 -35 -52 0 c-102 0 -93 -34 -93 340 0 292 -2 329 -16 338 -14 9 -17 4 -22 -31 -3 -23 -3 -76 0 -118 5 -63 2 -83 -15 -122 -26 -58 -48 -61 -108 -12 -41 34 -84 46 -84 24 0 -16 78 -91 128 -124 l43 -28 -3 -130 -3 -131 -70 3 c-85 3 -135 15 -167 40 -23 19 -23 22 -19 178 3 177 15 227 52 221 12 -2 24 3 26 10 3 7 -4 12 -19 12 -37 0 -71 76 -62 139 6 49 -10 131 -26 131 -6 0 -10 -27 -10 -60 0 -49 -3 -62 -17 -67 -29 -11 -31 -23 -13 -71 19 -51 26 -155 22 -334 -2 -101 -3 -108 -22 -108 -14 0 -20 7 -20 22 0 17 -3 19 -12 10 -8 -8 -8 -15 2 -28 12 -14 11 -19 -10 -35 -21 -17 -37 -19 -100 -16 -41 3 -87 9 -102 15 -26 11 -28 15 -28 71 0 50 -3 62 -20 71 -18 10 -20 7 -22 -32 -2 -66 -2 -68 -17 -77 -17 -11 -84 4 -119 27 -36 22 -142 134 -142 148 0 6 12 58 27 115 26 96 28 118 27 289 -1 172 -3 193 -31 300 -19 73 -52 159 -88 233 -32 65 -55 120 -53 122 3 3 10 -6 17 -18 9 -18 19 -23 37 -19 13 2 24 7 24 10 0 11 -56 52 -80 57 -15 3 -34 19 -45 38 -10 18 -48 64 -84 102 -37 39 -81 89 -100 110 -19 22 -71 81 -116 130 -80 88 -215 250 -265 316 -150 200 -374 359 -604 429 -59 18 -81 30 -89 47 -12 28 -18 28 -39 4 -13 -16 -23 -17 -59 -10 -24 4 -123 13 -219 20 -131 8 -179 15 -192 27 -12 9 -18 11 -18 4 0 -7 -5 -12 -11 -12 -6 0 -9 6 -6 14 3 8 -1 20 -9 26 -8 7 -14 18 -14 24 0 7 -18 22 -39 34 -33 19 -40 20 -45 7 -6 -16 -56 -21 -72 -6 -15 14 -58 21 -74 11 -10 -7 -11 -10 -2 -10 6 0 12 -6 12 -13 0 -18 64 -47 104 -47 24 0 36 -6 46 -25 7 -13 20 -26 29 -28 9 -2 -49 -7 -129 -11 -105 -6 -145 -5 -148 4 -3 7 -8 5 -16 -5 -12 -17 -143 -36 -193 -28 -18 3 -24 2 -15 -5 8 -6 -17 -13 -75 -21 -48 -7 -114 -19 -146 -27 -82 -20 -99 -18 -157 16 -28 17 -60 30 -71 30 -11 0 -23 8 -26 18 -10 24 -24 37 -69 60 -21 11 -48 29 -59 39 -77 70 -140 113 -166 113 -15 0 -36 8 -46 18 -10 11 -33 27 -50 38 -18 10 -33 24 -33 32 0 17 -16 33 -52 51 -16 8 -28 18 -28 23 0 4 -6 8 -14 8 -7 0 -19 15 -27 33 -14 36 -35 60 -62 70 -26 10 -32 35 -12 57 26 28 51 25 72 -10 11 -20 25 -30 41 -30 13 0 37 -8 52 -17 39 -22 77 -6 82 34 2 22 9 29 31 31 17 2 37 -4 48 -14 10 -9 22 -14 26 -10 5 4 0 12 -10 17 -9 6 -17 16 -17 24 0 7 -9 17 -20 20 -13 4 -20 15 -20 30 0 54 -28 73 -52 36 -9 -15 -15 -17 -25 -9 -9 7 -13 7 -13 -1 0 -6 -7 -11 -15 -11 -13 0 -15 -8 -10 -40 6 -39 5 -40 -24 -40 -21 0 -40 10 -61 31 -16 18 -30 36 -30 41 0 5 -24 8 -52 6 -48 -3 -53 -5 -52 -25 1 -27 -21 -31 -30 -6 -4 11 -1 22 8 29 25 18 19 27 -32 52 -66 32 -107 73 -133 132 -29 68 -17 82 44 47 24 -14 49 -33 56 -41 16 -19 79 -32 92 -19 7 7 -1 28 -21 63 -17 29 -29 59 -26 66 6 16 46 19 46 4 0 -5 9 -10 20 -10 11 0 29 -9 41 -21 11 -11 26 -18 32 -16 15 5 22 47 8 47 -6 0 -11 7 -11 15 0 8 5 15 10 15 6 0 10 -4 10 -10 0 -19 19 -10 26 12 5 17 0 28 -27 50 -34 29 -29 40 7 13 10 -8 29 -15 42 -15 26 0 28 -6 7 -26 -8 -9 -15 -22 -15 -29 0 -21 27 -7 33 16 3 12 13 19 29 18 15 0 18 -3 8 -6 -20 -8 -38 -31 -56 -71 -10 -23 -20 -32 -30 -28 -12 5 -15 -3 -12 -42 3 -43 6 -49 40 -67 20 -11 39 -29 42 -41 8 -29 33 -38 39 -13 3 12 -2 24 -13 32 -20 14 -15 33 10 39 8 2 14 -4 15 -12 0 -21 65 -27 65 -6 0 8 -9 18 -20 21 -11 3 -20 11 -20 16 0 5 -6 9 -13 9 -7 0 -30 17 -50 38 l-37 37 20 30 c11 17 25 38 32 48 16 21 5 30 -59 49 -27 8 -43 18 -43 28 0 9 -7 25 -15 36 -8 10 -15 27 -15 37 0 10 -4 15 -10 12 -5 -3 -10 3 -10 14 0 11 -4 23 -10 26 -5 3 -10 15 -10 26 0 25 -14 24 -26 -1 -9 -20 -9 -20 -47 0 -21 12 -55 22 -74 23 -23 1 -40 9 -47 21 -22 39 -52 69 -93 93 -32 18 -43 31 -43 49 0 26 -26 44 -64 44 -27 0 -68 -43 -60 -63 4 -13 88 -67 102 -67 5 0 16 -17 25 -38 28 -63 57 -84 117 -84 57 1 108 -23 153 -71 41 -45 31 -89 -23 -102 -38 -9 -110 45 -110 83 0 46 -11 54 -50 34 -33 -16 -56 -62 -31 -62 6 0 34 -22 62 -49 45 -43 50 -52 39 -65 -16 -20 -44 -20 -64 -1 -8 8 -21 15 -29 15 -7 0 -24 11 -37 25 -13 14 -31 25 -39 25 -20 1 -64 91 -51 104 19 19 10 58 -17 82 -16 13 -32 24 -37 24 -11 0 -50 46 -68 79 -7 14 -18 32 -25 39 -18 18 -2 53 35 77 17 11 31 23 32 26 0 3 -36 32 -80 63 -71 52 -83 65 -119 134 -21 42 -57 112 -80 155 -35 66 -41 87 -41 137 0 63 9 73 37 40 10 -11 22 -20 28 -20 19 0 130 -114 150 -155 28 -56 55 -95 66 -95 5 0 9 18 9 40 0 33 3 40 20 40 13 0 20 -7 20 -20 0 -15 7 -20 26 -20 15 0 34 -10 47 -26 12 -15 32 -37 45 -51 12 -13 22 -27 22 -30 0 -4 7 -14 15 -23 8 -9 17 -43 21 -75 7 -59 30 -94 62 -95 7 0 12 -13 12 -29 0 -39 9 -61 26 -61 19 0 33 31 27 62 -4 22 -2 26 13 23 11 -2 29 -4 42 -4 13 -1 22 -7 22 -17 0 -28 40 -74 65 -74 18 0 25 -7 30 -30 4 -18 22 -43 46 -62 21 -17 39 -40 39 -50 0 -10 7 -18 15 -18 9 0 32 -18 52 -40 21 -22 43 -40 49 -40 7 0 16 -9 19 -20 3 -11 13 -20 21 -20 8 0 14 -9 14 -20 0 -11 8 -24 17 -27 9 -4 26 -16 37 -27 20 -20 21 -20 25 -1 2 10 -1 21 -6 22 -18 6 -110 97 -116 116 -4 9 -13 17 -22 17 -8 0 -29 21 -46 48 -16 26 -33 47 -37 47 -4 0 -7 26 -7 58 0 55 1 58 22 54 64 -12 49 45 -20 78 -23 11 -58 35 -77 53 -19 18 -47 44 -61 57 -15 14 -30 25 -35 25 -16 0 -103 65 -104 78 0 6 -7 12 -15 12 -9 0 -19 8 -22 18 -4 9 -12 20 -19 25 -7 4 -24 28 -38 53 -20 35 -26 61 -26 106 0 55 -2 60 -30 76 -30 17 -41 54 -19 67 6 4 9 25 7 48 -2 37 0 41 25 48 41 11 71 -21 64 -67 -5 -29 -2 -37 23 -54 33 -23 42 -25 39 -7 -1 6 1 19 5 29 10 21 -30 85 -101 161 -58 63 -61 72 -37 98 18 19 11 39 -12 39 -11 0 -13 -6 -9 -19 3 -11 0 -23 -6 -27 -17 -10 -50 32 -42 54 9 27 -25 -22 -37 -53 -13 -34 -30 -28 -45 14 -6 18 -14 29 -18 24 -10 -10 -27 16 -27 41 0 11 -8 29 -19 40 -22 25 -46 145 -31 160 10 10 80 -22 80 -36 0 -5 6 -8 13 -8 13 0 38 -41 52 -85 6 -19 9 -18 36 13 16 18 29 31 30 30 0 -2 2 -10 4 -20 7 -35 51 -79 115 -112 169 -89 297 -181 337 -241 11 -16 26 -47 34 -69 8 -23 23 -42 37 -47 36 -14 42 -11 42 16 0 23 3 25 50 25 45 0 53 -4 85 -39 24 -26 47 -41 72 -46 21 -4 43 -15 50 -24 15 -22 73 -26 73 -6 0 8 -9 19 -20 25 -11 6 -20 15 -20 20 0 21 -65 69 -94 70 -18 0 -42 12 -67 34 -22 20 -54 38 -76 42 -21 4 -47 15 -58 24 -132 115 -164 161 -185 265 -7 33 -20 75 -30 93 -18 33 -19 33 -30 12 -8 -15 -10 -42 -5 -77 6 -48 9 -54 26 -50 12 3 19 0 19 -9 0 -22 -31 -30 -42 -11 -5 10 -15 17 -22 17 -14 0 -129 125 -133 144 -1 6 -10 33 -20 59 -17 45 -22 50 -73 68 -30 10 -56 19 -57 19 -11 0 2 -31 25 -60 16 -19 34 -50 41 -67 8 -20 20 -33 32 -33 25 0 31 -14 15 -35 -16 -22 -52 -13 -59 15 -3 13 -14 20 -31 20 -19 0 -35 14 -72 65 -40 57 -45 70 -40 100 4 21 13 35 21 35 20 0 19 32 -2 68 -16 28 -13 62 6 62 5 0 35 -22 66 -50 43 -37 70 -52 112 -61 33 -8 67 -24 86 -41 18 -15 64 -44 104 -63 63 -31 95 -55 169 -126 13 -12 27 -17 38 -13 27 11 64 -16 77 -55 15 -45 59 -131 76 -149 7 -7 13 -17 13 -22 0 -5 6 -15 13 -22 7 -7 24 -29 37 -48 38 -55 46 -60 89 -60 23 0 41 2 41 4 0 2 -29 33 -65 69 -47 48 -65 73 -65 92 0 18 -6 29 -20 32 -23 6 -24 8 -10 34 6 11 21 19 35 19 14 0 25 5 25 10 0 14 -31 44 -67 65 -16 9 -41 35 -54 56 -13 22 -27 39 -30 39 -4 0 -10 16 -13 35 -4 19 -13 38 -20 42 -7 5 -16 25 -19 46 -3 21 -17 51 -31 68 -14 17 -26 38 -26 48 0 9 -4 21 -9 27 -5 5 -11 23 -13 39 -3 27 0 30 30 33 26 3 42 -5 87 -43 42 -36 59 -45 76 -40 20 7 19 9 -20 49 -46 47 -50 61 -21 69 25 6 25 24 1 60 -16 24 -19 26 -31 12 -18 -21 -47 -19 -53 5 -3 13 -17 22 -38 27 -37 7 -100 67 -147 139 -17 27 -38 56 -46 65 -10 9 -17 41 -20 85 -2 38 -5 72 -5 77 -1 4 -7 7 -13 7 -7 0 -26 25 -42 56 -32 61 -29 72 25 83 18 4 34 12 37 19 6 19 -37 14 -65 -8 -38 -30 -53 -26 -53 15 0 28 3 33 17 28 11 -4 12 -8 5 -11 -12 -4 -17 -32 -7 -32 9 0 49 39 44 43 -12 8 -102 27 -108 22 -3 -3 -5 -30 -5 -60 1 -46 -2 -54 -21 -63 -29 -13 -52 9 -57 52 -2 23 -14 37 -48 58 -25 15 -52 31 -61 34 -8 3 -23 18 -32 34 -10 16 -26 32 -37 35 -10 3 -24 21 -30 40 -6 18 -18 36 -27 39 -12 5 -14 15 -10 43 5 31 2 41 -23 70 -17 19 -30 42 -30 53 0 21 -28 53 -40 45 -4 -3 -6 4 -3 15 6 23 16 25 32 6 6 -7 29 -16 51 -20 26 -4 40 -12 40 -21 0 -8 6 -15 14 -15 7 0 35 -20 60 -45 26 -25 53 -45 59 -45 7 0 29 -16 50 -35 27 -24 37 -42 37 -63 0 -17 6 -32 14 -35 8 -3 20 -24 26 -46 8 -31 14 -38 29 -34 12 3 17 11 14 27 -7 35 16 47 63 35 26 -8 58 -30 97 -70 46 -48 57 -65 57 -93 0 -45 61 -126 95 -126 15 0 25 -6 25 -14 0 -13 80 -45 125 -51 11 -1 24 -3 28 -4 5 0 6 -5 2 -10 -3 -5 6 -22 20 -37 14 -15 26 -24 26 -20 1 3 3 9 4 14 2 4 6 17 10 30 7 20 12 22 39 16 32 -7 46 -19 46 -43 0 -17 -29 -40 -52 -41 -22 0 -22 -1 -1 -45 17 -35 53 -49 53 -20 0 8 7 15 15 15 18 0 20 -27 3 -32 -18 -6 15 -76 61 -128 20 -23 61 -89 91 -146 36 -72 57 -101 64 -94 16 16 57 11 75 -9 10 -11 29 -23 44 -26 23 -6 27 -4 27 14 0 12 -4 21 -10 21 -5 0 -10 5 -10 10 0 6 -24 34 -52 64 -110 112 -135 142 -151 184 -23 58 -22 72 8 72 23 0 74 -18 85 -30 3 -3 53 -38 112 -77 97 -66 200 -113 246 -113 10 0 24 -11 31 -23 18 -34 111 -73 111 -48 0 14 -72 71 -82 65 -4 -3 -34 19 -66 49 -31 30 -89 72 -127 95 -39 22 -89 59 -110 81 -22 23 -48 41 -57 41 -19 0 -133 59 -183 94 -50 35 -89 79 -109 123 -10 23 -24 44 -31 46 -6 3 -20 21 -29 41 -9 20 -24 36 -32 36 -13 0 -15 14 -13 75 1 41 -2 80 -7 87 -5 7 -18 30 -28 50 -10 20 -25 39 -32 42 -8 3 -14 13 -14 22 0 8 -6 14 -12 11 -7 -2 -13 -14 -12 -26 0 -11 -5 -21 -13 -21 -13 0 -17 11 -14 43 1 9 -4 17 -11 17 -22 0 -15 -44 11 -79 13 -17 28 -31 34 -31 5 0 4 7 -3 15 -10 12 -9 15 5 15 13 0 16 -6 11 -23 -4 -16 1 -31 15 -45 12 -14 22 -42 26 -75 4 -37 12 -59 29 -75 30 -28 30 -36 2 -64 l-23 -23 -3 23 c-2 12 -10 22 -19 22 -22 0 -172 103 -215 147 -20 21 -53 70 -73 108 -20 39 -43 75 -51 81 -8 6 -14 24 -14 39 0 23 3 26 23 21 12 -3 27 -6 32 -6 6 0 28 -16 50 -35 22 -20 54 -39 70 -44 17 -5 38 -12 48 -16 13 -6 17 -2 17 17 0 23 -21 40 -107 82 -13 6 -23 14 -23 19 0 4 -11 7 -25 7 -14 0 -25 4 -25 9 0 4 -22 22 -50 39 -57 35 -64 62 -30 105 l21 26 -42 31 c-23 16 -47 30 -52 30 -21 0 -47 34 -47 60 0 29 -21 80 -32 80 -5 0 -8 -10 -8 -23 0 -13 -13 -34 -30 -49 -35 -30 -39 -48 -10 -41 11 3 20 1 20 -5 0 -6 8 -13 18 -15 9 -3 -2 -3 -25 -2 -31 2 -43 -2 -43 -11 0 -23 -14 -16 -32 17 -16 27 -16 33 -3 52 14 21 5 47 -16 47 -15 0 -92 53 -110 75 -9 11 -39 28 -67 38 -28 10 -67 35 -89 56 -21 20 -64 50 -96 66 -63 31 -111 79 -134 132 -18 44 -35 50 -76 25 l-34 -20 -28 22 c-71 54 -122 126 -131 182 -4 29 -13 48 -25 55 -11 5 -19 17 -19 25 0 10 -8 14 -22 12 -17 -2 -24 -11 -26 -31 -3 -27 -5 -29 -40 -22 -39 7 -61 28 -88 83 -13 28 -20 33 -40 28 -18 -5 -34 1 -59 20 -30 22 -35 32 -35 67 0 22 -6 48 -14 56 -9 11 -15 53 -19 124 l-5 109 25 -7 c27 -6 73 -48 73 -65 0 -18 68 -144 94 -173 13 -16 35 -62 48 -103 19 -63 26 -74 43 -72 12 2 21 12 23 25 5 35 -18 104 -43 129 -23 23 -42 94 -30 113 3 6 12 5 23 -4 19 -16 165 -150 193 -177 10 -10 21 -40 25 -68 6 -48 8 -50 38 -50 18 0 37 5 43 11 22 22 59 -2 170 -108 119 -116 130 -131 159 -236 15 -55 25 -72 46 -83 45 -23 43 -29 23 93 -10 58 14 68 59 24 17 -17 36 -31 42 -31 5 0 27 -14 48 -31 27 -23 52 -62 88 -135 27 -57 53 -106 59 -109 15 -10 10 51 -5 64 -11 10 -12 19 -4 42 15 42 24 44 60 9 59 -57 131 -109 159 -115 33 -8 89 -71 127 -145 15 -30 32 -55 38 -57 6 -2 25 8 42 22 29 24 32 25 40 8 5 -10 7 -24 4 -32 -3 -9 0 -12 10 -8 32 12 203 -125 215 -172 3 -14 10 -31 15 -38 13 -16 -6 -50 -33 -58 -36 -12 -8 -40 79 -79 18 -9 40 -22 48 -31 9 -8 28 -15 44 -15 19 0 33 -8 44 -25 9 -14 21 -25 27 -25 5 0 19 -9 31 -20 11 -10 41 -22 64 -26 28 -4 44 -11 44 -20 0 -10 13 -14 40 -14 34 0 40 3 40 22 0 12 -10 32 -21 44 -15 16 -22 36 -22 66 0 37 -5 49 -42 86 -23 23 -45 42 -48 42 -3 0 -35 18 -71 40 -36 22 -69 40 -74 40 -5 0 -19 11 -32 25 -13 14 -28 25 -34 25 -6 0 -17 9 -24 20 -7 11 -21 20 -32 20 -11 0 -20 5 -20 12 0 16 -41 58 -56 58 -18 0 -27 35 -19 80 8 50 1 74 -29 88 -14 6 -26 22 -29 41 -4 17 -13 34 -21 37 -17 6 -86 -24 -86 -37 0 -19 33 -59 48 -59 21 0 52 -30 52 -50 0 -21 -23 -32 -47 -23 -10 4 -14 2 -10 -4 4 -6 1 -13 -7 -16 -10 -4 -12 0 -9 14 4 15 0 19 -21 19 -16 0 -26 6 -26 15 0 8 -18 29 -40 46 -27 22 -40 40 -40 57 0 22 3 24 45 20 25 -2 45 -1 45 2 -1 14 -18 28 -45 34 -16 4 -53 18 -81 32 -47 22 -53 29 -64 72 -7 26 -16 52 -21 57 -4 6 -11 26 -16 45 -5 19 -13 33 -18 30 -16 -8 -25 73 -10 88 11 12 17 12 36 -1 13 -8 36 -17 50 -21 14 -3 31 -17 37 -31 7 -14 27 -34 45 -45 21 -13 43 -39 58 -70 23 -49 25 -50 61 -44 40 6 88 -17 88 -42 0 -8 8 -18 18 -21 9 -4 31 -16 47 -29 17 -12 48 -31 70 -42 49 -24 90 -64 107 -103 10 -22 24 -33 58 -43 65 -19 88 -54 89 -138 1 -31 5 -38 20 -38 11 0 21 -3 23 -7 2 -5 23 -19 48 -32 25 -13 60 -38 77 -54 28 -26 42 -31 90 -34 31 -1 63 2 70 8 19 17 16 39 -6 39 -10 0 -29 8 -42 19 -13 10 -46 21 -72 25 -40 6 -57 16 -93 52 -31 32 -44 53 -44 74 0 32 -13 44 -50 44 -15 1 -25 7 -25 16 0 8 -9 19 -21 24 -12 6 -38 43 -61 90 -28 58 -49 87 -74 103 -19 12 -41 28 -50 36 -9 8 -31 23 -50 33 -19 11 -37 24 -41 29 -11 15 -10 95 2 95 5 0 29 -10 54 -21 44 -22 81 -20 74 3 -3 7 4 17 15 23 27 14 25 28 -6 43 -14 7 -29 21 -32 32 -4 11 -10 20 -14 20 -5 0 -23 16 -42 35 -27 27 -42 35 -71 35 -21 0 -38 4 -38 10 0 5 -16 32 -35 58 -19 27 -32 52 -28 55 3 4 21 7 40 7 25 0 36 -6 43 -22 21 -50 38 -62 100 -66 47 -3 61 -8 65 -23 4 -11 11 -17 16 -14 5 4 9 1 9 -4 0 -6 5 -11 10 -11 6 0 10 14 10 30 0 23 -4 30 -20 30 -10 0 -24 9 -30 19 -5 11 -22 21 -37 23 -19 2 -32 14 -46 41 -18 36 -21 37 -71 37 -49 0 -54 3 -101 51 -48 48 -52 50 -92 44 -31 -4 -54 -1 -86 13 -40 18 -45 23 -50 63 -6 44 -15 56 -89 114 -14 11 -33 42 -43 68 -10 26 -26 54 -36 60 -20 15 -34 75 -24 106 3 12 14 25 24 31 15 7 26 1 57 -31 42 -43 171 -139 187 -139 5 0 19 -9 31 -20 12 -11 41 -39 66 -63 25 -24 59 -52 77 -62 17 -10 37 -29 44 -41 6 -13 28 -34 48 -47 43 -29 141 -124 141 -138 0 -5 20 -9 45 -9 37 0 45 -3 45 -18 0 -27 53 -62 95 -62 21 0 35 5 35 13 0 7 9 29 20 49 22 43 19 108 -5 84 -7 -7 -11 -26 -9 -42 2 -16 1 -21 -2 -11 -6 18 -7 18 -27 -1 -31 -27 -54 -33 -67 -16 -7 8 -19 14 -26 14 -8 0 -14 4 -14 9 0 10 -33 45 -88 92 -23 20 -42 40 -42 44 0 4 -9 20 -20 36 l-21 28 21 21 c13 13 33 20 60 20 22 0 40 4 40 9 0 14 -69 43 -89 36 -27 -8 -50 65 -31 100 7 14 21 25 30 25 9 0 55 -31 103 -70 47 -38 92 -68 99 -65 7 3 18 -7 25 -22 11 -24 10 -30 -10 -51 l-22 -24 30 -24 c17 -13 41 -27 55 -31 14 -3 34 -14 45 -23 11 -10 45 -29 75 -43 30 -13 87 -45 126 -70 61 -39 73 -52 81 -83 7 -30 15 -40 41 -48 18 -6 56 -37 85 -70 42 -45 65 -62 110 -77 30 -10 68 -30 83 -44 15 -14 32 -25 38 -25 12 0 33 -23 52 -56 6 -11 24 -20 43 -22 18 -2 41 -12 51 -22 11 -11 31 -22 45 -26 14 -3 25 -10 25 -15 0 -8 14 -27 57 -74 10 -11 34 -28 55 -37 27 -13 38 -25 43 -49 4 -19 3 -34 -3 -38 -14 -9 -92 -1 -92 9 0 4 -20 15 -45 26 -25 10 -45 22 -45 26 0 4 -6 8 -13 8 -7 0 -29 17 -48 38 -48 51 -88 83 -92 74 -2 -4 -4 -32 -6 -63 l-2 -57 38 -6 c91 -16 93 -17 120 -63 21 -37 24 -47 12 -54 -8 -5 -21 -6 -29 -3 -29 12 -55 14 -27 2 15 -7 27 -15 27 -19 0 -4 16 -13 35 -19 19 -6 35 -17 35 -25 0 -7 14 -18 30 -25 17 -7 43 -28 60 -46 16 -19 35 -32 42 -30 7 1 10 1 6 -1 -13 -7 -9 -33 5 -33 6 0 19 -11 28 -23 17 -22 16 -23 -17 -19 -25 3 -34 9 -34 23 0 16 -8 19 -53 19 -42 0 -58 5 -73 21 -12 13 -25 18 -40 15 -16 -4 -27 1 -41 19 -16 22 -29 28 -84 34 -3 1 -14 9 -25 19 -38 35 -80 60 -144 87 -36 15 -88 38 -117 52 -55 27 -83 25 -83 -4 0 -26 57 -73 87 -73 14 0 39 -6 56 -14 18 -8 48 -19 69 -26 20 -6 38 -17 41 -23 3 -7 40 -24 83 -37 44 -13 90 -32 103 -42 13 -10 41 -18 61 -18 29 0 41 -6 54 -25 10 -15 26 -25 40 -25 12 0 31 -9 41 -20 10 -11 36 -23 58 -27 21 -3 41 -12 44 -19 2 -7 21 -15 41 -19 20 -4 53 -14 72 -24 31 -15 35 -20 32 -53 -2 -34 -1 -36 34 -43 26 -4 52 -23 95 -66 32 -32 63 -59 68 -59 6 0 17 16 25 35 17 39 49 47 89 20 12 -8 31 -14 42 -14 43 -1 90 -15 109 -33 12 -10 52 -28 91 -40 173 -52 358 -167 380 -238 4 -13 12 -19 20 -16 8 3 12 0 9 -7 -5 -14 52 -52 60 -39 6 10 -24 72 -35 72 -5 0 -9 9 -9 20 0 11 -4 20 -10 20 -21 0 -9 31 16 40 24 9 25 35 1 27 -6 -2 -20 5 -31 15 -11 10 -30 18 -43 18 -13 0 -23 4 -23 9 0 5 -12 12 -27 16 -24 6 -100 72 -171 148 -14 15 -29 27 -34 27 -11 0 -6 -53 7 -63 5 -5 1 -6 -10 -3 -11 3 -38 8 -60 12 -22 4 -50 13 -62 21 -12 8 -52 19 -89 24 -38 5 -82 18 -99 28 -18 10 -49 24 -70 31 -21 7 -63 25 -94 40 -31 15 -70 31 -87 34 -18 4 -40 16 -50 27 -9 10 -22 19 -28 19 -6 0 -29 18 -51 40 -22 21 -45 39 -52 40 -7 0 -10 6 -8 13 3 6 -12 30 -33 52 -21 22 -48 54 -61 70 -12 17 -35 32 -49 35 -20 4 -30 14 -38 38 -6 19 -17 38 -24 42 -8 5 -11 12 -7 17 5 4 12 1 16 -6 7 -10 16 -11 37 -4 37 13 54 7 54 -20 0 -18 2 -19 10 -7 8 13 11 13 19 1 7 -10 21 -12 57 -6 43 6 47 5 35 -9 -11 -13 -9 -17 15 -26 16 -6 40 -16 54 -24 20 -11 123 -36 149 -36 3 0 -16 20 -42 45 -27 25 -53 45 -58 45 -5 0 -9 4 -9 10 0 5 -16 12 -35 16 -28 5 -35 11 -35 30 0 21 -4 23 -25 18 -20 -5 -26 -1 -34 18 -12 32 -43 58 -48 41 -3 -7 -9 -13 -15 -13 -6 0 -7 7 -4 15 4 11 -3 19 -19 25 -14 5 -25 14 -25 18 0 14 -91 82 -101 76 -5 -3 -6 2 -3 10 3 9 2 16 -4 16 -5 0 -12 8 -14 18 -3 10 -26 28 -52 40 -25 12 -46 26 -46 30 0 4 -20 21 -45 36 -25 16 -50 35 -56 42 -6 8 -20 14 -30 14 -10 0 -23 9 -29 20 -6 11 -19 20 -29 20 -11 0 -25 13 -34 33 -9 18 -27 43 -41 56 -14 14 -26 30 -26 38 0 7 -4 13 -9 13 -5 0 -14 14 -20 30 -5 17 -21 34 -35 40 -14 5 -43 21 -66 36 -40 27 -40 27 -40 90 0 51 4 68 20 84 26 26 29 26 89 -15 28 -19 54 -35 59 -35 4 0 22 -16 41 -35 25 -26 41 -35 66 -35 29 0 40 -8 80 -59 54 -69 97 -87 124 -53 9 11 40 27 69 37 57 18 61 35 8 35 -18 0 -45 9 -59 20 -14 11 -33 20 -44 20 -10 0 -39 17 -65 38 -35 27 -47 44 -48 65 0 30 2 31 47 18 22 -7 34 -6 37 2 3 7 3 2 0 -10 -4 -19 -1 -23 16 -23 13 0 24 -8 27 -20 3 -11 12 -20 19 -20 8 0 22 -9 31 -20 10 -11 30 -20 44 -20 42 0 26 35 -28 60 -39 18 -130 99 -114 101 3 0 -10 5 -29 12 -30 11 -35 17 -42 56 -4 24 -9 46 -12 48 -8 9 -76 -21 -76 -33 0 -6 18 -30 40 -53 40 -41 51 -70 28 -72 -7 -1 -24 -2 -38 -2 -15 -1 -25 -8 -25 -17 0 -9 -11 -16 -26 -18 -20 -2 -28 2 -32 17 -3 12 -12 21 -21 21 -36 0 -134 54 -155 86 -26 38 -45 108 -37 141 8 28 46 41 58 20 5 -9 14 -22 21 -29 7 -7 27 -33 44 -58 55 -80 103 -111 103 -65 0 7 7 15 15 19 8 3 15 13 15 23 0 22 -118 133 -142 133 -12 0 -19 11 -24 35 -3 19 -10 35 -15 35 -5 0 -4 -11 1 -25 8 -21 7 -25 -8 -25 -25 0 -49 63 -58 148 l-7 72 70 0 c57 0 73 -4 88 -20z m140 0 c0 -7 -15 -14 -32 -16 -34 -4 -41 4 -21 24 15 15 53 9 53 -8z m553 3 c-2 -9 -9 -18 -17 -21 -8 -3 -11 0 -7 6 4 6 -3 8 -16 5 -22 -4 -23 -4 -4 11 26 21 48 20 44 -1z m3917 8 c7 -12 -22 -41 -40 -41 -7 0 -20 11 -29 25 l-16 25 39 0 c22 0 42 -4 46 -9z m2415 -2 c27 -8 42 -21 54 -46 18 -39 21 -63 6 -63 -6 0 -30 10 -53 21 -43 22 -69 48 -61 61 2 4 -1 10 -7 14 -8 4 -7 9 2 15 18 11 15 11 59 -2z m2245 1 c8 -13 -13 -40 -30 -40 -18 0 -28 32 -13 42 18 11 36 10 43 -2z m-5107 -6 c19 -5 22 -13 22 -54 0 -46 -2 -49 -31 -55 -18 -4 -28 -10 -23 -14 5 -3 10 -14 10 -24 2 -14 -1 -15 -12 -6 -20 16 -25 8 -16 -26 5 -19 11 -25 16 -17 10 17 19 15 46 -10 22 -21 23 -21 37 -2 41 57 42 58 69 33 47 -44 25 -169 -30 -169 -8 0 -21 12 -28 28 -10 20 -21 27 -43 28 -81 1 -87 3 -85 27 4 41 0 46 -34 52 -66 13 -90 124 -28 133 12 2 22 7 22 12 0 5 12 22 26 39 26 31 41 36 82 25z m2441 -20 c26 -33 26 -44 3 -44 -21 0 -82 28 -82 37 0 9 34 32 47 33 6 0 21 -12 32 -26z m239 8 c32 -25 28 -75 -6 -80 -30 -5 -72 23 -72 48 0 21 25 50 43 50 7 0 23 -9 35 -18z m-6539 -22 c25 -17 55 -33 68 -36 12 -3 25 -15 28 -25 4 -10 12 -19 20 -19 8 0 17 -9 20 -20 3 -11 14 -20 23 -20 9 0 36 -17 60 -39 37 -34 42 -44 42 -82 0 -69 -9 -89 -37 -89 -22 0 -44 18 -135 108 -7 8 -30 30 -52 50 -145 138 -151 146 -128 178 22 31 38 30 91 -6z m2713 3 c40 -14 51 -24 68 -60 24 -51 26 -122 5 -163 -9 -17 -11 -30 -6 -30 13 0 53 -123 46 -141 -3 -8 -14 -20 -25 -26 -21 -14 -17 -17 -86 59 -38 41 -125 108 -142 108 -14 1 -61 48 -76 78 -9 17 -16 43 -16 58 0 43 83 111 155 127 11 3 22 5 25 6 3 1 26 -7 52 -16z m3465 -13 c39 -23 42 -28 39 -62 -5 -48 -12 -58 -43 -58 -29 0 -63 32 -82 79 -12 28 -12 32 10 51 13 10 26 18 29 17 3 -1 24 -13 47 -27z m8623 5 c0 -16 -6 -25 -15 -25 -18 0 -18 5 -5 31 14 26 20 24 20 -6z m-13984 4 c9 -16 -21 -43 -40 -36 -9 4 -16 16 -16 27 0 15 7 20 24 20 14 0 28 -5 32 -11z m9402 -21 c14 -30 2 -75 -23 -84 -25 -10 -55 25 -55 63 0 26 5 36 23 43 30 12 40 8 55 -22z m-13754 16 c16 -6 11 -33 -8 -46 -12 -8 -26 20 -19 40 6 14 6 14 27 6z m1286 -9 c13 -16 6 -35 -15 -35 -12 0 -25 21 -25 41 0 14 26 11 40 -6z m7866 -12 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m310 19 c25 -17 84 -107 84 -128 0 -30 -10 -54 -22 -54 -5 0 -39 19 -74 42 -60 39 -64 45 -64 79 0 54 40 86 76 61z m2833 -9 c6 -5 -41 -38 -54 -38 -5 0 -11 12 -13 27 -3 26 -2 27 30 21 18 -3 35 -8 37 -10z m-11825 -45 c-10 -16 -25 17 -17 38 6 15 7 15 15 -5 4 -13 5 -28 2 -33z m4901 32 c13 0 26 6 28 13 3 6 6 -5 6 -25 1 -28 -4 -38 -18 -43 -12 -4 -18 -12 -14 -21 8 -21 -31 -18 -51 5 -12 13 -16 27 -11 42 9 28 29 50 33 38 2 -5 14 -9 27 -9z m7684 -37 c0 -42 -3 -52 -9 -38 -12 28 -12 95 0 95 6 0 10 -25 9 -57z m-9317 27 c47 4 58 0 58 -22 0 -47 -66 -80 -77 -38 -3 10 -14 22 -24 25 -10 4 -19 14 -19 24 0 25 11 33 26 20 7 -6 23 -10 36 -9z m2925 -8 c44 -21 73 -82 73 -151 l0 -54 -72 5 c-43 3 -96 15 -129 29 -53 22 -58 26 -73 74 -21 67 -21 65 14 65 19 0 33 7 40 21 22 41 76 45 147 11z m2387 2 c27 -28 30 -44 20 -106 -5 -28 -11 -38 -25 -38 -11 0 -19 4 -19 9 0 5 -20 30 -45 55 -45 47 -58 89 -32 99 33 14 75 6 101 -19z m-1404 4 c0 -10 2 -10 9 0 10 16 67 8 126 -19 22 -10 52 -19 68 -19 30 0 38 -27 15 -52 -7 -8 -18 -23 -24 -33 -6 -11 -23 -24 -37 -29 -22 -8 -33 -5 -57 12 -16 12 -36 22 -44 22 -9 0 -18 11 -22 24 -3 13 -21 39 -40 57 -24 24 -30 35 -21 41 18 11 27 10 27 -4z m4219 -6 c7 -14 5 -21 -9 -29 -14 -10 -21 -8 -35 7 -9 10 -14 24 -10 29 10 17 43 13 54 -7z m-3194 2 c25 -6 55 -66 37 -72 -21 -7 -14 -42 9 -42 11 0 17 -4 14 -10 -3 -6 1 -7 9 -4 22 8 20 -8 -5 -40 -25 -32 -41 -25 -37 17 3 31 2 32 -39 35 -35 3 -45 8 -67 42 -26 40 -32 61 -19 73 8 8 70 9 98 1z m2310 -18 c21 -32 11 -51 -48 -93 -49 -35 -67 -31 -67 18 0 32 24 63 65 84 37 18 32 19 50 -9z m1783 11 c10 -12 9 -59 -3 -96 -7 -24 -69 -54 -93 -47 -12 4 -23 19 -27 35 -10 45 10 80 57 101 51 23 53 24 66 7z m499 -51 c16 -43 20 -63 12 -77 -12 -23 -52 -25 -69 -4 -7 8 -21 15 -31 15 -15 0 -19 8 -19 40 0 35 3 40 23 40 16 0 18 3 8 9 -12 8 -12 11 0 25 27 30 51 15 76 -48z m-6827 50 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m5994 -22 c3 -9 6 -29 6 -46 0 -23 -4 -29 -17 -26 -20 4 -27 29 -19 64 7 27 21 31 30 8z m-4447 -13 c13 -21 8 -31 -18 -31 -22 0 -33 16 -25 35 8 21 29 19 43 -4z m2224 -3 c26 -30 21 -50 -13 -56 -15 -2 -18 5 -18 38 0 46 5 49 31 18z m8089 1 c0 -11 -4 -17 -10 -14 -5 3 -10 -1 -10 -9 0 -9 6 -16 13 -16 7 -1 4 -8 -8 -18 -12 -10 -21 -32 -23 -57 -2 -22 -10 -53 -18 -69 -8 -16 -14 -35 -14 -42 0 -7 -6 -19 -12 -26 -19 -19 -54 -87 -68 -130 -6 -21 -15 -38 -20 -38 -4 0 -10 -9 -13 -21 -3 -12 -10 -18 -16 -14 -16 9 -13 45 4 45 9 0 12 6 9 15 -9 23 -18 18 -33 -16 -11 -26 -12 -36 -1 -52 10 -17 10 -19 -4 -14 -8 3 -18 1 -22 -5 -5 -7 -2 -8 6 -3 10 6 11 3 5 -16 -4 -13 -8 -38 -9 -56 0 -17 -4 -35 -8 -39 -5 -4 -8 -18 -8 -31 0 -14 -6 -23 -15 -23 -9 0 -15 -9 -15 -24 0 -14 -10 -37 -23 -53 -12 -15 -30 -45 -39 -65 -12 -25 -26 -40 -43 -44 -38 -9 -41 2 -6 21 22 11 31 22 30 38 l-2 22 -4 -22 c-5 -25 -18 -30 -26 -10 -3 7 -6 5 -6 -5 -1 -10 -8 -18 -16 -18 -13 0 -13 3 1 26 9 14 17 38 16 55 0 19 6 33 18 39 11 6 29 32 40 58 20 44 22 46 36 28 8 -11 14 -23 14 -28 0 -4 5 -8 10 -8 6 0 10 12 10 26 0 17 -6 28 -20 31 -25 7 -25 10 0 51 11 18 20 39 20 47 0 7 9 17 20 20 12 4 20 15 20 28 1 27 72 169 87 174 6 2 13 -4 16 -14 2 -10 3 -6 1 9 -2 16 2 28 11 32 8 3 14 16 14 28 -1 21 -2 21 -6 3 -5 -19 -20 -35 -35 -35 -4 0 4 20 17 44 14 25 25 52 25 60 0 9 4 16 9 16 11 0 26 -59 17 -67 -3 -4 -6 1 -6 10 0 10 -4 17 -10 17 -14 0 -12 -11 5 -33 13 -17 15 -15 29 34 19 61 20 79 6 79 -5 0 -10 -17 -11 -37 0 -34 -1 -35 -10 -15 -10 25 -1 50 25 72 9 7 16 22 16 34 0 22 17 46 32 46 4 0 8 -9 8 -21z m-14203 -25 c26 -20 57 -40 70 -45 30 -11 69 -135 56 -176 -11 -33 -60 -45 -78 -20 -6 9 -24 18 -41 22 l-29 6 34 -19 c23 -13 30 -22 22 -26 -15 -10 -68 11 -75 30 -3 8 -12 14 -21 14 -8 0 -15 4 -15 9 0 17 -61 71 -81 71 -24 0 -53 44 -46 70 3 11 1 22 -4 25 -4 3 -11 -6 -15 -20 -8 -34 -24 -19 -17 16 4 20 14 30 46 40 23 7 53 19 67 26 42 22 77 15 127 -23z m438 -9 l50 -44 -21 -22 c-18 -18 -28 -20 -63 -14 -42 7 -81 42 -81 73 0 16 37 52 54 52 6 -1 34 -21 61 -45z m3690 20 c0 -26 -35 -32 -52 -9 -20 28 -16 36 20 32 24 -2 32 -8 32 -23z m155 -14 c20 -21 52 -47 70 -57 29 -18 60 -68 60 -100 0 -19 -59 -54 -91 -54 -18 0 -41 15 -73 48 -88 90 -105 137 -66 180 30 32 57 27 100 -17z m1661 -1 c25 -24 38 -44 33 -51 -4 -8 -3 -9 4 -5 12 7 29 -40 18 -51 -11 -11 -36 -12 -36 -2 0 5 5 9 10 9 6 0 10 5 10 10 0 18 -18 11 -25 -10 -3 -11 -13 -20 -20 -20 -8 0 -19 9 -25 20 -6 11 -18 20 -27 20 -13 0 -14 2 -2 17 10 12 10 14 1 9 -20 -12 -25 19 -8 58 8 20 17 36 20 36 4 0 24 -18 47 -40z m408 14 c35 -45 24 -72 -23 -54 -21 8 -26 16 -26 45 0 43 20 46 49 9z m-10059 2 c9 -12 8 -15 -9 -13 -12 1 -21 7 -21 14 0 17 15 16 30 -1z m3920 10 c0 -11 -19 -15 -25 -6 -3 5 1 10 9 10 9 0 16 -2 16 -4z m1249 -25 c29 -8 44 -50 36 -97 -4 -25 -13 -34 -48 -48 l-42 -17 -34 38 c-49 56 -62 78 -55 96 11 30 86 44 143 28z m3771 -9 c0 -13 -12 -22 -22 -16 -10 6 -1 24 13 24 5 0 9 -4 9 -8z m2966 -29 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m-6349 -10 c29 -31 66 -110 58 -123 -11 -17 -69 -40 -103 -40 l-34 0 37 -37 c60 -62 76 -103 73 -186 -3 -72 -3 -72 -33 -75 -60 -5 -120 29 -196 112 -39 43 -82 101 -95 129 -21 47 -22 52 -8 80 9 16 29 36 45 45 16 10 29 23 29 30 0 14 27 16 32 2 2 -5 18 -13 37 -16 l34 -7 -6 46 c-6 46 -6 47 21 48 15 0 36 4 47 9 30 13 34 12 62 -17z m1693 12 c17 -9 30 -20 30 -25 0 -5 10 -18 21 -29 l21 -20 -22 -30 c-16 -23 -29 -31 -52 -31 -42 0 -58 24 -52 80 10 78 9 78 54 55z m486 -51 c19 -18 48 -45 65 -60 21 -20 29 -36 29 -62 l0 -34 -77 7 c-43 4 -86 11 -96 17 -10 5 -44 9 -76 9 -45 0 -63 5 -86 23 l-29 23 25 31 c27 34 72 58 91 48 7 -4 24 -13 37 -21 31 -17 41 -11 41 24 0 50 19 49 76 -5z m1779 20 c20 -32 19 -41 -9 -59 -29 -19 -52 -11 -71 26 -25 47 -20 58 25 57 30 0 43 -6 55 -24z m1746 -3 c43 -41 44 -76 6 -118 -24 -26 -37 -29 -37 -8 0 8 -16 27 -35 42 -36 29 -43 56 -22 84 23 31 56 31 88 0z m1299 20 c0 -14 -18 -23 -30 -16 -6 4 -8 11 -5 16 8 12 35 12 35 0z m548 -19 c3 -17 -2 -22 -17 -22 -14 0 -21 6 -21 18 0 38 33 41 38 4z m4502 13 c-7 -9 -15 -13 -19 -10 -3 3 1 10 9 15 21 14 24 12 10 -5z m-15185 -29 c24 -19 54 -37 65 -41 28 -9 70 -49 70 -67 0 -9 -7 -21 -15 -28 -20 -17 -13 -25 49 -54 47 -22 54 -30 58 -59 7 -59 -4 -82 -37 -80 -43 3 -192 83 -231 123 -28 28 -34 42 -34 77 0 36 3 43 20 43 31 0 24 33 -10 48 -31 14 -42 52 -15 52 8 0 15 5 15 10 0 18 19 11 65 -24z m6445 20 c0 -8 16 -27 36 -43 35 -28 36 -31 28 -68 -12 -50 -32 -62 -73 -45 -38 15 -121 93 -121 113 0 8 9 17 20 20 11 3 20 12 20 21 0 12 10 16 45 16 32 0 45 -4 45 -14z m1050 -26 c0 -33 -3 -40 -20 -40 -16 0 -20 7 -20 33 0 36 6 47 27 47 9 0 13 -13 13 -40z m1742 9 c8 -55 -34 -74 -95 -43 -29 15 -30 18 -12 25 11 4 31 17 45 28 37 30 57 27 62 -10z m218 -5 c0 -37 -32 -80 -51 -68 -5 3 -9 0 -9 -5 0 -6 -7 -11 -15 -11 -9 0 -19 -10 -23 -21 -7 -17 -11 -10 -21 37 -8 32 -9 60 -5 62 5 1 25 11 44 21 19 11 45 19 58 20 19 1 22 -4 22 -35z m250 -29 c0 -62 -1 -66 -27 -77 -42 -17 -53 -17 -53 -2 0 8 -9 19 -20 26 -24 15 -24 21 -4 64 10 20 24 34 35 34 10 0 21 5 24 10 3 6 15 10 26 10 17 0 19 -7 19 -65z m1176 51 c8 -8 14 -26 14 -40 0 -24 -2 -25 -20 -14 -12 8 -20 24 -20 40 0 32 5 34 26 14z m-8269 -85 c7 -9 18 -33 24 -53 7 -21 15 -38 18 -39 48 -6 89 -32 109 -70 7 -13 11 -42 10 -64 l-3 -40 -50 0 c-28 0 -68 9 -88 19 -21 9 -54 20 -73 23 -49 8 -46 17 32 83 l29 25 -30 5 c-53 9 -65 22 -77 87 -6 33 -8 68 -5 77 6 15 12 13 49 -10 24 -15 49 -34 55 -43z m3457 42 c55 -27 73 -53 60 -87 -5 -12 -20 -16 -58 -16 -53 0 -53 0 -64 39 -13 43 -15 74 -5 84 9 9 6 10 67 -20z m2534 4 c2 -12 -3 -17 -17 -17 -15 0 -21 6 -21 21 0 25 33 22 38 -4z m-6977 0 c15 -11 39 -49 39 -61 0 -3 -13 -6 -28 -6 -27 0 -92 50 -92 71 0 13 63 10 81 -4z m5034 -13 c30 -32 30 -36 5 -51 -16 -11 -24 -9 -48 12 -16 14 -32 34 -35 45 -8 32 47 27 78 -6z m-2169 -15 c10 -17 -12 -32 -51 -35 -28 -3 -35 0 -35 15 0 10 3 21 7 24 11 11 71 8 79 -4z m-4659 -14 c3 -9 3 -19 -1 -22 -7 -7 -36 16 -36 28 0 15 30 10 37 -6z m3881 -23 c24 -23 42 -48 42 -60 0 -16 6 -22 23 -22 34 0 83 -35 98 -69 8 -17 20 -31 26 -31 16 0 14 11 19 -100 5 -112 1 -136 -26 -143 -23 -6 -157 49 -184 75 -9 10 -23 15 -31 12 -10 -4 -15 0 -15 15 0 12 -6 21 -15 21 -8 0 -15 6 -15 14 0 8 -7 22 -16 31 -17 17 -9 35 29 63 21 16 14 56 -15 86 -34 37 -32 90 4 131 20 22 31 18 76 -23z m3208 24 c8 -9 10 -17 5 -21 -15 -9 -59 5 -65 21 -7 19 41 19 60 0z m1251 -30 c5 -24 6 -53 1 -65 -7 -19 -13 -22 -40 -16 -35 8 -78 41 -78 60 0 7 13 15 30 18 16 4 37 15 47 26 26 28 28 26 40 -23z m2353 23 c0 -11 5 -17 10 -14 16 10 11 -37 -8 -77 -15 -31 -21 -36 -31 -25 -11 10 -13 8 -8 -10 3 -13 1 -23 -4 -23 -15 0 -10 85 6 106 8 10 15 29 15 42 0 12 5 22 10 22 6 0 10 -9 10 -21z m1839 -24 c22 -47 28 -95 11 -95 -5 0 -10 -11 -10 -24 0 -20 -56 -108 -80 -126 -3 -3 -10 -13 -13 -23 -10 -28 -31 -15 -39 24 -4 23 1 63 18 126 13 50 24 93 24 95 0 11 38 48 49 48 6 0 11 5 11 10 0 19 8 10 29 -35z m-619 -7 c0 -17 -3 -18 -15 -8 -8 7 -15 19 -15 26 0 8 6 11 15 8 8 -4 15 -15 15 -26z m-3110 -57 c-1 -69 -12 -92 -58 -118 -52 -30 -68 -6 -52 74 14 65 60 124 90 116 17 -5 20 -14 20 -72z m1498 62 c10 -20 9 -69 -1 -80 -9 -9 -47 27 -47 44 0 20 19 53 30 53 5 0 13 -8 18 -17z m-9016 -13 c7 -11 18 -20 25 -20 16 0 16 -12 1 -32 -9 -12 -22 -15 -40 -11 -24 4 -28 10 -28 37 0 49 20 62 42 26z m473 -7 c16 -9 34 -22 38 -29 4 -8 23 -14 42 -14 57 0 81 -36 88 -132 10 -121 -16 -148 -94 -103 -24 14 -62 30 -83 36 -61 17 -83 36 -111 97 -27 60 -26 105 3 150 13 20 21 23 51 17 19 -4 49 -14 66 -22z m6309 -6 c23 -31 23 -92 1 -118 -19 -20 -19 -58 0 -65 8 -4 15 -19 15 -34 0 -31 -14 -47 -25 -30 -4 6 -24 18 -45 26 -41 17 -52 37 -39 73 7 17 15 22 36 19 26 -3 28 0 28 32 0 29 -5 37 -32 50 l-32 15 25 33 c30 37 39 37 68 -1z m480 27 c23 -9 20 -41 -9 -78 -14 -18 -25 -36 -25 -39 0 -3 11 -17 25 -31 21 -21 25 -35 25 -81 0 -73 -20 -105 -67 -105 -30 0 -93 23 -93 35 0 2 7 26 16 52 12 34 15 67 11 114 -5 63 -4 68 21 88 14 11 34 21 44 21 10 0 18 7 18 15 0 16 9 19 34 9z m3302 -21 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m-12826 8 c0 -6 -4 -13 -10 -16 -5 -3 -10 1 -10 9 0 9 5 16 10 16 6 0 10 -4 10 -9z m5222 -10 c65 -22 218 -119 242 -152 12 -18 16 -48 16 -130 0 -105 0 -107 -24 -111 -29 -6 -49 5 -96 49 -19 18 -40 33 -46 33 -18 0 -62 48 -121 131 -21 30 -34 63 -39 97 -6 44 0 102 10 102 1 0 28 -9 58 -19z m896 2 c2 -9 -7 -13 -27 -13 -21 0 -31 5 -31 16 0 19 51 16 58 -3z m3748 2 c-4 -10 1 -15 14 -15 11 0 24 -9 30 -21 14 -25 14 -24 -28 -32 -33 -7 -33 -6 -27 22 3 17 2 32 -4 36 -16 10 -13 25 5 25 10 0 14 -6 10 -15z m312 -22 c2 -17 -4 -47 -12 -67 -12 -28 -21 -36 -41 -36 -40 0 -65 18 -65 46 0 26 31 47 38 26 6 -18 22 -4 22 18 0 22 28 52 44 47 6 -2 12 -17 14 -34z m1382 27 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-2750 -15 c10 -12 10 -21 2 -40 -14 -31 -46 -32 -66 -3 -21 30 -20 37 7 48 32 13 43 12 57 -5z m2540 5 c0 -5 -7 -10 -16 -10 -8 0 -12 5 -9 10 3 6 10 10 16 10 5 0 9 -4 9 -10z m-742 -27 c24 -35 24 -61 0 -69 -10 -3 -18 -10 -18 -15 0 -13 18 -11 23 4 2 7 8 8 13 3 5 -5 4 -11 -3 -13 -7 -3 -13 -9 -13 -15 0 -12 -26 -38 -38 -38 -6 0 -12 7 -16 15 -3 8 -14 15 -24 15 -10 0 -23 5 -30 12 -27 27 -2 123 29 115 9 -3 23 -1 30 4 21 13 26 11 47 -18z m2244 -25 c-8 -8 -15 -8 -27 2 -20 17 -19 38 3 42 22 5 40 -28 24 -44z m-14472 27 c7 -9 10 -18 7 -21 -10 -11 -37 5 -37 21 0 19 14 19 30 0z m163 -54 c15 -38 27 -78 27 -89 0 -12 4 -23 9 -26 13 -8 20 -56 8 -56 -5 0 -42 35 -82 77 l-73 77 21 43 c32 67 57 60 90 -26z m5977 9 c35 -35 72 -63 88 -66 42 -9 82 -77 82 -142 0 -40 -4 -53 -19 -62 -38 -20 -58 -9 -134 71 -61 64 -80 79 -97 74 -25 -8 -25 -20 0 -48 30 -32 23 -79 -13 -91 -36 -13 -50 5 -41 54 4 19 6 88 5 153 l-2 117 36 0 c30 0 44 -9 95 -60z m540 56 c0 -2 3 -11 6 -20 4 -12 0 -16 -15 -16 -14 0 -21 6 -21 20 0 11 7 20 15 20 8 0 15 -2 15 -4z m390 -5 c0 -6 -4 -13 -10 -16 -5 -3 -10 1 -10 9 0 9 5 16 10 16 6 0 10 -4 10 -9z m3190 -4 c0 -22 -23 -37 -56 -37 -35 0 -49 12 -40 35 7 20 96 21 96 2z m-2934 -22 c26 -28 43 -87 44 -146 0 -20 7 -42 15 -49 12 -10 15 -4 21 40 8 59 23 71 55 41 19 -18 24 -35 30 -123 4 -56 5 -107 2 -114 -2 -6 -14 -10 -26 -9 -12 1 -29 3 -38 4 -9 0 -20 12 -23 26 -6 25 -69 65 -101 65 -8 0 -15 8 -15 19 0 10 -9 21 -20 24 -11 3 -24 16 -29 29 -5 12 -25 38 -45 56 -23 21 -36 42 -37 60 -1 36 2 86 7 93 2 4 33 7 70 8 59 1 69 -1 90 -24z m6372 -47 c3 -33 0 -38 -22 -44 -33 -8 -46 2 -46 35 0 33 18 53 45 49 15 -2 21 -12 23 -40z m-5998 17 c10 -9 46 -20 81 -26 71 -11 124 -44 140 -87 6 -15 8 -56 5 -92 -4 -36 -7 -84 -8 -107 -2 -43 -2 -43 -40 -43 -27 0 -40 5 -48 20 -6 11 -15 20 -21 20 -5 0 -45 36 -88 80 -43 44 -84 80 -92 80 -17 0 -59 72 -59 100 0 10 6 22 13 28 10 9 67 33 96 41 3 0 12 -6 21 -14z m5455 -85 c-1 -41 -4 -84 -8 -94 -7 -18 -9 -18 -25 5 -12 17 -17 44 -17 89 0 66 8 82 35 77 12 -2 15 -18 15 -77z m-2312 55 c7 -16 -8 -29 -23 -20 -10 6 -2 35 10 35 4 0 10 -7 13 -15z m1859 1 c13 -18 9 -43 -9 -65 -16 -18 -20 -19 -36 -6 -16 12 -17 18 -8 48 11 34 38 46 53 23z m-2504 -46 c27 -26 28 -44 2 -70 -24 -24 -48 -16 -70 24 -7 14 -17 26 -22 26 -11 0 -10 27 2 50 9 17 13 17 38 5 15 -8 37 -23 50 -35z m1416 -2 c0 -37 -5 -52 -25 -69 -30 -26 -62 -39 -99 -39 -23 0 -30 5 -35 29 -6 28 13 89 37 118 8 10 29 13 67 11 l56 -3 -1 -47z m810 13 c23 -25 14 -74 -20 -110 -28 -30 -30 -48 -10 -70 13 -14 13 -19 -2 -39 l-18 -23 -31 31 c-29 29 -47 76 -38 102 2 7 9 32 15 56 9 33 18 45 43 56 42 19 41 19 61 -3z m5528 13 c3 -3 4 -14 1 -24 -4 -17 -7 -17 -19 -5 -8 7 -14 18 -14 24 0 11 23 15 32 5z m-9254 -32 c10 -13 8 -20 -15 -44 -14 -15 -35 -31 -46 -34 -22 -7 -67 14 -67 31 0 7 -7 18 -15 25 -26 22 -17 39 23 43 56 6 105 -2 120 -21z m800 -11 c5 -47 -5 -79 -28 -91 -16 -9 -23 -5 -45 27 -14 21 -25 43 -25 50 0 24 40 54 68 51 23 -2 28 -9 30 -37z m-605 -8 c-6 -14 -14 -16 -37 -7 -23 9 -20 23 7 33 24 9 39 -3 30 -26z m277 0 c36 -34 40 -43 40 -85 0 -53 4 -56 33 -30 19 16 20 16 34 -5 9 -13 22 -23 29 -23 8 0 14 -7 14 -16 0 -14 -9 -16 -51 -12 -33 4 -55 11 -61 21 -5 9 -24 19 -42 23 -19 3 -48 18 -66 33 -27 22 -33 35 -38 79 l-5 52 37 0 c28 0 45 -8 76 -37z m530 21 c0 -11 -6 -14 -22 -9 -20 5 -21 4 -5 -5 9 -6 22 -8 28 -5 6 4 19 -1 30 -11 43 -39 10 -46 -57 -12 -48 24 -53 32 -26 47 26 15 52 13 52 -5z m277 10 c24 -5 34 -15 50 -54 18 -43 19 -51 6 -69 -8 -12 -27 -28 -42 -35 -25 -13 -29 -13 -42 2 -69 83 -70 85 -64 111 13 50 29 58 92 45z m2018 -47 c4 -12 -3 -43 -15 -70 -18 -40 -25 -47 -49 -47 -21 0 -32 8 -46 33 -16 31 -17 35 -1 66 9 17 24 40 33 51 15 17 19 17 45 4 15 -8 30 -24 33 -37z m916 33 c-25 -22 -41 -26 -41 -10 0 11 30 29 50 29 10 0 8 -6 -9 -19z m-1977 -24 c7 -38 -4 -75 -28 -95 -14 -12 -20 -11 -41 9 -31 29 -31 40 0 74 14 15 25 31 25 37 0 5 8 9 19 9 13 0 21 -10 25 -34z m-10574 -8 c32 -26 60 -75 60 -107 0 -20 -43 -71 -60 -71 -18 0 -51 40 -57 70 -3 16 -12 35 -19 41 -8 7 -14 30 -14 56 0 45 0 45 31 39 17 -3 43 -16 59 -28z m7815 -28 c0 -34 -1 -35 -42 -38 -38 -3 -43 -1 -43 17 0 14 -6 21 -20 21 -13 0 -20 7 -20 18 0 27 3 28 67 22 l58 -5 0 -35z m243 44 c13 -4 22 -14 22 -26 0 -11 4 -16 11 -13 6 4 21 -3 34 -15 18 -17 23 -29 18 -51 -3 -17 0 -35 7 -44 7 -8 10 -22 6 -30 -11 -31 -22 -13 -24 42 -1 31 -5 59 -8 62 -4 3 -4 -27 -2 -66 4 -70 3 -73 -19 -73 -13 0 -23 -4 -23 -9 0 -12 -56 -31 -90 -31 -15 0 -34 8 -44 18 -9 11 -35 28 -57 38 l-40 19 7 80 c3 44 8 82 9 84 12 12 160 24 193 15z m5495 -14 c-3 -11 -12 -20 -19 -20 -20 0 -17 28 4 33 9 3 18 5 19 6 0 0 -1 -8 -4 -19z m-4276 -29 c17 -19 22 -34 18 -55 -3 -16 -6 -30 -8 -30 -1 -1 -20 -11 -42 -23 -55 -29 -72 -16 -67 52 5 71 19 96 50 88 14 -3 36 -18 49 -32z m3387 8 c13 -68 1 -99 -32 -78 -16 10 -19 20 -15 48 10 64 37 81 47 30z m-11543 -19 c18 -22 40 -42 49 -45 10 -3 48 -32 85 -65 38 -33 73 -60 79 -60 10 0 31 -46 66 -142 5 -16 14 -28 19 -28 5 0 12 -18 16 -40 5 -30 11 -40 26 -40 16 0 19 -7 19 -50 0 -40 -4 -51 -21 -61 -18 -9 -24 -8 -32 7 -21 37 -66 70 -122 89 -58 20 -125 74 -125 101 0 8 -9 22 -20 31 -14 13 -20 30 -20 61 0 29 -7 53 -20 69 -11 14 -20 36 -20 49 0 14 -9 32 -20 41 -15 13 -20 30 -20 70 0 66 16 69 61 13z m7449 30 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m1503 3 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m3099 -24 c37 -19 42 -19 50 -5 12 22 31 20 54 -5 16 -17 16 -22 4 -29 -8 -6 -18 -10 -22 -10 -3 0 -4 -8 -1 -19 4 -18 1 -17 -73 4 -43 12 -80 27 -82 33 -3 11 15 52 24 52 3 0 23 -9 46 -21z m-4629 -61 c53 -58 57 -66 55 -105 -1 -28 4 -49 15 -61 22 -24 11 -34 -51 -53 -37 -11 -45 -10 -53 2 -12 19 -11 46 1 54 27 17 -16 47 -67 47 -32 1 -73 45 -73 79 0 34 17 81 33 91 7 4 28 8 47 8 30 0 43 -8 93 -62z m-3579 46 c26 -10 18 -24 -14 -24 -29 0 -38 9 -23 23 8 9 17 9 37 1z m1498 0 c4 -3 2 -18 -2 -34 -9 -31 1 -40 45 -40 29 0 37 -12 30 -43 -9 -33 -40 -45 -102 -40 -47 5 -51 8 -57 35 -11 53 -7 74 19 102 22 24 54 34 67 20z m758 -20 c0 -8 10 -14 25 -14 17 0 25 -5 25 -18 0 -19 74 -95 102 -105 15 -5 16 -11 6 -37 -16 -46 -50 -56 -109 -30 -26 11 -54 20 -63 20 -8 0 -18 5 -22 11 -10 16 -5 145 7 175 9 26 29 24 29 -2z m473 6 c3 -11 12 -20 21 -20 9 0 16 -5 16 -12 0 -6 6 -18 14 -27 8 -9 26 -29 40 -44 30 -32 33 -53 9 -79 -19 -21 -60 -23 -132 -6 l-51 11 0 99 0 98 39 0 c30 0 40 -4 44 -20z m9550 13 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z m-11952 -16 c-1 -12 -15 -9 -19 4 -3 6 1 10 8 8 6 -3 11 -8 11 -12z m7209 -4 c39 -23 46 -56 20 -104 -11 -22 -20 -46 -20 -54 0 -9 -10 -15 -24 -15 -17 0 -28 9 -40 34 -20 42 -20 51 0 109 18 52 23 55 64 30z m-5618 -33 c7 -11 20 -20 30 -20 18 0 33 -48 24 -78 -12 -35 -76 -53 -107 -29 -30 23 -42 104 -19 132 18 21 58 19 72 -5z m2928 -7 c0 -35 7 -45 48 -68 33 -20 42 -35 20 -35 -10 0 -10 -2 0 -9 17 -10 -16 -21 -64 -21 -39 0 -44 11 -44 96 0 57 2 64 20 64 15 0 20 -7 20 -27z m-10084 6 c4 -7 7 -41 8 -78 l1 -66 40 -5 c35 -4 40 -8 43 -34 5 -41 -11 -52 -42 -30 -14 11 -26 23 -26 28 0 13 -61 66 -76 66 -16 0 -34 31 -34 57 0 22 45 73 65 73 8 0 17 -5 21 -11z m8459 -7 c0 -18 -20 -15 -23 4 -3 10 1 15 10 12 7 -3 13 -10 13 -16z m1295 3 c0 -8 -9 -15 -20 -15 -11 0 -20 7 -20 15 0 8 9 15 20 15 11 0 20 -7 20 -15z m737 -7 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m3477 16 c21 -8 21 -53 0 -82 -21 -30 -41 -28 -46 6 -3 24 -1 27 22 27 27 0 35 25 11 33 -10 3 -12 0 -8 -12 4 -9 2 -16 -2 -16 -15 0 -22 33 -9 42 16 9 13 9 32 2z m3473 -16 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-5379 -9 c81 -37 91 -72 37 -126 -19 -19 -35 -39 -35 -44 0 -5 -7 -9 -15 -9 -8 0 -15 6 -15 13 0 8 -4 7 -10 -3 -8 -13 -12 -11 -27 10 -35 49 -43 121 -17 158 19 27 24 27 82 1z m-6630 -6 c15 -13 23 -35 28 -78 6 -58 5 -61 -21 -75 -26 -14 -28 -13 -50 14 -16 20 -24 25 -28 15 -4 -8 -4 -2 -1 14 5 20 2 27 -10 27 -9 0 -16 4 -16 8 0 5 -11 14 -25 20 -14 6 -25 18 -25 26 0 42 108 63 148 29z m6276 -8 c9 -24 -6 -84 -26 -102 -31 -28 -53 -6 -53 53 0 41 4 50 24 60 27 14 47 9 55 -11z m-11314 -43 c0 -9 12 -28 27 -44 26 -27 26 -28 8 -48 -14 -15 -21 -17 -32 -9 -7 6 -13 16 -13 22 0 6 -7 19 -17 29 -16 18 -26 84 -15 102 7 12 42 -31 42 -52z m1553 38 c14 -11 30 -20 36 -20 13 0 73 -59 125 -123 22 -26 44 -46 50 -44 20 8 56 -12 56 -30 0 -10 -16 -33 -35 -52 -34 -31 -46 -61 -25 -61 6 0 10 -4 10 -10 0 -22 -70 -1 -100 30 -3 3 -14 10 -25 16 -11 6 -24 20 -30 32 -5 12 -16 22 -23 22 -17 0 -12 32 6 38 6 2 12 -3 12 -11 0 -32 94 -33 120 -2 14 17 9 19 -54 30 -21 3 -43 11 -50 16 -6 6 -29 20 -51 33 -22 12 -42 30 -44 41 -2 11 -12 31 -22 44 -44 55 -10 94 44 51z m3696 -15 c39 -19 75 -35 78 -35 11 0 104 -103 119 -133 17 -32 37 -200 28 -230 -5 -17 -12 -18 -53 -12 -25 3 -69 10 -97 13 -43 6 -60 15 -106 57 -64 58 -73 73 -83 139 -3 27 -14 63 -22 81 -14 30 -14 36 7 93 16 43 28 62 40 62 9 0 49 -16 89 -35z m4016 5 c-5 -8 -11 -8 -21 1 -12 10 -12 14 -2 20 16 10 33 -5 23 -21z m3912 24 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-7239 -18 c-7 -8 -15 -12 -17 -11 -5 6 10 25 20 25 5 0 4 -6 -3 -14z m7219 -48 c-2 -13 -4 -5 -4 17 -1 22 1 32 4 23 2 -10 2 -28 0 -40z m20 0 c-2 -13 -4 -5 -4 17 -1 22 1 32 4 23 2 -10 2 -28 0 -40z m-8307 14 c0 -8 33 -47 73 -86 115 -114 120 -120 112 -154 -7 -36 -28 -46 -58 -30 -26 14 -140 39 -147 32 -11 -11 19 -39 49 -45 17 -4 40 -14 50 -23 10 -9 25 -16 35 -16 32 0 86 -37 86 -60 0 -7 24 -9 78 -4 79 6 132 -5 132 -28 0 -6 11 -23 24 -37 14 -15 28 -38 31 -53 l7 -28 -63 0 c-67 0 -96 -10 -85 -29 5 -7 44 -11 104 -11 75 0 103 -4 122 -17 41 -28 70 -66 76 -101 7 -38 20 -48 39 -32 11 9 18 7 34 -9 12 -12 28 -21 37 -21 11 0 14 -6 9 -20 -5 -15 -2 -20 13 -20 18 0 32 -18 32 -42 0 -17 -113 2 -133 23 -21 22 -35 23 -61 4 -19 -14 -14 -35 8 -35 8 0 19 -7 26 -15 7 -8 24 -15 39 -15 46 0 71 -11 71 -31 0 -17 -9 -19 -110 -19 -91 0 -115 3 -141 19 -22 13 -42 18 -61 14 -15 -3 -48 0 -72 7 -40 11 -43 14 -40 42 5 44 11 48 65 48 43 0 50 3 47 18 -2 12 -16 19 -48 22 -47 6 -67 15 -127 56 -51 34 -80 40 -102 20 -18 -16 -51 -13 -51 5 0 5 -9 4 -20 -3 -29 -19 -25 -28 14 -28 22 0 53 -13 90 -36 45 -30 56 -42 56 -64 0 -63 -50 -78 -148 -44 -27 9 -81 17 -127 18 -61 1 -80 4 -80 15 0 8 -7 17 -16 20 -8 3 -32 25 -53 49 -21 23 -43 42 -49 42 -6 0 -7 -3 -4 -7 4 -3 2 -12 -5 -20 -6 -7 -8 -16 -5 -20 8 -8 -11 -43 -23 -43 -6 0 -10 9 -10 19 0 12 -9 21 -26 25 -14 4 -43 14 -65 24 -34 15 -39 21 -39 50 0 43 21 50 72 23 44 -23 73 -16 49 13 -7 8 -11 25 -9 38 3 21 8 23 50 21 31 -1 54 -8 68 -21 12 -11 42 -23 67 -27 26 -4 52 -13 60 -21 13 -12 83 -21 83 -10 0 21 -17 36 -39 36 -34 0 -50 11 -52 35 -4 43 2 53 36 62 l35 8 -37 75 -37 75 0 188 c-1 152 2 190 13 197 20 11 51 0 51 -18z m7337 -89 c8 -46 -3 -77 -38 -112 -47 -47 -59 -41 -58 27 1 105 14 174 35 189 17 13 20 11 37 -29 10 -24 21 -57 24 -75z m1733 96 c0 -6 -4 -7 -10 -4 -5 3 -10 11 -10 16 0 6 5 7 10 4 6 -3 10 -11 10 -16z m-9919 -4 c1 -17 -18 -17 -25 0 -4 11 -1 15 10 13 8 -2 15 -7 15 -13z m4872 -5 c3 -13 14 -20 29 -20 33 0 48 -18 48 -57 l0 -33 -60 0 -60 0 0 58 c0 32 3 62 7 65 13 13 31 7 36 -13z m1997 -23 c0 -41 -2 -44 -45 -65 l-46 -22 -5 30 c-8 36 -8 34 0 70 5 28 9 30 51 30 l45 0 0 -43z m-2765 22 c4 -6 5 -12 2 -15 -7 -7 -37 7 -37 17 0 13 27 11 35 -2z m1358 -9 c3 -11 13 -20 22 -20 15 0 15 -3 5 -15 -12 -14 -15 -14 -31 1 -19 17 -26 54 -10 54 5 0 11 -9 14 -20z m2993 6 c8 -20 -13 -56 -32 -56 -8 0 -13 4 -10 9 4 5 2 11 -4 13 -5 1 -7 13 -4 26 7 25 41 30 50 8z m4864 5 c0 -6 -4 -13 -10 -16 -5 -3 -10 1 -10 9 0 9 5 16 10 16 6 0 10 -4 10 -9z m299 -28 c0 -33 -1 -35 -9 -15 -8 20 -4 52 6 52 2 0 4 -17 3 -37z m-949 9 c0 -4 -11 -9 -25 -10 -14 -1 -25 3 -25 8 0 6 11 10 25 10 14 0 25 -4 25 -8z m-16890 -13 c0 -6 13 -29 29 -52 22 -31 33 -63 42 -121 9 -56 15 -74 20 -60 7 18 8 17 8 -3 1 -30 -8 -29 -65 10 -33 22 -50 40 -52 57 -2 14 -13 48 -24 76 -26 64 -19 104 17 104 14 0 25 -5 25 -11z m5920 -4 c10 -12 10 -21 1 -41 -15 -33 -14 -34 7 -34 11 0 29 -9 42 -20 12 -11 31 -22 41 -25 11 -4 23 -22 29 -48 6 -23 15 -50 20 -59 13 -23 13 -31 0 -23 -10 6 -15 -33 -12 -86 1 -20 -4 -28 -21 -33 -35 -9 -47 -7 -47 9 0 8 -9 20 -20 27 -11 7 -20 18 -20 25 0 7 -7 13 -15 13 -9 0 -20 11 -25 25 -5 14 -15 25 -21 25 -18 0 -98 94 -99 116 0 13 -8 24 -21 27 -12 3 -18 10 -14 16 3 6 1 11 -4 11 -6 0 -11 9 -11 19 0 20 18 31 51 31 11 0 29 9 41 20 26 24 80 26 98 5z m3619 6 c23 -6 23 -7 7 -23 -9 -10 -32 -25 -51 -34 -28 -13 -40 -14 -69 -4 -47 15 -54 29 -25 51 25 19 90 24 138 10z m1319 -4 c19 -22 -4 -40 -52 -43 -37 -1 -46 2 -46 15 0 9 5 22 12 29 16 16 73 15 86 -1z m-6444 -12 c15 -8 49 -15 73 -15 36 0 51 -5 69 -26 13 -14 24 -32 24 -41 0 -9 7 -43 16 -75 14 -50 15 -63 4 -83 -15 -28 -35 -33 -43 -11 -3 8 -27 24 -52 37 -26 13 -66 42 -89 64 -24 22 -55 51 -69 64 -30 26 -35 62 -11 85 19 20 41 20 78 1z m1781 4 c70 -19 98 -61 50 -73 -27 -7 -35 -36 -10 -36 8 0 15 -3 15 -7 0 -8 42 -29 112 -57 46 -18 62 -47 55 -100 -4 -28 -1 -46 9 -57 7 -8 17 -30 20 -47 6 -27 4 -31 -10 -26 -26 10 -29 -19 -7 -85 22 -68 19 -91 -12 -91 -43 0 -252 43 -256 53 -2 6 -15 22 -28 35 -18 18 -26 41 -34 100 -11 90 -5 138 22 171 l20 24 22 -20 c12 -11 34 -23 48 -27 17 -3 29 -15 33 -29 5 -21 42 -47 66 -47 16 0 11 30 -5 36 -25 10 -71 57 -89 93 -10 18 -27 36 -37 38 -28 8 -21 47 9 51 12 2 22 10 22 20 0 12 -3 13 -11 5 -7 -7 -21 -8 -40 -3 -16 5 -29 6 -29 2 0 -3 -7 3 -15 14 -8 10 -15 29 -15 41 0 33 29 40 95 22z m2172 5 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m6402 -10 c22 -16 23 -22 18 -79 -4 -41 -16 -81 -35 -116 -32 -59 -51 -75 -77 -65 -14 5 -17 15 -13 51 3 24 13 51 22 60 11 11 16 34 16 70 0 42 4 57 20 68 11 8 17 17 13 20 -13 14 13 6 36 -9z m-14396 -20 c23 -14 68 -51 99 -82 45 -43 58 -64 63 -96 4 -23 14 -49 22 -58 9 -10 13 -25 9 -35 -7 -17 -8 -17 -17 -1 -5 10 -27 22 -49 28 -67 18 -195 149 -213 218 -14 57 19 67 86 26z m8527 16 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m2380 0 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m5569 -33 c1 -5 -3 -5 -9 -2 -5 3 -10 16 -9 28 0 21 1 21 9 2 5 -11 9 -24 9 -28z m-8559 23 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m8604 -4 c-6 -16 -34 -30 -34 -18 0 5 5 13 12 20 16 16 29 15 22 -2z m-15209 -15 c18 -7 18 -9 -8 -26 -25 -16 -29 -16 -52 -1 -14 9 -23 21 -20 26 7 12 52 12 80 1z m4740 -16 c0 -24 -38 -33 -61 -15 -28 24 -17 41 24 38 29 -2 37 -7 37 -23z m209 18 c55 -4 76 -10 72 -18 -2 -7 6 -17 20 -24 13 -6 24 -15 24 -21 0 -5 11 -10 23 -10 43 0 61 -32 58 -106 -3 -84 -16 -107 -56 -101 -23 3 -38 -3 -64 -25 -18 -16 -40 -27 -48 -24 -8 3 -19 6 -24 6 -5 0 -9 13 -9 28 0 33 -48 82 -80 82 -15 0 -20 7 -20 24 0 14 -5 28 -10 31 -19 12 -41 77 -30 90 6 7 7 26 4 44 -6 30 -5 31 28 31 19 0 70 -3 112 -7z m1612 -12 c-17 -18 -16 -19 12 -26 16 -3 53 -5 81 -4 28 2 54 0 58 -4 3 -4 -37 -7 -90 -7 -96 0 -97 0 -97 24 0 18 7 26 23 29 12 2 24 5 26 6 2 0 -4 -8 -13 -18z m9244 -11 c-7 -4 -10 -13 -6 -19 5 -7 1 -9 -8 -5 -19 7 -40 -40 -32 -71 3 -11 1 -27 -4 -35 -7 -11 -10 -2 -10 30 0 43 10 67 50 113 9 11 16 13 19 6 2 -6 -2 -15 -9 -19z m-5851 -4 c29 -30 39 -103 21 -146 -13 -31 -54 -60 -85 -60 -27 0 -18 113 17 203 13 33 18 34 47 3z m5714 17 c-19 -4 -21 -9 -16 -35 4 -21 3 -29 -5 -24 -6 3 -9 19 -8 34 5 35 2 32 29 31 l22 -2 -22 -4z m-9063 -13 c0 -5 -7 -10 -16 -10 -8 0 -12 5 -9 10 3 6 10 10 16 10 5 0 9 -4 9 -10z m2470 -6 c0 -8 -4 -12 -10 -9 -5 3 -10 10 -10 16 0 5 5 9 10 9 6 0 10 -7 10 -16z m60 6 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m1901 -17 c-5 -10 -12 -30 -15 -44 -10 -47 -66 -45 -66 3 0 38 19 58 50 54 17 -2 30 1 30 7 0 6 3 8 6 5 3 -3 1 -14 -5 -25z m483 -40 c7 -65 6 -67 -24 -95 -17 -15 -42 -28 -56 -28 -20 0 -24 5 -24 29 0 33 34 117 57 144 29 31 40 20 47 -50z m-2467 -11 l-4 -37 -1 43 c-1 23 -7 42 -13 42 -5 0 -7 5 -3 11 12 20 26 -18 21 -59z m-767 48 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m135 -30 c0 -20 -5 -35 -12 -35 -6 0 -15 -3 -19 -7 -14 -15 -34 -8 -34 11 0 42 19 73 43 69 18 -2 22 -9 22 -38z m1397 -35 c2 -59 0 -70 -14 -73 -23 -5 -58 33 -58 63 0 21 57 92 66 82 2 -1 4 -34 6 -72z m-5222 50 c0 -8 -4 -15 -10 -15 -5 0 -10 7 -10 15 0 8 5 15 10 15 6 0 10 -7 10 -15z m4064 -4 c25 -28 6 -61 -34 -61 -32 0 -33 2 -24 49 8 36 32 41 58 12z m456 15 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m1296 -44 c12 -26 26 -77 33 -114 10 -57 9 -73 -3 -96 -14 -27 -19 -29 -68 -23 -17 2 -58 108 -58 150 0 47 40 131 63 131 7 0 21 -21 33 -48z m1494 40 c0 -5 11 -15 25 -22 29 -15 32 -35 10 -57 -9 -8 -19 -28 -22 -44 -7 -34 -8 -34 -31 -11 -27 27 -32 47 -25 97 4 35 10 45 24 45 11 0 19 -4 19 -8z m-6464 -18 c44 -9 82 -21 86 -28 4 -6 8 -32 8 -57 0 -25 7 -54 15 -65 14 -19 14 -19 15 0 0 26 28 56 52 56 10 0 18 -7 18 -15 0 -14 46 -33 56 -22 3 2 -11 22 -31 42 -38 41 -44 65 -20 85 25 21 244 5 268 -18 15 -15 16 -23 7 -46 -5 -15 -13 -25 -17 -23 -14 8 -53 -12 -53 -28 0 -10 10 -15 30 -15 17 0 39 -6 50 -12 15 -10 22 -10 32 0 6 6 36 12 65 12 42 0 54 -4 63 -20 6 -11 17 -20 25 -20 24 0 20 -72 -4 -87 -24 -15 -122 0 -158 23 -20 13 -25 12 -43 -6 -27 -27 -70 -27 -70 0 0 12 -16 28 -45 45 -24 15 -47 35 -50 46 -6 19 -30 26 -39 11 -7 -11 6 -27 26 -35 9 -3 21 -20 25 -38 6 -21 26 -45 63 -73 55 -42 91 -97 95 -146 2 -31 9 -35 43 -22 15 6 44 13 65 17 37 6 37 7 35 48 l-3 42 58 19 c50 16 60 17 68 5 4 -8 12 -14 16 -14 27 -2 88 -18 103 -27 25 -16 50 -3 50 26 0 25 -41 66 -66 66 -7 0 -22 12 -33 26 l-20 26 24 26 c14 15 28 34 30 44 7 21 86 58 125 58 20 0 56 -16 100 -45 38 -25 73 -45 78 -45 6 0 13 -21 17 -47 6 -39 15 -56 53 -93 26 -25 72 -59 102 -77 31 -17 73 -48 94 -69 36 -36 38 -39 18 -42 -12 -2 -22 -9 -22 -15 0 -22 -37 -36 -125 -48 -94 -12 -165 0 -165 27 0 8 -12 21 -26 30 -25 17 -25 20 -19 85 10 95 -7 101 -63 22 -33 -47 -29 -68 18 -90 47 -21 62 -55 36 -81 -14 -14 -39 -17 -149 -17 l-132 0 -5 87 c-5 81 -19 122 -37 104 -4 -3 -8 -47 -9 -97 -1 -50 -4 -92 -6 -94 -2 -3 -36 -9 -75 -15 -79 -11 -216 9 -243 35 -13 13 -12 17 8 31 12 8 22 21 22 28 0 8 10 16 22 20 17 4 20 8 11 17 -15 15 -73 -16 -80 -42 -3 -10 -13 -19 -22 -19 -9 0 -36 -14 -60 -30 -24 -17 -47 -30 -50 -30 -6 0 -10 -18 -14 -70 l-2 -25 84 3 c87 3 135 -8 145 -34 4 -12 10 -12 26 -4 11 6 20 17 20 25 0 31 267 32 341 1 24 -10 39 -24 43 -41 4 -14 13 -25 22 -25 9 0 18 -9 21 -20 3 -11 12 -20 19 -20 8 0 18 -8 21 -17 4 -10 28 -40 55 -68 54 -56 58 -69 26 -86 -32 -17 -211 -3 -256 20 l-36 18 -24 -29 c-28 -33 -24 -40 33 -58 55 -17 108 -42 118 -54 5 -7 12 -5 21 6 25 34 62 39 139 21 40 -9 76 -19 80 -23 16 -14 -35 -58 -93 -79 l-60 -22 0 -44 c0 -34 -5 -48 -20 -57 -11 -7 -20 -18 -20 -24 0 -13 -54 -24 -115 -24 -41 0 -81 20 -124 60 -23 23 -23 23 -16 1 4 -12 2 -21 -4 -21 -6 0 -11 9 -11 21 0 15 -4 19 -16 15 -12 -4 -15 -2 -11 9 4 9 -5 22 -24 36 -17 12 -44 34 -62 50 -23 21 -33 25 -39 16 -7 -9 -8 -8 -6 3 6 35 -12 70 -40 75 -55 12 -90 48 -62 65 9 6 18 5 23 -3 6 -7 6 -4 2 8 -4 11 -8 27 -9 35 -2 9 -24 18 -63 25 -67 12 -114 45 -219 151 -44 44 -59 66 -53 76 6 11 2 14 -19 13 -19 -1 -37 9 -58 32 l-32 32 24 16 c16 10 48 15 106 15 57 0 78 -3 68 -10 -13 -8 -12 -10 3 -10 9 0 17 5 17 10 0 6 7 10 15 10 8 0 15 5 15 11 0 6 -12 9 -27 6 -16 -2 -22 -2 -15 0 37 13 -3 21 -130 27 -102 5 -153 12 -178 24 -38 19 -127 123 -137 161 -3 14 4 57 16 98 20 69 20 75 5 105 -12 24 -14 36 -5 54 6 13 15 24 21 24 6 0 31 -32 56 -71 47 -74 88 -116 131 -135 32 -14 83 -55 150 -121 53 -53 83 -67 83 -38 0 16 -12 34 -38 58 -75 70 -77 82 -19 98 23 7 44 14 46 16 9 7 -63 73 -79 73 -9 0 -26 -9 -37 -20 -20 -18 -24 -19 -59 -4 -21 9 -63 41 -94 72 -32 32 -73 69 -93 85 -42 32 -40 45 11 75 45 26 58 27 158 6z m-6940 -31 c-8 -8 -56 17 -56 29 0 5 14 1 31 -7 17 -9 28 -19 25 -22z m10431 15 c12 -16 4 -120 -8 -112 -5 3 -9 -4 -9 -16 0 -13 4 -19 12 -14 7 4 8 3 4 -4 -10 -16 -26 -15 -26 1 0 6 -14 25 -30 41 -24 24 -30 38 -30 73 l0 43 39 0 c21 0 43 -6 48 -12z m600 -33 c3 -32 1 -35 -22 -35 -21 0 -25 5 -25 30 0 17 7 33 17 39 22 12 25 9 30 -34z m-3359 13 c2 -12 -3 -18 -16 -18 -11 0 -22 -7 -26 -15 -11 -29 -96 8 -96 42 0 11 15 13 67 11 55 -2 68 -6 71 -20z m4869 -10 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m4773 21 c0 -5 -4 -8 -9 -5 -5 3 -12 -4 -16 -17 -4 -14 -8 -17 -12 -9 -3 7 -2 19 1 27 6 17 36 20 36 4z m-7776 -26 c17 -89 17 -100 1 -116 -24 -24 -45 -21 -82 13 -46 41 -42 62 15 98 26 17 50 31 54 31 3 1 9 -11 12 -26z m-261 -64 l97 -62 0 -56 c0 -60 -17 -104 -41 -109 -21 -4 -97 64 -101 91 -2 17 -11 23 -35 25 -34 3 -88 55 -117 111 -15 29 -15 30 12 51 39 31 71 22 185 -51z m8288 40 c-9 -22 -10 -22 -10 -3 -1 11 2 24 6 27 12 12 14 0 4 -24z m-17899 -1 c2 -17 9 -22 25 -21 13 2 29 -7 41 -22 10 -13 30 -27 44 -30 28 -7 43 -31 53 -83 4 -18 18 -45 31 -59 14 -15 22 -33 19 -40 -8 -21 51 -143 69 -143 13 0 16 12 16 59 0 70 16 91 47 61 12 -10 29 -41 38 -69 10 -31 24 -52 36 -56 12 -4 19 -15 19 -31 0 -13 9 -29 20 -36 15 -10 20 -24 20 -60 0 -26 -5 -50 -11 -54 -21 -13 -96 83 -114 145 -8 26 -17 37 -33 39 -18 3 -22 -1 -22 -26 0 -32 -23 -49 -40 -29 -6 7 -18 21 -28 33 -9 11 -43 37 -74 57 -72 46 -108 109 -108 191 0 47 -4 60 -31 90 -30 35 -51 106 -31 106 6 0 12 -10 14 -22z m326 4 c6 -18 -15 -14 -22 4 -4 10 -1 14 6 12 6 -2 14 -10 16 -16z m37 8 c-3 -5 12 -14 35 -21 22 -7 42 -20 45 -31 4 -10 10 -18 14 -18 4 0 13 -12 20 -27 7 -15 26 -44 42 -64 17 -21 33 -57 37 -81 5 -26 13 -43 21 -43 8 0 16 -13 18 -29 3 -23 1 -27 -12 -22 -9 3 -32 6 -51 6 -27 0 -42 8 -65 33 -63 66 -118 154 -125 195 -7 48 2 112 17 112 6 0 8 -4 4 -10z m8736 -2 c14 -21 10 -62 -7 -86 -12 -17 -25 -22 -59 -22 -36 0 -48 5 -69 31 -49 58 -27 84 73 88 36 1 57 -2 62 -11z m989 -2 c0 -8 -4 -18 -10 -21 -5 -3 -10 3 -10 14 0 12 5 21 10 21 6 0 10 -6 10 -14z m248 -18 c14 -24 14 -28 -1 -52 -30 -46 -48 -25 -39 47 5 43 16 44 40 5z m449 -5 c-3 -10 -5 -4 -5 12 0 17 2 24 5 18 2 -7 2 -21 0 -30z m120 -10 c-3 -10 -5 -2 -5 17 0 19 2 27 5 18 2 -10 2 -26 0 -35z m1815 30 c36 -33 14 -103 -52 -159 -22 -20 -26 -20 -47 -7 -13 9 -23 22 -23 31 0 51 58 152 87 152 9 0 25 -7 35 -17z m4188 5 c0 -9 4 -8 10 2 8 12 10 9 10 -13 0 -25 -2 -27 -20 -17 -21 11 -28 40 -10 40 6 0 10 -6 10 -12z m950 -8 c-6 -12 -7 -20 -1 -20 5 0 12 6 14 13 3 6 6 -3 6 -20 1 -18 -3 -33 -9 -33 -5 0 -10 -11 -10 -24 0 -14 -4 -27 -9 -30 -5 -4 -15 -29 -22 -56 -15 -57 -20 -63 -72 -85 -35 -15 -37 -14 -37 5 0 11 6 20 14 20 9 0 12 7 9 19 -3 10 0 22 6 25 6 4 11 16 11 27 0 10 5 19 10 19 6 0 10 5 10 11 0 24 66 149 78 149 10 0 10 -5 2 -20z m-6925 1 c3 -5 1 -12 -5 -16 -5 -3 -10 1 -10 9 0 18 6 21 15 7z m5947 -23 c-1 -9 7 -18 19 -21 20 -5 21 -7 5 -23 -21 -20 -33 -10 -42 35 -6 26 -4 33 7 29 8 -3 13 -12 11 -20z m762 7 c-4 -10 0 -15 11 -15 17 0 17 -1 0 -20 -10 -11 -23 -20 -29 -20 -6 0 -5 4 3 9 7 5 10 14 6 20 -7 12 0 41 9 41 3 0 3 -7 0 -15z m-13044 -20 c0 -11 -20 -25 -36 -25 -2 0 -4 11 -4 24 0 19 4 23 20 19 11 -3 20 -11 20 -18z m3944 19 c10 -4 16 -18 16 -38 0 -50 -11 -58 -71 -54 -50 3 -54 5 -57 30 -6 50 56 84 112 62z m136 -23 c0 -9 -12 -24 -26 -34 -20 -15 -28 -16 -39 -7 -21 17 -19 58 3 62 31 7 62 -4 62 -21z m1327 10 c3 -11 17 -21 34 -25 36 -7 50 -48 25 -75 -26 -29 -20 -51 14 -51 22 0 30 5 30 18 0 14 2 15 10 2 19 -30 9 -180 -13 -180 -6 0 -23 14 -39 32 -24 28 -26 33 -13 41 9 5 23 6 31 3 8 -3 14 -1 14 4 0 6 -5 10 -11 10 -14 0 -48 41 -49 58 0 9 -7 11 -21 7 -13 -4 -27 -1 -39 10 -15 14 -18 30 -17 91 1 65 3 74 20 74 10 0 21 -9 24 -19z m-7707 -6 c0 -8 -4 -15 -10 -15 -5 0 -10 7 -10 15 0 8 5 15 10 15 6 0 10 -7 10 -15z m2220 0 c0 -7 6 -18 14 -22 27 -16 39 -53 26 -79 -19 -35 -37 -36 -65 -3 -29 35 -32 74 -8 101 19 22 33 23 33 3z m1415 -5 c10 -11 29 -20 42 -20 13 0 26 -7 28 -15 3 -8 7 -22 10 -30 2 -8 3 -16 2 -18 -5 -6 94 -98 101 -93 4 2 9 -6 10 -19 1 -16 -6 -28 -18 -35 -12 -7 -20 -21 -20 -38 -1 -45 -18 -57 -85 -56 -75 1 -102 9 -111 36 -11 35 16 52 62 39 59 -17 84 -14 84 8 0 12 -9 21 -26 25 -66 17 -116 49 -131 85 -22 52 -5 151 27 151 4 0 15 -9 25 -20z m4872 -2 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m80 -10 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m-2070 1 c13 -7 27 -26 32 -40 6 -18 22 -32 44 -40 41 -14 58 -44 46 -76 -6 -17 -16 -23 -37 -23 -16 0 -35 -7 -42 -15 -7 -8 -10 -15 -6 -15 8 0 -22 -60 -41 -82 -20 -22 -73 -5 -73 23 0 10 -6 19 -12 19 -7 0 -20 15 -29 33 -10 21 -27 35 -48 41 -20 6 -33 17 -37 31 -7 29 22 86 47 92 11 3 22 16 25 28 10 38 86 53 131 24z m2040 -1 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m6253 18 c0 -16 -14 -36 -26 -36 -14 0 -19 22 -7 33 7 8 33 10 33 3z m500 -17 c0 -5 -4 -9 -10 -9 -5 0 -10 7 -10 16 0 8 5 12 10 9 6 -3 10 -10 10 -16z m-6162 -1 c13 -13 15 -49 6 -97 -6 -27 -10 -30 -28 -25 -31 10 -65 37 -71 57 -10 27 4 57 26 57 10 0 19 5 19 10 0 14 33 13 48 -2z m1667 -2 c7 -7 15 -19 16 -27 4 -23 -12 -139 -21 -144 -18 -11 -80 72 -80 107 0 23 39 78 56 78 8 0 22 -6 29 -14z m410 -7 c4 -11 4 -23 1 -26 -3 -4 -6 1 -6 10 0 10 -7 17 -16 17 -8 0 -12 5 -9 10 10 16 23 12 30 -11z m-12693 2 c49 -19 138 -131 138 -175 0 -8 6 -19 13 -25 8 -6 19 -29 26 -51 9 -31 9 -44 -1 -60 -14 -22 -30 -27 -23 -7 7 19 -7 33 -47 46 -20 7 -49 24 -65 39 -15 14 -31 25 -35 24 -5 -1 -8 4 -8 12 0 24 -33 116 -42 116 -9 0 -11 74 -1 83 9 9 17 9 45 -2z m13076 0 c11 -6 10 -20 -4 -69 -10 -34 -21 -62 -26 -62 -4 0 -8 -7 -8 -15 0 -19 -7 -19 -25 -2 -13 14 -19 55 -16 115 1 37 17 43 24 10 4 -20 4 -19 6 5 1 28 22 36 49 18z m-5918 -16 c0 -8 -4 -15 -10 -15 -5 0 -10 7 -10 15 0 8 5 15 10 15 6 0 10 -7 10 -15z m5476 -25 c-4 -25 -2 -40 4 -40 5 0 10 -9 10 -19 0 -11 5 -23 10 -26 6 -4 10 -14 9 -23 -1 -10 1 -24 5 -33 10 -23 -10 -70 -28 -63 -16 6 -41 68 -32 82 3 5 6 28 7 53 2 56 10 109 16 109 3 0 3 -18 -1 -40z m794 -40 c0 -73 -2 -80 -20 -80 -17 0 -20 7 -20 46 0 25 -4 43 -9 40 -11 -7 -1 45 12 62 5 6 16 12 23 12 11 0 14 -19 14 -80z m-6235 60 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m2979 1 c3 -4 -1 -17 -9 -27 -8 -10 -15 -33 -15 -49 0 -38 -17 -57 -39 -45 -9 4 -28 13 -43 21 -16 7 -28 16 -28 21 0 4 17 -1 37 -12 37 -19 63 -14 48 10 -5 8 -10 8 -20 0 -11 -9 -17 -5 -29 18 -16 31 -13 42 11 42 8 0 21 7 29 15 17 16 50 20 58 6z m140 -30 c-5 -22 -10 -29 -17 -22 -7 7 -6 18 3 36 17 32 22 27 14 -14z m2369 -34 c8 -6 7 -7 -3 -4 -9 2 -16 17 -16 38 -2 31 -1 31 3 4 3 -16 10 -34 16 -38z m-8828 24 c-3 -12 -13 -21 -21 -21 -19 0 -18 10 4 30 21 21 26 18 17 -9z m4591 -3 c42 -30 44 -34 44 -80 0 -55 -6 -57 -86 -37 l-44 11 0 63 c0 88 14 95 86 43z m1234 -41 c5 -66 5 -67 -20 -67 -55 0 -80 38 -64 97 6 21 47 44 69 39 6 -1 12 -33 15 -69z m7006 46 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m41 5 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-5541 6 c32 -9 41 -40 36 -132 l-4 -83 -35 -14 c-53 -22 -76 -19 -90 13 -7 15 -10 38 -7 52 37 172 42 180 100 164z m5334 -21 c0 -13 -3 -13 -15 -3 -8 7 -15 16 -15 21 0 5 7 6 15 3 8 -4 15 -13 15 -21z m-10632 -23 c5 0 28 -20 53 -44 24 -25 59 -52 79 -61 20 -9 40 -26 45 -38 6 -12 20 -26 31 -32 36 -18 74 -69 68 -92 -7 -26 -31 -33 -114 -33 -73 1 -95 10 -135 58 -15 17 -35 32 -46 32 -10 0 -19 5 -19 11 0 5 -11 27 -25 47 -30 44 -32 91 -5 150 l19 43 21 -21 c11 -11 24 -20 28 -20z m4002 19 c0 -11 -27 -12 -34 0 -3 4 -3 11 0 14 8 8 34 -3 34 -14z m1830 1 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m-7823 -20 c15 -23 2 -34 -27 -25 -31 10 -24 39 10 44 3 1 11 -8 17 -19z m5367 5 c-6 -16 -24 -21 -24 -7 0 11 11 22 21 22 5 0 6 -7 3 -15z m-944 -10 c-9 -10 -9 -15 -1 -15 6 0 11 -5 11 -11 0 -16 -71 -4 -82 13 -14 24 -8 28 38 28 40 0 45 -2 34 -15z m8415 -4 c-3 -6 -11 -11 -17 -11 -6 0 -6 6 2 15 14 17 26 13 15 -4z m-17565 -11 c0 -4 -9 -10 -20 -13 -15 -4 -20 0 -20 13 0 13 5 17 20 13 11 -3 20 -9 20 -13z m10596 -7 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m1184 17 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m5689 -16 c-14 -18 -24 -11 -15 11 3 9 11 13 16 10 8 -5 7 -11 -1 -21z m-16816 4 c26 -13 35 -32 20 -41 -5 -2 -3 -2 4 -1 6 2 14 -3 16 -10 3 -7 30 -24 60 -37 48 -21 57 -30 80 -79 15 -30 28 -66 29 -80 2 -17 8 -24 20 -22 15 2 17 -2 12 -27 -10 -49 3 -98 29 -105 15 -4 19 -8 11 -16 -8 -8 -28 -1 -72 24 -33 20 -64 36 -69 36 -4 0 -14 14 -21 30 -8 17 -20 30 -27 30 -13 0 -60 56 -81 96 -6 11 -14 38 -18 59 -5 25 -14 39 -28 43 -15 4 -19 11 -16 33 3 16 3 27 0 24 -2 -2 -11 3 -20 11 -13 14 -13 17 -1 25 8 5 15 4 17 -1 2 -6 8 -10 13 -10 4 0 6 7 3 15 -7 18 3 19 39 3z m9131 2 c29 -11 52 -48 39 -61 -15 -15 -63 8 -63 29 0 10 -5 23 -12 30 -15 15 0 16 36 2z m1436 -30 c0 -11 -2 -20 -4 -20 -2 0 -6 9 -9 20 -3 11 -1 20 4 20 5 0 9 -9 9 -20z m-4248 -7 c24 -21 24 -73 1 -73 -56 1 -92 35 -73 70 13 24 47 26 72 3z m3281 10 c13 -12 -15 -33 -44 -33 -30 0 -41 23 -16 33 18 8 53 8 60 0z m2267 -36 c0 -5 -10 -22 -21 -39 -15 -20 -28 -28 -40 -25 -11 3 -17 1 -14 -3 5 -9 -49 -40 -70 -40 -7 0 -18 7 -25 15 -10 12 -10 15 1 16 10 0 11 2 2 6 -19 7 -17 92 2 99 18 7 47 -14 39 -28 -3 -5 -3 -16 0 -25 5 -13 10 -11 27 11 11 14 32 32 47 39 23 12 29 12 40 -2 6 -8 12 -19 12 -24z m320 1 c7 -100 5 -135 -12 -151 -24 -25 -52 -21 -74 11 -30 40 -34 57 -23 96 9 34 67 86 95 86 6 0 12 -19 14 -42z m4640 12 c0 -5 -7 -10 -16 -10 -8 0 -12 5 -9 10 3 6 10 10 16 10 5 0 9 -4 9 -10z m-4177 -28 c25 -22 23 -92 -3 -120 -27 -29 -56 -28 -64 1 -10 38 -7 117 5 117 6 0 9 6 6 14 -7 18 30 10 56 -12z m-7502 8 c22 -12 25 -43 5 -59 -10 -9 -17 -6 -30 13 -30 46 -18 68 25 46z m7179 -51 c0 -48 -1 -49 -30 -49 -30 0 -30 -1 -45 73 -4 20 28 37 57 29 14 -3 18 -15 18 -53z m-11879 21 c14 0 40 -13 59 -29 19 -15 49 -35 65 -44 45 -23 105 -83 105 -105 0 -11 11 -44 25 -73 24 -53 24 -54 5 -73 -18 -18 -22 -18 -47 -5 -15 8 -50 34 -78 59 -129 116 -165 166 -165 229 0 21 -5 31 -15 31 -8 0 -15 6 -15 13 0 23 14 29 26 13 6 -9 22 -16 35 -16z m6779 15 c0 -9 -9 -15 -25 -15 -16 0 -25 6 -25 15 0 9 9 15 25 15 16 0 25 -6 25 -15z m1950 -79 c-7 -19 -15 -23 -42 -21 -46 3 -45 33 1 62 35 22 36 22 43 3 4 -11 3 -31 -2 -44z m1524 58 c10 -4 16 -18 16 -41 0 -31 -2 -34 -16 -23 -12 11 -15 11 -12 0 2 -7 -3 -15 -11 -18 -10 -3 -12 0 -8 10 3 10 0 15 -11 14 -25 -2 -29 51 -5 57 28 7 30 7 47 1z m3499 -31 c-3 -7 0 -13 6 -13 6 0 11 5 11 12 0 6 2 9 5 7 2 -3 -3 -27 -12 -54 -8 -28 -15 -63 -14 -79 2 -32 -42 -81 -65 -72 -18 7 -17 36 1 60 19 25 19 46 2 46 -15 0 -22 60 -9 70 4 3 15 17 25 32 15 24 20 26 36 16 11 -6 17 -18 14 -25z m-5778 12 c46 -10 112 -85 75 -85 -5 0 -10 -5 -10 -11 0 -15 -19 -31 -76 -62 -60 -31 -143 -38 -164 -12 -7 8 -22 15 -34 15 -35 0 -48 15 -44 51 2 26 8 35 25 37 13 2 32 15 43 29 12 16 39 31 68 39 44 12 56 11 117 -1z m424 -14 c50 -25 57 -41 41 -91 l-14 -42 -59 4 c-47 4 -64 9 -78 27 -23 28 -26 91 -5 91 8 0 18 9 21 20 7 23 35 20 94 -9z m2241 4 c0 -7 11 -27 25 -43 15 -18 25 -42 25 -62 0 -31 -1 -31 -42 -28 -36 3 -43 7 -48 28 -5 21 1 71 16 118 5 16 24 6 24 -13z m-1320 5 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m797 -22 c15 -14 23 -33 23 -55 0 -29 -3 -33 -28 -33 -36 0 -102 45 -102 70 0 41 70 53 107 18z m-1312 -6 c-3 -3 -11 0 -18 7 -9 10 -8 11 6 5 10 -3 15 -9 12 -12z m1712 -15 c-7 -21 -32 -13 -35 11 -3 21 -1 22 18 12 12 -6 19 -17 17 -23z m-11608 -6 c60 -47 111 -163 125 -281 3 -32 27 -59 53 -62 30 -3 39 -23 29 -64 -6 -23 -7 -24 -25 -7 -10 10 -20 26 -24 35 -3 9 -29 27 -56 40 -50 22 -56 32 -52 73 2 28 -19 77 -45 100 -39 36 -64 55 -73 55 -12 0 -21 37 -21 93 0 44 2 47 26 47 14 0 43 -13 63 -29z m12221 10 c5 -11 10 -43 10 -71 0 -44 -5 -56 -29 -81 -35 -35 -67 -38 -77 -6 -8 23 -6 156 3 170 2 4 22 7 43 7 29 0 42 -5 50 -19z m-11633 -7 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m12513 -64 c0 -39 -5 -54 -29 -79 -16 -17 -34 -31 -39 -31 -12 0 -27 114 -17 130 9 15 67 40 77 34 5 -3 8 -27 8 -54z m-2130 24 c14 -36 12 -147 -2 -166 -7 -9 -24 -23 -38 -32 -24 -14 -28 -14 -58 4 -38 23 -47 53 -38 133 7 73 21 87 83 87 37 0 45 -4 53 -26z m6570 -18 c-26 -44 -31 -45 -23 -6 3 19 1 30 -6 30 -6 0 -11 -13 -11 -30 0 -16 -4 -30 -10 -30 -15 0 -12 46 4 59 7 6 20 9 29 5 8 -3 18 0 22 6 4 6 9 9 12 6 3 -3 -5 -21 -17 -40z m-4893 14 c3 -11 9 -20 13 -20 13 0 20 -30 14 -54 -3 -13 -23 -33 -43 -45 l-39 -21 -5 29 c-4 16 -4 52 0 80 5 46 8 51 30 51 16 0 27 -7 30 -20z m-12078 -47 c70 -58 110 -103 111 -124 0 -9 8 -27 18 -40 9 -13 30 -51 46 -84 23 -50 26 -67 19 -95 -12 -45 -46 -53 -65 -16 -7 13 -29 42 -48 63 -78 83 -138 172 -145 211 -3 22 -13 48 -20 59 -18 22 -19 45 -3 61 19 19 27 15 87 -35z m9926 27 c26 -28 16 -117 -15 -142 -30 -24 -69 -33 -89 -21 -18 11 -26 78 -16 129 5 27 12 34 43 42 54 14 57 14 77 -8z m893 11 c25 -15 9 -46 -23 -47 -49 -1 -55 -3 -55 -20 0 -17 -22 -14 -28 4 -2 7 3 12 12 12 9 0 16 5 16 11 0 14 39 49 54 49 6 0 17 -4 24 -9z m-10408 -21 c0 -11 6 -20 14 -20 21 0 74 -60 81 -91 4 -16 11 -29 16 -29 6 0 9 -12 7 -27 -3 -23 -8 -27 -38 -27 -28 -1 -37 4 -48 26 -7 14 -26 32 -43 40 -29 13 -35 24 -41 78 -2 14 -9 24 -16 23 -19 -4 -14 35 6 40 42 11 62 7 62 -13z m11050 -2 c0 -10 -7 -18 -15 -18 -8 0 -15 8 -15 18 0 10 7 19 15 19 8 0 15 -9 15 -19z m1662 -51 c-21 -21 -47 -15 -38 10 3 8 1 11 -4 8 -13 -8 -13 11 1 38 12 21 12 21 36 -8 24 -28 24 -28 5 -48z m-10142 53 c0 -5 -8 -10 -17 -10 -15 0 -16 2 -3 10 19 12 20 12 20 0z m8953 -5 c-4 -15 -36 -12 -41 3 -3 9 3 13 19 10 13 -1 23 -7 22 -13z m4967 1 c0 -7 -8 -16 -17 -20 -10 -3 -25 -9 -33 -12 -8 -3 -4 5 10 19 29 29 40 33 40 13z m-4510 -49 c0 -47 -2 -53 -22 -54 -44 -4 -58 28 -38 81 7 19 17 26 35 26 24 0 25 -3 25 -53z m-1350 -22 c19 -50 -7 -96 -62 -109 -27 -6 -28 -5 -28 29 0 20 11 58 25 86 23 44 28 48 40 35 8 -8 19 -26 25 -41z m-10054 -2 c-8 -8 -86 8 -86 18 0 5 18 9 40 9 25 0 41 5 41 13 1 6 4 1 6 -11 3 -13 2 -26 -1 -29z m5033 29 c3 -5 40 -11 82 -14 74 -5 79 -7 165 -66 l89 -61 6 30 c4 16 10 33 13 36 12 12 78 5 87 -8 6 -11 12 -11 32 0 28 15 84 3 132 -29 17 -11 42 -20 56 -20 18 0 33 -9 45 -27 10 -17 19 -23 22 -15 2 7 8 9 13 6 6 -3 6 -11 -2 -20 -14 -17 -5 -44 15 -44 7 0 16 -9 19 -21 3 -12 10 -18 16 -15 21 14 89 -89 78 -118 -7 -19 -54 -21 -107 -6 -19 6 -55 15 -78 19 -40 8 -43 7 -39 -10 3 -10 1 -22 -4 -25 -5 -3 -9 -2 -8 3 4 24 -3 44 -14 41 -8 -2 -24 10 -38 25 l-24 28 -40 -21 c-36 -19 -54 -20 -172 -17 -97 3 -137 8 -150 18 -10 8 -48 35 -85 59 -37 25 -68 48 -68 52 0 4 -18 26 -40 48 -22 22 -40 45 -40 50 0 6 -4 10 -9 10 -14 0 -81 65 -81 79 0 6 -5 11 -11 11 -20 0 -3 24 22 32 31 9 110 3 118 -10z m2156 8 c5 -8 11 -7 21 1 8 6 17 9 20 6 9 -8 -5 -27 -20 -27 -16 0 -55 29 -39 30 6 0 15 -5 18 -10z m1371 -31 c-9 -58 -46 -89 -104 -89 -46 0 -79 55 -65 108 5 21 11 22 90 22 l86 0 -7 -41z m3737 27 c21 -16 22 -26 2 -26 -9 0 -12 -6 -9 -15 4 -8 2 -15 -3 -15 -6 0 -15 -18 -22 -41 -9 -30 -16 -39 -27 -35 -9 3 -18 6 -20 6 -2 0 -4 22 -4 49 0 45 2 50 30 61 16 7 27 16 24 21 -8 13 8 10 29 -5z m3165 5 c10 -6 9 -13 -6 -31 l-19 -23 -5 21 c-4 12 -2 20 2 17 5 -3 11 -1 14 4 4 5 -2 12 -11 14 -13 3 -14 5 -3 6 8 0 21 -3 28 -8z m478 -5 c16 6 15 3 -5 -19 -14 -15 -30 -27 -38 -27 -7 0 -22 -9 -32 -19 -14 -14 -27 -17 -51 -12 -29 6 -31 8 -16 20 10 9 16 10 16 2 0 -17 18 -13 37 9 12 13 24 18 40 14 17 -5 23 -2 23 10 0 9 -8 16 -17 16 -15 0 -16 2 -3 10 9 5 17 5 21 -1 3 -5 14 -7 25 -3z m211 -5 c-3 -14 -1 -18 9 -14 16 6 19 -13 4 -22 -5 -3 -10 -15 -10 -25 0 -14 -5 -18 -17 -13 -11 4 -14 3 -9 -5 10 -17 -25 -74 -42 -67 -8 3 -18 5 -23 5 -15 0 -10 22 8 35 10 7 12 14 6 18 -6 4 -18 -3 -26 -16 -12 -19 -13 -26 -2 -41 8 -10 18 -15 24 -11 15 9 14 -11 -1 -27 -23 -24 -78 -108 -78 -118 0 -10 -14 -14 -37 -11 -18 2 -44 -44 -37 -64 5 -13 4 -16 -4 -11 -8 5 -10 2 -6 -8 9 -23 -21 -20 -43 3 -16 17 -20 18 -37 5 -17 -12 -18 -16 -6 -40 12 -22 12 -27 0 -34 -10 -7 -11 -10 -3 -10 7 0 20 11 29 25 16 24 34 33 34 17 0 -4 -36 -44 -79 -90 -84 -86 -108 -97 -143 -65 -11 9 -18 11 -18 5 0 -7 5 -12 10 -12 6 0 10 -4 10 -10 0 -5 -6 -10 -14 -10 -8 0 -16 -5 -18 -11 -4 -12 -38 -1 -38 12 0 5 7 9 16 9 8 0 13 4 10 9 -4 5 6 22 21 38 16 16 43 48 61 71 30 36 37 40 68 35 22 -4 34 -2 34 6 0 7 -9 9 -25 5 -15 -4 -25 -2 -25 5 0 6 4 11 8 11 12 0 102 88 102 100 0 5 3 10 8 10 4 0 16 17 27 38 11 20 27 44 35 52 9 8 26 28 39 45 l23 30 -8 -30 c-4 -17 -14 -35 -23 -42 -14 -11 -14 -12 1 -13 12 0 21 13 28 39 6 22 9 44 8 50 -3 9 140 161 150 161 3 0 2 -9 -1 -19z m-14227 -16 c0 -8 -4 -15 -10 -15 -5 0 -7 7 -4 15 4 8 8 15 10 15 2 0 4 -7 4 -15z m-3210 -62 c25 -17 54 -41 66 -54 28 -32 70 -108 78 -141 3 -15 20 -43 36 -62 17 -18 30 -38 30 -44 0 -5 6 -12 14 -15 14 -5 28 -90 19 -114 -8 -20 -37 -16 -51 7 -7 11 -18 20 -25 20 -17 1 -97 77 -127 122 -14 21 -28 38 -32 38 -5 0 -8 4 -8 9 0 5 18 7 40 4 24 -4 40 -2 40 5 0 5 -10 10 -22 10 -56 2 -73 9 -76 31 -2 13 -12 25 -21 28 -26 7 -72 200 -50 214 10 6 19 3 29 -9 8 -10 35 -32 60 -49z m9338 51 c7 -5 -30 -65 -43 -70 -17 -7 -65 24 -65 42 0 23 40 43 74 37 17 -3 32 -7 34 -9z m-8158 -8 c0 -8 15 -25 33 -37 17 -13 34 -27 35 -31 2 -4 12 -8 23 -8 10 0 29 -10 40 -21 20 -20 20 -23 5 -31 -9 -5 -16 -16 -16 -23 0 -20 52 -118 67 -128 14 -8 45 -68 39 -74 -2 -2 -19 11 -37 29 -19 18 -51 42 -72 52 -39 20 -107 90 -107 110 0 7 -9 21 -19 33 -11 11 -22 40 -24 64 -3 24 -6 49 -7 54 -4 19 0 25 20 25 11 0 20 -6 20 -14z m2287 8 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m8638 -67 c-8 -105 -13 -126 -30 -144 -9 -8 -17 -14 -19 -12 -44 65 -52 135 -21 192 14 26 25 34 46 35 l29 1 -5 -72z m1605 44 c15 -30 12 -56 -9 -75 -19 -17 -20 -17 -31 4 -8 16 -8 30 0 55 13 39 25 44 40 16z m2292 7 c-9 -9 -15 -9 -24 0 -9 9 -7 12 12 12 19 0 21 -3 12 -12z m693 2 c3 -5 2 -10 -4 -10 -5 0 -13 5 -16 10 -3 6 -2 10 4 10 5 0 13 -4 16 -10z m-6262 -17 c-13 -2 -23 -7 -23 -10 0 -3 11 -37 25 -75 14 -38 25 -73 25 -78 0 -17 -44 -50 -67 -50 -31 0 -43 28 -43 99 0 55 3 64 31 91 18 16 41 29 53 29 20 -2 20 -2 -1 -6z m2103 -30 c21 -50 12 -96 -24 -113 -15 -7 -35 -17 -45 -22 -14 -7 -20 -5 -24 9 -2 10 -19 27 -36 38 -41 26 -49 65 -15 65 14 0 33 8 44 18 19 17 61 40 77 41 4 1 15 -15 23 -36z m-9309 21 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m5558 -4 c11 -5 14 -9 6 -9 -8 -1 -11 -8 -8 -21 7 -26 0 -25 -23 2 -27 33 -16 46 25 28z m255 -19 c0 -46 -23 -56 -120 -52 -34 1 -41 4 -28 11 10 6 15 21 14 40 l-2 30 68 0 68 0 0 -29z m480 19 c0 -5 14 -16 30 -25 40 -21 40 -51 0 -57 -17 -3 -33 -1 -35 3 -3 4 -15 5 -26 2 -20 -6 -21 -4 -14 33 4 21 9 42 11 46 7 11 34 10 34 -2z m447 -16 c16 -25 16 -27 -2 -40 -43 -32 -78 -6 -57 42 15 31 37 31 59 -2z m1717 -23 c-1 -40 2 -48 14 -43 10 3 13 1 8 -6 -10 -17 -31 -15 -47 5 -10 11 -10 14 -1 9 9 -5 12 5 12 38 0 25 3 46 8 46 4 0 7 -22 6 -49z m5436 19 c0 -5 -9 -10 -19 -10 -11 0 -27 -7 -36 -16 -21 -21 -30 -12 -15 15 11 22 70 31 70 11z m-12571 -32 c0 -31 -1 -31 -10 -10 -5 13 -7 28 -3 33 10 16 14 9 13 -23z m6305 6 c9 -8 16 -18 16 -22 -1 -18 -21 -35 -43 -38 -21 -2 -27 3 -32 28 -10 45 27 65 59 32z m237 -2 c22 -19 53 -98 43 -114 -11 -17 -62 -7 -97 20 -43 32 -51 50 -38 86 13 32 57 36 92 8z m627 6 c7 -7 12 -19 12 -27 0 -11 -4 -10 -20 4 -21 19 -26 35 -12 35 4 0 13 -5 20 -12z m512 -1 c0 -15 -50 -58 -61 -52 -13 9 -11 53 4 58 23 8 57 5 57 -6z m4420 5 c28 -13 12 -66 -17 -55 -12 5 -15 2 -10 -10 9 -24 -18 -40 -58 -33 -29 6 -35 11 -36 34 -1 17 -3 20 -6 10 -6 -24 -23 -23 -23 0 0 40 35 36 51 -5 6 -16 15 -23 26 -21 19 4 31 38 14 38 -6 0 -11 -7 -11 -15 0 -22 -17 -18 -23 5 -5 18 0 20 44 20 27 0 49 3 49 8 0 4 -20 6 -45 4 -25 -2 -53 -1 -63 3 -15 7 -15 8 3 15 24 10 84 11 105 2z m-7490 -18 c0 -9 -5 -14 -12 -12 -18 6 -21 28 -4 28 9 0 16 -7 16 -16z m2311 -11 c14 -35 5 -123 -15 -160 -9 -15 -18 -36 -22 -45 -11 -31 -22 -20 -33 33 -13 61 -6 110 22 162 25 44 34 46 48 10z m1337 2 c16 -35 15 -48 -3 -42 -8 4 -17 2 -20 -3 -19 -31 -43 17 -25 50 15 27 34 25 48 -5z m-5543 -5 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m1190 -29 c37 -24 40 -29 35 -61 -5 -33 -7 -35 -47 -38 -32 -2 -43 0 -43 11 0 8 -13 29 -30 47 -35 37 -36 43 -14 65 19 19 41 13 99 -24z m-241 5 c55 -23 68 -56 64 -156 -2 -67 -7 -93 -21 -108 -21 -23 -64 -19 -72 8 -12 37 -82 99 -143 126 -34 15 -62 31 -62 36 0 5 -16 25 -35 45 -41 42 -35 59 23 66 61 8 213 -3 246 -17z m-7615 -8 c20 -12 43 -29 51 -38 8 -9 23 -19 33 -23 9 -3 17 -13 17 -20 0 -21 87 -110 99 -102 17 10 79 -14 86 -33 7 -23 51 -72 64 -72 5 0 12 -9 16 -20 3 -11 18 -29 32 -40 15 -11 34 -44 44 -73 10 -30 24 -53 34 -55 12 -3 14 2 9 22 -5 21 -1 28 20 37 29 14 56 -1 56 -30 0 -9 21 -37 46 -61 25 -25 50 -55 55 -67 14 -37 39 -29 39 11 0 19 -4 38 -10 41 -5 3 -10 13 -10 21 0 11 7 8 23 -9 12 -13 37 -32 55 -41 17 -9 32 -20 32 -24 0 -17 -25 -32 -52 -32 -19 0 -28 -5 -28 -16 0 -16 47 -64 93 -96 32 -23 40 -61 15 -77 -16 -10 -23 -8 -43 11 -13 13 -46 31 -74 41 -34 12 -70 36 -111 77 -52 51 -60 64 -60 97 0 96 -33 114 -46 26 -7 -42 -13 -57 -26 -59 -10 -1 -18 3 -18 10 0 7 -14 25 -31 42 -17 16 -35 39 -40 51 -6 16 -20 24 -49 29 -25 4 -45 14 -51 26 -6 11 -17 17 -24 14 -8 -3 -21 2 -30 10 -8 9 -15 13 -15 11 0 -3 -15 9 -34 26 -18 18 -67 61 -109 97 -55 47 -76 72 -76 90 -1 14 -12 45 -26 69 -14 23 -25 58 -25 77 0 24 -5 34 -15 34 -8 0 -15 9 -15 20 0 28 51 27 99 -2z m5161 12 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m8778 -62 c-8 -76 -32 -153 -55 -177 -16 -15 -15 -16 -29 26 -21 59 24 202 64 203 6 0 12 5 12 10 0 6 4 10 8 10 5 0 5 -33 0 -72z m-4980 38 c29 2 35 -9 27 -46 -4 -19 -17 -36 -35 -45 -27 -14 -30 -13 -54 16 -28 33 -28 34 -20 66 5 17 11 20 32 14 15 -4 37 -6 50 -5z m413 -3 c41 -24 42 -39 5 -62 -43 -27 -52 -26 -72 4 -15 22 -14 26 3 49 22 30 26 31 64 9z m-1235 -18 c9 -14 25 -25 35 -25 15 0 19 -7 19 -36 0 -23 6 -41 17 -49 16 -12 16 -15 2 -32 -9 -10 -19 -26 -22 -35 -4 -10 -13 -18 -21 -18 -8 0 -30 -18 -49 -40 -45 -53 -72 -48 -107 18 -22 41 -30 48 -67 55 -45 9 -46 10 -47 69 -1 32 2 37 32 46 27 9 34 7 42 -8 6 -10 10 -26 10 -34 0 -9 6 -16 14 -16 17 0 28 50 20 89 -6 27 -4 30 27 34 71 8 78 7 95 -18z m-3791 5 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-4092 -29 c19 -32 23 -81 7 -81 -5 0 -10 5 -10 10 0 6 -7 10 -15 10 -8 0 -31 14 -51 32 -33 30 -35 33 -18 45 31 23 68 16 87 -16z m12995 8 c15 -24 7 -159 -9 -159 -5 0 -9 3 -9 8 0 4 -7 16 -16 27 -13 17 -16 18 -24 5 -8 -12 -10 -10 -10 8 0 12 4 30 9 40 6 9 13 34 16 55 7 41 23 48 43 16z m3262 6 c-7 -8 -16 -15 -21 -15 -5 0 -6 7 -3 15 4 8 13 15 21 15 13 0 13 -3 3 -15z m-7994 -22 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m1541 11 c19 -5 21 -10 12 -25 -12 -23 -57 -25 -66 -3 -3 9 0 20 8 25 17 10 18 10 46 3z m-467 -19 c0 -9 11 -28 25 -43 38 -41 32 -57 -24 -76 -62 -20 -77 -20 -85 0 -12 32 -5 53 32 93 40 44 52 50 52 26z m1720 -60 c0 -55 -23 -70 -54 -36 -15 16 -15 25 -5 65 l11 46 24 -25 c13 -14 24 -37 24 -50z m742 48 c13 -24 14 -35 3 -76 -15 -59 -21 -66 -40 -41 -18 23 -19 67 -3 111 15 40 19 41 40 6z m4448 7 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-3983 -32 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m3953 1 c0 -14 -17 -10 -23 5 -4 10 -1 13 9 9 7 -3 14 -9 14 -14z m-16793 -15 c12 -19 12 -24 -2 -38 -22 -22 -35 -20 -35 5 0 15 -5 19 -19 14 -15 -5 -18 -1 -13 20 4 21 10 25 30 23 13 -2 31 -13 39 -24z m9131 -6 c15 -17 30 -45 34 -62 6 -28 1 -35 -50 -83 -68 -64 -115 -81 -170 -65 -56 17 -92 54 -92 95 0 25 11 45 46 85 43 49 48 51 102 55 31 2 67 4 80 5 15 1 33 -9 50 -30z m397 -15 c25 -26 45 -52 45 -59 0 -23 -83 -64 -128 -64 -28 0 -42 4 -42 13 0 7 -9 19 -20 27 -22 16 -26 50 -9 83 21 38 34 46 72 47 32 0 44 -7 82 -47z m2555 32 c0 -16 -27 -32 -37 -22 -3 4 -3 13 0 22 8 20 37 20 37 0z m-10280 -6 c0 -21 59 -69 85 -69 58 0 115 -55 115 -110 0 -17 -6 -20 -46 -20 -41 0 -50 4 -85 43 -21 23 -39 52 -39 65 0 19 -5 22 -39 22 -46 0 -59 21 -36 56 16 25 45 33 45 13z m47 5 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m9178 -11 c31 -15 35 -21 35 -54 0 -28 -6 -40 -25 -53 -51 -33 -81 19 -59 102 8 26 5 26 49 5z m893 -9 c2 -11 -6 -28 -17 -38 -20 -18 -21 -18 -27 0 -12 38 -12 42 -1 53 17 17 42 9 45 -15z m-10034 -9 c-4 -8 -8 -15 -10 -15 -2 0 -4 7 -4 15 0 8 4 15 10 15 5 0 7 -7 4 -15z m14831 5 c3 -5 2 -10 -4 -10 -5 0 -13 5 -16 10 -3 6 -2 10 4 10 5 0 13 -4 16 -10z m49 -5 c-4 -8 -7 -15 -9 -15 -2 0 -5 7 -9 15 -3 9 0 15 9 15 9 0 12 -6 9 -15z m-8637 -14 c-5 -21 10 -31 46 -31 12 0 28 -9 35 -20 7 -11 20 -20 30 -20 22 -1 58 -69 39 -75 -25 -7 -204 -13 -215 -6 -8 5 -1 24 23 60 19 29 35 54 35 56 0 2 -12 5 -27 7 -20 2 -29 9 -31 26 -3 19 1 22 33 22 32 0 37 -3 32 -19z m8833 -21 c-6 -11 -16 -20 -22 -20 -6 0 -3 9 7 20 10 11 20 20 22 20 2 0 -1 -9 -7 -20z m-305 -9 c-3 -6 -11 -11 -17 -11 -6 0 -6 6 2 15 14 17 26 13 15 -4z m-5816 -5 c7 -8 11 -36 9 -63 -3 -48 -3 -48 -40 -51 -31 -3 -42 2 -63 25 -30 34 -31 57 -5 83 23 23 82 27 99 6z m2648 -18 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m2668 22 c-3 -5 -12 -10 -18 -10 -7 0 -6 4 3 10 19 12 23 12 15 0z m575 6 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m-16503 -57 c26 -28 65 -85 85 -126 21 -42 45 -85 55 -95 10 -11 17 -29 15 -40 -3 -15 1 -19 15 -16 10 2 18 12 18 24 0 51 77 75 95 30 8 -23 60 -60 148 -107 20 -11 22 -19 22 -92 0 -92 18 -142 56 -151 51 -13 57 16 19 88 -28 53 -32 94 -11 102 19 7 130 -107 146 -150 21 -56 33 -75 42 -70 4 3 12 -5 17 -18 8 -21 9 -20 20 18 14 51 34 60 72 33 18 -13 36 -18 49 -14 14 4 22 1 27 -12 3 -10 45 -56 93 -103 98 -95 110 -113 110 -164 0 -26 6 -40 23 -51 16 -10 28 -33 37 -72 8 -31 24 -68 37 -84 28 -33 28 -41 4 -63 -17 -16 -20 -15 -49 9 -16 14 -35 25 -42 25 -43 0 -282 252 -299 317 -5 18 -14 28 -27 28 -29 0 -32 -60 -4 -90 39 -41 5 -35 -42 8 -25 23 -60 53 -77 67 -23 18 -31 33 -31 57 0 35 -17 53 -26 29 -9 -23 -64 -21 -64 2 0 19 -40 43 -102 62 -21 6 -40 16 -43 21 -10 15 -75 11 -75 -5 0 -8 -6 -16 -14 -19 -18 -7 -56 3 -56 14 0 5 -9 9 -20 9 -11 0 -20 -4 -20 -10 0 -5 6 -10 14 -10 8 0 21 -8 28 -18 7 -10 21 -21 31 -25 9 -3 17 -13 17 -21 0 -9 13 -22 30 -31 16 -8 35 -25 41 -37 6 -12 20 -31 30 -42 17 -17 24 -43 20 -68 -1 -10 3 -10 23 -2 9 3 16 15 16 25 0 21 20 25 38 7 19 -19 14 -55 -12 -75 -15 -12 -25 -32 -28 -57 -4 -34 -2 -38 23 -43 18 -3 26 -11 25 -22 -4 -24 -39 -25 -61 -1 -10 11 -24 20 -30 20 -7 0 -35 20 -62 44 -50 45 -73 86 -93 164 -9 36 -15 43 -32 40 -12 -2 -22 -12 -24 -22 -2 -18 -20 -35 -35 -36 -11 0 -20 31 -12 43 3 7 2 8 -2 4 -5 -4 -17 9 -27 30 -18 36 -18 38 2 57 26 27 33 17 38 -54 2 -33 9 -60 14 -60 5 0 6 9 3 20 -4 11 -2 20 4 20 7 0 11 27 11 70 0 56 -3 70 -15 70 -10 0 -15 10 -15 28 0 16 -7 37 -15 48 -37 49 10 61 63 15 32 -26 101 -56 110 -46 15 15 -47 155 -68 155 -3 0 -16 -17 -29 -37 -12 -21 -20 -29 -16 -17 4 18 2 20 -22 17 -23 -4 -37 5 -79 49 -75 79 -87 101 -80 145 6 33 1 46 -39 108 -24 39 -45 73 -45 78 0 4 -6 7 -13 7 -8 0 -19 17 -25 39 -15 49 -15 68 1 74 30 13 49 4 94 -44z m10085 35 c27 -14 29 -18 15 -26 -10 -5 -26 -6 -37 -3 -12 4 -20 2 -20 -5 0 -6 4 -9 9 -5 5 3 12 1 16 -5 3 -5 -3 -10 -14 -10 -20 0 -30 22 -23 53 5 21 15 21 54 1z m256 -2 c3 -9 -4 -11 -25 -7 -21 5 -24 4 -13 -4 8 -6 10 -11 4 -11 -18 0 -24 13 -12 27 13 16 40 13 46 -5z m875 1 c18 -10 33 -19 35 -19 2 -1 -5 -20 -14 -42 -13 -34 -22 -43 -50 -48 -44 -8 -64 8 -64 53 0 71 32 90 93 56z m2087 5 c0 -7 -8 -22 -17 -33 -14 -18 -15 -18 -9 -2 3 10 6 25 6 33 0 8 5 14 10 14 6 0 10 -6 10 -12z m-4885 -8 c3 -5 -1 -10 -9 -10 -9 0 -16 5 -16 10 0 6 4 10 9 10 6 0 13 -4 16 -10z m628 -27 c3 -10 4 -47 3 -82 -1 -54 2 -67 22 -89 21 -22 22 -28 11 -49 -7 -13 -28 -40 -47 -59 -26 -27 -39 -33 -55 -28 -12 3 -24 8 -26 10 -8 7 -1 82 10 111 6 15 10 53 9 83 -3 86 -2 94 23 106 33 17 45 16 50 -3z m2945 -49 c-6 -64 -12 -73 -37 -50 -30 27 -32 62 -5 92 34 36 47 22 42 -42z m-2075 32 c24 -20 28 -29 25 -66 -5 -68 -27 -73 -82 -18 l-46 45 27 31 c33 37 40 38 76 8z m3393 -3 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m-13822 -15 c91 -95 117 -160 118 -293 0 -103 -4 -106 -64 -42 -63 67 -118 194 -118 274 0 18 -4 33 -10 33 -11 0 -14 43 -3 53 15 16 48 5 77 -25z m8821 10 c0 -8 6 -22 13 -31 11 -13 10 -17 -6 -26 -28 -15 -48 9 -32 39 6 11 8 25 4 32 -4 6 -1 9 7 6 8 -3 14 -12 14 -20z m7145 12 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m350 6 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m830 -6 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-290 -4 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m-4060 -25 c11 -21 0 -64 -20 -76 -15 -9 -40 13 -40 36 0 25 21 59 37 59 7 0 17 -9 23 -19z m1145 -78 c-9 -19 -12 -28 -14 -41 0 -5 -22 -31 -47 -58 -25 -27 -53 -59 -61 -71 -21 -31 -53 -30 -53 0 0 35 25 82 99 182 l66 89 9 -41 c5 -23 5 -50 1 -60z m2942 75 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-4807 -1 c0 -14 -35 -39 -44 -30 -3 4 -6 15 -6 25 0 13 7 18 25 18 14 0 25 -6 25 -13z m298 -3 c38 -26 22 -74 -25 -74 -15 0 -28 10 -37 28 -13 26 -13 31 2 45 20 21 32 21 60 1z m-1668 -4 c0 -5 -11 -17 -25 -26 -34 -22 -95 -12 -95 16 0 18 7 20 60 20 33 0 60 -4 60 -10z m208 -2 c7 -7 12 -31 12 -55 0 -50 -18 -57 -56 -20 -28 26 -30 44 -7 69 19 21 34 23 51 6z m635 -24 c-7 -19 -23 -7 -23 18 0 17 3 18 14 8 8 -6 12 -18 9 -26z m-11168 -1 c1 -31 15 -42 16 -12 1 13 7 -7 14 -44 6 -37 17 -73 23 -79 20 -20 15 -47 -8 -41 -18 5 -25 15 -21 36 1 5 -3 6 -8 3 -11 -7 -31 47 -31 85 0 21 -4 27 -15 23 -9 -4 -15 0 -15 9 0 9 -3 23 -6 32 -6 13 -1 16 22 13 22 -2 29 -8 29 -25z m12538 7 c-10 -11 -19 -20 -20 -20 -2 0 -3 9 -3 20 0 13 7 20 20 20 19 0 19 -1 3 -20z m27 -22 c0 -18 -2 -20 -9 -8 -6 8 -7 18 -5 22 9 14 14 9 14 -14z m3892 0 c-7 -7 -12 -8 -12 -2 0 14 12 26 19 19 2 -3 -1 -11 -7 -17z m-6902 -3 c8 -10 10 -30 5 -61 -6 -44 -7 -45 -26 -28 -13 12 -19 30 -19 61 0 45 16 57 40 28z m3555 -34 c6 -35 -10 -91 -26 -91 -5 0 -6 15 -2 33 3 17 3 29 0 26 -4 -3 -8 -20 -10 -37 -6 -48 -20 -43 -24 8 -2 33 2 54 17 79 24 38 36 33 45 -18z m2732 27 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-2550 -20 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m3138 23 c3 -5 1 -12 -5 -16 -5 -3 -10 1 -10 9 0 18 6 21 15 7z m-8217 -34 c17 -13 15 -27 -3 -27 -8 0 -15 -7 -15 -15 0 -8 -12 -22 -27 -32 -16 -10 -32 -23 -36 -30 -4 -7 -16 -13 -26 -13 -20 0 -81 56 -81 76 0 16 -31 7 -43 -13 -4 -7 -15 -13 -22 -13 -22 0 -18 31 4 37 11 3 21 13 24 23 4 14 16 20 48 22 65 5 162 -3 177 -15z m1984 -25 c2 -18 10 -28 23 -30 57 -8 65 -13 65 -35 0 -33 -57 -60 -91 -43 -20 10 -25 21 -29 74 -3 34 -3 67 -2 72 6 18 31 -9 34 -38z m472 1 c-13 -37 -40 -42 -46 -8 -4 18 1 30 15 40 29 20 44 4 31 -32z m1871 37 c-3 -5 -12 -7 -20 -3 -21 7 -19 13 6 13 11 0 18 -4 14 -10z m-1050 -21 c-4 -6 0 -9 11 -7 15 2 19 -3 19 -27 0 -22 -4 -29 -16 -27 -9 1 -19 -4 -23 -13 -7 -19 -26 -20 -26 0 0 8 -4 15 -10 15 -5 0 -10 11 -10 25 0 14 6 25 13 25 8 0 7 4 -3 10 -11 7 -7 10 18 10 21 0 31 -4 27 -11z m754 -40 c12 -47 12 -57 -10 -122 -22 -66 -24 -68 -31 -41 -13 46 4 214 21 214 4 0 13 -23 20 -51z m-12396 17 c9 -7 17 -17 17 -23 0 -5 18 -27 40 -48 22 -21 40 -44 40 -50 0 -7 9 -20 20 -30 23 -21 26 -41 6 -52 -10 -6 -11 -14 -3 -33 l10 -25 6 24 c4 14 12 26 18 28 17 6 36 -35 31 -67 -3 -20 -1 -27 9 -23 13 5 52 -33 53 -51 0 -21 73 -161 90 -176 12 -11 18 -24 14 -34 -7 -17 -34 -22 -34 -6 0 6 -12 10 -26 10 -17 0 -39 14 -67 44 -107 114 -110 118 -84 130 6 3 -1 4 -16 2 -23 -3 -30 1 -38 23 -6 14 -16 33 -23 41 -7 8 -23 45 -36 82 -13 38 -41 88 -62 114 -42 52 -48 84 -18 114 23 23 29 24 53 6z m8804 0 c29 -2 55 0 58 5 8 12 82 11 106 -1 10 -6 19 -16 19 -22 0 -16 -90 -98 -106 -98 -7 0 -17 -6 -21 -14 -13 -21 -72 -48 -93 -41 -23 7 -110 95 -110 112 0 16 70 72 84 68 6 -2 35 -6 63 -9z m385 -3 c13 -11 18 -30 18 -64 0 -26 -4 -50 -8 -53 -11 -7 -27 6 -35 27 -3 9 -15 17 -26 17 -41 0 -52 73 -13 83 33 9 46 7 64 -10z m-706 -8 c9 -8 19 -28 24 -44 6 -23 3 -34 -17 -57 -14 -16 -31 -41 -39 -56 -24 -47 -63 -78 -95 -78 -22 0 -32 6 -36 20 -3 11 -14 20 -24 20 -26 0 -25 36 1 43 11 3 19 9 18 14 -2 4 14 26 36 48 21 22 49 55 63 73 28 35 47 40 69 17z m1644 0 c0 -8 -7 -15 -15 -15 -8 0 -15 7 -15 15 0 8 7 15 15 15 8 0 15 -7 15 -15z m470 0 c0 -8 -4 -15 -10 -15 -5 0 -10 7 -10 15 0 8 5 15 10 15 6 0 10 -7 10 -15z m1365 -5 c15 -16 17 -30 11 -77 -4 -31 -9 -59 -11 -62 -10 -10 -56 20 -67 44 -9 19 -7 34 6 70 19 49 34 55 61 25z m4305 -1 c0 -5 -10 -9 -21 -9 -18 0 -19 2 -9 15 12 15 30 12 30 -6z m-8235 -27 c16 -21 21 -46 23 -114 4 -80 2 -88 -15 -89 -10 0 -28 -2 -40 -5 -17 -3 -28 5 -45 31 -13 19 -33 39 -45 44 -45 21 -20 102 43 145 41 28 51 26 79 -12z m1540 3 c29 -28 35 -42 35 -75 0 -50 -24 -100 -49 -100 -10 0 -32 -7 -50 -16 -18 -9 -35 -13 -39 -9 -4 4 -7 50 -7 103 l0 97 35 17 c19 9 36 17 38 18 1 0 18 -16 37 -35z m414 9 c22 -28 29 -97 12 -122 -5 -9 -32 -14 -77 -15 l-69 -2 -10 39 c-9 38 -8 40 39 82 55 51 76 54 105 18z m1506 16 c7 -12 -3 -50 -13 -50 -20 1 -34 19 -27 39 7 22 29 28 40 11z m1642 -75 c-15 -57 -35 -65 -55 -21 -17 34 -2 70 38 91 22 12 25 11 27 -3 2 -9 -3 -39 -10 -67z m-11715 28 c24 -23 37 -53 24 -53 -2 0 -12 -3 -20 -6 -12 -5 -15 -2 -10 11 4 10 -1 22 -15 31 -20 14 -29 44 -14 44 4 0 20 -12 35 -27z m14798 7 c0 -31 -40 -110 -56 -110 -8 0 -14 -4 -14 -9 0 -5 -7 -11 -15 -15 -30 -11 -14 22 18 38 31 15 31 16 7 16 -15 0 -31 -5 -38 -12 -6 -6 -15 -9 -18 -5 -13 12 6 21 46 22 37 0 40 2 41 30 1 17 3 35 4 40 2 6 3 13 4 18 2 16 21 5 21 -13z m-6025 0 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m5985 -12 c-1 -17 -12 -28 -43 -43 -37 -18 -42 -24 -39 -50 2 -22 0 -26 -7 -15 -15 22 -27 2 -12 -21 14 -24 14 -24 -16 -33 -24 -8 -32 8 -10 18 10 5 10 7 0 12 -15 7 -17 34 -3 34 6 0 10 4 10 10 0 13 41 52 74 70 16 8 31 20 33 27 8 20 13 15 13 -9z m-3660 -14 c12 -31 -3 -66 -25 -58 -18 7 -20 50 -2 69 16 19 16 19 27 -11z m-3398 -19 c12 -14 27 -25 34 -25 16 0 24 -23 24 -67 0 -51 -40 -86 -117 -102 -84 -18 -148 -10 -180 22 -30 30 -29 34 55 121 55 57 68 65 105 69 23 2 45 4 50 5 4 1 17 -9 29 -23z m2576 17 c13 -9 6 -42 -9 -42 -5 0 -22 -18 -38 -40 -27 -38 -29 -38 -38 -17 -25 56 37 129 85 99z m2517 -32 c-5 -25 -10 -29 -19 -20 -8 10 -8 14 2 17 6 3 12 14 12 26 0 11 3 18 6 14 3 -3 3 -20 -1 -37z m-3331 8 c12 -20 2 -35 -29 -40 -16 -2 -21 3 -23 30 -3 30 -1 33 19 30 12 -2 27 -11 33 -20z m1865 -8 c3 -23 4 -24 12 -5 5 15 8 16 8 4 1 -20 -31 -50 -44 -41 -17 12 -36 52 -29 63 12 20 49 5 53 -21z m-1307 -7 c23 -20 24 -48 2 -39 -9 3 -24 6 -34 6 -12 0 -17 6 -15 18 2 9 4 20 4 25 2 12 24 8 43 -10z m-3289 -25 c39 -28 36 -60 -8 -81 -20 -9 -38 -17 -40 -17 -3 0 -5 30 -5 66 0 70 -1 69 53 32z m511 15 c10 -28 31 -62 55 -87 11 -12 21 -32 21 -43 0 -18 -8 -21 -94 -27 -103 -8 -150 -2 -180 19 -18 14 -15 18 44 75 34 33 71 60 81 60 11 0 19 5 19 10 0 18 47 11 54 -7z m-9028 -19 c11 -8 44 -41 74 -74 29 -33 61 -62 71 -65 10 -3 23 -22 29 -41 7 -20 18 -38 26 -41 8 -3 14 -19 14 -39 0 -53 70 -174 101 -174 15 0 19 -7 19 -39 0 -22 -4 -43 -10 -46 -18 -11 -134 52 -152 82 -9 15 -39 53 -66 83 -38 42 -50 65 -55 98 -3 25 -15 54 -27 67 -12 13 -20 27 -17 32 3 4 -11 9 -30 10 -29 1 -33 -1 -27 -15 10 -25 7 -50 -9 -67 -13 -12 -16 -11 -27 15 -7 17 -19 30 -26 30 -22 0 -17 48 6 55 11 3 28 17 39 31 15 20 17 31 10 62 -13 58 -12 64 14 56 12 -4 31 -13 43 -20z m11434 11 c0 -8 -4 -15 -9 -15 -5 0 -11 7 -15 15 -3 9 0 15 9 15 8 0 15 -7 15 -15z m775 -15 c20 -38 19 -50 -9 -84 -19 -23 -29 -27 -50 -22 -23 6 -26 11 -26 51 0 78 55 114 85 55z m299 -1 c8 -40 8 -133 0 -153 -6 -17 -44 -23 -44 -7 0 5 -11 12 -25 15 -22 6 -25 12 -25 47 0 47 13 75 48 107 33 29 38 28 46 -9z m3546 27 c0 -2 -7 -7 -16 -10 -8 -3 -12 -2 -9 4 6 10 25 14 25 6z m655 -2 c14 -6 13 -8 -5 -21 -24 -17 -33 -13 -24 11 7 18 7 18 29 10z m-2052 -34 c3 -11 1 -18 -4 -14 -5 3 -9 12 -9 20 0 20 7 17 13 -6z m-12706 4 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m6258 -4 c3 -5 12 -7 19 -4 15 6 32 -48 21 -66 -11 -18 -80 -11 -105 10 l-23 20 21 0 c15 0 22 6 22 19 0 25 33 41 45 21z m2590 -10 c11 -17 -5 -32 -21 -19 -7 6 -11 15 -8 20 7 12 21 11 29 -1z m330 0 c3 -5 -1 -10 -9 -10 -9 0 -16 5 -16 10 0 6 4 10 9 10 6 0 13 -4 16 -10z m2515 -5 c0 -8 -4 -15 -10 -15 -5 0 -7 7 -4 15 4 8 8 15 10 15 2 0 4 -7 4 -15z m-3914 -10 c4 -8 3 -23 0 -32 -6 -15 -8 -15 -23 -1 -16 17 -12 48 7 48 6 0 13 -7 16 -15z m6229 5 c3 -5 -1 -10 -9 -10 -9 0 -16 5 -16 10 0 6 4 10 9 10 6 0 13 -4 16 -10z m-8465 -39 c37 -24 315 -22 350 2 30 21 47 22 30 2 -10 -12 -8 -16 13 -24 28 -11 42 -57 27 -95 -10 -28 -89 -110 -115 -120 -9 -3 -34 -2 -54 3 -24 7 -67 6 -133 -3 -118 -15 -187 -5 -241 37 -19 15 -43 27 -51 27 -9 0 -16 5 -16 10 0 6 -4 10 -10 10 -5 0 -27 18 -47 40 -21 22 -43 40 -50 40 -24 0 -45 75 -26 94 4 3 72 3 152 0 108 -5 152 -11 171 -23z m5123 -21 c9 -22 17 -47 17 -55 0 -18 -31 -35 -63 -35 -41 0 -47 78 -10 122 20 23 36 14 56 -32z m-10636 26 c0 -8 -6 -12 -15 -9 -11 5 -11 7 0 14 7 5 13 9 14 9 0 0 1 -6 1 -14z m8598 -3 c23 -22 18 -178 -5 -193 -43 -27 -110 1 -130 56 -13 33 -4 52 50 107 52 52 61 55 85 30z m459 -8 c21 -32 20 -52 -8 -100 -29 -50 -66 -59 -91 -21 -22 34 -12 77 27 116 36 36 51 38 72 5z m828 7 c3 -10 -1 -27 -9 -38 -12 -16 -15 -17 -23 -4 -13 21 -12 26 6 44 19 20 21 20 26 -2z m1061 -29 c12 -31 12 -40 0 -64 -17 -34 -45 -37 -73 -9 -24 24 -25 33 -2 73 31 57 52 57 75 0z m-905 15 c18 -37 18 -52 -3 -96 -15 -32 -25 -42 -40 -40 -15 2 -20 11 -21 35 -1 31 34 123 47 123 3 0 11 -10 17 -22z m1026 -2 c7 -27 -1 -56 -15 -56 -6 0 -19 9 -30 19 -17 16 -19 23 -10 40 16 29 47 27 55 -3z m-2937 -30 c-3 -7 -8 -44 -12 -82 -8 -78 -25 -104 -66 -104 -24 0 -29 5 -35 36 -4 24 -3 39 5 43 7 5 10 22 6 47 -8 58 18 84 77 76 18 -3 27 -9 25 -16z m573 0 c0 -8 9 -16 20 -19 21 -5 26 -32 11 -55 -6 -10 -11 -8 -23 10 -18 28 -32 92 -18 83 6 -3 10 -12 10 -19z m764 -30 c-2 -6 -13 -17 -24 -24 -16 -10 -21 -9 -30 7 -13 26 -13 44 2 59 9 9 17 7 34 -9 12 -12 21 -26 18 -33z m-795 -13 c-2 -54 -2 -55 -8 -18 -6 38 -3 75 5 75 2 0 3 -26 3 -57z m1668 35 c21 -19 23 -31 23 -108 0 -123 -22 -139 -96 -70 -24 22 -52 40 -62 40 -29 0 -17 69 14 80 13 5 24 14 24 20 0 13 50 59 64 60 6 0 20 -10 33 -22z m-11974 -7 c29 -15 34 -26 15 -37 -6 -4 -16 0 -23 9 -7 10 -19 17 -28 17 -11 0 -14 5 -10 15 3 9 8 14 12 13 3 -2 18 -10 34 -17z m11213 -28 c-8 -9 -36 17 -36 33 0 10 7 7 21 -7 11 -11 18 -23 15 -26z m-3247 21 c21 -4 31 -12 31 -24 0 -10 7 -20 15 -24 8 -3 15 -12 15 -21 0 -8 -7 -15 -15 -15 -8 0 -15 -4 -15 -8 0 -5 -25 -35 -54 -67 -47 -50 -57 -56 -70 -45 -9 7 -16 18 -16 26 0 19 -122 134 -143 134 -12 0 -17 6 -15 18 3 14 18 18 98 23 52 3 105 6 116 7 12 1 36 -1 53 -4z m1551 -14 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-1241 -36 c4 -4 -7 -46 -16 -60 -5 -6 -27 -15 -50 -19 -39 -6 -44 -5 -54 19 -7 14 -18 26 -26 28 -11 2 -11 7 3 26 15 22 21 23 78 17 33 -4 63 -9 65 -11z m7451 -4 c0 -5 -4 -10 -9 -10 -6 0 -13 5 -16 10 -3 6 1 10 9 10 9 0 16 -4 16 -10z m-16093 -22 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m13122 -43 c-1 -36 -7 -73 -14 -82 -12 -16 -14 -16 -37 -1 -32 21 -58 47 -58 58 0 13 82 90 97 90 10 0 13 -15 12 -65z m-3369 36 c15 -29 12 -49 -9 -56 -10 -3 -34 -21 -52 -40 -20 -21 -48 -37 -69 -41 -19 -4 -38 -11 -42 -17 -4 -6 -12 -4 -22 6 -9 9 -24 18 -34 22 -16 5 -52 69 -52 93 0 7 7 12 15 12 8 0 15 5 15 10 0 16 77 12 94 -5 18 -19 26 -19 26 0 0 15 46 33 92 34 17 1 31 -6 38 -18z m-544 -1 c69 -9 124 -26 124 -40 0 -3 -9 -16 -20 -28 -11 -12 -20 -28 -20 -36 0 -9 -11 -18 -25 -22 -14 -3 -25 -12 -25 -20 0 -8 -9 -19 -20 -26 -11 -7 -20 -18 -20 -25 0 -38 -153 10 -164 51 -14 51 -6 101 19 129 28 30 42 31 151 17z m4408 -12 c12 -19 -9 -67 -33 -76 -14 -5 -41 23 -41 43 0 17 40 57 53 52 6 -2 15 -11 21 -19z m-5585 6 c17 -4 31 -12 31 -18 0 -6 16 -21 36 -34 68 -44 24 -82 -97 -82 -70 0 -77 2 -89 25 -12 22 -10 28 21 69 35 47 44 50 98 40z m797 -36 c27 -23 58 -52 70 -64 11 -11 36 -24 56 -28 25 -5 38 -13 42 -29 8 -30 -17 -47 -71 -47 -37 0 -43 3 -43 21 0 20 -3 21 -80 14 -96 -9 -132 4 -149 51 -15 41 5 86 47 108 46 25 75 19 128 -26z m124 22 c0 -11 -7 -20 -15 -20 -8 0 -15 9 -15 20 0 11 7 20 15 20 8 0 15 -9 15 -20z m1020 0 c0 -20 -32 -44 -44 -33 -3 3 -6 17 -6 30 0 18 5 23 25 23 18 0 25 -5 25 -20z m1265 -5 c3 -14 7 -36 10 -50 4 -18 -2 -33 -23 -55 -34 -35 -36 -36 -71 -11 -19 14 -27 29 -29 54 -2 31 0 35 38 47 22 7 40 19 40 27 0 24 29 14 35 -12z m429 9 c10 -26 7 -34 -14 -34 -15 0 -20 7 -20 25 0 28 24 34 34 9z m816 7 c0 -13 -29 -35 -37 -28 -7 8 15 37 28 37 5 0 9 -4 9 -9z m240 -3 c0 6 11 12 25 12 23 0 25 -3 25 -50 0 -48 -15 -98 -34 -112 -23 -16 -32 6 -34 85 -2 57 1 78 8 67 6 -10 10 -11 10 -2z m-2360 -117 c0 -31 -6 -78 -13 -105 l-13 -49 -49 -1 c-67 -1 -107 38 -74 71 12 12 3 53 -12 53 -6 0 0 18 12 40 13 22 27 40 32 40 5 0 28 16 50 36 l40 36 13 -32 c8 -18 14 -58 14 -89z m460 83 c11 -32 15 -35 40 -30 l28 5 -25 -27 c-104 -113 -118 -120 -168 -80 -23 18 -26 26 -21 56 7 46 70 111 108 112 22 0 29 -6 38 -36z m-10443 -8 c15 -13 44 -30 63 -38 29 -12 39 -26 59 -74 34 -85 64 -147 79 -162 15 -16 16 -39 2 -47 -5 -3 -10 -21 -10 -38 0 -47 -13 -61 -45 -53 -41 10 -75 56 -107 142 -15 42 -35 86 -45 96 -11 13 -19 41 -21 84 -3 43 -9 64 -17 64 -16 0 -26 38 -11 44 20 8 24 6 53 -18z m8057 6 c3 -5 8 -27 12 -49 5 -34 2 -44 -17 -62 -32 -30 -63 -26 -93 10 -31 36 -33 55 -7 64 11 3 23 15 26 26 5 14 15 19 40 19 19 0 36 -4 39 -8z m7766 -47 c-14 -27 -61 -55 -92 -55 -16 0 -19 -3 -10 -9 9 -5 -3 -16 -40 -34 -29 -14 -55 -23 -58 -20 -3 3 1 8 8 10 21 8 13 25 -8 18 -15 -5 -18 -3 -14 9 7 18 54 50 54 37 0 -5 9 -11 21 -14 20 -5 20 -5 4 13 -10 11 -12 20 -7 24 6 3 13 0 15 -6 4 -8 6 -7 6 3 1 18 21 29 54 29 15 0 18 3 9 8 -12 8 9 24 48 35 20 5 25 -20 10 -48z m-4360 25 c12 -23 4 -45 -29 -74 -18 -16 -22 -17 -36 -3 -22 22 -19 56 8 78 29 24 44 24 57 -1z m795 -87 c-3 -18 -10 -33 -15 -33 -6 0 -10 -17 -10 -37 0 -108 -50 -158 -79 -81 -11 30 4 51 20 27 5 -9 9 13 9 59 0 62 -2 72 -17 72 -29 0 -40 -13 -46 -52 -7 -49 17 -53 27 -5 5 25 9 29 16 17 17 -27 11 -49 -15 -56 -14 -3 -31 -4 -39 -1 -7 3 -19 0 -25 -6 -19 -19 -32 11 -29 68 l3 50 62 -3 c53 -3 63 -1 72 16 6 12 11 30 11 41 0 14 8 21 28 23 24 3 27 0 30 -32 2 -19 1 -49 -3 -67z m215 86 c0 -5 -4 -9 -10 -9 -5 0 -10 7 -10 16 0 8 5 12 10 9 6 -3 10 -10 10 -16z m-2950 -9 c35 -25 70 -80 70 -109 0 -19 -5 -21 -65 -21 -64 0 -65 1 -67 28 -3 45 2 83 13 103 12 24 14 24 49 -1z m2295 -5 c14 -14 25 -37 25 -51 0 -26 -26 -84 -37 -84 -14 0 -63 65 -63 83 0 17 35 77 45 77 2 0 16 -11 30 -25z m-625 5 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m3826 -36 c-23 -16 -17 -18 18 -4 19 7 26 6 26 -3 0 -14 -45 -37 -71 -37 -19 0 -38 42 -22 47 6 2 19 10 29 18 13 9 22 10 29 4 7 -7 4 -15 -9 -25z m-5982 9 c4 -5 26 -13 49 -18 l41 -11 -3 -49 c-1 -28 -5 -53 -7 -57 -3 -5 -25 -8 -49 -8 l-44 0 6 -34 c7 -45 -27 -96 -64 -96 -29 0 -103 68 -103 94 0 20 39 36 86 36 24 0 34 5 34 15 0 9 -9 15 -22 15 -71 1 -78 82 -9 95 11 2 29 8 38 14 22 12 37 14 47 4z m3821 -2 c3 -6 -4 -15 -15 -21 -22 -12 -23 -10 -14 14 7 18 20 21 29 7z m-3435 -20 c5 -11 7 -33 4 -50 l-6 -31 -78 0 c-60 0 -79 3 -84 15 -5 15 20 34 46 36 7 0 29 11 48 24 43 29 56 30 70 6z m690 -1 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m-1890 -14 c0 -8 6 -17 13 -20 6 -4 -3 -4 -22 -1 -40 6 -45 10 -36 24 9 16 45 13 45 -3z m2417 -1 c8 -22 -6 -33 -17 -15 -13 20 -12 30 0 30 6 0 13 -7 17 -15z m-9881 -20 c16 -15 24 -31 20 -40 -8 -21 -36 -19 -36 4 0 10 -7 24 -15 31 -8 7 -12 16 -9 21 8 13 10 12 40 -16z m10878 -1 c31 -30 38 -53 27 -87 -13 -37 -56 -95 -65 -86 -9 9 -20 155 -13 173 8 20 31 20 51 0z m-4510 -34 c-6 -5 -24 21 -24 34 0 6 6 1 14 -10 8 -10 12 -21 10 -24z m-7488 15 c4 -8 14 -15 23 -15 24 0 61 -45 68 -83 3 -18 12 -40 20 -49 8 -9 13 -30 12 -46 -2 -19 4 -39 16 -53 l20 -23 -25 16 c-14 8 -25 24 -25 34 -1 19 -27 21 -33 3 -2 -5 -8 -7 -13 -3 -5 3 -9 0 -9 -5 0 -20 -28 -11 -49 14 -29 38 -67 211 -47 219 22 9 37 6 42 -9z m8044 2 c0 -7 15 -19 32 -27 38 -18 43 -41 16 -75 -21 -26 -57 -32 -100 -16 -45 17 -127 108 -112 124 12 11 164 6 164 -6z m5999 -78 c8 -47 6 -59 -12 -94 -25 -45 -85 -106 -134 -135 l-33 -20 4 23 c15 78 27 104 104 224 26 40 51 68 55 64 4 -4 12 -32 16 -62z m-2611 12 c3 -24 -4 -38 -27 -62 -17 -17 -35 -28 -41 -24 -5 3 -10 33 -10 65 0 48 3 59 18 62 33 8 57 -8 60 -41z m-3604 33 c9 -3 13 -10 10 -15 -3 -6 21 -36 53 -67 32 -31 59 -63 58 -71 0 -8 -18 -19 -40 -25 -38 -11 -40 -13 -42 -55 -1 -24 -6 -48 -11 -53 -12 -12 -47 24 -73 75 -11 20 -23 37 -28 37 -15 0 -59 45 -66 68 -9 31 2 59 26 65 11 3 23 15 26 26 4 16 13 21 38 21 19 0 40 -3 49 -6z m2728 -29 c-3 -5 -7 -4 -10 3 -2 7 -8 12 -13 12 -6 0 -7 -4 -4 -10 3 -5 1 -10 -4 -10 -15 0 -14 27 1 32 16 6 38 -14 30 -27z m1295 23 c11 -19 12 -131 1 -145 -17 -21 -59 -16 -65 7 -3 11 -14 20 -24 20 -27 0 -26 68 2 104 22 28 72 36 86 14z m-11185 -20 c10 -12 29 -38 40 -58 22 -36 67 -80 81 -80 12 0 67 -92 67 -112 0 -10 9 -27 20 -38 11 -11 20 -29 20 -41 0 -12 8 -23 18 -26 13 -3 21 -21 30 -71 7 -37 15 -79 18 -94 11 -51 -19 -43 -84 21 -33 33 -63 69 -67 81 -3 11 -10 20 -15 20 -9 0 -46 99 -42 113 1 4 -2 7 -8 7 -14 0 -93 109 -108 150 -19 49 -31 101 -32 128 0 29 36 30 62 0z m7615 -24 c24 -42 22 -74 -3 -74 -7 0 -21 -11 -30 -25 -9 -14 -22 -25 -29 -25 -6 0 -20 -9 -30 -20 -12 -13 -31 -20 -55 -20 -36 0 -38 2 -44 39 -8 51 -5 56 66 119 71 64 93 65 125 6z m4729 31 c4 -8 0 -22 -7 -31 -10 -13 -14 -13 -26 -1 -16 16 -7 47 13 47 8 0 17 -7 20 -15z m-4343 -22 c4 -2 7 -15 7 -29 0 -13 6 -24 13 -25 28 -3 62 4 65 12 2 5 10 9 18 9 8 0 14 4 14 8 0 14 96 32 167 32 48 0 72 -5 85 -17 21 -19 23 -33 6 -33 -7 0 -26 -20 -41 -45 -16 -25 -32 -45 -37 -45 -28 0 -70 14 -70 24 0 7 -19 25 -41 40 -45 29 -64 29 -30 -1 12 -9 21 -23 21 -29 0 -7 7 -14 15 -18 21 -8 19 -26 -2 -26 -13 0 -15 -2 -5 -8 17 -12 -53 -32 -108 -32 -30 0 -60 10 -98 31 -48 27 -58 29 -83 19 -21 -9 -36 -9 -61 -1 -29 10 -35 9 -49 -7 -10 -13 -34 -22 -75 -27 -52 -6 -62 -4 -77 13 -13 14 -16 28 -11 46 8 32 38 34 91 6 21 -11 47 -20 59 -20 17 0 21 5 17 20 -3 11 -8 20 -12 20 -8 0 -44 71 -39 75 20 16 78 23 158 18 52 -3 98 -8 103 -10z m-7399 -17 c-7 -17 -34 -23 -34 -6 0 9 32 31 38 26 1 -2 0 -11 -4 -20z m8826 9 c19 -22 3 -35 -46 -35 -48 0 -52 4 -27 32 19 22 56 24 73 3z m2198 3 c7 -7 12 -20 12 -30 0 -10 6 -17 13 -15 11 2 12 -20 2 -50 -6 -18 -25 -16 -25 2 0 9 -9 15 -24 15 -17 0 -26 7 -30 25 -12 47 23 82 52 53z m2819 4 c8 -5 9 -13 3 -22 -7 -10 -10 -11 -10 -2 0 6 -10 12 -22 12 -19 0 -20 2 -8 10 18 12 22 12 37 2z m-2637 -17 c10 -12 10 -15 -4 -15 -9 0 -16 7 -16 15 0 8 2 15 4 15 2 0 9 -7 16 -15z m390 4 c0 -5 5 -7 11 -4 7 5 9 -3 7 -21 -4 -41 -43 -46 -52 -8 -5 18 -3 30 6 35 18 12 28 11 28 -2z m-3261 -22 c50 -22 51 -23 29 -37 -11 -8 -30 -23 -40 -32 -22 -21 -96 -24 -122 -5 -23 17 -12 42 33 72 19 14 39 25 42 25 4 0 30 -10 58 -23z m1401 0 c0 -7 -9 -20 -20 -30 -16 -13 -25 -15 -47 -6 l-28 11 35 17 c19 9 37 19 38 24 5 10 22 -2 22 -16z m-1277 6 c-13 -2 -33 -2 -45 0 -13 2 -3 4 22 4 25 0 35 -2 23 -4z m5967 -3 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m-8090 -4 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m2180 -21 c0 -22 -14 -25 -61 -16 -33 7 -37 9 -16 10 16 1 35 8 44 16 16 17 33 12 33 -10z m67 3 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m1307 -38 c-9 -16 -19 -32 -24 -35 -10 -6 -25 13 -34 43 -6 17 -3 24 16 31 13 5 30 5 40 0 15 -8 15 -12 2 -39z m2416 35 c11 -13 10 -22 -3 -50 -19 -40 -27 -43 -44 -16 -9 15 -10 28 -2 50 12 34 30 39 49 16z m2099 6 c7 -5 9 -11 5 -14 -5 -3 -15 1 -22 9 -14 16 -5 18 17 5z m150 5 c-2 -2 -31 -6 -64 -9 -39 -4 -54 -3 -45 3 14 9 119 15 109 6z m74 -3 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z m-6735 -22 c37 -32 25 -58 -40 -81 -28 -11 -40 -11 -51 -2 -22 19 -8 61 27 83 37 23 36 23 64 0z m2491 -29 c1 -15 3 -49 7 -75 4 -28 1 -67 -6 -93 -11 -39 -16 -44 -41 -44 -16 0 -29 5 -29 11 0 5 -5 7 -12 3 -16 -10 -3 103 19 157 30 77 62 97 62 41z m4164 31 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z m-8243 -7 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m4847 -18 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m3316 15 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m-5258 -38 c0 -22 -5 -31 -20 -33 -33 -4 -49 13 -41 43 5 21 12 26 34 23 23 -2 27 -8 27 -33z m235 11 c0 -32 -43 -61 -70 -46 -21 11 -25 27 -14 54 4 11 19 16 45 16 34 0 39 -3 39 -24z m1448 -19 c3 -32 0 -37 -17 -37 -22 0 -38 38 -27 66 12 30 41 11 44 -29z m3471 29 c7 -8 8 -17 3 -20 -6 -3 -15 1 -22 9 -16 20 -30 19 -30 -2 0 -9 -3 -14 -6 -10 -4 3 -4 13 -1 22 8 19 41 20 56 1z m-15379 -6 c0 -6 11 -15 24 -20 13 -5 34 -27 47 -49 12 -23 26 -41 30 -41 4 0 3 -16 -3 -36 -7 -28 -7 -39 4 -45 8 -6 9 -9 1 -9 -14 0 9 -51 32 -70 13 -11 15 -8 15 18 0 19 -7 35 -17 41 -19 11 -17 12 38 15 35 3 37 1 60 -52 48 -111 74 -157 89 -157 21 0 25 51 6 80 -17 26 -21 61 -8 68 4 2 18 7 32 10 21 5 29 0 50 -30 13 -19 36 -40 51 -45 32 -11 56 -69 58 -139 1 -25 5 -58 10 -75 7 -28 10 -29 62 -29 l54 0 5 55 c4 47 8 55 27 58 18 3 27 -5 40 -32 9 -20 23 -36 30 -36 7 0 26 -18 41 -39 15 -22 37 -45 50 -52 28 -16 29 -50 1 -75 l-21 -19 22 -17 c12 -10 28 -18 36 -18 8 0 14 -4 14 -10 0 -5 6 -10 14 -10 21 0 46 -28 40 -45 -3 -7 5 -20 19 -29 16 -11 24 -26 25 -46 1 -36 -19 -40 -40 -8 -13 20 -17 21 -46 9 -27 -12 -35 -11 -57 3 -14 9 -25 23 -25 32 0 8 -7 17 -15 20 -8 4 -15 10 -15 15 0 5 -11 27 -25 48 -13 22 -26 52 -28 67 -5 36 -25 42 -33 10 -3 -14 -10 -26 -15 -26 -5 0 -6 -7 -3 -15 6 -15 -5 -20 -36 -15 -8 1 -37 26 -64 56 -28 30 -64 62 -82 70 -18 9 -44 33 -58 55 -15 21 -30 39 -35 39 -5 0 -14 20 -21 45 -15 55 -35 75 -45 46 -3 -12 -4 -25 0 -30 10 -18 -16 -23 -34 -7 -10 9 -23 16 -31 16 -21 0 -108 91 -113 119 -3 15 -16 33 -29 39 -13 7 -29 26 -37 43 -7 16 -19 35 -26 42 -22 23 -76 138 -73 155 2 10 -3 22 -11 28 -8 6 -11 16 -7 22 9 15 26 16 26 2z m12795 0 c-4 -6 -2 -17 4 -24 8 -9 2 -21 -23 -45 -29 -28 -37 -31 -55 -22 -34 19 -21 59 27 85 32 18 56 20 47 6z m-335 -53 c0 -31 -6 -61 -15 -73 -8 -10 -15 -17 -16 -14 -8 37 -8 104 1 120 19 35 30 22 30 -33z m2977 37 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-5612 -11 l47 -6 -5 -39 c-6 -41 -31 -78 -53 -78 -8 0 -16 -11 -20 -25 -3 -14 -12 -25 -20 -25 -7 0 -21 11 -30 25 -14 22 -24 25 -70 25 -58 0 -72 -13 -27 -25 38 -9 53 -23 53 -50 0 -34 10 -55 26 -55 8 0 14 -4 14 -10 0 -5 10 -10 23 -10 26 -1 53 -22 85 -67 13 -18 32 -33 42 -33 24 0 33 -30 21 -64 -10 -24 -15 -26 -68 -26 -32 0 -80 -7 -107 -15 -89 -27 -137 -11 -155 51 -8 30 -6 34 35 65 50 37 51 50 7 61 -53 14 -72 101 -32 152 14 17 23 47 26 86 l6 59 41 4 c77 7 113 7 161 0z m2381 -8 c7 -18 -14 -47 -27 -39 -5 3 -9 16 -9 30 0 27 27 34 36 9z m-185 -22 c36 -24 40 -30 35 -57 -8 -40 -19 -50 -50 -42 -30 7 -43 29 -52 85 -8 51 7 54 67 14z m3346 21 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-5904 -33 c9 -1 17 -7 17 -15 0 -14 -8 -18 -60 -30 -16 -3 -37 -25 -60 -61 -19 -30 -40 -55 -45 -55 -15 0 -43 22 -102 79 l-53 51 29 14 c19 10 45 13 83 9 34 -3 63 -1 74 6 11 6 37 9 59 7 22 -3 48 -5 58 -5z m1448 -4 c28 -22 29 -44 4 -61 -13 -9 -33 -16 -45 -16 -17 0 -20 6 -20 38 0 21 3 42 7 45 10 11 36 8 54 -6z m615 -16 c-10 -16 -36 -13 -36 3 0 17 21 27 34 16 4 -5 5 -13 2 -19z m-11701 9 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m7963 -21 c2 -19 -3 -28 -24 -38 -24 -10 -30 -10 -46 7 -31 31 -6 63 47 59 14 -2 21 -10 23 -28z m2243 -1 c10 -19 6 -30 -34 -80 -18 -23 -77 -25 -77 -3 0 28 28 82 50 98 26 18 46 13 61 -15z m262 -18 c-16 -33 -28 -38 -37 -14 -10 25 -7 34 9 34 8 0 15 7 15 16 0 13 3 14 14 5 12 -10 12 -16 -1 -41z m1608 -30 c18 -66 18 -79 -3 -106 -23 -29 -31 -30 -58 -7 -30 26 -29 144 1 174 20 20 21 20 34 2 7 -10 19 -39 26 -63z m2367 20 c3 -40 -2 -60 -24 -100 -28 -51 -39 -60 -47 -37 -2 6 -2 2 -1 -10 2 -12 0 -24 -5 -27 -16 -10 -19 32 -5 71 7 21 13 55 14 76 0 28 7 44 27 63 14 13 29 22 32 19 3 -3 7 -28 9 -55z m-2527 26 c7 -14 9 -37 5 -51 -6 -23 -9 -25 -23 -14 -22 19 -32 51 -21 72 12 24 26 21 39 -7z m-11348 -88 c14 20 28 3 16 -19 -10 -19 -12 -19 -45 17 -20 21 -33 43 -30 51 3 8 6 17 6 19 0 2 7 4 15 4 8 0 16 8 17 18 1 9 4 -10 7 -43 4 -37 9 -55 14 -47z m-497 79 c43 7 64 -10 64 -53 0 -19 5 -34 10 -34 6 0 10 -5 10 -10 0 -11 -50 17 -62 35 -4 5 -8 20 -8 33 0 18 -4 22 -19 17 -22 -7 -51 3 -51 18 0 8 3 8 11 0 6 -6 26 -9 45 -6z m243 -13 c4 3 5 -11 3 -31 -4 -29 -7 -33 -17 -21 -9 8 -11 24 -8 43 4 17 8 24 11 17 2 -6 7 -10 11 -8z m556 -9 c14 -13 25 -30 25 -36 0 -7 12 -25 26 -40 18 -19 26 -39 28 -74 3 -31 9 -51 20 -57 9 -5 16 -16 16 -24 0 -8 9 -22 20 -31 14 -13 20 -30 20 -61 0 -39 -2 -43 -22 -40 -16 2 -23 10 -23 25 0 12 -8 30 -17 40 -8 10 -19 39 -22 66 -5 30 -12 47 -21 47 -9 0 -16 20 -20 65 -7 57 -10 65 -26 60 -13 -4 -22 2 -33 24 -31 59 -14 80 29 36z m8201 15 c21 0 17 -31 -8 -57 -28 -30 -34 -29 -51 6 -13 26 -13 31 2 45 8 9 22 14 29 11 8 -3 20 -5 28 -5z m3433 -6 c6 -5 -21 -67 -36 -82 -11 -11 -17 -11 -28 -2 -15 13 -21 81 -8 94 6 6 63 -1 72 -10z m-3168 -63 c56 -57 69 -75 69 -101 0 -23 -5 -33 -20 -37 -11 -3 -20 -14 -20 -24 0 -17 -8 -19 -65 -19 -62 0 -65 -1 -65 -24 0 -44 -19 -77 -53 -91 -23 -9 -39 -26 -52 -54 -14 -31 -24 -41 -42 -41 -19 0 -23 5 -23 30 0 17 9 39 20 50 11 11 20 22 20 25 0 3 -21 5 -47 5 -62 1 -122 15 -141 34 -13 13 -7 22 51 81 l66 67 73 -17 c44 -11 78 -26 86 -37 15 -20 46 -25 40 -5 -3 6 -13 16 -24 21 -28 13 -74 80 -74 108 0 35 13 49 72 74 29 13 54 23 56 24 2 0 34 -31 73 -69z m3804 49 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-4202 -28 c11 -9 28 -30 39 -45 17 -23 18 -32 9 -55 -7 -15 -26 -34 -44 -43 -18 -8 -36 -26 -42 -38 -9 -19 -15 -22 -46 -17 -35 6 -36 4 -59 -44 l-24 -51 -90 3 c-97 3 -100 6 -121 71 -5 18 -7 18 -41 -2 -43 -26 -64 -26 -95 -2 -13 10 -34 21 -47 25 -31 10 -72 53 -72 76 0 45 118 140 174 140 49 0 126 -93 126 -153 0 -23 3 -24 53 -19 56 5 81 24 73 57 -4 14 10 34 51 73 54 52 58 54 97 48 22 -4 49 -15 59 -24z m746 14 c7 -9 13 -59 14 -130 2 -103 0 -116 -15 -116 -9 0 -21 6 -25 14 -4 8 -24 18 -43 23 -19 5 -35 15 -35 22 0 7 -8 18 -17 25 -11 8 -18 26 -18 44 0 26 8 37 40 58 21 14 46 37 55 50 18 28 28 30 44 10z m-9319 -17 c0 -5 -4 -9 -10 -9 -5 0 -10 7 -10 16 0 8 5 12 10 9 6 -3 10 -10 10 -16z m8352 5 c10 -7 -45 -64 -63 -64 -12 0 -49 51 -49 68 0 12 10 14 50 9 28 -3 55 -9 62 -13z m-404 -16 c4 -19 -35 -58 -58 -58 -9 0 -25 9 -35 19 -17 19 -16 21 16 41 39 23 72 23 77 -2z m2492 4 c0 -11 -14 -25 -36 -36 -34 -16 -38 -16 -55 0 -11 9 -19 21 -19 26 0 13 40 27 78 27 24 1 32 -3 32 -17z m1958 6 c14 -14 16 -62 2 -88 -5 -10 -23 -23 -39 -28 -40 -14 -56 4 -46 55 11 62 52 92 83 61z m-4840 -24 c47 -13 7 -84 -47 -84 -29 0 -31 2 -31 40 0 38 13 54 23 28 3 -8 6 -6 6 5 1 18 12 21 49 11z m3432 -44 c0 -30 -6 -44 -31 -64 -33 -28 -49 -26 -49 5 0 17 -12 23 -47 22 -22 -1 -14 24 11 41 18 12 26 12 29 3 3 -6 6 -2 6 10 1 25 13 31 53 25 25 -4 28 -8 28 -42z m398 43 c26 -6 26 -12 3 -98 -6 -22 -11 -63 -11 -91 0 -38 -4 -54 -16 -58 -28 -11 -41 -7 -73 23 -29 27 -31 34 -31 98 0 66 13 104 44 125 13 9 53 10 84 1z m3662 -3 c-8 -5 -19 -10 -25 -10 -5 0 -3 5 5 10 8 5 20 10 25 10 6 0 3 -5 -5 -10z m-7283 -11 c43 -16 73 -49 73 -81 0 -15 -5 -28 -10 -28 -6 0 -15 -11 -21 -24 -10 -22 -19 -24 -88 -28 -81 -5 -128 5 -148 31 -17 23 -16 61 2 61 8 0 18 12 21 26 12 45 104 69 171 43z m4041 -1 c-3 -7 -13 -15 -23 -16 -15 -4 -16 -2 -4 12 17 19 32 21 27 4z m189 -10 c29 -28 32 -78 4 -78 -11 0 -31 4 -45 10 -22 8 -26 16 -26 50 0 34 3 40 22 40 12 0 32 -10 45 -22z m741 -2 c6 -14 8 -41 5 -60 -5 -34 -8 -36 -44 -36 l-39 0 25 56 c14 31 25 58 25 60 0 14 19 0 28 -20z m2382 20 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m-5450 -31 c0 -30 -25 -34 -33 -6 -5 22 0 31 20 31 7 0 13 -11 13 -25z m850 -28 c0 -10 -13 -26 -29 -35 -17 -9 -35 -27 -40 -39 -8 -17 -19 -23 -41 -23 -34 0 -38 13 -15 56 8 16 15 23 15 15 0 -8 3 -11 7 -8 3 4 12 2 20 -4 8 -8 13 -8 13 -1 0 6 -6 12 -12 15 -7 2 -9 8 -5 13 4 4 17 3 27 -4 11 -7 20 -8 20 -3 0 5 -7 11 -15 15 -20 7 -19 26 0 26 9 0 18 7 21 15 6 14 8 13 20 -2 7 -10 14 -26 14 -36z m2260 43 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m-2818 -25 c-2 -14 -8 -25 -13 -25 -10 0 -12 34 -2 43 13 14 20 6 15 -18z m2612 -12 c3 -16 8 -56 11 -89 6 -57 5 -63 -16 -78 -37 -25 -68 -21 -75 12 -3 15 -8 35 -10 44 -9 31 16 96 44 117 35 27 39 26 46 -6z m-1027 -5 c9 -22 8 -73 -3 -125 -10 -51 -84 -9 -84 47 0 52 26 100 53 100 15 0 27 -8 34 -22z m721 -21 c3 -21 -4 -37 -25 -58 -15 -15 -31 -29 -34 -29 -3 0 -1 20 5 45 11 47 22 58 28 28 3 -15 5 -14 10 4 3 13 2 21 -4 20 -6 -1 -13 4 -15 11 -4 9 1 13 13 10 12 -2 20 -13 22 -31z m2629 11 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-4667 -13 c0 -27 -21 -33 -39 -12 -8 10 -7 17 1 25 20 20 38 14 38 -13z m-352 -10 c-3 -3 -9 2 -12 12 -6 14 -5 15 5 6 7 -7 10 -15 7 -18z m3067 16 c3 -5 1 -12 -4 -15 -5 -3 -11 1 -15 9 -6 16 9 21 19 6z m-5515 -22 c0 -15 5 -19 15 -15 22 8 18 -2 -11 -29 -15 -14 -34 -25 -43 -25 -14 1 -14 2 2 11 29 17 19 26 -38 34 -30 3 -55 10 -55 13 0 14 45 30 88 31 36 1 42 -2 42 -20z m4397 -28 c-18 -86 -50 -102 -62 -30 -8 48 5 68 41 61 22 -4 25 -9 21 -31z m1070 7 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-13064 -20 c56 -39 92 -100 130 -218 34 -107 33 -183 -3 -188 -43 -7 -150 119 -150 177 0 20 -6 32 -18 36 -14 4 -22 23 -31 78 -7 39 -14 81 -16 91 -9 47 38 59 88 24z m8103 -3 c-4 -10 1 -15 16 -15 12 0 18 -3 15 -7 -4 -3 -2 -12 4 -19 13 -15 -5 -28 -28 -20 -16 6 -43 -9 -43 -25 0 -5 13 -9 29 -9 35 0 87 -21 124 -50 16 -12 41 -23 57 -24 16 -1 35 -7 42 -14 6 -6 16 -12 20 -12 5 0 19 -12 32 -27 20 -23 22 -31 13 -53 -25 -58 -88 -90 -179 -90 -51 0 -68 12 -90 60 -7 16 -20 30 -30 30 -9 0 -31 8 -50 17 -18 9 -39 19 -47 23 -8 3 -26 27 -40 53 l-26 46 30 28 c17 15 39 49 49 76 17 47 18 47 63 47 36 0 44 -3 39 -15z m1201 0 c19 -8 46 -15 58 -15 25 0 65 -53 65 -86 0 -28 -33 -73 -66 -90 -24 -13 -32 -13 -66 1 -45 17 -104 69 -123 105 -17 33 -5 54 43 80 45 24 44 23 89 5z m716 -5 c3 -13 0 -20 -8 -20 -17 0 -28 17 -20 30 10 16 22 12 28 -10z m-10183 -90 c18 -47 38 -88 44 -92 14 -9 0 -22 -16 -14 -67 32 -102 80 -102 141 0 34 22 72 34 58 4 -4 22 -46 40 -93z m10350 45 l0 -55 -35 0 c-37 0 -55 20 -55 63 0 26 28 45 68 46 20 1 22 -3 22 -54z m-2660 36 c0 -5 -5 -13 -10 -16 -9 -6 -4 -102 6 -114 2 -2 16 8 30 22 15 15 31 27 36 27 5 0 7 4 3 9 -12 20 86 24 141 7 58 -18 71 -37 54 -80 -16 -44 -13 -58 9 -46 38 20 81 8 150 -42 13 -10 34 -18 47 -18 33 0 34 -45 2 -54 -13 -3 -33 -21 -45 -40 -26 -40 -40 -43 -195 -38 -85 3 -108 7 -108 18 0 8 7 14 15 14 8 0 15 7 15 15 0 8 7 15 16 15 32 0 74 40 74 71 0 16 -3 29 -7 29 -3 0 -36 -14 -72 -31 -62 -29 -69 -31 -114 -20 -27 6 -62 11 -78 11 -32 0 -35 9 -15 48 28 55 29 72 7 72 -12 0 -21 -4 -21 -9 0 -17 -50 -61 -71 -61 -17 0 -20 4 -16 21 4 16 -1 28 -19 41 -13 11 -24 23 -24 28 0 4 20 29 44 54 40 41 48 44 80 39 24 -4 36 -2 36 6 0 6 -12 11 -26 11 -14 0 -23 4 -20 8 7 12 76 14 76 3z m3792 -13 c25 -21 50 -96 38 -118 -5 -10 -10 -41 -10 -68 0 -38 -5 -53 -24 -71 -34 -32 -70 -25 -74 14 -2 17 -10 35 -18 41 -13 10 -12 18 6 63 11 29 20 58 20 67 0 22 28 84 38 84 4 0 15 -6 24 -12z m1244 -59 c2 -44 0 -49 -18 -49 -26 0 -58 27 -58 50 0 25 54 67 70 53 2 -2 5 -26 6 -54z m-2266 38 c0 -20 -27 -53 -37 -44 -4 5 0 14 9 21 10 7 15 16 12 19 -7 7 -28 -12 -37 -33 -3 -9 -6 -5 -6 11 -1 14 2 29 6 32 12 12 53 7 53 -6z m1970 3 c0 -5 -7 -10 -15 -10 -8 0 -15 5 -15 10 0 6 7 10 15 10 8 0 15 -4 15 -10z m-1406 -79 c14 -15 15 -24 6 -40 -6 -12 -17 -21 -25 -21 -8 0 -15 -6 -15 -13 0 -7 -15 -18 -33 -25 -44 -16 -50 -15 -43 4 3 8 2 12 -4 9 -6 -3 -10 -15 -10 -26 0 -36 -28 -20 -35 20 -9 53 7 81 46 81 17 0 37 7 45 15 21 20 47 19 68 -4z m1274 7 c18 -23 23 -72 10 -90 -12 -16 -15 -16 -45 -1 -39 18 -44 52 -13 83 23 23 34 25 48 8z m847 2 c3 -5 -1 -10 -10 -10 -9 0 -13 5 -10 10 3 6 8 10 10 10 2 0 7 -4 10 -10z m-1875 -10 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m3074 -26 c-3 -58 -45 -178 -75 -213 -16 -20 -34 -42 -40 -49 -22 -26 -44 -9 -43 33 1 30 16 64 58 132 31 51 56 96 56 101 0 13 23 33 35 29 5 -2 9 -17 9 -33z m-5702 -19 c13 -18 8 -53 -8 -59 -35 -14 -64 -6 -74 19 -5 14 -15 25 -22 25 -7 0 -1 12 15 25 24 22 31 23 55 12 15 -6 30 -16 34 -22z m4932 19 c13 -33 5 -74 -20 -103 -46 -56 -61 -5 -21 74 24 48 32 54 41 29z m-4699 -17 c46 -16 84 -45 101 -79 14 -28 14 -31 -3 -44 -10 -7 -34 -16 -53 -19 -19 -4 -57 -11 -84 -16 -63 -12 -121 4 -158 43 -15 17 -28 33 -28 37 1 3 19 18 40 33 22 15 40 34 40 42 0 10 14 16 43 19 43 3 51 2 102 -16z m420 13 c26 -10 38 -19 63 -52 22 -28 -5 -45 -104 -64 -68 -12 -95 -14 -117 -5 -24 9 -26 14 -17 30 6 11 27 33 48 48 20 15 41 34 45 40 10 16 46 17 82 3z m363 -12 c-2 -6 -10 -14 -16 -16 -7 -2 -10 2 -6 12 7 18 28 22 22 4z m1958 -2 c16 -17 18 -42 4 -51 -11 -7 -42 49 -33 59 9 9 13 8 29 -8z m264 -36 l0 -50 -40 0 c-37 0 -39 2 -46 35 -8 45 8 65 52 65 l34 0 0 -50z m120 35 c10 -12 10 -19 2 -27 -14 -14 -17 -11 -26 20 -8 25 5 29 24 7z m677 -23 c17 -23 16 -37 -3 -56 -21 -22 -51 -20 -64 3 -12 23 -13 64 -3 75 11 11 55 -3 70 -22z m-6140 12 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m57 -10 c25 -9 19 -24 -9 -24 -16 0 -25 6 -25 15 0 16 9 19 34 9z m4206 -14 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m398 -6 c17 -8 42 -29 55 -46 l24 -30 -19 -71 c-19 -74 -37 -100 -75 -112 -22 -6 -23 -4 -25 57 0 35 -2 90 -4 123 -3 53 2 95 10 95 2 0 17 -7 34 -16z m1687 -20 c0 -24 -4 -29 -25 -29 -31 0 -39 31 -13 50 25 20 38 13 38 -21z m-12437 15 c17 -6 33 -20 36 -32 5 -19 56 -62 91 -76 23 -10 35 -32 31 -60 -2 -22 4 -38 22 -58 40 -44 95 -169 100 -229 5 -65 0 -67 -72 -19 -43 29 -58 47 -80 95 -17 38 -25 68 -21 81 12 36 -3 69 -30 69 -14 0 -25 4 -25 10 0 8 -34 65 -57 95 -15 19 -53 110 -53 125 0 13 20 13 58 -1z m9747 -16 c14 -15 25 -33 25 -39 0 -30 -98 -134 -126 -134 -10 0 -74 71 -74 82 0 4 -11 8 -25 8 -22 0 -25 4 -25 36 0 33 2 36 23 30 13 -3 54 5 92 19 39 13 73 24 77 24 4 1 19 -11 33 -26z m2353 15 c14 -14 16 -88 3 -88 -14 0 -19 12 -27 58 -7 42 2 52 24 30z m645 -2 c8 -20 -30 -66 -48 -59 -21 7 -19 23 7 50 25 27 34 29 41 9z m-2686 -63 c-3 -10 -5 -4 -5 12 0 17 2 24 5 18 2 -7 2 -21 0 -30z m133 17 c0 -5 -4 -10 -9 -10 -6 0 -13 5 -16 10 -3 6 1 10 9 10 9 0 16 -4 16 -10z m1021 -10 c17 0 9 -40 -11 -60 -14 -14 -20 -33 -20 -68 0 -27 -6 -56 -13 -66 -12 -17 -15 -17 -30 -2 -12 13 -16 32 -14 81 1 35 5 67 10 71 4 4 7 15 7 25 0 18 25 30 48 23 8 -2 18 -4 23 -4z m-1857 -10 c27 -10 35 -30 13 -30 -7 0 -26 -13 -41 -29 -16 -16 -35 -27 -42 -24 -9 3 -14 -2 -15 -13 0 -15 -2 -15 -6 -4 -9 23 -24 29 -55 23 -20 -4 -28 -1 -28 8 0 8 -10 20 -22 28 l-21 13 24 19 c18 14 41 19 96 19 39 0 83 -4 97 -10z m1182 -12 c-10 -6 -20 -7 -24 -3 -9 8 20 25 31 18 5 -3 2 -10 -7 -15z m-227 -2 c8 -10 7 -25 -6 -60 -14 -37 -15 -49 -5 -55 7 -4 15 -23 18 -42 6 -34 4 -36 -35 -51 -25 -10 -43 -13 -47 -7 -7 12 15 69 26 69 4 0 10 9 13 21 4 15 0 23 -14 26 -12 4 -19 15 -20 32 -1 14 -2 38 -3 54 -2 24 1 27 30 27 17 0 37 -6 43 -14z m-2970 -15 c17 -11 7 -41 -14 -41 -9 0 -13 5 -10 10 3 6 -1 10 -9 10 -9 0 -16 7 -16 15 0 16 27 20 49 6z m1512 -11 c23 -13 26 -40 4 -40 -8 0 -15 -8 -15 -19 0 -13 -7 -18 -25 -18 -21 0 -25 4 -25 27 0 57 18 72 61 50z m227 4 c12 -4 22 -10 22 -15 0 -5 16 -24 35 -43 32 -32 51 -74 43 -94 -1 -5 -27 -30 -56 -55 -37 -33 -61 -47 -82 -47 -32 0 -109 47 -110 67 0 7 -11 15 -25 19 -22 5 -25 12 -25 48 0 43 -1 42 99 108 27 18 59 22 99 12z m2506 -31 c-10 -15 -19 -30 -19 -33 -3 -20 -18 -50 -25 -50 -4 0 -11 12 -15 27 -3 15 -12 31 -18 35 -18 12 8 25 43 23 21 -1 31 4 36 17 3 11 8 17 11 14 3 -3 -3 -18 -13 -33z m266 -62 c0 -74 -1 -77 -39 -121 l-40 -44 -21 19 c-20 18 -21 26 -15 90 6 65 10 73 47 112 55 57 68 46 68 -56z m-2364 81 c7 -4 22 -26 34 -49 26 -50 20 -104 -17 -141 -20 -20 -32 -23 -71 -20 l-47 3 3 -57 c4 -57 3 -58 -22 -58 -16 0 -26 -6 -26 -14 0 -19 -48 -30 -66 -15 -9 7 -14 8 -14 1 0 -6 5 -12 12 -14 7 -3 -3 -12 -21 -21 -29 -14 -35 -15 -48 -2 -8 8 -23 15 -33 15 -10 0 -25 11 -34 25 -9 14 -23 25 -31 25 -35 0 7 53 83 104 25 17 41 35 38 43 -8 19 12 16 36 -7 25 -23 48 -26 66 -8 14 14 16 45 4 50 -5 2 -12 15 -16 31 -5 23 -3 29 16 36 13 5 43 25 67 45 42 35 65 43 87 28z m-9536 -44 c16 -52 41 -100 56 -110 13 -8 7 -55 -8 -64 -15 -9 -22 4 -10 19 7 9 8 17 1 27 -8 12 -12 12 -16 2 -4 -10 -9 -8 -20 7 -8 12 -20 21 -27 21 -17 0 -26 22 -26 63 0 83 29 102 50 35z m12280 2 c17 -33 18 -44 9 -63 -15 -28 -70 -77 -81 -71 -4 3 -8 33 -8 66 0 50 4 66 22 85 12 13 25 23 30 23 4 0 17 -18 28 -40z m-2048 3 c25 -23 22 -41 -8 -49 -35 -9 -51 8 -36 41 14 29 19 31 44 8z m1443 -2 c-3 -6 -16 -11 -28 -11 -21 0 -21 1 3 13 27 15 36 14 25 -2z m-2918 -12 c41 -20 43 -23 43 -65 0 -24 -5 -44 -11 -44 -17 0 -79 -54 -79 -69 0 -19 -106 -7 -127 14 -8 8 -19 15 -24 15 -16 0 -49 64 -49 96 0 26 6 33 38 47 76 33 149 35 209 6z m-8473 5 c9 -3 16 -13 16 -21 0 -9 6 -13 15 -9 8 3 15 1 15 -3 0 -5 -7 -11 -15 -15 -8 -3 -15 -1 -15 4 0 6 -4 10 -10 10 -5 0 -10 -8 -10 -17 0 -16 -1 -16 -16 -1 -20 19 -10 40 14 31 13 -4 13 -2 -3 10 -21 17 -17 21 9 11z m10309 -1 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m-2255 -38 c23 -9 42 -24 42 -31 0 -8 -20 -35 -45 -61 -25 -25 -45 -49 -45 -54 0 -4 -10 -11 -22 -15 -13 -4 -26 -11 -29 -16 -3 -5 -31 -1 -63 9 -50 15 -58 21 -63 47 -4 17 -17 35 -34 45 -16 9 -29 19 -29 23 0 11 62 54 95 67 40 14 140 7 193 -14z m1560 -38 c7 -58 -53 -87 -96 -47 -31 29 -27 49 11 65 50 23 81 16 85 -18z m1196 -28 l38 -60 -33 -30 c-24 -22 -43 -29 -72 -29 -36 0 -39 2 -33 23 3 12 6 43 6 70 0 34 6 53 20 67 11 11 23 20 28 20 4 0 24 -28 46 -61z m-11440 4 c3 -21 6 -48 6 -61 0 -19 -2 -21 -19 -10 -26 16 -34 51 -19 82 16 36 24 32 32 -11z m65 28 c16 -10 6 -31 -15 -31 -8 0 -14 9 -14 20 0 22 7 25 29 11z m7888 -7 c8 -21 -7 -46 -34 -58 -11 -5 -25 -21 -31 -35 l-11 -26 6 27 c4 22 2 26 -14 22 -26 -7 -47 20 -39 50 6 25 23 32 84 35 22 1 35 -4 39 -15z m282 10 c68 -8 81 -25 29 -43 -17 -6 -55 -36 -84 -66 -52 -54 -53 -54 -116 -56 -72 -2 -104 12 -111 48 -5 25 4 36 43 63 12 8 36 25 53 38 33 24 74 27 186 16z m2667 -29 c18 -25 24 -42 20 -59 -5 -20 -14 -25 -62 -31 -49 -6 -59 -4 -76 13 -20 19 -20 20 4 55 41 64 76 71 114 22z m872 15 c20 -22 19 -55 -5 -95 -10 -16 -15 -17 -37 -7 -30 14 -33 37 -9 87 19 41 25 42 51 15z m-715 -40 c-4 -16 -9 -18 -24 -9 -22 11 -24 30 -7 47 17 17 38 -10 31 -38z m1727 34 c0 -8 -4 -13 -9 -10 -5 4 -12 0 -14 -6 -3 -7 -6 -3 -6 10 -1 13 5 22 14 22 8 0 15 -7 15 -16z m-2336 -11 c8 -19 -9 -38 -41 -48 -25 -7 -29 1 -13 25 7 11 12 12 18 4 5 -9 11 -7 22 4 13 14 12 15 -3 9 -17 -6 -23 3 -10 16 11 11 21 8 27 -10z m-2071 -22 c2 -11 23 -31 45 -45 49 -31 77 -79 56 -97 -15 -12 -20 -89 -6 -89 5 0 17 7 28 15 28 21 65 18 140 -10 36 -14 70 -25 75 -25 5 0 9 11 9 25 0 20 5 25 23 25 13 0 34 -9 47 -20 l23 -20 -24 0 c-55 0 -69 -10 -69 -49 0 -26 -7 -42 -22 -56 -20 -17 -39 -19 -162 -20 -103 0 -140 3 -143 13 -3 8 -25 12 -62 12 -74 0 -176 40 -213 84 -34 39 -34 51 -1 82 20 18 36 24 65 22 47 -2 52 3 50 51 -2 32 3 44 28 67 16 16 30 35 30 41 0 8 14 13 39 13 30 0 40 -4 44 -19z m485 -44 c37 -37 52 -59 52 -78 0 -31 -19 -39 -99 -39 -35 0 -61 -6 -72 -16 -16 -14 -21 -14 -57 5 -22 11 -44 31 -47 43 -7 20 -1 30 41 56 5 4 25 26 44 49 42 54 64 51 138 -20z m395 50 c-7 -11 28 -36 43 -30 15 6 23 -47 16 -120 -4 -47 -10 -63 -36 -88 -30 -30 -33 -31 -99 -24 -57 5 -72 4 -88 -11 -11 -9 -22 -14 -27 -10 -10 11 28 36 54 36 14 0 27 11 37 33 l16 32 -43 13 c-29 8 -47 20 -54 38 -16 34 -15 54 3 54 9 0 20 11 25 25 5 14 16 25 24 25 7 0 24 9 37 20 24 19 103 25 92 7z m3694 5 c11 -7 16 -26 14 -49 0 -6 -13 -26 -28 -44 -16 -18 -32 -46 -38 -62 -9 -28 -55 -58 -55 -37 0 6 5 10 11 10 6 0 18 7 26 16 13 13 15 23 7 53 -12 45 1 108 24 114 26 7 26 7 39 -1z m-487 -44 c0 -45 -22 -78 -52 -78 -22 0 -38 36 -38 86 0 34 0 34 45 34 l45 0 0 -42z m-2356 11 c29 -23 33 -51 12 -101 -16 -37 -50 -58 -96 -58 -42 0 -60 24 -60 80 0 41 5 54 27 75 34 31 80 33 117 4z m3206 -26 c0 -19 -7 -49 -15 -66 -14 -30 -72 -77 -95 -77 -18 0 -10 56 16 106 45 87 94 107 94 37z m-13060 22 c0 -8 -4 -15 -10 -15 -5 0 -10 7 -10 15 0 8 5 15 10 15 6 0 10 -7 10 -15z m-69 -26 c20 -21 29 -41 29 -64 0 -18 5 -35 12 -37 7 -3 6 -7 -5 -11 -9 -3 -17 -2 -17 3 0 6 -4 10 -10 10 -5 0 -10 -8 -10 -17 0 -10 -12 3 -26 28 -15 26 -37 53 -50 60 -23 12 -32 38 -17 52 17 18 66 6 94 -24z m10189 14 c0 -6 -27 -33 -34 -33 -8 0 -8 35 0 43 6 6 34 -2 34 -10z m-10085 -2 c3 -5 0 -13 -6 -17 -8 -4 -7 -9 2 -15 11 -7 10 -9 -3 -9 -13 0 -18 8 -18 25 0 25 14 34 25 16z m12043 -55 c3 -49 0 -62 -19 -82 -17 -18 -26 -21 -40 -13 -29 15 -26 100 4 133 36 40 52 29 55 -38z m-5438 44 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m546 -12 c-16 -9 -36 -3 -36 11 0 5 12 6 26 3 22 -4 24 -6 10 -14z m480 -5 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m2630 -16 c-1 -14 -8 -23 -22 -25 -29 -4 -40 36 -16 54 21 16 40 2 38 -29z m629 32 c4 -5 4 -21 1 -35 -8 -29 -50 -34 -65 -7 -18 33 45 74 64 42z m-11135 -9 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m11938 -22 c3 -22 -4 -32 -32 -50 -29 -19 -36 -29 -36 -56 0 -23 -7 -40 -22 -53 -23 -18 -57 -25 -59 -11 0 4 -2 15 -4 24 -2 10 5 29 16 42 12 16 19 40 19 70 l0 46 40 0 c22 0 40 5 40 11 0 24 35 3 38 -23z m-11923 3 c-8 -14 -42 -14 -50 -1 -4 7 2 9 19 4 18 -4 26 -2 26 7 0 7 3 10 6 6 3 -3 3 -10 -1 -16z m7432 3 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m373 -8 c0 -17 -14 -29 -23 -20 -8 8 3 34 14 34 5 0 9 -6 9 -14z m2462 -18 c-9 -9 -12 -7 -12 12 0 19 3 21 12 12 9 -9 9 -15 0 -24z m-9886 -50 c35 -29 67 -63 71 -76 6 -25 -2 -116 -12 -131 -3 -5 -28 0 -56 12 -45 19 -53 28 -79 82 -36 75 -47 130 -30 150 20 24 37 18 106 -37z m11092 -9 c-5 -62 -15 -78 -53 -79 -19 0 -38 -18 -69 -64 -20 -29 -73 -14 -81 24 -8 37 2 70 29 94 22 19 80 47 93 45 21 -3 31 3 36 21 3 12 14 20 27 20 21 0 22 -3 18 -61z m1326 39 c3 -13 1 -27 -5 -33 -7 -7 -8 -4 -4 7 5 12 1 20 -9 24 -9 3 -13 10 -10 15 9 16 21 10 28 -13z m1294 10 c7 -7 12 -18 12 -24 0 -15 -82 -154 -90 -153 -3 0 -15 13 -27 28 l-22 28 21 41 c11 23 26 42 32 42 7 0 18 11 24 25 13 27 31 32 50 13z m-3092 -24 c4 -14 4 -55 1 -90 -4 -35 -3 -65 1 -68 15 -9 29 9 36 45 9 50 32 69 51 43 20 -27 18 -57 -4 -81 -11 -12 -18 -23 -16 -25 3 -2 -6 -4 -18 -5 -50 -1 -57 -4 -57 -23 0 -11 -7 -20 -15 -20 -8 0 -15 8 -15 18 0 14 -2 15 -10 2 -7 -12 -12 -12 -22 -2 -17 17 -12 130 7 149 8 8 15 27 15 42 0 48 35 59 46 15z m1139 -12 c-8 -9 -35 20 -28 31 4 6 11 3 19 -8 8 -10 12 -21 9 -23z m355 21 c0 -28 -16 -47 -34 -40 -21 8 -20 33 2 46 25 15 32 13 32 -6z m223 10 c-19 -3 -34 -11 -36 -21 -3 -12 -5 -10 -6 6 -1 19 3 22 37 20 36 -1 36 -1 5 -5z m37 -34 c12 -8 11 -9 -6 -4 -14 4 -24 0 -28 -10 -3 -10 1 -15 13 -15 14 0 17 -6 13 -25 -3 -16 -11 -25 -23 -25 -16 0 -19 8 -19 45 0 47 16 58 50 34z m-5265 -29 c16 -16 26 -32 24 -35 -6 -5 -69 48 -69 58 0 15 18 6 45 -23z m2314 16 c17 -20 -8 -39 -31 -22 -13 10 -15 15 -6 24 15 15 23 15 37 -2z m3197 -10 c7 -29 -1 -46 -22 -46 -20 0 -28 24 -14 49 14 28 28 26 36 -3z m-3594 2 c-9 -9 -15 -9 -24 0 -9 9 -7 12 12 12 19 0 21 -3 12 -12z m-9423 -19 c12 -11 34 -45 48 -75 14 -30 34 -59 44 -65 11 -5 19 -15 19 -22 0 -7 13 -37 28 -68 15 -31 23 -55 17 -52 -17 6 -42 54 -49 94 -5 31 -10 36 -26 32 -31 -8 -28 -39 4 -35 16 2 18 1 7 -6 -11 -8 -10 -14 8 -33 22 -24 28 -49 11 -49 -5 0 -10 6 -10 14 0 8 -3 16 -8 18 -21 9 -92 114 -98 144 -3 19 -10 34 -14 34 -15 0 -22 53 -8 61 10 7 10 9 1 9 -7 0 -13 5 -13 10 0 16 14 12 39 -11z m9431 0 c49 -4 52 -7 35 -39 -19 -36 -54 -46 -107 -31 l-39 12 17 27 c27 41 38 51 49 42 6 -4 26 -9 45 -11z m1189 5 c43 -9 40 -35 -7 -83 -37 -38 -87 -58 -107 -43 -26 19 -50 97 -33 108 28 18 103 27 147 18z m-10447 -16 c-9 -9 -15 -9 -24 0 -9 9 -7 12 12 12 19 0 21 -3 12 -12z m8778 -10 c11 -12 20 -34 20 -48 0 -32 -38 -70 -65 -65 -11 2 -42 4 -68 4 -53 1 -70 19 -43 46 9 9 16 23 16 31 0 8 6 14 14 14 8 0 33 9 57 20 24 11 45 20 46 20 1 0 11 -10 23 -22z m1928 10 c16 -16 15 -59 -2 -80 -14 -19 -36 -24 -36 -9 0 5 -10 11 -21 14 -19 5 -21 11 -15 38 9 46 46 65 74 37z m1141 -154 c-7 -8 -22 -14 -33 -12 -16 2 -22 11 -24 36 -4 42 25 120 47 124 13 3 16 -8 19 -65 2 -43 -2 -74 -9 -83z m105 140 c9 -8 16 -24 16 -34 0 -19 -36 -60 -52 -60 -4 0 -8 25 -8 55 0 59 13 70 44 39z m246 -20 c-8 -8 -23 -20 -34 -25 -21 -10 -21 -10 -1 6 11 9 19 21 18 26 -2 5 4 9 13 9 14 0 14 -3 4 -16z m-6263 0 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m6426 -9 c44 -33 13 -155 -41 -163 -30 -5 -50 68 -32 118 22 62 39 72 73 45z m-838 -65 c-10 -40 -38 -52 -54 -22 -7 14 -5 27 11 52 19 33 21 33 35 15 8 -12 11 -30 8 -45z m-4016 8 c1 -5 -3 -8 -8 -8 -12 0 -22 30 -14 43 6 10 20 -13 22 -35z m2471 2 c0 -33 -37 -120 -51 -120 -21 0 -6 -29 21 -40 47 -19 48 -49 4 -122 -21 -35 -49 -78 -63 -96 -46 -63 -143 -92 -183 -55 -35 31 -23 56 53 106 39 26 80 47 90 47 16 0 19 7 19 44 0 35 4 45 20 49 13 3 20 13 20 29 l-1 23 -19 -26 c-13 -17 -44 -35 -85 -50 -40 -14 -67 -29 -71 -41 -3 -10 -12 -18 -20 -18 -19 0 -18 19 1 26 12 5 14 21 9 89 l-7 84 32 19 c18 11 60 25 94 32 34 6 72 20 85 31 36 28 52 24 52 -11z m-4059 -3 c-10 -9 -11 -8 -5 6 3 10 9 15 12 12 3 -3 0 -11 -7 -18z m4279 13 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m-1293 -6 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m1716 -39 c41 -39 47 -50 47 -85 l0 -40 -54 0 c-54 0 -54 0 -70 40 -22 55 -20 85 6 110 12 11 22 20 23 20 1 0 22 -20 48 -45z m-980 13 c19 -15 11 -32 -18 -41 -29 -9 -48 6 -40 32 7 24 33 27 58 9z m-9188 -27 c-3 -12 -11 -21 -16 -21 -14 0 -11 38 4 43 17 6 20 2 12 -22z m9730 -14 c12 -50 -6 -83 -58 -110 -21 -11 -41 -26 -44 -33 -8 -21 -31 -17 -38 6 -6 19 7 74 26 112 5 10 9 29 9 43 0 25 2 26 48 23 45 -3 47 -4 57 -41z m1877 28 c0 -5 -5 -11 -11 -13 -6 -2 -11 4 -11 13 0 9 5 15 11 13 6 -2 11 -8 11 -13z m-2819 -2 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z m1045 -11 c2 -7 -3 -12 -12 -12 -9 0 -16 7 -16 16 0 17 22 14 28 -4z m1012 3 c0 -8 -9 -15 -20 -15 -22 0 -27 15 -7 23 21 9 27 7 27 -8z m-10922 -7 c7 -7 12 -23 11 -37 0 -15 -3 -20 -6 -13 -7 18 -23 15 -23 -5 0 -23 -18 -4 -20 22 -5 46 11 60 38 33z m8911 -8 c-6 -5 -19 -6 -27 -2 -13 4 -12 7 4 12 23 9 41 1 23 -10z m1681 -56 c0 -31 -33 -56 -83 -61 -40 -5 -45 -3 -50 19 -4 13 -3 37 1 53 6 23 16 31 41 36 18 4 38 12 44 18 13 13 47 -33 47 -65z m-1556 36 c17 -17 18 -23 7 -67 -18 -72 -35 -93 -76 -93 -30 0 -37 5 -55 40 -23 44 -26 90 -7 90 6 0 25 14 41 30 31 33 55 33 90 0z m-1885 -3 c0 -9 -2 -9 -5 0 -3 7 -13 9 -22 6 -14 -4 -14 -3 -2 5 16 12 30 7 29 -11z m1704 4 l28 -18 -30 -6 c-30 -6 -81 9 -81 23 0 26 45 26 83 1z m2435 3 c34 -24 29 -66 -14 -114 -59 -65 -96 -47 -90 44 5 76 51 107 104 70z m-11555 -41 c24 -45 24 -50 10 -76 -8 -16 -12 -35 -9 -43 3 -7 1 -16 -3 -18 -4 -3 -14 14 -21 37 -7 23 -24 52 -37 65 -25 25 -30 51 -11 70 23 23 45 12 71 -35z m8941 -13 c8 -71 -7 -136 -37 -161 -28 -23 -38 -23 -59 -1 -27 28 -46 42 -60 42 -7 0 -22 19 -33 41 -19 40 -19 41 0 55 10 8 22 14 27 14 4 0 8 6 8 13 0 20 71 57 111 57 l36 0 7 -60z m1384 48 c14 -14 16 -128 2 -128 -13 0 -78 58 -90 80 -22 40 54 82 88 48z m932 -42 c-8 -8 -10 -4 -6 19 6 41 8 44 13 16 3 -13 0 -28 -7 -35z m1505 23 c12 -37 -40 -64 -65 -34 -10 12 -9 20 3 39 19 28 53 25 62 -5z m-3355 3 c0 -10 5 -23 11 -29 7 -7 9 -23 4 -40 l-7 -28 -19 24 c-19 23 -26 71 -12 84 12 13 23 7 23 -11z m-8873 -101 l41 -85 -25 -38 -26 -38 24 -20 c13 -10 45 -22 70 -26 42 -6 48 -9 53 -36 3 -17 6 -54 6 -82 0 -65 17 -91 61 -91 32 0 34 -2 50 -60 10 -33 20 -69 24 -80 6 -20 -7 -22 -117 -15 -5 0 -8 7 -8 15 0 8 -4 15 -8 15 -4 0 -14 17 -22 38 -16 44 -59 112 -71 112 -5 0 -9 32 -9 70 0 65 -2 71 -25 82 -15 7 -25 20 -25 32 0 12 -9 37 -19 56 -50 92 -81 161 -81 183 0 13 9 36 21 51 26 33 32 27 86 -83z m10511 88 c16 -6 43 -28 58 -50 36 -53 27 -86 -34 -113 -23 -11 -42 -26 -42 -33 0 -15 -35 -10 -54 7 -10 10 12 170 26 188 13 15 8 14 46 1z m1040 -33 c4 -50 -30 -99 -64 -90 -19 5 -27 0 -40 -23 -24 -42 -105 -76 -90 -38 3 8 0 15 -6 15 -19 0 0 112 23 135 l20 20 31 -34 c33 -37 48 -31 48 20 0 33 2 34 42 33 31 -1 33 -3 36 -38z m-274 25 c10 -16 -15 -69 -34 -74 -24 -6 -34 21 -21 57 10 25 44 36 55 17z m-3213 -24 c19 -12 35 -32 36 -42 7 -57 -120 -122 -152 -78 -21 29 -44 0 -42 -51 1 -24 -5 -55 -13 -70 -18 -34 -42 -30 -124 25 -32 21 -61 39 -64 39 -3 0 -25 20 -49 45 -23 25 -46 45 -51 45 -5 0 -14 16 -20 36 -13 43 -2 50 55 35 62 -17 105 -13 143 14 32 22 45 24 141 25 94 0 110 -3 140 -23z m5136 -38 c-9 -17 -17 -39 -17 -50 0 -26 -44 -118 -73 -153 -24 -29 -24 -29 -44 -10 -21 19 -21 20 -4 84 25 91 36 114 68 144 33 31 41 32 60 9 13 -16 13 -16 4 4 -16 32 -13 40 6 20 17 -17 17 -19 0 -48z m-13467 10 c0 -12 -5 -19 -11 -17 -6 2 -10 7 -10 11 1 4 1 14 1 23 0 8 5 12 10 9 6 -3 10 -15 10 -26z m12156 -12 c-7 -33 -7 -33 -16 -12 -13 31 -11 45 5 39 9 -4 13 -15 11 -27z m-12051 13 c3 -6 -1 -7 -9 -4 -9 3 -16 1 -16 -6 0 -6 -4 -8 -10 -5 -5 3 -10 10 -10 16 0 12 37 12 45 -1z m10995 -33 c0 -24 -6 -51 -12 -60 -20 -26 -63 -1 -63 37 0 22 8 33 35 47 19 11 36 19 37 19 2 0 3 -19 3 -43z m-11494 -4 c-7 -7 -26 7 -26 19 0 6 6 6 15 -2 9 -7 13 -15 11 -17z m9649 -9 c8 -20 15 -56 15 -80 0 -55 -38 -101 -92 -113 -35 -8 -38 -7 -38 13 0 18 -21 41 -62 67 -11 7 32 99 47 99 5 0 16 9 22 19 11 18 32 26 75 30 12 1 23 -12 33 -35z m698 14 c43 -30 47 -36 47 -85 0 -34 -4 -43 -18 -43 -9 0 -23 -9 -30 -20 -9 -14 -23 -20 -50 -20 -62 0 -67 9 -42 77 12 32 20 63 19 69 -9 48 23 58 74 22z m-9903 -3 c0 -8 7 -15 15 -15 20 0 19 -36 -1 -44 -25 -10 -34 -7 -28 9 3 8 -2 22 -11 31 -13 14 -14 19 -3 25 19 13 28 11 28 -6z m10268 6 c19 -12 -12 -117 -36 -123 -33 -9 -107 6 -110 23 -3 15 63 68 101 82 9 4 17 11 17 17 0 12 10 13 28 1z m1972 -33 c0 -16 -36 -43 -63 -46 -28 -4 -33 3 -18 27 5 8 16 11 25 8 12 -5 16 0 16 17 0 12 3 26 7 30 7 7 33 -21 33 -36z m-11395 22 c3 -5 -1 -10 -9 -10 -8 0 -18 5 -21 10 -3 6 1 10 9 10 8 0 18 -4 21 -10z m-1245 -21 c0 -11 -4 -17 -10 -14 -5 3 -10 13 -10 21 0 8 5 14 10 14 6 0 10 -9 10 -21z m120 11 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m135 0 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m11543 -11 c34 -12 72 -72 72 -115 0 -39 -27 -94 -47 -95 -10 -1 -22 -2 -28 -4 -5 -1 -15 -3 -22 -3 -6 -1 -17 -18 -25 -38 -11 -31 -16 -34 -38 -29 -40 10 -50 36 -26 70 8 11 19 56 26 100 7 44 14 90 16 103 5 25 24 28 72 11z m-11492 -24 c12 -18 22 -24 35 -20 14 5 17 2 13 -9 -3 -9 -1 -16 4 -16 18 0 174 -158 167 -169 -3 -6 -6 -49 -6 -96 0 -65 -3 -85 -14 -85 -22 0 -60 41 -84 93 -13 26 -34 55 -47 64 -15 10 -24 25 -24 42 0 34 -42 131 -56 131 -15 0 -24 23 -24 61 0 36 14 37 36 4z m8903 14 c21 -6 48 -19 60 -28 22 -17 23 -20 10 -54 -7 -21 -17 -37 -21 -37 -4 0 -8 -7 -8 -15 0 -8 -11 -22 -25 -31 -14 -9 -25 -21 -25 -26 0 -11 44 -6 83 10 42 18 47 15 47 -23 0 -39 -20 -55 -69 -55 -22 0 -35 7 -48 26 -16 25 -21 26 -72 21 -31 -3 -51 -3 -45 1 12 8 11 18 -4 55 -29 70 2 167 54 167 15 0 43 -5 63 -11z m1551 1 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m1560 -5 c0 -8 7 -15 16 -15 37 0 -20 -79 -70 -96 -13 -4 -24 0 -33 12 -19 26 -16 50 10 77 34 37 77 49 77 22z m-2196 -34 c12 -13 16 -32 14 -56 -3 -33 -8 -39 -41 -52 -44 -18 -87 -10 -87 15 0 18 76 112 90 112 4 0 15 -9 24 -19z m-9947 -1 c29 0 34 -5 62 -63 17 -35 31 -71 31 -81 0 -9 7 -19 15 -22 8 -4 15 -15 15 -25 0 -22 -11 -24 -28 -7 -10 10 -15 10 -22 -2 -8 -13 -11 -12 -16 6 -3 11 -21 33 -41 50 -49 40 -93 102 -93 132 0 20 4 23 23 18 12 -3 36 -6 54 -6z m8541 -99 c3 -99 -17 -181 -44 -181 -32 0 -84 35 -99 66 -21 44 -17 104 9 130 12 12 32 35 46 52 19 24 32 31 55 29 l30 -2 3 -94z m149 74 c16 -75 16 -74 -16 -92 -17 -10 -32 -25 -34 -33 -4 -21 -47 63 -47 93 0 18 9 29 33 41 40 20 59 17 64 -9z m2063 -80 c0 -17 -6 -39 -12 -48 -12 -16 -149 -87 -167 -87 -11 0 -31 78 -31 118 0 38 23 65 84 97 l50 25 38 -37 c28 -27 38 -45 38 -68z m400 34 c0 -57 -1 -59 -26 -59 -26 0 -26 0 -19 58 8 67 11 73 30 65 11 -4 15 -21 15 -64z m-11446 45 c3 -9 6 -27 6 -40 0 -13 6 -24 13 -24 7 0 13 -8 13 -17 0 -10 3 -37 7 -60 6 -37 5 -42 -14 -48 -28 -9 -35 -1 -59 69 -29 85 -25 136 10 136 10 0 21 -7 24 -16z m11726 -10 c15 -38 12 -91 -6 -108 -19 -19 -30 -20 -41 -3 -4 8 -16 16 -25 20 -36 13 -15 81 27 89 11 2 19 10 18 16 -5 23 18 12 27 -14z m-394 -40 c4 -14 2 -30 -5 -37 -6 -6 -11 -21 -11 -34 0 -19 -5 -23 -33 -23 -41 0 -57 15 -57 56 0 37 30 63 72 63 22 1 29 -5 34 -25z m-3906 -4 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m-7219 -64 c27 -28 49 -59 49 -68 0 -13 23 -74 36 -96 2 -2 16 -1 33 3 17 4 29 10 26 15 -3 5 -1 11 4 14 5 4 12 2 16 -4 3 -5 17 -10 30 -10 17 0 32 -11 47 -35 13 -19 31 -35 40 -35 9 0 20 -5 24 -12 5 -7 2 -9 -7 -6 -54 20 -59 20 -59 -4 0 -39 12 -68 26 -68 8 0 14 -4 14 -9 0 -6 -12 -6 -31 1 -24 8 -29 15 -25 32 6 28 -53 100 -76 91 -30 -12 -26 -41 13 -99 43 -64 45 -73 25 -101 -13 -18 -18 -15 -86 51 -39 38 -82 89 -95 114 -52 103 -59 115 -69 122 -6 4 -12 18 -13 32 -1 13 -11 43 -23 65 -14 29 -17 41 -8 42 10 0 10 2 1 6 -28 11 -11 24 23 17 26 -5 51 -22 85 -58z m7189 44 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m1720 -70 c0 -59 -11 -76 -56 -88 -66 -18 -90 -15 -113 14 -19 25 -19 54 1 54 5 0 28 13 51 28 79 52 80 53 100 30 9 -11 17 -28 17 -38z m450 -8 c0 -17 -5 -23 -17 -20 -19 4 -24 35 -9 56 12 17 26 -2 26 -36z m-1061 24 c9 -11 10 -20 1 -35 -12 -24 -18 -25 -55 -11 -26 10 -26 10 -8 35 20 28 45 32 62 11z m3604 7 c3 -5 8 -34 12 -65 6 -50 5 -58 -9 -58 -9 0 -16 -5 -16 -12 0 -6 -7 -4 -18 5 -24 22 -32 21 -32 -4 0 -29 -18 -59 -35 -59 -12 0 -15 15 -15 65 0 57 2 65 19 65 18 0 71 45 71 61 0 11 17 12 23 2z m-695 -10 c-10 -2 -26 -2 -35 0 -10 3 -2 5 17 5 19 0 27 -2 18 -5z m1009 -23 c4 -36 -19 -60 -62 -67 l-38 -6 7 39 c8 45 31 66 66 62 18 -2 26 -10 27 -28z m-1912 8 c14 -6 25 -16 25 -23 0 -20 -58 -55 -92 -55 -28 0 -36 5 -48 33 -7 17 -15 35 -17 39 -11 18 95 23 132 6z m1015 -70 c0 -46 3 -93 6 -105 4 -14 2 -23 -5 -23 -6 0 -11 7 -11 15 0 8 -7 15 -15 15 -8 0 -15 -4 -15 -9 0 -9 -60 18 -84 39 -17 13 -12 40 17 97 17 33 28 43 52 46 16 2 36 5 43 5 9 2 12 -20 12 -80z m-4010 62 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m4150 -27 c43 -73 43 -89 0 -133 -42 -42 -78 -51 -100 -25 -21 25 41 194 72 195 3 0 16 -17 28 -37z m-930 6 c19 -16 24 -30 24 -61 -2 -48 -25 -81 -89 -127 l-47 -35 -18 25 c-23 29 -29 61 -23 108 4 28 16 45 52 74 52 42 66 45 101 16z m-1518 4 c-6 -2 -10 -9 -7 -13 3 -5 1 -11 -5 -15 -5 -3 -10 3 -10 14 0 14 6 21 18 20 10 0 12 -3 4 -6z m976 -15 c21 -21 13 -43 -20 -60 -56 -29 -88 -27 -88 5 1 51 74 89 108 55z m-9482 -35 c8 -42 34 -69 46 -50 4 7 8 -9 8 -35 0 -27 -3 -48 -6 -48 -14 0 -64 35 -69 48 -3 7 -8 38 -11 68 -6 45 -4 54 9 54 11 0 18 -13 23 -37z m7890 10 c10 -37 -7 -59 -42 -55 -16 2 -33 7 -37 12 -14 13 3 50 26 60 36 14 46 11 53 -17z m1759 -17 c20 -39 16 -59 -18 -80 -43 -28 -79 64 -41 105 23 25 35 20 59 -25z m-347 22 c36 -47 25 -110 -31 -169 -38 -40 -52 -57 -100 -123 -9 -12 -30 -20 -64 -23 -47 -5 -52 -3 -59 18 -12 39 -8 111 10 153 17 41 22 42 110 20 l29 -7 -6 52 -6 51 37 19 c45 23 66 25 80 9z m1207 -12 c15 -21 2 -62 -15 -51 -6 3 -7 0 -4 -8 3 -10 -7 -20 -33 -30 -36 -15 -39 -15 -55 5 -26 30 -23 63 7 76 14 6 25 16 25 22 0 18 61 7 75 -14z m1353 -17 c3 -11 2 -11 -7 1 -12 16 -14 14 -41 -30 -4 -8 -11 -12 -14 -9 -9 9 34 61 47 56 6 -2 12 -10 15 -18z m-2874 -72 c-4 -18 -14 -46 -23 -62 -15 -28 -19 -30 -59 -24 -55 7 -98 60 -85 107 5 21 65 49 118 54 38 4 60 -28 49 -75z m1300 67 c27 -11 16 -114 -13 -114 -14 0 -51 62 -51 86 0 26 33 40 64 28z m1556 -29 c-7 -9 -15 -13 -17 -11 -7 7 7 26 19 26 6 0 6 -6 -2 -15z m200 -10 c0 -14 -4 -25 -10 -25 -5 0 -9 11 -8 25 1 14 6 25 10 25 4 0 8 -11 8 -25z m-11400 -10 c0 -14 -4 -25 -9 -25 -5 0 -11 11 -13 25 -4 17 -1 25 8 25 8 0 14 -11 14 -25z m6704 8 c11 -27 -11 -39 -34 -18 -11 10 -20 22 -20 27 0 15 48 8 54 -9z m1329 -31 c-1 -36 -8 -43 -93 -98 -30 -20 -60 -42 -66 -50 -14 -18 -74 -26 -75 -10 -11 146 34 198 166 193 l70 -2 -2 -33z m4001 -37 l-7 -29 -9 24 c-11 29 -2 58 13 43 6 -6 7 -22 3 -38z m374 28 c37 -37 0 -157 -75 -241 l-33 -37 0 37 c0 68 34 183 70 235 18 27 17 27 38 6z m-4702 -1 c7 -4 8 -15 3 -27 -4 -11 -8 -15 -8 -8 -1 19 -32 3 -41 -22 -7 -19 -16 -22 -52 -21 -57 2 -68 10 -68 52 l0 34 78 0 c42 0 82 -4 88 -8z m1148 -9 c8 -20 -38 -81 -71 -94 -62 -23 -77 2 -38 64 24 37 32 43 65 44 27 1 40 -3 44 -14z m1088 12 c3 -3 -3 -29 -13 -58 -10 -28 -18 -75 -19 -104 0 -42 -4 -55 -22 -67 -12 -9 -27 -16 -33 -16 -22 0 -105 93 -105 118 0 32 37 82 61 82 12 0 23 10 29 25 8 21 16 25 53 25 24 0 46 -2 49 -5z m1312 -1 c20 -8 20 -33 0 -63 -13 -18 -22 -21 -43 -16 -42 10 -44 20 -10 53 18 18 34 32 35 32 1 0 9 -3 18 -6z m-11279 -14 c3 -5 -3 -10 -15 -10 -12 0 -18 5 -15 10 3 6 10 10 15 10 5 0 12 -4 15 -10z m10064 3 c-4 -25 5 -44 32 -71 25 -24 30 -36 25 -56 -3 -14 -13 -26 -21 -26 -8 0 -28 -13 -43 -30 -34 -35 -43 -37 -66 -11 -13 15 -16 28 -10 57 10 56 53 144 70 144 8 0 13 -3 13 -7z m454 -10 c23 -7 22 -19 -10 -85 -24 -49 -32 -57 -56 -58 -38 0 -52 33 -38 88 12 44 46 76 71 66 8 -3 23 -9 33 -11z m-10570 0 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z m107 3 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m10695 -5 c-3 -5 -1 -13 5 -16 6 -4 9 -1 8 6 -2 7 5 15 15 17 16 3 17 1 4 -30 -10 -24 -21 -34 -39 -36 -32 -4 -42 24 -19 50 17 18 36 24 26 9z m-1153 -29 c30 -13 38 -23 38 -43 0 -21 -8 -31 -40 -48 -22 -12 -58 -21 -80 -21 -37 0 -40 2 -40 28 0 15 9 46 20 70 22 48 25 48 102 14z m613 8 c3 -5 -4 -6 -15 -3 -11 3 -22 9 -25 13 -3 5 4 6 15 3 11 -3 22 -9 25 -13z m1805 16 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m-11996 -21 c27 -21 14 -28 -19 -11 -16 9 -41 12 -61 9 -19 -3 -34 -1 -34 4 0 16 93 14 114 -2z m7236 -49 l0 -65 -46 4 c-55 4 -73 24 -74 81 l0 41 60 2 60 2 0 -65z m220 -8 c-1 -40 -7 -90 -14 -111 -20 -55 -63 -107 -89 -107 -20 0 -25 9 -40 64 -20 76 -21 122 -3 155 17 31 84 71 119 71 l27 0 0 -72z m4255 19 c-14 -25 -32 -50 -40 -57 -15 -12 -35 -6 -35 11 0 6 5 7 10 4 6 -3 10 2 10 12 1 22 29 74 30 53 0 -11 6 -9 22 8 31 31 32 22 3 -31z m-12565 18 c0 -14 -4 -25 -10 -25 -5 0 -10 11 -10 25 0 14 5 25 10 25 6 0 10 -11 10 -25z m10001 1 c18 -38 3 -72 -45 -106 -25 -16 -51 -36 -59 -44 -27 -27 -60 -23 -89 10 -16 18 -28 38 -28 46 0 18 66 82 105 102 17 9 47 16 68 16 30 0 40 -5 48 -24z m1919 3 c0 -6 -4 -8 -9 -5 -5 4 -7 -3 -4 -14 3 -11 1 -20 -5 -20 -5 0 -12 -31 -16 -68 -7 -67 -8 -69 -45 -90 -21 -12 -41 -22 -45 -22 -3 0 -6 34 -6 76 0 69 2 79 26 100 14 13 29 24 35 24 5 0 9 4 9 8 0 11 42 31 53 25 4 -2 7 -9 7 -14z m-11870 -9 c0 -11 -4 -20 -10 -20 -5 0 -10 9 -10 20 0 11 5 20 10 20 6 0 10 -9 10 -20z m7704 -5 c6 -23 10 -24 49 -19 35 5 45 2 62 -16 18 -20 20 -35 18 -154 -1 -72 -4 -155 -8 -183 -6 -53 -7 -53 -41 -53 -34 0 -35 -1 -32 -36 4 -47 -14 -59 -75 -50 l-47 7 0 55 c0 30 7 68 15 84 14 28 14 33 -5 70 -31 62 -27 125 14 193 l34 56 -26 3 c-57 7 -50 68 8 68 21 0 29 -6 34 -25z m3349 18 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m1727 -9 c0 -8 -5 -12 -10 -9 -6 4 -8 11 -5 16 9 14 15 11 15 -7z m48 -9 c-3 -3 -9 2 -12 12 -6 14 -5 15 5 6 7 -7 10 -15 7 -18z m-4276 5 c6 -19 -4 -120 -12 -120 -5 0 -22 12 -39 26 -41 34 -43 78 -3 92 36 14 50 14 54 2z m-8332 -25 c0 -27 -1 -28 -24 -19 -28 11 -17 40 17 43 4 1 7 -10 7 -24z m7318 -37 c4 -72 -9 -98 -48 -98 -39 0 -78 19 -85 42 -4 10 -11 18 -16 18 -5 0 -17 16 -26 35 -26 54 -9 66 91 63 l81 -3 3 -57z m1446 41 c16 -23 5 -53 -21 -63 -18 -7 -35 29 -27 59 8 31 28 32 48 4z m-136 -7 c-1 -4 2 -40 6 -79 7 -60 5 -75 -8 -88 -8 -9 -19 -22 -23 -29 -5 -8 -24 -23 -43 -33 -23 -13 -38 -31 -44 -51 -8 -27 -13 -32 -41 -32 -18 0 -38 -7 -45 -15 -11 -14 -15 -14 -33 2 -16 15 -18 26 -13 76 6 60 11 70 60 115 56 52 96 95 96 104 0 4 9 8 20 8 11 0 25 9 32 19 10 17 40 19 36 3z m3967 -11 c-6 -5 -25 10 -25 20 0 5 6 4 14 -3 8 -7 12 -15 11 -17z m-13161 -28 c26 -27 49 -59 53 -73 3 -14 15 -37 25 -52 10 -16 27 -41 38 -58 11 -16 20 -36 20 -45 0 -8 9 -24 20 -35 13 -13 20 -33 20 -58 0 -29 5 -39 23 -47 25 -11 39 -75 15 -75 -27 0 -125 105 -156 167 -20 38 -43 68 -62 79 -28 17 -30 22 -30 76 0 32 -4 58 -8 58 -4 0 -14 17 -21 38 -8 20 -19 40 -25 45 -8 5 -6 10 4 17 25 17 37 12 84 -37z m11485 29 c12 -22 -9 -52 -37 -52 -30 0 -37 31 -12 52 28 23 37 23 49 0z m-11169 -12 c0 -11 -6 -20 -14 -20 -9 0 -12 7 -9 20 3 11 9 20 14 20 5 0 9 -9 9 -20z m43 6 c6 -16 -2 -28 -14 -20 -12 7 -11 34 0 34 5 0 11 -6 14 -14z m10193 -63 c-3 -6 -20 -16 -38 -21 -19 -5 -35 -16 -38 -28 -8 -30 -32 -58 -63 -72 -44 -19 -57 -15 -57 18 0 37 32 68 79 76 82 14 114 25 102 37 -6 6 -11 25 -11 42 l1 30 15 -34 c8 -19 12 -41 10 -48z m-9911 41 c20 -20 16 -58 -7 -62 -16 -3 -58 49 -58 71 0 14 49 7 65 -9z m-765 -19 c-7 -9 -23 -21 -34 -27 -15 -8 -12 -2 9 19 31 31 48 36 25 8z m10640 0 c0 -14 -6 -25 -14 -25 -9 0 -12 8 -8 25 2 14 8 25 13 25 5 0 9 -11 9 -25z m1782 3 c-6 -6 -16 -7 -22 -3 -9 6 -9 9 1 16 17 10 34 0 21 -13z m-11895 -35 c18 -21 36 -47 39 -59 7 -27 45 -102 67 -135 34 -47 12 -106 -23 -64 -7 8 -18 15 -25 15 -46 0 -145 165 -145 242 0 34 3 38 26 38 18 0 38 -12 61 -37z m8463 -92 c0 -11 -3 -21 -8 -21 -4 0 -22 -13 -39 -29 -18 -16 -38 -31 -45 -34 -7 -3 6 -6 29 -6 23 -1 48 -8 57 -17 24 -23 20 -71 -9 -99 -27 -28 -61 -32 -92 -10 -20 14 -20 16 -5 59 27 75 2 71 -53 -7 -11 -15 -17 -17 -34 -8 -18 10 -21 21 -21 74 0 34 4 78 10 97 12 45 64 108 93 112 28 4 117 -80 117 -111z m930 99 c0 -11 -6 -20 -13 -20 -7 0 -20 -9 -30 -20 -9 -11 -26 -20 -37 -20 -13 0 -18 -5 -14 -15 4 -8 2 -15 -4 -15 -5 0 -12 9 -15 20 -4 14 0 20 11 21 14 0 13 2 -2 8 -18 7 -18 8 -2 14 10 4 26 7 36 7 10 0 22 9 25 20 3 11 15 20 26 20 12 0 19 -7 19 -20z m-2065 -16 c9 -14 18 -37 19 -50 4 -33 54 -84 83 -84 13 0 32 -9 44 -21 19 -19 21 -28 15 -98 -10 -117 -14 -130 -42 -137 -29 -7 -211 -1 -219 8 -11 11 35 93 78 138 23 25 53 60 65 78 22 30 22 32 4 32 -10 0 -36 -13 -58 -30 -48 -36 -74 -39 -75 -7 -2 36 2 61 12 72 12 12 12 52 -1 57 -5 2 -12 18 -16 36 -6 32 -6 32 34 32 32 0 43 -5 57 -26z m1740 1 c34 -33 35 -110 2 -148 -12 -15 -27 -27 -33 -27 -6 0 -20 -10 -32 -22 -67 -71 -67 -71 -116 -64 l-46 7 0 72 c0 86 7 98 91 161 69 52 99 57 134 21z m3490 15 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-13089 -26 c-4 -9 -9 -15 -11 -12 -3 3 -3 13 1 22 4 9 9 15 11 12 3 -3 3 -13 -1 -22z m11047 6 c11 0 57 -86 57 -107 0 -4 -9 -14 -20 -21 -11 -7 -20 -19 -20 -27 0 -15 -61 -32 -78 -21 -5 3 -10 32 -11 65 -2 69 20 127 45 117 9 -3 21 -6 27 -6z m-10360 -25 c3 -7 22 -15 41 -19 20 -4 47 -18 61 -31 13 -14 29 -25 35 -25 5 0 10 -6 10 -14 0 -8 15 -17 35 -20 l35 -7 0 -59 c0 -52 2 -60 19 -60 24 0 33 -23 21 -55 -7 -19 -17 -25 -40 -25 -16 0 -30 -2 -30 -5 0 -15 32 -55 93 -115 61 -60 68 -71 65 -101 l-3 -34 -28 28 c-15 15 -30 27 -33 27 -3 0 -30 19 -60 42 -37 28 -68 63 -94 108 -21 37 -46 72 -54 79 -11 10 -13 18 -6 31 16 31 11 58 -15 83 -17 15 -24 29 -19 40 3 9 9 15 14 12 4 -2 5 7 2 21 -5 30 -46 74 -67 74 -9 0 -15 10 -15 25 0 17 4 23 14 19 8 -3 17 -11 19 -19z m7014 0 c-4 -8 -11 -15 -17 -15 -14 0 -13 27 3 33 16 6 21 1 14 -18z m3811 19 c18 -5 22 -13 22 -43 0 -33 -5 -40 -38 -58 -38 -22 -76 -16 -67 10 2 6 9 31 15 55 11 43 20 48 68 36z m-3004 -26 c13 -62 14 -161 2 -230 -7 -43 -14 -79 -17 -81 -2 -2 -34 -2 -71 1 l-67 4 -7 65 c-10 99 8 170 53 207 71 60 100 69 107 34z m3241 12 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-795 -10 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m-10984 -27 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m76 -21 c-3 -32 0 -42 11 -42 8 0 20 -7 27 -15 7 -8 10 -15 7 -15 -3 0 -12 -3 -20 -6 -21 -8 -47 23 -47 56 0 16 -4 32 -10 35 -19 11 -10 32 13 31 20 -1 22 -5 19 -44z m11662 39 c3 -5 -1 -11 -9 -14 -9 -4 -12 -1 -8 9 6 16 10 17 17 5z m-10743 -36 c24 -19 49 -35 56 -35 14 0 53 -48 53 -66 0 -17 -43 -31 -48 -15 -2 6 -10 11 -17 11 -8 0 -16 9 -20 20 -4 11 -20 23 -38 28 -20 5 -33 16 -36 28 -2 10 -8 22 -15 26 -8 6 -7 8 2 8 6 0 11 3 11 8 -5 30 0 28 52 -13z m9169 -31 c0 -24 -5 -34 -20 -39 -11 -3 -20 -10 -20 -15 0 -5 -16 -12 -36 -16 -28 -5 -40 -2 -59 16 -23 22 -24 24 -9 49 9 15 37 36 62 48 43 20 48 21 64 6 10 -9 18 -30 18 -49z m1220 29 c25 -22 26 -70 1 -103 l-19 -24 -40 34 c-47 41 -49 48 -21 84 24 30 50 33 79 9z m385 7 c-3 -5 -16 -10 -28 -10 -18 0 -19 2 -7 10 20 13 43 13 35 0z m755 -35 c7 -19 5 -35 -8 -63 -15 -33 -21 -37 -60 -40 -28 -2 -42 -8 -42 -18 0 -19 -26 -18 -34 2 -10 26 -7 54 6 54 7 0 22 10 33 23 25 29 75 67 87 67 4 0 13 -11 18 -25z m-2580 0 c0 -8 -7 -15 -15 -15 -13 0 -14 3 -3 15 16 18 18 18 18 0z m2090 -70 c0 -61 -4 -103 -13 -112 -4 -3 -7 3 -7 14 0 12 -8 23 -20 26 -23 6 -27 -8 -5 -17 16 -6 21 -26 6 -26 -26 0 -42 33 -35 75 3 26 2 51 -5 62 -9 14 -10 10 -5 -21 5 -28 4 -37 -5 -32 -6 4 -11 14 -11 22 0 19 -17 18 -29 -3 -5 -10 -12 -15 -16 -11 -10 10 56 68 77 68 12 0 22 9 25 21 6 20 6 20 24 2 12 -12 18 -34 19 -68z m-11570 -27 c31 -32 62 -58 70 -58 24 -1 105 -149 106 -193 0 -22 10 -50 22 -67 27 -36 28 -52 2 -67 -21 -14 -45 -8 -74 19 -11 10 -25 18 -32 18 -10 0 -38 51 -119 220 -49 102 -67 130 -81 130 -15 0 -18 29 -8 68 6 22 7 22 33 6 14 -10 51 -44 81 -76z m8278 49 c3 -15 -2 -18 -25 -15 -17 2 -29 10 -31 21 -3 15 2 18 25 15 17 -2 29 -10 31 -21z m4132 -7 c0 -5 -7 -10 -16 -10 -8 0 -12 5 -9 10 3 6 10 10 16 10 5 0 9 -4 9 -10z m-4202 -30 c12 -11 29 -20 39 -20 10 0 26 -12 36 -26 18 -24 18 -27 2 -59 -21 -45 -47 -58 -100 -51 -51 8 -66 33 -56 92 7 36 36 84 51 84 4 0 16 -9 28 -20z m673 10 c5 0 9 -17 9 -37 0 -55 -36 -83 -107 -83 -29 0 -53 3 -53 6 0 18 34 74 46 74 7 0 26 11 41 25 15 13 34 22 41 20 8 -3 18 -5 23 -5z m468 1 c21 -14 5 -43 -21 -39 -29 4 -39 48 -11 48 10 0 24 -4 32 -9z m862 -11 c5 0 9 -9 9 -20 0 -11 -4 -20 -10 -20 -5 0 -10 -7 -10 -15 0 -11 -12 -15 -50 -15 -42 0 -50 3 -50 18 0 33 53 66 88 56 8 -2 18 -4 23 -4z m254 0 c-3 -5 -14 -10 -23 -9 -14 0 -13 2 3 9 27 11 27 11 20 0z m338 -11 c27 -10 37 -20 37 -35 0 -30 -31 -55 -59 -47 -32 8 -66 -14 -87 -58 -16 -33 -23 -37 -44 -32 -39 9 -59 22 -76 49 -16 23 -16 27 1 63 13 30 26 41 56 51 22 8 43 18 46 23 7 11 76 3 126 -14z m299 -4 c8 -17 8 -40 2 -72 -8 -42 -13 -48 -42 -57 -27 -7 -35 -6 -47 10 -26 34 -18 72 21 110 44 41 51 42 66 9z m-723 -24 c24 -24 17 -65 -17 -91 -26 -21 -57 -26 -66 -12 -3 5 -2 34 1 65 6 55 7 57 34 57 16 0 37 -8 48 -19z m2738 -13 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-3310 -23 c17 -18 11 -45 -10 -45 -8 0 -20 -7 -27 -15 -24 -29 -32 6 -15 63 6 17 33 15 52 -3z m2509 -50 c-9 -13 -16 -36 -16 -50 0 -14 -3 -25 -8 -25 -4 0 -16 -16 -26 -35 l-19 -34 -18 23 c-11 13 -19 32 -19 41 0 24 35 97 60 123 l22 23 20 -21 c18 -19 19 -23 4 -45z m-276 45 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m1096 -25 c-8 -23 -26 -18 -25 8 0 21 1 21 9 2 8 -18 9 -18 10 5 1 14 4 19 7 12 3 -7 2 -19 -1 -27z m-3699 -17 c10 -8 13 -26 9 -60 -5 -59 -25 -88 -76 -117 -39 -22 -135 -130 -124 -140 15 -15 86 27 119 69 32 41 55 49 75 25 27 -33 -47 -142 -117 -171 -39 -17 -123 -19 -123 -3 0 6 9 24 20 39 17 24 18 31 7 42 -45 45 -49 121 -11 194 14 27 32 53 40 57 8 4 14 14 14 21 0 19 41 54 70 59 34 7 80 0 97 -15z m1881 -10 c2 -15 -7 -49 -19 -75 -12 -26 -25 -61 -28 -78 -6 -26 -11 -30 -36 -27 -38 4 -45 16 -45 75 0 55 20 96 59 120 38 24 65 18 69 -15z m-11606 -5 c14 -16 29 -39 33 -53 3 -14 16 -48 27 -77 18 -43 19 -55 8 -68 -20 -24 -29 -18 -36 27 -5 29 -19 55 -46 84 -29 32 -38 49 -38 78 0 44 16 47 52 9z m10493 2 c0 -28 -29 -25 -33 3 -3 19 0 23 15 20 10 -2 18 -12 18 -23z m2506 4 c22 -22 18 -59 -7 -59 -17 0 -33 37 -26 62 6 23 8 22 33 -3z m-1825 -22 c1 -12 -2 -26 -6 -32 -5 -5 -10 -21 -13 -35 -4 -22 -4 -21 -6 7 -1 23 -6 32 -21 35 -19 3 -19 4 6 31 28 30 37 29 40 -6z m-3658 -61 c-14 -17 -18 -1 -11 40 l7 39 6 -35 c3 -19 3 -39 -2 -44z m34 45 c2 -17 1 -28 -4 -25 -8 5 -12 54 -4 54 2 0 6 -13 8 -29z m1870 12 c28 -26 22 -49 -27 -89 -41 -33 -55 -61 -38 -77 3 -4 11 -3 17 2 6 5 21 5 32 1 18 -7 22 -19 26 -72 7 -88 -10 -124 -70 -150 -127 -56 -204 -19 -156 75 9 17 30 44 45 60 16 16 29 33 29 38 0 5 -21 9 -46 9 l-46 0 16 25 c10 15 16 46 16 82 l1 58 42 20 c23 11 58 21 77 23 19 2 40 5 45 7 17 6 18 6 37 -12z m523 -37 c5 -27 1 -44 -19 -79 -31 -52 -68 -68 -97 -41 -38 34 -3 109 66 140 42 19 43 18 50 -20z m291 20 c19 -14 19 -15 -2 -43 -18 -24 -28 -27 -60 -25 -21 2 -41 5 -43 7 -2 3 8 20 23 40 29 38 51 43 82 21z m1964 -1 c0 -8 -2 -15 -4 -15 -2 0 -6 7 -10 15 -3 8 -1 15 4 15 6 0 10 -7 10 -15z m-11201 -15 c10 -5 21 -23 24 -39 5 -25 13 -32 48 -41 23 -7 70 -29 104 -51 34 -21 67 -39 73 -39 5 0 32 -15 60 -33 27 -19 57 -37 66 -40 9 -4 24 -22 33 -42 9 -19 19 -35 22 -35 4 0 24 -16 46 -35 35 -30 47 -35 92 -35 63 0 83 -7 83 -29 0 -13 14 -21 53 -30 62 -14 120 -57 97 -71 -8 -5 -35 -12 -59 -16 -35 -5 -46 -3 -53 10 -5 9 -16 16 -24 16 -9 0 -14 7 -12 18 2 11 -4 18 -19 20 -30 4 -29 -9 2 -38 14 -13 25 -29 25 -35 0 -12 -199 -67 -212 -58 -5 2 -8 12 -8 22 0 24 -25 44 -82 65 -45 17 -48 20 -85 107 -31 72 -41 88 -55 84 -10 -3 -26 -7 -35 -11 -30 -9 -122 79 -173 165 -25 42 -53 87 -63 101 -21 30 -21 44 -1 64 18 19 28 20 53 6z m8124 -9 c13 -13 -13 -70 -36 -77 -9 -3 -21 -14 -27 -24 -6 -11 -26 -20 -56 -25 -34 -5 -44 -10 -40 -21 3 -8 2 -13 -3 -10 -5 3 -11 19 -14 35 -3 16 -13 36 -22 45 -10 9 -12 16 -5 16 6 0 9 8 6 18 -6 19 13 43 44 56 21 8 142 -2 153 -13z m1311 3 c18 -18 20 -30 6 -39 -5 -3 -10 -16 -10 -29 0 -13 -9 -28 -22 -35 -13 -6 -36 -20 -53 -30 -16 -11 -38 -20 -49 -20 -16 -1 -18 5 -14 50 4 40 12 57 34 79 46 43 82 51 108 24z m-10194 -4 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m627 -27 c-11 -10 -26 8 -20 23 5 15 7 14 15 -1 6 -9 7 -19 5 -22z m10246 -44 c-4 -4 -6 13 -3 39 l5 47 3 -39 c2 -21 0 -42 -5 -47z m147 66 c7 -9 10 -18 7 -21 -10 -11 -37 5 -37 21 0 19 14 19 30 0z m-406 -18 c16 -12 17 -16 5 -35 -24 -38 -66 -21 -55 22 7 29 23 33 50 13z m-2144 -27 c9 -17 7 -22 -15 -30 -14 -5 -25 -16 -25 -25 0 -9 -9 -15 -25 -15 -19 0 -25 5 -25 23 0 56 67 91 90 47z m2012 -45 c-13 -29 -43 -33 -67 -9 -40 40 18 92 59 53 17 -15 18 -22 8 -44z m456 43 c-2 -11 -11 -22 -21 -24 -9 -1 -15 2 -11 7 3 5 10 7 15 4 5 -4 9 3 9 14 0 12 3 21 6 21 3 0 4 -10 2 -22z m1648 -46 c-24 -24 -40 -3 -25 34 10 27 12 27 19 9 8 -18 9 -18 11 5 2 23 2 23 6 -4 3 -18 -1 -35 -11 -44z m-12206 28 c14 -11 30 -20 35 -20 6 0 26 -31 45 -68 19 -37 37 -69 41 -72 3 -3 16 -30 28 -60 13 -30 39 -72 57 -93 19 -20 34 -42 34 -47 0 -6 5 -10 10 -10 20 0 8 80 -23 147 -8 18 -13 20 -24 12 -8 -7 -13 -8 -13 -1 0 5 7 15 15 22 12 10 27 1 87 -54 48 -44 83 -68 106 -72 18 -4 36 -13 39 -20 3 -8 13 -14 23 -14 12 0 20 -10 24 -31 10 -50 42 -82 97 -96 62 -16 144 -55 144 -68 -1 -14 -235 -75 -260 -68 -24 7 -75 60 -75 78 0 7 -6 15 -14 18 -7 3 -18 25 -24 49 -18 71 -69 100 -91 51 -13 -29 -29 -29 -62 0 -103 89 -123 111 -155 173 -20 38 -44 78 -55 90 -10 11 -19 26 -19 33 0 8 -8 21 -18 30 -11 9 -21 32 -25 52 -9 58 25 77 73 39z m7706 -45 c-4 -24 -13 -46 -21 -49 -9 -3 -15 -18 -15 -36 0 -23 5 -30 19 -30 23 0 31 -26 31 -104 0 -54 -3 -61 -36 -92 -25 -24 -45 -34 -68 -34 -31 0 -32 2 -48 62 -17 61 -17 63 2 83 11 12 20 31 20 44 0 24 -41 71 -63 71 -15 0 -27 -65 -27 -155 0 -93 -3 -96 -82 -94 -63 2 -70 4 -79 25 -5 14 -5 34 0 47 5 13 5 30 0 39 -5 9 -8 73 -6 142 l2 126 30 0 c17 0 62 -8 100 -18 77 -19 113 -18 122 4 8 21 60 18 66 -3 4 -14 5 -13 6 4 1 14 8 23 24 25 28 4 31 -3 23 -57z m222 -17 l3 -77 -46 14 c-51 15 -74 38 -75 73 0 36 52 73 95 69 18 -2 20 -10 23 -79z m289 32 c15 -44 16 -120 2 -157 -21 -56 -193 -183 -216 -159 -4 4 -10 46 -12 93 -4 111 14 161 69 192 22 12 40 28 40 35 0 15 54 35 85 33 13 -1 24 -14 32 -37z m1236 8 c8 -34 2 -73 -11 -73 -6 0 -17 -6 -23 -12 -10 -10 -16 -9 -31 4 -24 22 -23 52 4 80 27 29 54 30 61 1z m-2188 2 c18 -7 19 -8 3 -15 -22 -9 -24 -27 -3 -19 20 8 20 -35 0 -62 -8 -10 -15 -36 -15 -56 0 -35 -14 -55 -75 -106 -8 -7 -15 -20 -15 -30 1 -13 8 -9 29 16 15 17 35 32 44 32 9 0 17 5 17 11 0 5 -6 7 -12 3 -10 -5 -10 -4 -2 5 26 28 56 -14 49 -69 -2 -14 -4 -35 -4 -46 -2 -38 -81 -58 -152 -40 -34 9 -51 10 -59 2 -7 -7 -16 -7 -30 2 -11 6 -27 12 -35 12 -13 0 -15 23 -15 153 0 140 2 155 20 175 12 12 33 22 48 23 66 2 103 6 109 12 9 9 74 7 98 -3z m1244 -3 c34 -42 19 -146 -29 -194 -63 -64 -130 -113 -153 -113 -38 0 -59 39 -46 84 13 47 65 106 93 106 33 0 66 28 66 55 0 14 9 29 20 35 11 6 20 17 20 25 0 19 14 19 29 2z m1113 -23 c5 -41 -4 -51 -26 -28 -23 22 -21 64 3 64 14 0 20 -9 23 -36z m-1328 11 c3 -8 1 -15 -4 -15 -6 0 -10 7 -10 15 0 8 2 15 4 15 2 0 6 -7 10 -15z m2216 -6 c0 -6 -4 -7 -10 -4 -5 3 -10 11 -10 16 0 6 5 7 10 4 6 -3 10 -11 10 -16z m40 11 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m170 -11 c0 -11 -7 -51 -15 -88 -15 -65 -17 -68 -60 -88 -32 -15 -45 -17 -45 -8 0 7 -8 23 -18 35 -14 18 -17 32 -12 60 8 41 30 68 77 90 47 23 73 23 73 -1z m400 -22 c0 -21 -11 -43 -30 -64 -35 -38 -41 -40 -64 -14 -15 17 -16 23 -5 43 7 13 13 27 14 31 0 12 68 46 77 40 5 -2 8 -19 8 -36z m925 12 c-5 -15 -4 -19 4 -15 27 17 7 -24 -34 -68 -25 -27 -45 -53 -45 -57 0 -4 -9 -24 -21 -43 -18 -32 -22 -34 -36 -21 -8 8 -19 15 -24 15 -15 0 -10 18 9 37 10 10 23 30 30 46 6 15 16 27 21 27 5 0 12 15 15 34 5 25 15 38 39 50 43 21 50 20 42 -5z m-1712 -53 c-1 -50 -19 -106 -37 -118 -20 -14 -52 -8 -74 12 -33 31 -28 69 16 118 30 33 43 41 67 39 29 -2 30 -3 28 -51z m-1015 19 c17 -37 15 -72 -7 -92 -10 -10 -20 -24 -23 -32 -9 -29 -118 -22 -118 7 0 22 75 102 96 102 9 0 18 9 21 20 7 27 17 25 31 -5z m-9663 -7 c25 -7 45 -17 45 -23 0 -5 14 -26 30 -45 17 -19 39 -45 49 -57 10 -12 22 -34 25 -49 4 -14 14 -33 21 -41 21 -20 20 -83 0 -83 -43 0 -85 39 -140 129 -5 9 -20 33 -32 53 -13 21 -23 47 -23 58 0 14 -6 20 -17 18 -12 -2 -18 5 -19 25 -3 31 -1 31 61 15z m10378 -16 c18 -20 13 -32 -11 -32 -9 0 -23 -7 -33 -16 -38 -34 -67 10 -32 48 21 23 55 23 76 0z m773 -9 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m-2486 7 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m1548 -8 c12 -12 19 -36 21 -68 2 -52 -4 -59 -62 -78 -23 -7 -77 20 -77 38 0 8 -6 16 -12 19 -7 2 -10 8 -6 12 4 4 14 2 23 -5 13 -11 14 -8 9 19 -5 24 -3 31 9 31 11 0 14 -5 10 -17 -4 -11 -3 -14 5 -9 7 4 12 12 12 18 0 9 40 57 48 58 1 0 10 -8 20 -18z m-328 -2 c13 -8 12 -16 -10 -57 -22 -40 -30 -48 -60 -51 -19 -2 -44 -9 -56 -17 -42 -27 -52 9 -16 66 22 35 48 54 87 62 33 8 39 7 55 -3z m-10000 -30 c0 -11 -7 -20 -15 -20 -8 0 -15 2 -15 4 0 2 -3 11 -6 20 -4 12 0 16 15 16 14 0 21 -6 21 -20z m8300 -20 c0 -20 -5 -30 -15 -30 -10 0 -15 10 -15 30 0 20 5 30 15 30 10 0 15 -10 15 -30z m3661 -22 l2 -43 7 40 c6 39 6 39 14 13 17 -60 -14 -113 -73 -124 -37 -7 -48 -16 -67 -49 -6 -11 -22 -20 -35 -20 -19 0 -25 6 -27 27 -4 31 40 113 69 131 11 7 19 16 19 22 0 9 61 41 83 44 4 1 8 -18 8 -41z m-11929 -10 c-6 -6 -15 -8 -19 -4 -4 4 -1 11 7 16 19 12 27 3 12 -12z m388 7 c19 -23 8 -26 -20 -5 -19 15 -21 20 -9 20 9 0 22 -7 29 -15z m10555 -42 c-10 -88 -23 -113 -69 -134 -22 -10 -43 -16 -47 -13 -7 4 -29 85 -29 108 0 8 11 28 25 45 22 26 62 43 118 50 5 1 6 -25 2 -56z m351 32 c9 -22 -25 -113 -48 -130 -25 -17 -50 -7 -73 29 -14 21 -14 26 2 53 10 18 33 36 57 46 52 20 55 20 62 2z m-2946 -78 c0 -44 -15 -67 -53 -80 -43 -16 -88 31 -63 65 12 17 84 57 104 58 8 0 12 -15 12 -43z m2172 4 c-2 -17 -13 -42 -25 -54 -12 -13 -30 -38 -39 -55 -21 -39 -46 -41 -78 -7 -21 22 -22 27 -10 50 7 14 17 25 22 25 4 0 8 8 8 18 0 11 18 24 53 38 28 12 57 20 62 19 6 -1 9 -16 7 -34z m1788 27 c0 -6 3 -8 7 -5 8 9 33 -25 26 -36 -3 -5 -10 -3 -15 4 -7 11 -8 9 -6 -6 2 -21 -21 -65 -35 -65 -18 0 -67 -66 -63 -85 3 -11 -1 -28 -8 -38 -13 -16 -14 -15 -19 10 -6 30 39 123 60 123 7 0 10 6 7 13 -3 8 0 27 6 42 9 23 13 26 20 15 5 -8 12 -11 16 -7 4 4 2 13 -4 19 -15 15 -16 28 -2 28 6 0 10 -5 10 -12z m-12388 -33 c8 -19 8 -28 -2 -40 -21 -25 -30 -17 -30 25 0 45 15 52 32 15z m10006 3 c-2 -14 -11 -24 -23 -26 -11 -1 -37 -27 -58 -57 -39 -57 -56 -65 -77 -40 -9 11 -6 23 20 59 17 25 34 45 38 45 27 -4 52 3 52 15 0 15 14 24 38 25 8 1 12 -8 10 -21z m225 -8 c34 -27 29 -55 -9 -55 -24 0 -29 5 -35 32 -10 49 3 55 44 23z m-9809 -15 c3 -8 1 -15 -4 -15 -6 0 -10 7 -10 15 0 8 2 15 4 15 2 0 6 -7 10 -15z m9361 -14 c7 -12 -12 -24 -25 -16 -11 7 -4 25 10 25 5 0 11 -4 15 -9z m301 -16 c-8 -31 11 -33 24 -2 12 31 12 0 -1 -45 -5 -21 -14 -38 -20 -38 -6 0 -28 -20 -50 -44 -23 -25 -66 -57 -96 -73 -31 -15 -58 -36 -61 -46 -6 -25 -25 -16 -37 17 -8 23 -6 30 8 38 10 5 22 21 28 34 12 34 90 68 135 61 37 -6 41 0 19 29 -18 24 -19 44 -1 44 8 0 17 7 20 16 3 8 10 12 16 9 5 -3 10 1 10 9 0 9 3 16 6 16 3 0 3 -11 0 -25z m-478 -5 c10 -17 9 -25 -10 -55 -13 -19 -36 -40 -51 -46 -16 -7 -53 -36 -83 -65 -48 -47 -60 -54 -95 -54 l-40 0 7 38 c7 38 28 73 82 130 62 66 163 94 190 52z m1872 10 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m1137 -57 c-2 -10 -9 -29 -16 -43 l-11 -25 5 27 c4 22 2 26 -10 22 -9 -4 -15 0 -15 9 0 20 17 31 23 15 2 -7 8 -10 12 -6 4 4 3 14 -3 21 -7 8 -9 17 -5 21 10 10 24 -19 20 -41z m-3353 -69 c-16 -47 -16 -53 -1 -84 10 -18 17 -42 17 -52 0 -28 -28 -78 -64 -116 -17 -18 -44 -46 -61 -63 -42 -43 -75 -59 -104 -48 -21 8 -23 14 -18 48 3 23 16 51 31 68 14 15 33 42 41 60 9 18 22 33 30 33 20 0 29 20 15 33 -9 9 -14 8 -24 -5 -16 -21 -55 -23 -81 -4 -18 13 -18 15 -2 52 10 22 17 43 17 47 -2 22 97 97 154 115 l61 20 3 -26 c2 -15 -4 -49 -14 -78z m509 77 c29 -50 22 -94 -23 -146 -22 -25 -40 -53 -40 -61 0 -8 -6 -14 -13 -14 -20 0 -41 99 -33 151 15 95 72 132 109 70z m987 20 c0 -4 -3 -11 -7 -15 -4 -4 -8 -13 -8 -19 -1 -48 -31 -123 -62 -153 -18 -19 -38 -34 -43 -34 -18 0 -23 54 -11 113 18 87 29 105 65 109 17 2 39 4 49 5 9 1 17 -2 17 -6z m-10561 -50 c25 -21 70 -74 101 -119 44 -64 57 -90 58 -122 1 -23 9 -48 17 -56 16 -17 20 -40 7 -48 -5 -3 -16 3 -25 12 -29 31 -46 42 -65 42 -11 0 -28 12 -38 26 -10 15 -35 47 -55 73 -20 26 -42 57 -49 70 -18 35 -50 152 -44 163 9 15 46 -2 93 -41z m318 30 c-3 -13 -1 -18 8 -14 8 2 23 -1 35 -7 22 -12 97 -123 119 -177 16 -40 36 -42 73 -6 20 19 28 22 28 11 0 -8 11 -20 25 -26 14 -6 25 -16 25 -21 0 -6 12 -17 28 -25 l27 -15 -39 -16 c-39 -16 -40 -16 -57 6 -17 23 -18 23 -38 5 -12 -11 -21 -25 -21 -32 0 -28 -21 -23 -57 11 -21 20 -53 51 -71 68 -23 22 -40 55 -57 110 -14 43 -30 88 -36 99 -6 11 -8 26 -5 34 8 21 19 17 13 -5z m10596 -5 c4 -11 1 -13 -10 -9 -11 4 -14 2 -9 -5 4 -7 2 -27 -5 -46 -12 -32 -13 -32 -30 -15 -21 21 -16 46 15 71 26 22 32 22 39 4z m-2109 -22 c26 -25 19 -40 -45 -96 -108 -93 -141 -127 -134 -138 12 -19 57 -1 103 41 32 30 46 38 56 30 7 -6 16 -8 20 -4 9 10 -3 -55 -20 -104 -10 -27 -31 -55 -62 -80 -25 -21 -63 -53 -84 -71 -31 -28 -43 -33 -67 -27 -38 8 -43 24 -30 87 6 28 9 67 5 87 -4 25 -1 44 9 57 8 11 14 42 15 74 0 57 9 77 59 132 23 25 33 28 93 28 47 0 71 -5 82 -16z m3566 -30 c0 -8 -4 -12 -10 -9 -5 3 -10 10 -10 16 0 5 5 9 10 9 6 0 10 -7 10 -16z m-4186 0 c28 -11 18 -52 -24 -98 -46 -50 -50 -66 -16 -66 30 0 56 -34 56 -73 0 -28 -28 -73 -79 -129 -24 -28 -25 -28 -43 -8 -24 25 -23 66 3 139 19 56 19 61 4 85 -24 36 -23 90 1 117 29 33 66 45 98 33z m290 -10 c18 -18 21 -34 5 -34 -5 0 -39 -29 -75 -65 -36 -36 -69 -65 -75 -65 -5 0 -9 -7 -9 -16 0 -9 -7 -14 -17 -12 -15 3 -19 16 -21 78 -3 74 -3 75 30 102 27 23 43 28 90 28 38 0 62 -5 72 -16z m1540 -15 c-3 -5 -10 -7 -15 -3 -5 3 -7 10 -3 15 3 5 10 7 15 3 5 -3 7 -10 3 -15z m1383 15 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-2027 -14 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m724 -21 c-3 -5 2 -6 11 -3 13 5 14 2 5 -22 -13 -34 -49 -94 -57 -94 -3 0 -18 11 -34 24 l-28 24 19 25 c11 14 20 30 20 36 0 6 7 11 15 11 9 0 18 7 21 15 5 12 10 13 20 4 8 -6 11 -15 8 -20z m-2293 5 c18 -11 8 -43 -23 -82 -18 -23 -38 -41 -43 -41 -12 -1 -36 -37 -29 -43 7 -8 54 4 54 13 0 14 30 10 46 -6 14 -13 13 -18 -5 -43 -17 -24 -18 -34 -10 -72 13 -56 4 -93 -28 -122 -14 -13 -34 -33 -46 -45 -46 -50 -70 -18 -78 101 -5 87 -4 92 18 109 31 24 29 42 -7 84 -32 36 -36 56 -19 100 18 49 47 65 108 58 29 -3 58 -8 62 -11z m3597 -34 c-11 -22 -29 -47 -40 -54 -11 -8 -18 -22 -16 -32 2 -11 -2 -18 -8 -17 -6 1 -10 -8 -10 -19 1 -15 -9 -25 -31 -35 -32 -13 -33 -13 -33 13 0 28 64 164 84 176 6 4 16 8 21 8 6 0 4 -4 -3 -9 -10 -6 -8 -10 8 -14 16 -4 24 -1 27 14 3 10 9 17 13 14 4 -3 -1 -23 -12 -45z m992 40 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-4904 -10 c31 0 32 -32 2 -45 -23 -11 -37 -35 -19 -35 5 0 24 13 42 29 36 33 53 31 75 -11 13 -25 13 -40 3 -108 -7 -44 -16 -80 -21 -80 -4 0 -8 -8 -8 -17 0 -10 -7 -27 -15 -37 -20 -27 -19 -36 5 -36 39 0 54 -74 22 -103 -26 -24 -249 -20 -262 4 -5 9 -9 47 -9 85 1 38 0 113 -1 167 -1 77 2 104 15 124 10 14 12 22 6 19 -6 -4 -11 0 -11 9 0 25 58 46 109 40 24 -3 54 -5 67 -5z m515 -12 c18 -20 20 -31 15 -88 -6 -60 -31 -130 -48 -130 -3 0 -13 -6 -20 -12 -47 -44 -57 -49 -82 -42 -25 6 -26 9 -25 68 0 96 11 132 52 181 43 51 74 58 108 23z m1386 -90 c-5 -99 -6 -102 -37 -127 -18 -14 -44 -36 -58 -48 -24 -21 -98 -43 -141 -43 -32 0 -31 52 1 129 25 59 33 70 58 75 17 3 30 12 30 21 0 15 115 94 139 95 11 0 13 -19 8 -102z m1660 65 c-7 -44 -18 -56 -41 -47 -30 12 2 82 38 84 5 0 6 -16 3 -37z m800 -4 c-2 -29 -37 -25 -37 4 0 13 3 27 7 30 10 11 32 -13 30 -34z m-1112 -1 c18 -8 25 -19 25 -41 0 -32 -26 -59 -78 -83 -28 -12 -32 -18 -22 -29 7 -8 9 -15 4 -15 -20 0 -33 17 -39 50 -6 32 -2 40 37 82 24 25 44 47 45 47 1 1 14 -4 28 -11z m1335 -8 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-438 -58 c-2 -26 -9 -51 -16 -57 -7 -5 -18 -20 -25 -32 -6 -13 -22 -25 -34 -28 -34 -9 -77 11 -77 35 0 11 4 20 8 20 9 0 40 50 40 65 0 6 15 14 34 19 18 6 36 15 41 22 16 28 32 4 29 -44z m-1825 -3 c4 -18 -1 -24 -69 -86 -66 -61 -98 -69 -98 -24 0 29 38 71 64 71 6 0 17 9 24 20 22 36 74 48 79 19z m-1309 -61 c3 -72 4 -69 -63 -124 -16 -13 -35 -24 -41 -24 -6 0 -16 -10 -23 -22 -11 -21 -74 -58 -98 -58 -6 0 -13 10 -17 23 -15 57 0 112 42 154 12 12 22 29 22 38 0 9 9 15 21 15 12 0 33 13 47 28 32 34 48 42 82 39 24 -2 25 -6 28 -69z m1856 35 c9 -23 -29 -62 -45 -46 -8 8 -6 18 6 37 20 30 30 33 39 9z m-801 1 c18 -7 12 -71 -9 -92 -24 -23 -68 -25 -87 -4 -18 19 -17 21 11 38 17 9 35 28 41 41 11 24 19 27 44 17z m-9255 -32 c52 -53 70 -80 77 -111 6 -28 3 -32 -27 -44 -40 -17 -55 -8 -64 39 -3 19 -13 38 -22 43 -10 5 -16 26 -18 55 -3 55 13 61 54 18z m9595 -22 c6 -22 0 -30 -24 -30 -24 0 -28 10 -18 37 10 26 34 22 42 -7z m1854 19 c6 -6 9 -18 6 -25 -3 -8 0 -14 5 -14 6 0 -1 -21 -15 -47 -22 -38 -28 -43 -33 -28 -6 19 -7 18 -18 0 -17 -32 -24 -10 -11 34 7 23 18 41 26 41 7 0 13 11 13 25 0 27 9 32 27 14z m-627 -19 c0 -5 -4 -10 -9 -10 -6 0 -13 5 -16 10 -3 6 1 10 9 10 9 0 16 -4 16 -10z m-402 -46 c4 -25 -19 -46 -37 -35 -20 13 -5 63 17 59 9 -2 18 -13 20 -24z m2512 -7 c41 -12 75 -26 74 -32 0 -5 -26 -27 -58 -48 -37 -25 -61 -49 -68 -69 -6 -16 -22 -34 -37 -40 -23 -10 -24 -12 -7 -16 11 -2 25 3 31 12 7 9 22 16 35 16 12 0 51 20 86 45 116 81 242 116 290 81 19 -14 18 -15 -6 -41 -14 -14 -46 -38 -71 -52 -26 -14 -52 -36 -60 -49 -7 -13 -20 -24 -28 -24 -9 0 -36 -11 -61 -24 -25 -13 -56 -27 -70 -31 -107 -30 -152 -64 -142 -107 5 -24 57 -24 102 1 40 21 174 43 208 34 22 -5 26 -21 16 -60 -5 -17 -14 -23 -34 -23 -16 0 -41 -10 -57 -23 -15 -13 -35 -26 -44 -29 -9 -4 -48 -27 -88 -52 -41 -26 -83 -46 -99 -46 -25 0 -62 -29 -62 -48 0 -16 -58 -64 -69 -58 -6 4 -22 -4 -36 -18 -14 -15 -32 -26 -40 -26 -8 0 -15 -9 -15 -20 0 -14 -5 -18 -17 -13 -11 4 -14 3 -9 -5 11 -17 33 -15 55 7 10 10 29 21 43 24 13 4 35 16 48 27 13 11 33 20 44 20 12 0 29 9 39 20 9 11 24 20 32 20 9 0 34 9 55 20 46 23 153 31 185 13 18 -11 16 -15 -35 -62 -30 -28 -62 -51 -70 -51 -8 0 -36 -17 -62 -38 -25 -21 -68 -47 -94 -57 -56 -20 -97 -53 -90 -72 4 -9 -4 -13 -23 -13 -16 0 -34 -7 -41 -15 -11 -13 -10 -14 4 -9 9 3 16 1 16 -5 0 -6 5 -11 11 -11 8 0 7 6 -2 16 -12 15 -10 16 17 10 24 -5 33 -3 37 8 4 9 16 16 27 16 11 0 23 6 26 14 3 8 19 18 35 21 16 4 37 18 45 31 13 19 25 24 59 24 29 0 47 6 60 20 10 11 44 32 76 47 33 16 59 31 59 35 0 5 7 8 15 8 8 0 15 4 15 9 0 5 17 16 38 26 20 9 60 28 87 41 49 24 54 25 163 15 61 -5 121 -7 132 -4 41 11 18 -15 -42 -47 -35 -18 -83 -46 -107 -62 -24 -16 -73 -38 -110 -49 -96 -29 -113 -40 -126 -78 -9 -28 -19 -36 -51 -46 -23 -7 -70 -32 -106 -57 -35 -25 -75 -49 -89 -53 -13 -4 -38 -22 -56 -41 -18 -19 -38 -34 -46 -34 -26 0 -107 -87 -107 -114 0 -4 8 -2 18 3 9 5 34 16 56 25 21 9 54 29 74 44 19 15 52 36 73 47 130 69 160 86 219 127 87 60 203 103 331 122 110 17 259 12 259 -7 0 -14 -32 -36 -52 -37 -9 0 -47 -27 -85 -60 -37 -33 -74 -60 -81 -60 -29 0 -127 -57 -160 -92 -20 -21 -44 -38 -53 -38 -9 0 -22 -6 -28 -14 -9 -11 -8 -15 6 -20 12 -5 23 0 35 13 9 12 25 21 36 21 33 0 86 23 112 48 25 24 194 112 215 112 7 0 30 14 51 31 21 17 51 33 66 36 16 3 28 9 28 14 0 4 10 11 23 15 12 3 34 15 48 25 21 15 49 19 152 21 134 3 164 -5 137 -37 -7 -8 -19 -15 -27 -15 -7 0 -16 -7 -19 -15 -4 -8 -12 -15 -20 -15 -7 0 -52 -20 -98 -45 -47 -25 -97 -45 -111 -45 -18 0 -30 -10 -47 -40 -16 -27 -30 -40 -44 -40 -12 0 -32 -11 -45 -25 -13 -13 -34 -25 -46 -25 -12 0 -29 -7 -37 -16 -9 -9 -31 -20 -49 -25 -17 -5 -50 -25 -72 -44 -22 -19 -48 -35 -57 -35 -11 0 -18 -8 -18 -20 0 -16 -7 -20 -38 -20 -26 0 -41 -6 -50 -20 -7 -11 -19 -20 -27 -20 -8 0 -15 -4 -15 -9 0 -5 -15 -14 -32 -22 -18 -7 -49 -25 -69 -41 -20 -15 -41 -28 -46 -28 -4 0 -14 -9 -21 -20 -7 -11 -19 -20 -27 -20 -8 0 -15 -2 -15 -4 0 -2 -3 -11 -6 -20 -5 -12 0 -16 20 -16 16 0 26 6 26 15 0 9 9 15 24 15 13 0 39 11 58 23 19 13 46 27 61 31 15 3 27 10 27 16 0 13 160 106 204 119 22 5 55 23 75 39 20 16 46 32 58 36 12 4 27 13 33 21 7 8 20 15 30 15 9 0 44 18 76 40 33 22 65 40 72 40 6 0 12 4 12 9 0 8 46 19 185 42 39 6 87 18 107 26 56 22 82 15 86 -25 3 -27 -1 -35 -17 -39 -13 -3 -21 -14 -21 -25 0 -17 -5 -19 -27 -15 -22 4 -52 -9 -133 -56 -58 -33 -147 -82 -199 -109 -52 -26 -101 -54 -110 -62 -25 -22 -215 -116 -234 -116 -10 0 -35 -17 -56 -37 -40 -40 -111 -86 -148 -97 -41 -13 -39 -66 3 -66 15 0 24 6 24 15 0 8 6 15 14 15 13 0 106 48 116 60 3 3 34 18 70 34 36 15 72 36 81 46 9 10 34 22 55 26 40 7 75 21 84 34 16 24 180 128 268 171 57 27 121 63 142 80 31 25 45 30 80 28 35 -3 44 0 50 16 4 11 32 31 61 45 30 13 62 32 73 41 26 24 98 40 186 40 41 0 96 0 122 2 26 1 50 -1 53 -5 14 -13 -24 -50 -77 -76 -45 -22 -67 -26 -148 -27 -126 -2 -130 -3 -130 -20 0 -9 19 -20 47 -28 26 -8 49 -19 51 -25 2 -6 -17 -20 -43 -31 -25 -11 -87 -46 -138 -77 -126 -79 -258 -124 -359 -124 -43 0 -78 -4 -78 -8 0 -17 25 -32 52 -32 52 0 27 -54 -33 -70 -26 -7 -44 -19 -51 -36 -8 -16 -20 -24 -37 -24 -36 -1 -61 -22 -61 -53 0 -31 36 -45 68 -28 12 6 37 11 56 11 31 0 36 3 36 24 0 34 16 47 126 106 113 61 174 80 268 80 l68 0 -16 25 c-21 32 -20 62 2 69 9 3 19 5 22 3 3 -1 16 8 28 19 30 28 215 119 300 148 109 37 216 51 301 38 40 -6 76 -13 79 -17 18 -17 -76 -80 -258 -172 -78 -40 -82 -40 -297 -43 -19 0 -16 -20 5 -27 19 -8 41 -33 41 -48 1 -16 -66 -85 -81 -85 -8 0 -36 -10 -64 -23 -100 -48 -125 -57 -153 -57 -15 0 -31 -3 -35 -7 -4 -5 -58 -8 -119 -8 -93 0 -112 -3 -112 -15 0 -10 7 -14 20 -11 11 2 47 5 80 6 47 2 66 -2 84 -16 22 -18 22 -22 13 -62 -6 -24 -9 -53 -5 -65 4 -17 1 -22 -15 -22 -29 0 -38 -20 -10 -21 23 -1 23 -1 -2 -9 -36 -12 -11 -12 50 0 44 8 58 7 78 -6 17 -11 27 -13 35 -5 6 6 22 11 37 11 l25 0 -29 -19 c-16 -11 -33 -27 -38 -35 -5 -9 -15 -16 -22 -16 -7 0 -21 -9 -31 -20 -10 -11 -25 -20 -34 -20 -9 0 -35 -16 -59 -34 -55 -44 -82 -50 -209 -41 -84 6 -103 4 -101 -7 2 -10 -14 -13 -70 -13 -62 0 -72 -2 -72 -17 0 -15 10 -18 66 -18 73 0 144 -17 144 -34 0 -6 -24 -24 -53 -40 -28 -16 -66 -40 -83 -53 -17 -13 -36 -23 -42 -23 -7 0 -12 -4 -12 -9 0 -5 -18 -12 -40 -16 -23 -4 -53 -18 -69 -31 -22 -18 -35 -22 -64 -17 -50 8 -251 -7 -240 -18 5 -5 37 -12 71 -15 49 -5 65 -12 76 -29 13 -19 22 -22 63 -19 26 2 52 3 57 4 4 0 6 7 2 15 -6 17 23 21 39 6 6 -5 27 -12 48 -15 34 -6 39 -5 44 14 5 18 12 21 52 18 25 -2 44 -7 43 -12 -5 -13 19 -26 52 -26 21 0 27 4 22 16 -3 8 -2 12 4 9 6 -3 10 -13 10 -21 0 -12 8 -13 35 -8 28 5 35 3 35 -9 0 -17 -12 -22 -78 -32 -23 -4 -50 -14 -58 -23 -17 -16 -134 -22 -551 -25 -88 -1 -165 -6 -170 -10 -4 -5 8 -22 27 -38 42 -36 112 -40 161 -10 25 16 37 17 61 9 17 -6 49 -7 76 -3 26 4 67 7 92 6 25 -1 73 -1 108 -1 35 0 62 -5 62 -10 0 -20 -30 -83 -36 -77 -4 3 -21 0 -38 -7 -74 -30 -143 -39 -202 -27 -77 15 -126 14 -150 -4 -29 -22 -2 -35 74 -35 34 0 62 -4 62 -9 0 -27 -24 -71 -39 -71 -9 0 -22 -5 -28 -11 -8 -8 -33 -9 -85 -3 -106 13 -298 6 -298 -10 0 -10 37 -15 146 -20 124 -6 151 -10 172 -26 32 -26 52 -25 52 0 0 18 7 20 68 20 38 0 71 3 74 6 4 3 3 18 -2 34 -7 23 -4 32 19 54 l28 26 204 -2 204 -3 3 -27 c2 -20 -1 -28 -12 -28 -27 0 -65 -23 -72 -42 -3 -12 -12 -17 -20 -14 -8 3 -14 1 -14 -5 0 -6 -6 -7 -12 -2 -30 18 -198 11 -198 -8 0 -5 9 -18 20 -29 32 -32 24 -40 -42 -41 -35 0 -85 -4 -113 -9 -52 -8 -196 5 -227 21 -24 12 -68 11 -68 -1 0 -5 -5 -10 -11 -10 -6 0 -25 -11 -41 -25 -25 -21 -40 -25 -79 -24 -38 2 -54 -2 -71 -18 -13 -12 -32 -23 -43 -25 -12 -2 -19 -10 -17 -21 2 -12 -4 -17 -19 -17 -18 0 -19 2 -9 15 17 20 -1 20 -46 -1 -39 -19 -40 -22 -16 -41 15 -13 14 -14 -15 -9 -35 6 -36 4 -27 -31 5 -18 14 -23 39 -23 29 0 33 3 28 23 -3 13 -1 17 4 11 14 -19 73 -30 176 -33 65 -2 103 1 112 9 20 16 45 -4 44 -34 0 -15 -2 -17 -7 -6 -4 8 -15 16 -24 16 -14 1 -18 -6 -18 -32 l0 -34 -92 0 c-62 -1 -99 -5 -110 -14 -24 -18 -22 -26 5 -26 31 0 62 -24 52 -40 -6 -9 -27 -11 -85 -6 -98 9 -252 -2 -247 -18 2 -6 17 -18 35 -26 36 -17 36 -31 1 -41 -36 -10 -265 -9 -334 2 -157 25 -218 30 -228 20 -8 -8 3 -11 36 -11 43 0 47 -2 47 -25 0 -17 -6 -25 -17 -26 -10 -1 -31 -2 -48 -4 -16 -1 -77 -5 -135 -9 -58 -4 -126 -8 -152 -11 -38 -3 -46 -1 -41 11 3 7 0 14 -6 14 -6 0 -11 -7 -11 -15 0 -18 -17 -20 -23 -2 -2 6 -8 8 -13 4 -16 -15 21 -28 74 -24 42 3 52 1 53 -12 1 -13 2 -13 6 2 4 14 15 17 66 16 56 -1 58 -2 24 -9 -45 -8 -66 -25 -51 -40 8 -8 49 -8 133 -1 67 6 127 8 134 5 7 -2 30 5 52 16 21 11 45 20 52 20 7 0 12 6 10 13 -1 8 13 13 41 15 33 2 42 0 42 -12 0 -24 46 -20 64 5 14 20 20 21 93 15 77 -7 143 -28 143 -46 0 -5 -13 -16 -29 -25 -24 -12 -65 -14 -208 -12 l-179 2 -35 -37 c-39 -39 -71 -49 -154 -48 -43 1 -341 -8 -355 -11 -3 0 -18 -2 -35 -2 -18 -1 -29 -7 -28 -14 2 -7 -4 -13 -12 -13 -23 0 -18 -18 10 -36 20 -13 41 -16 95 -12 88 7 120 1 120 -21 0 -15 -17 -19 -102 -29 -187 -22 -284 -14 -249 21 17 17 13 27 -9 27 -12 0 -20 -7 -20 -17 0 -16 -14 -18 -119 -21 -100 -3 -121 0 -135 14 -30 30 -16 58 34 69 25 6 54 15 66 22 11 7 51 17 87 24 61 11 66 14 52 29 -20 22 -19 32 5 52 41 36 79 48 150 48 67 0 73 2 97 31 14 16 32 28 39 25 7 -3 16 4 19 15 7 22 18 23 153 19 67 -1 92 1 92 10 0 16 -39 50 -56 50 -32 0 -62 22 -56 42 5 19 11 20 191 16 154 -4 191 -8 213 -22 18 -12 45 -16 94 -16 38 1 85 1 104 1 64 -2 17 16 -75 28 -49 7 -99 16 -110 21 -42 18 -83 24 -167 24 -67 1 -91 5 -104 17 -35 35 28 79 111 79 17 -1 55 -9 85 -20 45 -16 83 -19 213 -20 l157 0 0 -25 c0 -25 1 -25 85 -25 84 0 85 0 85 -25 0 -29 21 -33 44 -9 20 20 20 27 -3 55 -17 21 -29 24 -108 27 -60 3 -93 9 -105 19 -9 8 -21 12 -26 9 -13 -8 -177 11 -198 23 -30 16 -109 31 -162 31 -51 0 -62 9 -62 49 0 23 58 71 86 71 18 0 67 29 84 51 3 3 28 14 55 24 28 10 57 26 65 36 8 10 29 19 45 21 30 3 30 3 -32 53 -34 28 -62 55 -62 62 -1 7 -29 12 -83 14 -46 1 -99 2 -120 3 -20 1 -34 5 -31 10 3 4 -4 5 -15 2 -11 -4 -23 -2 -27 4 -4 6 9 10 34 10 22 0 43 4 46 10 4 6 15 2 27 -10 12 -11 25 -20 30 -20 13 0 9 18 -4 23 -7 3 0 6 16 6 16 1 52 14 81 31 44 25 61 45 112 127 53 86 61 106 66 162 3 35 10 67 15 70 27 18 34 58 33 194 -1 78 -5 145 -10 150 -19 19 -46 1 -56 -36 -10 -37 -5 -158 9 -224 7 -29 5 -31 -26 -36 -18 -3 -37 -1 -42 4 -5 4 -10 74 -11 155 -3 184 1 180 -152 177 -56 -1 -105 2 -108 7 -5 9 3 19 49 57 35 30 33 65 -5 118 -23 32 -30 50 -25 68 4 18 1 27 -10 31 -27 10 -79 7 -93 -6 -11 -10 -13 -10 -7 0 4 7 1 12 -8 12 -8 0 -17 9 -21 19 -7 25 -59 81 -74 81 -6 0 -15 9 -21 20 -9 17 -7 20 14 26 14 3 31 12 37 20 16 20 -27 65 -78 83 -21 8 -50 22 -64 32 -14 10 -38 21 -55 25 -37 9 -64 32 -64 55 0 10 22 65 49 122 36 79 58 112 89 136 23 19 42 44 45 61 4 16 23 41 47 60 22 17 40 38 40 46 0 8 7 17 15 20 8 4 62 77 120 163 57 86 115 171 129 190 14 19 26 45 26 57 0 17 7 24 28 26 l27 4 -24 10 c-20 9 -21 12 -8 17 10 4 17 17 17 31 0 13 15 45 34 69 19 25 42 59 50 76 28 54 76 120 103 141 33 26 77 25 173 -3z m-1300 -15 c0 -5 -9 -17 -20 -27 -19 -18 -20 -17 -20 2 0 11 3 23 7 26 9 10 33 9 33 -1z m-846 -18 c12 -30 6 -43 -31 -69 -53 -35 -67 -33 -60 9 3 19 14 43 23 55 22 25 59 28 68 5z m456 -34 c14 -26 10 -32 -46 -70 -36 -24 -49 -28 -60 -19 -23 19 -16 51 19 80 38 33 72 37 87 9z m-1432 -8 c2 -7 -3 -12 -12 -12 -9 0 -16 7 -16 16 0 17 22 14 28 -4z m-2218 -2 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m1145 0 c3 -6 -4 -10 -17 -10 -18 0 -20 2 -8 10 19 12 18 12 25 0z m2650 -8 c-3 -3 -11 0 -18 7 -9 10 -8 11 6 5 10 -3 15 -9 12 -12z m-3701 -8 c13 -34 6 -73 -15 -84 -33 -18 -80 -15 -95 5 -15 21 -19 59 -5 51 4 -3 19 6 31 19 27 29 75 34 84 9z m-8632 -11 c28 -31 78 -133 78 -157 0 -31 -22 -47 -110 -81 -41 -16 -84 -35 -95 -42 -11 -7 -35 -13 -53 -13 -53 0 -34 -27 23 -32 6 -1 70 16 144 38 l133 38 19 -23 c11 -13 19 -30 19 -37 0 -18 -78 -53 -145 -65 -27 -5 -76 -14 -107 -20 -31 -6 -73 -21 -92 -34 -35 -24 -181 -75 -214 -75 -10 0 -35 -9 -57 -20 -22 -11 -49 -20 -60 -20 -28 0 -34 -7 -27 -32 4 -17 10 -19 44 -14 55 9 42 -4 -46 -44 -42 -19 -76 -41 -76 -47 0 -7 -5 -13 -11 -13 -23 0 -140 -98 -253 -213 -65 -66 -116 -111 -112 -100 5 16 -1 23 -31 36 -21 9 -48 18 -60 21 -13 3 -33 9 -45 12 -32 7 57 -74 95 -88 15 -5 27 -14 27 -18 0 -14 -65 -108 -78 -114 -7 -3 -21 0 -32 6 -10 7 -22 9 -26 6 -10 -11 6 -28 27 -28 24 0 24 -18 -1 -50 -11 -14 -20 -29 -20 -33 0 -5 -9 -21 -19 -36 -11 -15 -23 -40 -27 -57 -4 -16 -10 -33 -14 -39 -9 -11 -73 -174 -76 -192 -1 -7 -11 -41 -22 -75 -28 -88 -43 -166 -50 -266 l-7 -87 -20 23 c-19 22 -42 31 -30 12 3 -5 -3 -10 -14 -10 -12 0 -20 5 -19 12 2 6 -9 16 -25 22 -21 8 -31 7 -43 -5 -14 -14 -9 -18 43 -37 43 -16 59 -18 65 -9 5 8 8 7 8 -5 0 -11 8 -18 20 -18 18 0 20 -7 20 -52 -1 -29 -7 -82 -15 -118 -8 -36 -14 -101 -15 -145 l0 -81 -35 4 c-19 2 -35 1 -35 -3 0 -16 42 -65 56 -65 10 0 14 -13 14 -50 0 -64 19 -186 35 -225 7 -16 25 -64 39 -105 15 -41 32 -83 37 -94 7 -13 7 -22 0 -29 -17 -17 -13 -29 8 -22 20 6 30 -8 94 -125 16 -30 34 -59 38 -64 12 -13 11 -46 0 -46 -6 0 -12 4 -15 9 -3 4 -40 14 -83 21 -43 8 -80 14 -83 15 -53 14 -100 32 -119 47 -13 10 -34 18 -47 18 -14 0 -25 8 -29 20 -5 15 -15 20 -38 20 l-32 -1 24 -19 c13 -11 29 -20 37 -20 8 0 14 -15 16 -42 l3 -43 55 -1 c44 -1 73 -10 147 -47 50 -26 94 -50 97 -55 3 -5 33 -16 67 -23 34 -8 64 -20 67 -27 2 -7 14 -17 26 -22 11 -4 36 -35 54 -68 37 -70 37 -72 16 -72 -8 0 -13 -4 -10 -9 3 -5 16 -7 27 -4 19 5 21 3 15 -20 -5 -20 -3 -27 8 -27 8 0 17 -7 20 -16 6 -15 -1 -16 -57 -11 -34 3 -69 2 -77 -3 -10 -7 9 -10 57 -10 92 0 112 -10 147 -72 29 -51 137 -167 214 -228 74 -59 459 -209 722 -280 63 -17 153 -42 200 -55 47 -13 155 -40 240 -60 85 -21 168 -44 183 -51 16 -8 39 -14 51 -14 13 0 31 -9 41 -20 23 -25 75 -40 142 -40 28 0 64 -5 78 -10 18 -7 33 -7 48 1 12 7 19 8 15 4 -16 -17 13 -45 45 -45 18 0 42 -6 53 -14 11 -8 45 -15 75 -16 76 -2 79 -2 73 15 -5 12 3 15 36 15 23 0 51 5 63 11 16 9 22 9 25 0 2 -6 11 -11 20 -11 8 0 24 -8 34 -17 17 -15 21 -15 29 -3 8 11 12 12 16 3 3 -9 30 -13 81 -13 48 -1 92 -7 117 -17 22 -9 72 -18 110 -20 39 -1 91 -5 117 -9 34 -5 52 -2 69 9 l22 16 -24 5 c-13 3 -49 7 -79 9 -36 2 -63 10 -78 23 -21 17 -39 19 -197 19 -118 0 -178 4 -185 12 -9 8 -7 13 9 18 12 3 21 12 21 19 0 11 -10 11 -47 3 -72 -16 -250 -9 -295 11 -21 9 -38 20 -38 23 0 3 39 9 88 13 106 8 257 31 374 57 54 12 102 17 126 13 32 -5 44 -2 60 14 11 11 51 30 89 42 37 12 84 28 103 35 19 8 46 17 60 21 43 11 219 89 370 163 80 39 151 71 158 71 7 0 126 -34 265 -75 138 -42 306 -92 371 -111 66 -20 129 -42 140 -50 11 -8 44 -14 73 -14 32 0 79 -10 119 -25 42 -16 87 -25 123 -25 37 0 69 -7 94 -20 28 -15 56 -20 117 -20 52 0 139 -12 252 -35 147 -31 206 -37 393 -46 160 -7 221 -7 223 1 3 7 10 6 21 -4 36 -33 140 -47 391 -56 212 -7 259 -11 345 -33 91 -23 107 -24 185 -15 l85 11 45 -30 c50 -33 92 -51 130 -56 24 -4 25 -8 32 -96 6 -87 31 -176 64 -225 7 -10 10 -25 7 -32 -3 -8 1 -14 10 -14 8 0 23 -12 32 -27 46 -71 136 -142 292 -231 32 -18 69 -42 83 -53 l25 -21 -27 5 c-17 2 -28 0 -28 -7 0 -6 -4 -5 -9 2 -6 11 -37 13 -134 10 -69 -1 -120 0 -114 4 7 4 -26 7 -73 7 -57 0 -78 -3 -65 -9 17 -7 17 -9 3 -9 -10 -1 -18 -5 -18 -10 0 -6 58 -12 133 -14 72 -2 143 -7 156 -12 20 -7 23 -5 18 8 -8 21 0 22 21 1 14 -15 17 -15 29 2 12 16 13 16 13 1 0 -9 0 -20 1 -24 1 -16 46 -24 104 -18 l61 7 116 -88 c65 -48 115 -91 112 -96 -7 -11 -48 -10 -60 2 -8 8 -15 6 -24 -4 -10 -13 -9 -17 4 -22 23 -9 84 4 89 19 3 9 9 9 26 -1 38 -22 268 -111 328 -127 95 -25 97 -26 82 -36 -20 -12 -37 -11 -19 2 11 7 3 8 -30 4 -33 -4 -41 -3 -30 4 11 8 -4 11 -57 11 -70 0 -72 -1 -87 -30 -14 -28 -13 -30 5 -30 10 0 19 5 19 12 0 6 7 4 18 -5 18 -17 92 -24 92 -9 0 4 53 6 117 5 82 -1 110 1 93 7 -21 8 -18 9 15 5 22 -2 103 -9 180 -15 291 -22 337 -27 345 -40 5 -8 13 -9 26 -2 11 5 158 10 349 11 624 4 783 22 989 112 163 72 245 100 274 92 23 -5 25 -4 15 9 -11 12 11 23 155 74 108 38 179 58 200 56 17 -2 32 1 32 6 0 5 6 9 13 9 32 -3 89 17 98 34 5 11 16 19 24 19 8 0 24 9 34 19 11 11 58 32 104 47 57 18 98 39 122 61 20 18 41 33 47 33 18 0 82 24 89 33 3 5 12 9 20 11 22 3 63 28 72 42 4 8 17 14 27 14 11 0 20 7 20 15 0 8 5 15 10 15 6 0 13 -7 16 -15 9 -22 24 -18 25 8 l2 22 4 -22 c4 -20 10 -23 56 -22 74 2 109 9 104 22 -3 8 12 13 44 15 43 3 53 -1 107 -43 57 -43 63 -45 126 -45 63 0 66 -1 92 -35 22 -29 24 -38 14 -50 -7 -8 -18 -15 -24 -15 -6 0 -42 -10 -79 -22 -68 -22 -69 -23 -64 -54 5 -31 4 -32 -36 -37 -22 -3 -44 -13 -49 -21 -5 -9 -18 -16 -28 -16 -11 0 -20 -4 -20 -10 0 -5 -8 -10 -18 -10 -11 0 -39 -13 -63 -30 -27 -18 -52 -27 -65 -24 -21 5 -74 -29 -62 -41 12 -13 129 18 171 45 23 15 58 31 77 35 19 4 47 18 61 30 15 12 49 27 75 34 68 18 106 36 138 66 15 14 30 25 33 25 4 0 25 8 47 19 87 40 103 43 173 36 37 -4 74 -13 82 -19 7 -6 34 -18 60 -27 25 -9 45 -20 44 -25 -1 -5 -20 -13 -42 -19 -22 -5 -49 -17 -60 -27 -10 -9 -27 -18 -38 -20 -26 -5 -23 -32 4 -36 14 -2 31 6 45 21 25 26 65 40 74 26 8 -14 26 1 20 16 -5 15 14 25 50 25 21 0 59 15 74 30 8 8 71 31 130 47 30 8 64 23 76 34 12 12 35 19 58 19 23 0 48 8 63 20 22 17 41 20 129 20 98 0 104 -1 104 -20 0 -43 69 -42 132 2 14 10 42 18 62 18 29 0 36 4 36 20 0 18 7 20 78 22 158 4 242 -7 242 -32 0 -4 -23 -10 -51 -13 -29 -4 -59 -13 -69 -22 -9 -8 -21 -15 -27 -15 -6 0 -26 -11 -45 -23 -23 -16 -56 -26 -103 -31 -38 -4 -75 -12 -82 -18 -8 -6 -48 -13 -90 -15 -43 -2 -80 -8 -83 -13 -3 -5 -32 -16 -64 -24 -46 -12 -68 -13 -102 -5 -24 6 -44 15 -44 20 0 14 -31 11 -49 -4 -9 -8 -81 -35 -161 -61 -111 -35 -160 -46 -209 -46 -40 0 -70 -5 -80 -14 -9 -7 -42 -16 -74 -20 -53 -6 -59 -4 -64 13 -7 28 -28 33 -55 12 -13 -9 -72 -34 -133 -55 -128 -44 -170 -61 -208 -89 -20 -14 -37 -17 -59 -13 -32 6 -103 -3 -223 -31 -38 -9 -103 -18 -143 -21 -58 -4 -72 -8 -68 -19 4 -11 -1 -14 -21 -11 -49 5 -37 31 28 62 43 20 59 33 57 45 -6 25 -78 20 -96 -8 -8 -11 -20 -21 -26 -21 -17 0 -194 -76 -225 -97 -14 -9 -42 -19 -61 -23 -37 -6 -46 -26 -19 -43 12 -8 57 -5 155 8 187 25 267 26 272 3 3 -13 -3 -18 -22 -18 -14 0 -31 -9 -39 -21 -8 -11 -30 -24 -49 -29 -18 -4 -58 -15 -88 -23 -30 -8 -91 -25 -135 -37 -44 -12 -114 -24 -155 -27 -47 -3 -89 -12 -112 -24 -27 -14 -47 -18 -76 -13 -44 7 -69 -3 -120 -47 l-33 -29 98 0 c67 0 107 5 127 15 20 10 59 15 130 15 93 0 367 33 389 47 6 3 89 7 186 9 189 2 284 21 306 60 24 43 48 54 109 51 74 -3 85 -22 17 -31 -39 -5 -49 -10 -46 -24 2 -15 15 -17 120 -14 65 1 123 6 129 11 6 5 29 12 51 16 75 12 85 15 85 30 0 8 -9 20 -19 27 -15 9 -17 15 -9 25 6 7 17 13 24 13 8 0 22 9 31 20 15 17 30 20 103 20 104 0 162 9 157 24 -15 40 -17 56 -8 56 6 0 11 -7 11 -15 0 -8 4 -15 10 -15 5 0 7 6 4 14 -8 20 41 49 116 71 36 10 69 22 74 27 6 4 18 8 28 8 10 0 18 4 18 9 0 5 21 19 46 31 25 13 48 29 51 36 3 8 20 14 42 14 20 0 45 6 56 14 11 7 36 17 55 21 19 4 42 13 50 20 8 7 53 16 100 20 109 9 171 20 179 33 3 5 23 12 45 13 30 3 41 0 50 -15 8 -14 8 -20 -1 -23 -19 -7 -15 -30 6 -36 10 -2 45 7 77 20 102 42 194 63 285 63 53 0 107 7 138 17 51 16 52 16 77 -7 13 -13 23 -30 22 -37 -2 -8 -50 -34 -108 -59 -100 -43 -112 -46 -238 -55 -74 -5 -138 -11 -142 -14 -5 -3 -51 -9 -102 -14 -51 -5 -94 -13 -96 -19 -2 -6 -11 -8 -20 -4 -16 5 -16 5 -1 -11 14 -13 40 -17 135 -18 102 -2 115 -4 99 -15 -10 -8 -27 -14 -38 -14 -10 0 -70 -20 -132 -44 -129 -51 -188 -66 -367 -96 -117 -20 -129 -20 -150 -6 -12 9 -30 16 -40 16 -10 0 -18 6 -18 14 0 15 27 29 39 21 4 -2 32 5 61 16 29 11 76 25 104 31 75 15 287 49 314 49 35 1 8 27 -36 35 -37 7 -62 24 -62 43 0 6 6 11 14 11 16 0 31 18 23 26 -2 3 -23 -5 -45 -16 -23 -12 -63 -28 -89 -35 -26 -7 -106 -35 -178 -60 -130 -47 -143 -51 -245 -61 -76 -7 -90 -13 -67 -25 24 -14 21 -39 -5 -40 -13 0 -17 -3 -10 -6 22 -9 13 -33 -12 -33 -14 0 -28 -4 -31 -10 -3 -5 -26 -10 -50 -10 -24 0 -50 -6 -57 -14 -8 -7 -24 -17 -36 -20 -13 -4 -39 -25 -60 -45 -45 -46 -185 -96 -238 -86 -22 4 -106 -13 -270 -54 -132 -33 -268 -65 -304 -71 -64 -11 -95 -16 -280 -45 -52 -8 -252 -38 -445 -65 -192 -28 -356 -52 -364 -55 -7 -3 -90 -10 -185 -15 -94 -6 -218 -17 -275 -25 -58 -8 -159 -15 -225 -15 -67 -1 -166 -7 -221 -15 -55 -9 -208 -20 -340 -25 -294 -12 -506 -27 -537 -39 -29 -11 -63 -41 -71 -63 -8 -23 -19 -22 -65 1 -35 18 -79 19 -872 24 -459 3 -911 10 -1005 16 -93 6 -249 16 -345 21 -225 14 -801 58 -862 66 -45 6 -48 7 -54 42 -3 21 -12 64 -19 97 -7 33 -13 60 -12 61 13 4 635 -28 668 -35 32 -7 67 -7 112 1 49 8 73 8 99 -2 22 -8 152 -15 383 -21 193 -5 388 -14 435 -21 61 -9 250 -13 660 -14 316 0 585 -4 598 -8 14 -4 22 -3 22 3 0 6 -18 11 -40 11 -22 0 -40 4 -40 10 0 5 -37 11 -82 13 l-83 3 97 2 c61 1 99 -2 104 -9 3 -6 17 -9 30 -6 13 2 21 0 18 -4 -3 -5 2 -9 11 -9 9 0 30 -13 47 -30 16 -16 37 -30 47 -30 20 0 61 27 79 52 16 22 32 23 32 4 0 -29 22 -28 49 2 15 16 38 33 50 37 42 13 16 30 -50 31 -35 1 -87 5 -114 9 -35 5 -64 3 -95 -8 -37 -12 -57 -13 -110 -4 -81 14 -332 12 -359 -3 -51 -27 -151 -15 -151 17 0 5 -62 7 -137 5 -76 -3 -214 -6 -308 -7 -93 0 -245 -2 -337 -4 -137 -2 -170 0 -182 12 -8 8 -13 17 -10 19 2 3 -117 8 -266 12 -206 6 -277 11 -299 22 -26 13 -34 13 -67 -1 -48 -20 -58 -19 -113 8 -76 39 -144 50 -291 49 -127 -1 -341 12 -421 27 -34 6 -40 12 -83 93 -77 147 -242 389 -301 443 -17 15 -65 81 -65 88 0 4 9 7 20 7 23 0 26 10 8 28 -19 19 -48 15 -42 -5 3 -10 -29 18 -70 61 -42 43 -76 83 -76 87 0 12 -51 58 -85 76 -16 9 -32 19 -35 22 -10 13 -126 99 -188 139 -87 56 -262 128 -374 154 -75 17 -131 21 -289 23 -150 2 -204 6 -230 18 -19 8 -63 18 -99 21 -41 3 -83 15 -114 31 -27 14 -60 25 -72 25 -14 0 -25 8 -29 19 -12 38 -52 54 -127 49 -59 -5 -71 -9 -89 -33 -12 -15 -25 -22 -28 -17 -5 9 -119 16 -177 13 -20 -2 -25 -33 -9 -57 18 -28 36 -30 73 -10 15 8 56 19 90 25 53 9 68 8 88 -5 13 -9 24 -20 24 -26 0 -5 10 -8 23 -6 12 1 50 -1 84 -6 l62 -8 -2 -49 c-2 -39 -5 -49 -19 -49 -12 0 -18 8 -18 21 0 17 -4 20 -22 15 -13 -3 -29 -6 -36 -6 -7 0 -11 -4 -7 -10 3 -5 12 -7 19 -4 8 3 17 1 20 -4 3 -6 -2 -13 -12 -17 -46 -19 -241 -66 -268 -66 -20 1 -34 -5 -38 -14 -8 -23 -36 -18 -36 6 0 19 -4 21 -40 16 -23 -3 -40 -1 -43 6 -2 6 -11 7 -23 2 -18 -7 -18 -8 4 -14 13 -3 22 -10 22 -16 -1 -5 10 -14 24 -20 23 -10 17 -13 -74 -45 -82 -27 -104 -31 -122 -22 -39 18 -68 24 -68 13 0 -6 9 -11 19 -11 11 0 23 -4 26 -10 11 -17 -21 -11 -48 10 -27 22 -63 26 -87 10 -10 -6 -11 -10 -2 -10 6 0 12 -6 12 -14 0 -9 -9 -12 -27 -10 -26 4 -25 3 6 -12 19 -8 44 -13 55 -11 12 3 32 8 46 11 l25 7 -25 -13 c-14 -7 -27 -15 -30 -18 -10 -12 -130 -70 -144 -70 -8 0 -16 -5 -18 -11 -2 -6 -15 -12 -30 -12 -14 -1 -26 -6 -25 -11 1 -5 -38 -34 -88 -63 -49 -29 -114 -68 -143 -86 -29 -17 -72 -43 -95 -57 -24 -14 -88 -55 -143 -91 -54 -36 -125 -82 -156 -102 l-57 -36 -245 84 c-135 46 -250 86 -256 90 -5 3 -43 8 -84 9 -63 3 -78 7 -101 29 -15 13 -45 28 -66 31 -25 4 -39 12 -39 21 0 9 -9 15 -22 15 -38 0 -68 12 -68 25 0 8 -15 17 -32 20 -18 4 -78 29 -133 55 -55 26 -120 55 -145 63 -111 38 -457 227 -770 420 -299 185 -492 321 -780 547 -32 25 -86 67 -121 95 -35 27 -72 60 -82 72 -10 13 -27 23 -38 23 -26 0 -107 81 -209 211 -42 55 -256 269 -268 269 -5 0 -31 33 -57 73 -27 39 -81 117 -121 172 -77 109 -180 269 -207 325 -10 19 -22 63 -27 98 -5 40 -16 72 -29 86 -40 43 -61 284 -42 479 16 167 57 376 93 482 32 95 104 248 119 253 5 2 9 9 9 17 0 24 148 210 236 297 76 75 131 120 310 255 194 148 584 380 869 518 229 111 212 103 490 217 108 44 369 133 450 153 61 15 301 52 346 54 32 1 50 -4 61 -16z m9128 -29 c-7 -7 -19 -14 -26 -14 -8 0 -13 -5 -11 -12 1 -6 -7 -13 -18 -15 -15 -2 -16 -1 -5 5 8 4 16 15 18 25 2 10 11 26 20 36 14 14 19 15 25 4 5 -8 4 -20 -3 -29z m5385 26 c14 -5 25 -16 25 -23 0 -14 -33 -57 -43 -57 -4 0 -62 -28 -129 -61 -116 -58 -128 -62 -208 -67 -76 -4 -87 -2 -103 16 -18 20 -18 21 2 34 12 7 21 18 21 25 0 7 12 15 28 19 47 10 105 38 149 71 75 57 176 74 258 43z m-4350 -2 c14 -6 25 -14 25 -18 0 -3 -18 -23 -40 -45 -39 -38 -40 -38 -60 -20 -22 20 -19 47 8 78 18 20 32 21 67 5z m162 -22 c-7 -18 -47 -17 -47 1 0 16 33 34 44 23 5 -5 6 -15 3 -24z m183 30 c0 -17 -15 -36 -27 -36 -8 0 -23 -10 -32 -22 -12 -14 -20 -18 -25 -10 -4 6 2 19 14 29 11 10 20 23 20 30 0 7 11 13 25 13 14 0 25 -2 25 -4z m670 -22 c0 -15 -8 -34 -19 -43 -10 -9 -21 -26 -25 -38 -8 -25 -41 -32 -49 -10 -5 17 3 47 14 47 5 0 9 7 9 15 0 8 9 24 20 35 28 28 50 26 50 -6z m338 -21 c4 -54 -16 -71 -52 -42 -22 18 -24 23 -14 42 14 27 39 47 53 43 6 -1 11 -21 13 -43z m-2118 28 c0 -11 -26 -22 -34 -14 -12 12 -5 23 14 23 11 0 20 -4 20 -9z m2460 -28 c0 -33 -5 -40 -35 -55 -31 -15 -35 -16 -35 -2 0 32 42 91 68 94 1 0 2 -17 2 -37z m-3028 -7 c14 -21 8 -26 -32 -26 -36 0 -40 2 -40 26 0 24 2 25 33 19 17 -4 35 -13 39 -19z m1198 -38 c0 -29 -9 -55 -30 -88 -31 -48 -220 -230 -239 -230 -16 0 -51 38 -51 55 0 8 4 15 9 15 5 0 11 24 13 53 4 53 42 141 75 176 38 39 95 59 171 60 l52 1 0 -42z m4760 20 c22 -13 40 -26 40 -29 0 -12 -49 -55 -101 -87 -47 -29 -181 -32 -211 -5 -23 21 -23 52 0 59 20 7 58 24 134 59 66 31 88 31 138 3z m-5120 -23 c20 -21 22 -28 12 -50 -14 -31 -83 -105 -98 -105 -6 0 -16 -11 -22 -25 -15 -34 -54 -34 -72 0 -17 31 -17 140 0 160 22 26 63 43 111 44 36 1 50 -4 69 -24z m615 15 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-9777 -23 c4 -21 -5 -22 -24 -3 -19 19 -18 25 4 22 9 -2 18 -10 20 -19z m237 13 c-3 -5 -11 -10 -16 -10 -6 0 -7 5 -4 10 3 6 11 10 16 10 6 0 7 -4 4 -10z m10021 -10 c0 -13 -5 -19 -14 -15 -7 3 -16 5 -18 5 -2 0 -4 7 -4 15 0 8 8 15 18 15 11 0 18 -7 18 -20z m-1399 -1 c28 -11 28 -11 6 -20 -13 -4 -23 -15 -23 -23 0 -8 -9 -17 -19 -21 -10 -3 -21 -15 -24 -25 -3 -11 -12 -20 -20 -20 -9 0 -19 -9 -22 -20 -8 -25 -36 -26 -66 -1 l-24 19 22 45 c20 42 24 45 72 51 28 4 51 11 51 16 0 13 12 13 47 -1z m1546 -3 c6 -15 -19 -30 -34 -20 -5 3 -9 12 -9 20 0 18 36 18 43 0z m760 -24 c15 -17 15 -20 -6 -50 -32 -46 -57 -43 -57 8 0 27 6 42 18 49 23 14 27 14 45 -7z m-11043 4 c0 -2 -7 -9 -15 -16 -12 -10 -15 -10 -15 4 0 9 7 16 15 16 8 0 15 -2 15 -4z m8448 -16 c12 -12 22 -25 22 -30 0 -13 -41 -50 -56 -50 -6 0 -17 -6 -23 -14 -13 -16 -7 -19 62 -31 41 -7 48 -25 22 -59 -8 -11 -15 -27 -15 -37 0 -9 -18 -32 -39 -51 -22 -19 -48 -50 -59 -69 -11 -20 -26 -33 -35 -31 -8 1 -18 -1 -21 -6 -3 -5 -17 -7 -31 -4 -22 4 -25 9 -25 49 0 28 8 60 21 83 l22 38 -22 30 c-31 45 -29 110 7 149 44 49 134 66 170 33z m1219 -40 c-11 -43 -24 -52 -59 -44 -22 4 -28 2 -28 -11 0 -17 -86 -135 -98 -135 -21 1 -53 40 -58 70 -7 48 45 140 79 140 13 0 29 6 36 13 10 10 15 9 24 -4 11 -14 35 -15 47 0 3 3 14 11 25 17 30 17 44 -3 32 -46z m-1530 22 c10 2 17 9 16 15 -1 6 9 10 22 9 14 0 25 -7 25 -14 0 -8 -7 -11 -18 -8 -16 5 -18 2 -14 -22 3 -23 -1 -30 -17 -35 -28 -7 -27 -30 2 -42 28 -13 41 -82 24 -142 -13 -47 -48 -70 -92 -59 -22 6 -25 11 -25 55 0 40 5 54 30 81 35 37 37 58 11 87 -24 25 -27 39 -16 77 7 27 9 28 21 12 7 -10 21 -16 31 -14z m1743 13 c0 -16 -27 -32 -37 -22 -3 4 -3 13 0 22 8 20 37 20 37 0z m793 -38 c-3 -4 -10 -3 -17 2 -10 8 -16 4 -24 -14 -11 -24 -10 -25 7 -15 29 15 32 -1 7 -32 -19 -25 -24 -26 -46 -15 -14 7 -26 21 -28 30 -4 21 24 57 44 57 7 0 19 10 25 22 l12 21 12 -24 c7 -13 11 -27 8 -32z m3727 43 c0 -5 -9 -10 -20 -10 -11 0 -20 5 -20 10 0 6 9 10 20 10 11 0 20 -4 20 -10z m-4070 -57 c0 -21 -33 -53 -56 -53 -11 0 -29 8 -38 19 -16 18 -15 20 26 54 43 36 43 36 55 14 7 -12 12 -28 13 -34z m-3233 21 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m485 -10 c4 -3 8 -14 8 -25 0 -24 -32 -99 -42 -99 -5 0 -8 -7 -8 -15 0 -12 7 -14 26 -9 14 4 36 1 50 -6 13 -8 26 -11 29 -9 2 3 7 30 11 60 3 29 14 68 23 84 14 25 24 31 59 33 88 7 119 -71 53 -135 -18 -18 -41 -35 -51 -38 -16 -5 -40 -44 -40 -65 0 -15 30 -12 36 4 3 8 16 17 30 20 13 4 24 13 24 21 0 9 11 20 25 25 14 5 25 17 25 25 0 9 8 18 18 22 9 3 37 26 61 50 29 30 50 43 65 41 19 -3 21 -9 19 -57 -4 -89 -42 -171 -80 -171 -7 0 -13 -5 -13 -11 0 -7 10 -9 24 -7 16 3 33 -3 49 -16 21 -18 23 -28 20 -71 -4 -44 -9 -54 -39 -74 -27 -19 -41 -22 -76 -17 -24 4 -61 8 -83 9 -22 2 -52 6 -67 11 -18 5 -33 3 -50 -8 -26 -17 -128 -24 -166 -12 -12 4 -22 13 -22 21 0 17 47 55 68 55 27 0 79 40 92 70 11 26 10 33 -5 50 -10 11 -21 20 -25 20 -4 0 -24 -27 -44 -60 -20 -32 -50 -69 -66 -80 -17 -12 -30 -26 -30 -32 0 -11 -31 -39 -76 -68 -31 -20 -33 -20 -63 -3 -28 16 -31 23 -31 67 0 32 6 56 17 68 13 14 14 23 5 42 -8 19 -17 162 -13 227 1 19 27 50 56 68 19 11 177 7 197 -5z m318 12 c0 -2 2 -11 6 -19 4 -10 -2 -14 -23 -12 -41 3 -43 4 -43 20 0 10 10 15 30 15 17 0 30 -2 30 -4z m3288 -49 c3 -34 0 -39 -30 -51 -41 -18 -52 -12 -44 27 14 71 69 89 74 24z m399 21 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m-2826 -35 c30 -80 11 -165 -53 -238 -59 -67 -90 -86 -127 -79 l-31 7 0 80 c0 76 2 84 37 137 20 31 51 66 70 78 18 12 33 27 33 32 0 6 14 10 30 10 24 0 33 -6 41 -27z m1008 4 c8 -19 15 -23 44 -19 29 3 38 0 52 -22 24 -37 16 -57 -39 -93 -59 -40 -88 -42 -115 -7 l-21 27 25 45 c14 24 25 55 25 68 0 31 18 31 29 1z m2267 8 c7 -18 -14 -47 -27 -39 -16 9 -10 37 6 30 8 -3 15 -1 15 3 0 5 -6 12 -12 14 -10 4 -10 6 0 6 7 1 15 -6 18 -14z m-429 -11 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m2707 -41 l23 -19 -104 -63 -104 -63 -125 -12 c-114 -11 -127 -11 -145 5 -10 9 -19 19 -19 22 0 3 46 28 103 55 56 27 112 59 123 70 37 36 204 39 248 5z m-3823 -4 c17 -17 20 -29 15 -58 -3 -20 -6 -44 -6 -53 0 -22 -28 -23 -75 -4 -32 14 -35 19 -35 55 0 31 6 44 26 60 34 26 49 26 75 0z m3352 7 c28 -22 5 -50 -95 -116 -81 -53 -93 -58 -177 -69 -96 -13 -142 -9 -162 15 -11 13 -5 22 36 57 27 23 60 43 74 45 36 4 105 38 126 62 15 17 31 20 99 20 53 -1 87 -5 99 -14z m941 1 c8 -7 16 -23 20 -34 6 -19 -3 -28 -71 -68 l-78 -46 -157 3 c-86 2 -159 6 -163 9 -15 16 64 74 137 100 117 43 286 62 312 36z m-5765 -23 c23 -29 26 -59 11 -99 -5 -14 -11 -39 -12 -55 -1 -17 -6 -30 -10 -30 -4 0 -5 -6 -2 -14 4 -11 -7 -16 -43 -21 -26 -3 -67 -11 -90 -17 -52 -13 -63 -6 -63 41 0 44 50 128 87 146 12 6 36 25 54 43 18 18 36 32 40 32 4 0 17 -12 28 -26z m1143 -31 c-5 -26 -32 -32 -32 -7 0 8 5 12 10 9 6 -4 10 8 11 27 0 26 2 29 8 14 4 -11 6 -30 3 -43z m816 2 c16 -35 16 -40 -14 -85 -30 -45 -54 -56 -83 -38 -36 22 -18 98 31 132 32 23 53 20 66 -9z m-1624 3 c3 -7 7 -32 10 -55 5 -36 2 -46 -19 -68 -16 -15 -37 -25 -54 -25 -46 0 -91 12 -91 24 0 13 127 136 141 136 5 0 11 -6 13 -12z m2039 -25 c3 -5 -8 -32 -22 -61 -26 -50 -28 -52 -44 -34 -19 20 -14 80 7 94 14 10 54 10 59 1z m387 -19 c0 -8 -4 -14 -9 -14 -11 0 -22 26 -14 34 9 9 23 -3 23 -20z m3217 20 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-4384 -11 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z m4324 -59 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-4944 -36 c3 -12 4 -25 1 -30 -9 -14 -44 -9 -44 6 0 45 33 63 43 24z m418 -24 c12 -14 9 -20 -16 -40 -43 -34 -55 -31 -55 16 0 37 2 40 29 40 16 0 35 -7 42 -16z m-1935 -29 c3 -13 0 -38 -7 -55 -13 -29 -16 -30 -76 -30 -61 0 -61 0 -55 25 8 27 85 85 114 85 10 0 20 -10 24 -25z m3125 -2 c9 -23 7 -30 -13 -45 -25 -19 -58 -24 -58 -8 0 6 7 10 15 10 8 0 15 5 15 11 0 5 -4 8 -9 4 -21 -12 -20 15 1 34 29 27 36 26 49 -6z m2811 6 c83 -16 85 -18 51 -37 -17 -9 -74 -43 -127 -76 -104 -64 -152 -74 -228 -46 -30 11 -49 11 -108 1 -78 -14 -94 -9 -88 30 2 18 27 35 118 80 l115 58 107 0 c59 1 131 -4 160 -10z m454 -8 c44 -20 65 -41 41 -41 -8 0 -42 -20 -76 -45 l-61 -45 -103 1 c-110 1 -161 9 -161 23 -1 11 66 54 149 96 72 36 147 40 211 11z m-6690 -25 c7 -7 7 -16 0 -33 -10 -20 -18 -23 -66 -23 -42 1 -51 3 -37 11 9 5 17 17 17 24 0 8 9 24 21 36 21 21 23 20 65 -15z m1328 3 c14 -11 26 -28 26 -37 -1 -24 -34 -92 -62 -126 -22 -26 -26 -27 -46 -15 -19 12 -22 22 -22 89 0 71 1 76 28 92 36 22 45 22 76 -3z m274 -26 c4 -48 -29 -123 -54 -123 -8 0 -17 -6 -20 -14 -3 -8 -30 -27 -60 -42 -47 -24 -57 -26 -65 -13 -22 35 -10 67 47 121 31 29 71 67 88 84 42 43 60 39 64 -13z m345 21 c-3 -9 -1 -19 5 -23 7 -4 15 -28 18 -54 6 -38 4 -48 -10 -53 -41 -16 -102 54 -94 109 3 25 21 35 60 36 21 1 26 -3 21 -15z m5128 -4 c58 -16 64 -31 23 -64 -28 -22 -48 -29 -102 -33 -36 -2 -70 -7 -74 -9 -3 -2 -23 3 -42 13 -45 21 -47 47 -3 63 17 7 48 18 67 26 42 16 83 17 131 4z m-6031 -47 c0 -18 -10 -16 -32 4 -15 13 -18 14 -13 2 8 -22 -23 -89 -41 -89 -9 0 -18 -9 -21 -20 -5 -20 -27 -27 -37 -12 -2 4 -6 29 -7 55 l-3 49 54 22 c57 23 100 19 100 -11z m1790 22 c7 -9 10 -18 7 -22 -8 -7 -37 15 -37 28 0 14 16 11 30 -6z m-2769 -13 c-7 -2 -18 1 -23 6 -8 8 -4 9 13 5 13 -4 18 -8 10 -11z m1117 -84 c-5 -120 -17 -151 -87 -218 -63 -60 -159 -125 -198 -133 -32 -6 -32 -6 -39 41 -15 103 39 230 107 252 24 8 47 26 63 49 22 32 126 108 150 110 4 1 6 -45 4 -101z m1108 84 c6 -4 16 -17 23 -30 11 -21 9 -24 -44 -47 -67 -30 -65 -30 -65 -2 0 53 52 102 86 79z m-1579 -52 c-8 -36 6 -46 43 -30 42 17 74 -2 65 -38 -8 -32 -30 -148 -46 -249 -11 -61 -16 -73 -35 -77 -12 -3 -35 -1 -49 4 -15 6 -31 8 -36 4 -5 -3 -9 4 -9 15 0 12 7 21 15 21 18 0 20 16 4 26 -6 3 -15 1 -20 -7 -6 -11 -12 -10 -28 5 -17 16 -21 31 -21 82 l0 63 58 60 c60 64 65 84 16 79 -38 -4 -44 24 -9 40 16 8 25 8 25 1 0 -6 4 -8 10 -4 5 3 7 12 3 20 -3 8 0 15 7 15 8 0 11 -10 7 -30z m-159 -43 c2 -22 10 -41 18 -44 9 -3 14 -19 14 -44 0 -29 -3 -37 -14 -33 -8 3 -26 -8 -42 -25 -15 -17 -32 -31 -38 -31 -15 -1 -66 -47 -66 -59 0 -6 -10 -16 -22 -22 -13 -7 -28 -19 -34 -27 -17 -23 -23 14 -25 149 l-1 117 33 31 c31 30 36 32 103 29 l71 -3 3 -38z m-330 1 c7 -7 12 -20 12 -29 0 -18 -84 -109 -101 -109 -5 0 -9 -6 -9 -14 0 -7 -7 -19 -15 -26 -13 -11 -20 -11 -40 0 -29 16 -39 54 -30 119 6 43 10 50 38 59 45 14 131 14 145 0z m1647 -36 c4 -11 -8 -26 -48 -59 -30 -24 -37 19 -12 67 14 26 18 28 35 18 11 -7 22 -18 25 -26z m-1970 8 c-3 -5 -11 -10 -16 -10 -6 0 -7 5 -4 10 3 6 11 10 16 10 6 0 7 -4 4 -10z m-225 -10 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m138 -12 c26 -52 19 -79 -28 -106 -22 -12 -40 -29 -40 -36 0 -8 -11 -21 -25 -30 -14 -9 -25 -21 -25 -28 0 -6 -8 -16 -17 -23 -15 -12 -15 -15 0 -48 35 -73 15 -110 -62 -111 -42 -1 -51 2 -51 16 0 21 -3 22 -46 6 -50 -18 -64 0 -64 78 0 61 -1 64 -24 64 -30 0 -38 -20 -30 -81 8 -59 -5 -79 -52 -79 -24 0 -34 5 -34 15 0 17 -21 20 -37 4 -13 -13 -88 -8 -88 6 0 6 -11 21 -24 34 -21 21 -23 30 -18 77 3 30 1 69 -4 87 -13 45 -2 105 22 112 10 4 19 13 19 20 0 8 14 16 33 19 134 20 150 17 177 -40 12 -24 20 -56 19 -71 -5 -40 20 -95 40 -91 12 3 16 17 17 63 1 128 2 135 28 145 39 14 80 -2 84 -33 2 -15 -2 -27 -8 -27 -6 0 -8 -5 -5 -10 4 -6 1 -18 -6 -26 -6 -8 -10 -17 -7 -19 6 -7 88 47 83 55 -3 4 7 12 20 18 14 7 25 17 25 24 0 18 38 35 81 37 28 1 38 -4 47 -21z m7519 0 c23 -24 1 -50 -81 -90 l-71 -36 -117 5 c-65 3 -118 9 -118 12 0 17 27 31 62 31 27 0 38 4 38 15 0 21 31 45 82 67 54 22 181 19 205 -4z m-7690 -10 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m2052 -26 c11 -26 9 -36 -14 -82 -25 -49 -27 -51 -48 -37 -32 21 -36 96 -6 136 26 35 49 29 68 -17z m5124 37 c20 -5 37 -13 37 -18 0 -16 -68 -70 -115 -92 -41 -19 -65 -23 -134 -21 -68 2 -90 -1 -117 -18 -36 -21 -59 -18 -69 7 -6 17 30 63 51 63 6 0 18 8 25 17 8 9 41 29 74 44 48 23 75 28 135 28 41 1 92 -4 113 -10z m-8186 -5 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m1365 -75 c4 -102 -1 -118 -53 -174 -34 -36 -49 -45 -76 -45 -33 0 -33 0 -33 47 0 26 6 73 12 106 11 52 17 61 45 75 18 9 39 28 45 44 9 18 20 28 35 28 20 0 22 -5 25 -81z m2208 61 c0 -17 -7 -20 -40 -20 -33 0 -40 3 -40 20 0 17 7 20 40 20 33 0 40 -3 40 -20z m1142 -7 c21 -24 8 -57 -34 -83 -83 -50 -110 14 -31 72 45 33 46 33 65 11z m-3058 -128 c-2 -97 -5 -119 -23 -148 -19 -32 -26 -35 -104 -47 -115 -18 -131 -9 -125 67 3 38 10 58 21 65 10 5 17 14 17 20 0 12 69 78 82 78 4 0 8 6 8 14 0 8 9 18 20 21 18 6 24 17 21 38 0 4 18 7 42 7 l42 0 -1 -115z m7287 104 c26 -13 15 -29 -20 -29 -34 0 -44 9 -30 27 14 16 24 16 50 2z m-4646 -19 c-3 -5 -10 -10 -16 -10 -5 0 -9 5 -9 10 0 6 7 10 16 10 8 0 12 -4 9 -10z m-1660 -41 c4 -5 4 -22 0 -37 -4 -15 -10 -21 -12 -14 -3 6 -9 10 -14 6 -12 -7 -23 22 -15 41 6 17 32 20 41 4z m545 -39 c0 -16 -43 -50 -65 -50 -11 0 -4 59 8 63 30 13 57 7 57 -13z m-1273 -111 c-7 -22 -17 -36 -22 -32 -4 5 -5 2 -1 -5 15 -26 -11 -37 -86 -37 -66 0 -73 2 -76 20 -2 11 7 29 18 40 12 11 32 30 44 43 13 12 27 22 32 22 5 0 23 16 39 36 l30 35 17 -41 c16 -37 16 -47 5 -81z m-757 -18 c0 -31 -3 -66 -6 -79 -6 -22 -8 -22 -25 -6 -15 14 -19 31 -19 86 0 38 5 78 11 90 10 19 11 19 25 -7 8 -15 14 -53 14 -84z m7809 93 c2 -2 -3 -19 -11 -38 l-16 -33 -157 -7 c-150 -6 -158 -5 -187 16 l-31 21 47 23 c26 13 57 25 69 28 26 5 279 -3 286 -10z m-6109 -4 c0 -6 -11 -8 -27 -4 -40 10 -41 14 -5 14 18 0 32 -5 32 -10z m680 -25 c0 -38 -6 -42 -35 -22 -17 13 -17 15 3 35 29 29 32 28 32 -13z m-721 2 c13 5 13 3 4 -7 -13 -15 -43 -7 -43 12 0 9 3 9 11 1 6 -6 19 -9 28 -6z m1808 -52 c-12 -26 -23 -35 -41 -35 -50 0 -45 48 7 73 43 21 56 7 34 -38z m-2109 27 c2 -7 -3 -12 -12 -12 -9 0 -16 7 -16 16 0 17 22 14 28 -4z m881 -37 c-1 -30 -6 -55 -11 -55 -4 0 -8 25 -8 55 0 31 4 55 10 55 6 0 10 -23 9 -55z m30 -5 c0 -14 -3 -31 -8 -38 -5 -8 -8 10 -9 45 -1 41 2 52 8 38 5 -11 9 -31 9 -45z m-103 -47 c7 -24 -23 -92 -43 -100 -25 -10 -44 18 -40 56 6 52 18 76 28 59 6 -9 9 -7 9 8 0 46 33 30 46 -23z m-390 29 c-3 -5 1 -9 9 -9 8 0 11 5 8 10 -3 5 0 8 7 5 8 -2 15 -9 17 -15 5 -15 -46 -26 -61 -14 -17 15 -29 1 -14 -16 14 -18 -5 -63 -27 -63 -20 0 -20 39 1 68 8 12 12 22 7 23 -11 1 29 17 45 18 7 1 11 -3 8 -7z m6244 -28 c16 -10 30 -21 30 -25 0 -14 -106 -101 -159 -131 -48 -27 -65 -30 -140 -32 -60 -1 -96 -6 -120 -18 -19 -10 -44 -18 -55 -18 -32 0 -66 11 -66 21 0 14 55 69 69 69 21 0 125 59 190 107 l64 48 78 -2 c55 -1 88 -7 109 -19z m-7100 12 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m1071 -36 c5 0 9 -18 9 -41 0 -36 -2 -40 -22 -37 -19 2 -24 10 -26 47 -3 37 -1 43 13 37 9 -3 21 -6 26 -6z m-771 -14 c0 -16 89 -28 105 -14 5 4 14 8 20 8 13 -1 -37 -39 -51 -40 -6 0 -19 -9 -29 -20 -10 -11 -26 -20 -37 -20 -11 0 -18 -7 -18 -20 0 -11 6 -20 13 -20 6 0 -3 -8 -20 -18 -18 -9 -63 -38 -100 -64 -38 -26 -80 -50 -94 -53 -25 -6 -27 -4 -31 31 -4 38 -1 45 77 132 12 12 29 36 39 52 l17 30 -37 0 c-83 0 12 25 109 29 26 1 37 -3 37 -13z m107 7 c-15 -2 -25 -8 -23 -11 2 -4 -14 -5 -37 -3 -37 4 -39 5 -17 12 14 4 43 7 65 7 28 -1 32 -2 12 -5z m253 -58 c0 -36 -30 -80 -60 -90 -26 -8 -44 3 -31 18 5 7 10 17 11 22 1 6 6 20 11 33 5 13 9 28 9 33 0 6 5 19 11 30 10 20 11 20 30 3 11 -10 19 -30 19 -49z m-976 25 c33 -12 33 -33 0 -55 -33 -22 -54 -13 -54 23 0 43 10 49 54 32z m396 0 c0 -5 -3 -10 -7 -10 -5 0 -28 -31 -53 -69 -33 -50 -54 -72 -79 -81 -30 -11 -35 -10 -45 6 -17 29 -22 85 -11 127 l9 37 93 0 c55 0 93 -4 93 -10z m-1064 -50 c2 0 4 -4 4 -10 0 -5 -6 -10 -14 -10 -20 0 -56 -48 -56 -75 0 -45 -62 -77 -125 -63 -90 20 -130 113 -64 152 43 25 173 37 218 19 18 -7 35 -13 37 -13z m386 -2 l21 -21 -21 -8 c-12 -5 -22 -16 -22 -24 0 -10 -7 -15 -16 -13 -21 4 -48 52 -41 72 9 23 53 20 79 -6z m1548 1 c18 -32 3 -93 -28 -116 -40 -29 -58 -33 -79 -18 -17 13 -17 14 0 20 9 4 17 12 17 18 0 6 9 21 20 33 12 12 23 34 24 50 5 36 3 34 21 34 8 0 19 -9 25 -21z m6315 -4 c0 -25 -28 -31 -49 -10 -21 22 -11 37 22 33 19 -2 27 -9 27 -23z m-8584 -5 l24 -19 -40 -1 c-34 0 -41 3 -42 20 -2 26 27 26 58 0z m573 -3 c3 -12 6 -50 6 -84 0 -56 -3 -64 -25 -79 -15 -10 -25 -26 -25 -40 0 -22 -4 -24 -45 -24 l-45 0 6 70 c5 50 4 70 -5 70 -15 0 -14 34 3 75 14 32 16 34 69 34 48 0 56 -3 61 -22z m288 -44 c3 -63 0 -70 -88 -156 -44 -44 -121 -76 -145 -62 -5 4 -9 28 -9 55 0 44 4 53 35 82 68 63 84 76 87 73 2 -2 21 12 43 30 59 51 72 47 77 -22z m887 24 c10 17 10 16 11 -4 0 -12 -4 -24 -10 -28 -5 -3 -7 -12 -4 -20 10 -25 -26 -65 -57 -65 -36 0 -46 20 -29 60 12 30 33 39 45 20 3 -5 11 -10 18 -10 8 0 8 3 -1 12 -7 7 -12 21 -12 33 1 19 1 19 14 2 14 -18 15 -18 25 0z m-671 -84 l3 -80 -47 -22 c-57 -27 -73 -25 -97 17 l-20 33 69 69 c38 38 74 68 79 66 6 -1 11 -39 13 -83z m-690 55 c8 -8 12 -46 12 -104 0 -90 -5 -105 -35 -110 -5 -1 -14 -3 -20 -4 -31 -7 -35 2 -35 69 0 73 11 114 37 143 19 21 25 22 41 6z m2538 -16 c21 -14 24 -69 6 -85 -31 -27 -64 -39 -88 -33 -35 9 -30 31 18 82 43 46 46 48 64 36z m1743 -1 c11 -7 7 -12 -15 -24 -25 -13 -33 -13 -54 -1 -24 13 -24 13 20 15 l45 2 -45 7 -45 7 40 1 c22 1 46 -2 54 -7z m-2121 -13 c21 -21 13 -55 -19 -82 -17 -14 -37 -26 -45 -26 -24 0 -54 19 -54 35 0 15 60 65 78 65 7 0 12 5 12 10 0 14 13 13 28 -2z m-460 -30 c24 -24 13 -59 -33 -104 -53 -51 -75 -56 -75 -16 0 27 23 71 56 111 21 24 35 26 52 9z m6499 -13 c16 -16 15 -19 -18 -46 -57 -49 -206 -115 -297 -133 -89 -17 -227 -21 -236 -7 -8 12 45 65 95 97 44 28 176 84 197 84 6 0 12 4 12 10 0 11 90 19 172 15 38 -2 63 -9 75 -20z m-7267 -25 c0 -38 -2 -40 -30 -40 -19 0 -33 7 -40 19 -15 28 -13 31 19 31 16 0 31 6 35 15 10 26 16 16 16 -25z m-100 15 c0 -8 -4 -15 -10 -15 -5 0 -7 7 -4 15 4 8 8 15 10 15 2 0 4 -7 4 -15z m6788 -27 c-2 -12 -24 -36 -53 -56 -27 -20 -51 -39 -53 -44 -2 -4 -12 -8 -22 -8 -10 0 -26 -10 -35 -22 -15 -22 -20 -23 -176 -22 -158 1 -160 1 -157 -20 3 -18 11 -21 56 -24 48 -3 52 -5 52 -28 0 -13 -6 -24 -13 -24 -7 0 -23 -9 -35 -20 -59 -55 -227 -119 -316 -120 -28 0 -37 -4 -33 -14 4 -9 -7 -7 -34 8 -38 20 -41 20 -53 4 -7 -10 -16 -18 -20 -18 -4 0 -5 8 -3 18 3 9 8 34 12 55 3 21 10 35 16 32 9 -6 97 30 109 44 16 18 83 46 135 56 46 8 63 16 71 34 21 41 110 105 186 133 75 28 162 46 258 51 30 2 68 4 83 5 24 2 28 -1 25 -20z m-5743 -39 c8 -13 -14 -38 -53 -61 -25 -15 -32 -16 -48 -3 -18 13 -18 15 15 44 35 31 74 40 86 20z m6494 -10 l24 -20 -24 -25 c-22 -24 -29 -26 -78 -21 -65 7 -77 21 -48 58 28 35 89 39 126 8z m-7494 1 c3 -5 -1 -10 -9 -10 -8 0 -18 5 -21 10 -3 6 1 10 9 10 8 0 18 -4 21 -10z m561 -17 c-10 -10 -19 5 -10 18 6 11 8 11 12 0 2 -7 1 -15 -2 -18z m-286 -37 c0 -13 6 -27 13 -30 10 -5 10 -7 0 -12 -18 -8 -16 -42 2 -60 17 -17 20 -44 5 -44 -5 0 -10 -12 -10 -28 0 -35 -23 -68 -61 -87 -28 -15 -30 -14 -55 11 -26 25 -27 28 -20 116 9 117 33 153 104 157 17 1 22 -4 22 -23z m980 -3 c0 -26 -20 -53 -41 -53 -11 0 -18 -4 -14 -9 3 -5 -2 -26 -12 -45 -15 -32 -18 -34 -28 -18 -15 23 -7 112 10 112 7 0 23 8 36 19 25 20 49 18 49 -6z m2030 17 c0 -5 -13 -8 -30 -7 -39 3 -39 17 0 17 17 0 30 -4 30 -10z m-4360 -10 c0 -5 -6 -10 -14 -10 -8 0 -18 5 -21 10 -3 6 3 10 14 10 12 0 21 -4 21 -10z m1488 -28 c3 -16 -3 -25 -21 -31 -14 -5 -27 -16 -30 -23 -4 -7 -4 2 -1 20 2 19 1 31 -3 29 -5 -3 -19 1 -33 9 l-25 14 31 -6 c19 -4 34 -1 39 6 11 18 40 7 43 -18z m399 -4 l21 -11 -20 -42 c-23 -47 -53 -67 -89 -58 -19 4 -21 3 -9 -6 17 -12 10 -14 -14 -5 -8 3 -12 12 -9 19 3 9 -7 18 -29 24 -29 9 -29 10 -5 7 23 -3 30 1 38 23 12 33 57 71 78 64 9 -3 26 -9 38 -15z m-1115 -10 c-7 -7 -12 -8 -12 -2 0 14 12 26 19 19 2 -3 -1 -11 -7 -17z m303 8 c17 -12 18 -18 7 -40 -6 -14 -19 -26 -27 -26 -9 0 -25 -9 -37 -20 -26 -24 -37 -25 -44 -5 -8 20 -17 19 -75 -7 -47 -22 -49 -25 -49 -63 0 -44 -28 -112 -53 -133 -13 -11 -22 -11 -52 -1 -33 12 -35 16 -35 56 0 44 23 105 53 137 9 11 17 27 17 35 0 13 2 13 9 2 5 -7 14 -10 20 -7 15 10 14 39 -1 33 -8 -3 -14 5 -14 19 -3 35 15 29 32 -11 17 -41 32 -44 64 -10 14 15 35 25 51 25 14 0 32 7 39 15 16 19 70 19 95 1z m-327 -23 c0 -10 3 -27 6 -38 8 -20 7 -20 -8 -1 -18 22 -21 56 -7 56 6 0 9 -8 9 -17z m-393 -9 c14 -6 13 -10 -7 -32 -19 -21 -20 -24 -5 -19 29 11 41 -4 15 -18 -21 -11 -26 -9 -56 23 -26 27 -30 37 -20 43 16 10 50 11 73 3z m277 -56 c3 -60 -1 -73 -33 -127 -11 -18 -11 -25 -1 -28 6 -3 12 -11 12 -18 0 -7 6 -16 13 -18 6 -3 -20 -6 -59 -6 -52 -1 -75 -5 -84 -16 -9 -11 -27 -15 -58 -13 l-45 3 2 75 c2 68 4 77 29 98 59 50 102 94 102 103 0 5 27 9 59 9 l59 0 4 -62z m771 55 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m70 -23 c-3 -11 -7 -20 -9 -20 -2 0 -4 9 -4 20 0 11 4 20 9 20 5 0 7 -9 4 -20z m3387 10 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m1130 -20 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m-3929 -10 c19 -11 25 -52 13 -95 -7 -25 -86 -85 -112 -85 -33 0 -65 39 -58 71 5 26 37 69 52 69 3 0 22 11 42 25 42 29 38 28 63 15z m552 -2 c4 -10 8 -10 15 0 7 11 10 10 16 -3 10 -27 7 -33 -14 -28 -11 3 -20 1 -20 -5 0 -6 -10 -8 -22 -5 -17 3 -19 2 -10 -5 10 -7 1 -17 -37 -41 -62 -38 -101 -41 -101 -8 1 38 33 70 74 71 20 1 36 6 36 13 0 11 18 19 47 22 6 0 14 -5 16 -11z m5391 3 c9 -14 -67 -77 -120 -100 -27 -12 -56 -29 -65 -37 -13 -11 -53 -17 -160 -22 -236 -10 -234 -10 -237 15 -3 17 6 27 40 44 24 13 49 24 56 25 8 1 21 9 30 17 10 8 35 20 57 27 22 7 44 19 48 26 6 11 45 14 177 14 93 0 171 -4 174 -9z m466 -5 c0 -23 -62 -98 -99 -120 -29 -17 -61 -21 -195 -27 -142 -6 -162 -5 -173 10 -18 24 -17 25 31 40 24 7 56 26 71 42 46 47 119 66 268 68 78 1 97 -2 97 -13z m-6750 -19 c30 -3 28 -4 -12 -5 -38 -2 -48 1 -48 14 0 12 3 14 13 6 6 -6 28 -12 47 -15z m-280 -8 c0 8 3 12 6 9 9 -9 -15 -48 -29 -47 -9 0 -9 2 1 6 20 8 14 22 -8 16 -11 -3 -20 -9 -20 -14 0 -5 -5 -9 -11 -9 -8 0 -8 5 1 15 7 8 19 15 26 15 8 0 14 6 14 13 0 8 4 7 10 -3 8 -12 10 -12 10 -1z m-266 -5 c12 -5 16 -20 16 -59 0 -44 -3 -54 -19 -58 -11 -3 -21 -3 -23 -2 -4 4 3 125 7 125 2 0 10 -3 19 -6z m5783 -26 c-3 -7 -5 -2 -5 12 0 14 2 19 5 13 2 -7 2 -19 0 -25z m-6787 -56 c0 -74 -2 -80 -29 -106 -48 -46 -61 -32 -61 68 0 82 1 85 28 99 56 30 62 25 62 -61z m1477 56 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m113 12 c18 -11 15 -14 -34 -34 -50 -21 -60 -12 -12 11 31 14 34 18 19 24 -13 6 -14 8 -3 8 8 0 22 -3 30 -9z m-78 -12 c-7 -7 -12 -23 -13 -37 0 -15 -3 -20 -6 -13 -7 19 6 62 19 62 9 0 9 -3 0 -12z m7002 -9 c30 -24 26 -35 -21 -48 -31 -9 -63 2 -63 21 0 16 31 48 45 48 7 0 24 -10 39 -21z m-7064 -30 c0 -24 -26 -25 -39 -1 -7 13 -6 23 1 30 15 15 38 -3 38 -29z m-1320 11 c0 -13 -7 -20 -20 -20 -11 0 -20 2 -20 4 0 2 -3 11 -6 20 -5 12 0 16 20 16 19 0 26 -5 26 -20z m789 -22 c15 -26 14 -28 -14 -57 -23 -23 -39 -31 -67 -31 -34 0 -38 3 -38 25 0 33 58 96 85 93 10 -2 26 -15 34 -30z m412 22 c11 -6 19 -21 19 -35 0 -22 -4 -25 -32 -24 -31 2 -31 2 -5 6 15 2 27 9 27 15 0 6 -16 7 -42 3 -31 -4 -39 -3 -28 4 8 6 23 11 33 11 9 0 17 5 17 10 0 14 -33 13 -48 -2 -8 -8 -12 -9 -12 -1 0 22 41 29 71 13z m797 -63 c3 -17 -44 -87 -58 -87 -4 0 -19 9 -34 21 -25 19 -25 22 -11 49 8 16 25 36 37 44 19 13 25 14 43 2 11 -7 21 -21 23 -29z m-436 -20 c7 -35 -24 -66 -103 -104 -82 -39 -86 -39 -94 -11 -8 25 5 37 105 98 76 46 86 48 92 17z m2170 1 c-8 -8 -20 -8 -44 -1 l-33 11 45 1 c33 1 41 -2 32 -11z m62 4 c3 -5 -5 -14 -17 -20 -38 -18 -65 -23 -72 -12 -4 6 7 10 29 10 25 0 36 4 36 15 0 16 16 20 24 7z m-159 -12 c3 -5 -1 -10 -9 -10 -24 0 -7 -30 23 -41 25 -10 25 -11 6 -21 -11 -6 -23 -16 -27 -22 -4 -6 -11 -7 -15 -2 -4 5 -2 11 5 13 18 7 15 31 -7 45 -15 9 -17 16 -10 30 11 20 25 23 34 8z m-3628 -54 c-5 -16 -68 -20 -78 -4 -15 22 -10 36 14 40 26 4 69 -20 64 -36z m3676 37 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m722 -3 c-3 -5 -16 -10 -28 -9 -21 0 -21 1 -2 9 28 12 37 12 30 0z m2868 0 c53 0 97 -4 97 -8 0 -13 -78 -64 -165 -109 -98 -50 -170 -68 -208 -54 -18 7 -42 8 -66 2 -35 -8 -128 -5 -159 5 -43 13 108 111 213 138 103 26 149 34 170 30 11 -2 64 -4 118 -4z m537 -11 c27 -6 50 -14 50 -19 0 -21 -84 -78 -137 -93 -85 -24 -258 -30 -294 -11 -36 18 -37 41 -4 56 14 6 25 15 25 20 0 4 6 8 13 8 6 0 26 11 42 25 28 23 38 24 142 25 62 0 135 -5 163 -11z m425 3 c46 -6 50 -9 47 -32 -6 -38 -28 -57 -94 -79 -55 -19 -68 -19 -164 -9 -57 7 -104 15 -104 19 0 4 17 14 38 23 20 10 59 33 86 52 52 36 81 40 191 26z m-7905 -16 c0 -9 -39 -13 -51 -5 -10 6 -4 9 19 9 17 0 32 -2 32 -4z m3260 -15 c0 -14 -5 -18 -20 -14 -23 6 -26 19 -7 26 22 9 27 7 27 -12z m820 9 c0 -5 -4 -10 -9 -10 -5 0 -23 -3 -40 -6 -19 -4 -31 -2 -31 4 0 9 17 14 68 21 6 0 12 -3 12 -9z m-693 -6 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-2683 -29 c19 -15 19 -15 -5 -16 -13 -1 -34 -3 -46 -4 -27 -3 -28 -1 -7 19 19 20 33 20 58 1z m201 5 c-3 -5 -14 -10 -23 -10 -15 0 -15 -2 -2 -10 13 -8 13 -12 0 -36 -8 -15 -24 -32 -35 -38 -11 -6 -22 -14 -25 -18 -11 -14 -48 4 -54 25 -6 25 18 67 38 67 8 0 27 7 42 15 33 17 68 20 59 5z m2352 -16 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-2964 -35 c3 -12 0 -19 -8 -19 -18 0 -28 -17 -16 -24 5 -4 17 2 27 11 9 9 23 18 31 19 9 2 26 12 38 24 33 31 59 23 63 -21 3 -32 -1 -38 -54 -77 -31 -23 -61 -42 -66 -42 -6 0 -24 -12 -41 -26 -30 -25 -31 -25 -44 -7 -25 34 -11 164 20 184 16 11 45 -2 50 -22z m-1403 1 c0 -5 -7 -10 -15 -10 -8 0 -15 5 -15 10 0 6 7 10 15 10 8 0 15 -4 15 -10z m-2759 -33 c36 -24 52 -67 25 -67 -21 0 -111 49 -110 61 1 5 2 14 3 19 2 18 47 11 82 -13z m4035 6 c3 -10 11 -28 16 -40 24 -49 -43 -147 -107 -159 -47 -9 -73 3 -80 35 -9 40 8 74 63 131 52 53 97 67 108 33z m-506 -23 c0 -24 -6 -33 -27 -42 -16 -6 -33 -10 -40 -9 -16 2 -23 -13 -25 -54 -1 -20 -6 -35 -13 -35 -7 0 -33 -12 -59 -26 -56 -31 -81 -25 -96 22 -14 43 -19 40 -26 -15 -6 -55 -21 -91 -35 -91 -14 0 -38 -30 -39 -47 0 -18 -32 -53 -47 -53 -7 0 -13 -7 -13 -15 0 -8 -8 -18 -17 -23 -26 -13 -68 1 -67 21 2 53 5 57 27 57 13 0 32 7 43 15 16 13 17 16 4 25 -8 5 -27 10 -42 10 -38 0 -35 11 12 51 22 19 40 39 40 44 0 6 23 25 50 43 30 20 49 39 48 48 -2 11 17 22 62 38 36 13 79 29 96 35 17 7 60 16 95 20 35 5 65 9 67 10 1 0 2 -13 2 -29z m300 9 c0 -20 -26 -64 -62 -103 -10 -11 -18 -23 -18 -28 0 -13 -128 -68 -144 -62 -30 12 -36 59 -15 122 26 78 49 91 157 92 77 0 82 -1 82 -21z m1685 5 c15 -16 15 -19 -7 -40 -13 -12 -37 -25 -55 -29 -26 -5 -34 -3 -44 16 -10 20 -8 25 17 46 34 27 66 29 89 7z m691 5 c10 -17 -21 -41 -47 -37 l-24 3 25 23 c27 25 36 27 46 11z m782 -1 c7 -7 40 -12 85 -11 42 0 75 -4 80 -11 6 -7 7 -5 4 6 -8 22 4 25 80 17 36 -4 74 -4 84 -2 10 3 19 3 19 0 0 -7 -119 -77 -131 -77 -6 0 -17 -7 -25 -15 -12 -12 -44 -15 -154 -15 l-138 0 10 42 c9 44 24 61 45 53 7 -2 12 -1 12 3 -4 24 10 29 29 10z m-3838 -30 c14 -27 14 -29 -16 -59 -42 -42 -91 -45 -113 -7 -13 22 -13 30 -2 51 28 53 105 61 131 15z m-515 -3 l130 0 1 -75 c1 -70 0 -76 -27 -101 -16 -15 -36 -29 -44 -33 -17 -6 -21 -46 -5 -46 6 0 13 7 17 16 3 8 12 13 19 10 8 -3 14 1 14 8 0 8 8 13 18 12 11 -1 16 5 14 17 -2 10 7 26 20 37 19 15 23 27 21 65 -4 99 25 116 123 73 l51 -23 -4 -65 c-4 -44 -10 -69 -22 -77 -9 -7 -25 -21 -36 -31 -35 -33 -66 -44 -103 -38 -31 5 -39 1 -69 -31 -23 -26 -33 -46 -33 -70 0 -29 -7 -37 -65 -75 -35 -24 -65 -49 -65 -55 0 -8 -15 -13 -40 -13 -39 0 -40 1 -40 33 0 22 8 41 21 53 12 10 30 36 40 57 20 37 20 38 1 65 -11 15 -29 47 -42 71 -22 44 -43 71 -54 71 -3 0 -6 -25 -6 -55 0 -44 -4 -59 -21 -73 -65 -53 -143 -132 -136 -138 10 -10 60 14 53 25 -4 5 3 7 15 4 18 -5 20 -3 14 17 -6 19 -4 21 13 16 11 -4 23 -2 27 4 23 38 43 -104 24 -172 -16 -56 -24 -65 -62 -73 -18 -4 -63 -16 -100 -27 l-68 -20 -25 23 c-35 33 -31 63 11 89 19 12 35 27 35 34 0 7 9 21 20 31 26 24 25 35 -3 35 -13 0 -33 10 -45 23 -19 20 -21 31 -17 112 2 50 8 101 13 115 6 16 6 45 0 80 -18 104 -28 94 102 101 63 3 131 3 150 0 19 -3 94 -6 165 -6z m1907 -10 c8 -19 8 -28 -2 -40 -16 -19 -73 -35 -128 -35 l-43 0 17 29 c16 27 89 68 127 70 9 1 22 -10 29 -24z m-2410 -148 c-1 -84 -2 -194 -2 -245 1 -80 -2 -97 -21 -123 -22 -31 -163 -129 -185 -129 -40 0 -60 67 -51 167 7 74 40 128 89 147 39 14 32 40 -12 46 -34 5 -34 5 -32 55 6 129 24 205 49 205 7 0 16 6 20 14 11 19 25 21 90 18 l58 -4 -3 -151z m5438 155 c0 -4 -16 -12 -35 -18 -26 -8 -35 -8 -32 0 2 6 14 13 28 17 34 10 39 10 39 1z m366 -2 c8 0 14 -6 14 -14 0 -18 -52 -6 -58 14 -3 9 1 11 12 7 10 -4 24 -7 32 -7z m434 -21 c0 -6 -4 -7 -10 -4 -5 3 -10 11 -10 16 0 6 5 7 10 4 6 -3 10 -11 10 -16z m3220 5 c0 -6 -8 -18 -18 -27 -16 -15 -19 -15 -30 3 -7 12 -24 20 -40 21 -74 3 -69 16 6 15 53 0 82 -5 82 -12z m-4019 -15 c-13 -11 -27 -17 -30 -13 -7 7 28 34 43 34 6 -1 0 -10 -13 -21z m3802 14 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m-894 -14 c19 -7 31 -18 31 -29 0 -15 -14 -18 -103 -24 -109 -7 -175 -1 -216 21 -14 7 -24 13 -21 14 5 1 232 25 261 28 9 0 30 -4 48 -10z m554 -16 c22 -11 26 -17 17 -28 -14 -17 -95 -45 -131 -45 -17 0 -32 -7 -38 -19 -23 -42 -58 -53 -205 -62 -78 -5 -156 -6 -173 -3 -37 7 -43 28 -13 44 11 6 20 17 20 25 0 20 59 20 107 0 41 -17 92 -19 113 -4 11 8 7 9 -17 5 -18 -3 -33 -1 -33 4 0 5 -7 7 -15 4 -9 -4 -15 -1 -15 7 1 20 52 77 78 86 37 14 273 3 305 -14z m421 17 c86 -14 95 -26 46 -62 -40 -30 -41 -30 -173 -29 -72 1 -136 6 -141 11 -30 30 43 71 144 80 36 4 65 8 65 8 0 1 26 -2 59 -8z m512 -11 c19 -21 19 -21 -25 -60 -56 -50 -78 -55 -171 -40 -192 32 -197 55 -20 106 25 7 79 13 121 14 65 1 79 -2 95 -20z m-6653 -10 c15 -24 0 -69 -23 -69 -11 0 -43 -9 -72 -20 -53 -20 -90 -25 -100 -14 -3 3 -3 16 1 30 4 18 25 35 71 59 68 36 106 40 123 14z m2207 -3 c0 -2 -11 -6 -25 -8 -13 -3 -22 -1 -19 3 5 9 44 13 44 5z m-5343 -68 c-2 -13 -4 -3 -4 22 0 25 2 35 4 23 2 -13 2 -33 0 -45z m2749 23 c-4 -6 -18 -11 -32 -11 -29 0 -35 36 -6 43 21 5 47 -17 38 -32z m-3676 19 c0 -5 -6 -10 -14 -10 -8 0 -18 5 -21 10 -3 6 3 10 14 10 12 0 21 -4 21 -10z m8910 0 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m-5372 -6 c59 -16 -6 -121 -95 -151 -23 -8 -45 -19 -49 -24 -3 -5 -14 -9 -25 -9 -37 0 -21 100 24 149 35 38 87 50 145 35z m5465 -11 c-13 -2 -33 -2 -45 0 -13 2 -3 4 22 4 25 0 35 -2 23 -4z m2 -17 c114 -1 135 -8 109 -37 -9 -10 -22 -19 -27 -19 -6 0 -18 -7 -27 -15 -10 -9 -49 -17 -103 -21 -78 -6 -87 -9 -82 -25 4 -12 -1 -19 -15 -24 -19 -6 -22 -11 -24 -45 -1 -18 -155 -45 -170 -30 -5 5 -2 22 7 40 17 34 21 30 -52 55 -10 4 -7 12 13 32 14 14 26 29 26 33 0 9 9 13 100 46 49 18 75 22 105 17 22 -4 85 -7 140 -7z m-10385 -89 l0 -82 -53 -23 c-66 -28 -81 -29 -67 -2 6 11 20 20 30 20 17 0 18 3 8 19 -9 15 -7 27 10 65 12 25 22 49 22 53 0 13 33 42 41 37 5 -3 9 -42 9 -87z m3652 69 c6 -14 8 -32 5 -40 -8 -21 -54 -31 -83 -17 -20 9 -23 14 -14 30 29 54 73 67 92 27z m-3354 -5 c33 -17 42 -50 42 -146 0 -97 -6 -121 -26 -104 -7 6 -19 7 -26 3 -13 -8 -18 -9 -70 -12 -16 -1 -28 -6 -28 -12 0 -14 47 -13 52 2 6 18 28 0 28 -23 0 -12 4 -17 11 -14 6 4 8 13 5 21 -6 16 9 28 24 19 8 -5 7 -11 0 -21 -9 -10 -7 -19 9 -40 14 -17 21 -41 21 -68 0 -28 -3 -37 -9 -27 -9 14 -54 22 -78 13 -16 -5 -17 -38 -2 -48 8 -5 6 -10 -5 -16 -9 -5 -16 -14 -16 -21 0 -7 4 -6 11 3 8 12 10 12 7 -5 -5 -28 -38 -32 -45 -6 -3 12 -12 21 -20 21 -8 0 -12 -4 -8 -9 3 -6 -10 -8 -32 -5 -63 9 -64 10 -61 56 l3 43 43 -3 c39 -2 42 0 42 22 0 37 19 42 26 7 4 -17 13 -31 20 -31 20 0 17 12 -11 50 -14 19 -25 40 -25 47 0 7 -7 13 -15 13 -21 0 -19 38 3 43 9 3 -2 5 -26 6 -34 1 -50 8 -73 30 -31 32 -32 39 -22 156 l6 77 111 -4 c61 -2 121 -10 134 -17z m7007 10 c3 -5 38 -7 78 -4 63 5 74 3 74 -10 0 -10 -14 -21 -32 -27 -32 -11 -65 -5 -65 11 0 12 14 11 27 -2 8 -8 17 -7 33 4 20 14 19 14 -23 13 -23 0 -55 -9 -70 -18 -14 -10 -31 -18 -37 -18 -14 0 -13 27 3 33 6 3 1 6 -13 6 -20 1 -22 3 -10 11 19 12 27 12 35 1z m185 -21 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-6843 -29 c16 -20 16 -56 2 -84 -17 -31 -30 -38 -61 -31 -21 4 -28 2 -28 -10 0 -8 9 -18 20 -21 15 -5 20 -14 18 -35 -1 -16 -5 -27 -9 -24 -4 2 -10 -7 -13 -21 -6 -23 -11 -25 -58 -25 -28 0 -66 -5 -85 -12 -18 -6 -35 -9 -39 -5 -4 3 -1 27 6 53 11 37 11 47 0 54 -19 12 -8 102 18 136 16 24 32 31 84 39 75 13 128 8 145 -14z m4524 -14 c-21 -21 -21 -21 -35 -2 -10 14 -11 21 -3 24 6 2 13 -1 15 -7 4 -13 23 -17 21 -4 -3 17 2 23 12 16 7 -4 4 -14 -10 -27z m1719 29 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m818 -6 c-10 -6 -25 -7 -40 -1 -20 9 -18 10 17 10 31 0 36 -2 23 -9z m649 4 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m171 -10 c16 -17 15 -24 -3 -24 -9 0 -18 7 -21 15 -4 8 -10 15 -16 15 -5 0 -7 -3 -5 -7 3 -5 -17 -8 -43 -8 -26 0 -46 3 -44 7 2 3 0 8 -6 10 -5 1 21 3 58 3 40 1 72 -4 80 -11z m2703 -1 c20 -20 -17 -36 -68 -28 -33 5 -42 9 -32 16 10 6 10 9 2 9 -7 0 -13 4 -13 10 0 13 97 7 111 -7z m-10246 -40 c6 -38 4 -49 -11 -60 -19 -14 -34 -9 -34 13 0 17 -16 19 -26 2 -4 -6 0 -16 9 -23 10 -7 17 -17 17 -22 0 -6 10 -17 23 -25 20 -14 22 -24 22 -94 l0 -79 -55 0 c-57 0 -66 7 -85 69 -4 15 -8 17 -17 8 -22 -22 -56 -13 -82 21 -23 30 -26 43 -26 120 l0 85 50 11 c67 14 116 14 141 -1 17 -11 22 -10 30 5 18 31 36 19 44 -30z m3411 21 c4 -14 2 -30 -5 -37 -6 -6 -11 -19 -11 -29 0 -18 -17 -22 -67 -19 -11 1 -24 -3 -28 -8 -12 -20 -45 -12 -57 13 -13 30 -5 39 67 78 65 36 93 36 101 2z m2564 16 c0 -5 -17 -14 -37 -19 -48 -14 -53 -14 -53 1 0 6 3 8 6 5 4 -3 16 0 28 8 23 17 56 20 56 5z m404 -5 c4 -10 -1 -15 -14 -15 -11 0 -20 -4 -20 -9 0 -15 -103 -40 -157 -38 -29 1 -53 5 -53 10 0 4 6 7 13 7 8 0 7 4 -3 10 -8 5 -32 10 -52 10 -21 0 -38 3 -38 8 0 4 18 7 40 7 22 0 40 -2 40 -6 0 -9 43 -19 105 -25 45 -4 53 -2 80 25 34 34 50 38 59 16z m250 4 c-35 -10 -67 -39 -43 -39 10 0 10 -3 1 -12 -9 -9 -15 -9 -24 0 -19 19 28 62 66 61 l31 -1 -31 -9z m-757 -5 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m329 -9 c18 -15 18 -15 -5 -13 -14 2 -26 9 -29 16 -5 17 10 15 34 -3z m503 -11 c-9 -11 -8 -14 2 -14 11 0 11 -2 -1 -10 -8 -5 -33 -9 -55 -8 l-40 1 45 6 45 6 -38 8 c-20 4 -42 5 -49 1 -7 -5 -8 -3 -4 5 6 9 21 10 49 6 34 -6 39 -5 34 8 -4 11 -2 14 9 10 11 -4 12 -9 3 -19z m368 20 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m298 -4 c-3 -5 -10 -10 -16 -10 -5 0 -9 5 -9 10 0 6 7 10 16 10 8 0 12 -4 9 -10z m-600 -10 c-28 -12 -45 -12 -45 0 0 6 15 10 33 9 27 0 29 -2 12 -9z m-6512 -6 c65 -6 76 -10 81 -28 8 -29 -34 -106 -57 -106 -10 0 -20 -7 -23 -15 -3 -8 -14 -17 -25 -20 -10 -4 -19 -13 -19 -21 0 -18 -30 -18 -77 1 -51 21 -68 59 -57 128 12 67 29 73 177 61z m2837 -13 c0 -10 -7 -21 -15 -25 -8 -3 -15 -15 -15 -26 0 -15 -7 -20 -24 -20 -13 0 -26 6 -29 13 -2 7 -8 8 -13 3 -5 -5 -4 -11 4 -13 17 -6 15 -23 -3 -23 -10 0 -15 10 -15 28 0 21 5 28 21 29 25 2 69 30 69 43 0 6 5 10 10 10 6 0 10 -9 10 -19z m2761 -8 c6 -6 12 -30 13 -54 2 -38 5 -44 32 -51 16 -5 41 -7 55 -6 25 2 59 -16 59 -32 0 -4 -13 -10 -30 -13 -28 -6 -81 -28 -154 -63 -17 -8 -60 -14 -103 -14 -77 0 -86 -7 -63 -50 22 -41 135 -71 195 -51 25 8 20 9 -27 5 -31 -3 -59 -1 -62 4 -6 9 87 32 131 32 54 0 5 -54 -58 -64 -24 -4 -54 -14 -66 -22 -12 -7 -43 -21 -69 -30 -83 -28 -107 -75 -45 -87 34 -7 116 18 85 26 -10 2 -1 5 20 6 24 1 47 -5 58 -16 21 -19 24 -45 5 -37 -8 3 -28 -9 -44 -26 -29 -29 -77 -49 -130 -53 -12 -1 -25 -5 -29 -9 -9 -10 -56 -10 -118 -2 -42 6 -46 9 -46 35 0 15 3 36 7 46 6 16 8 15 13 -6 3 -14 6 9 6 50 1 65 6 86 44 169 47 105 77 152 142 222 77 84 149 121 179 91z m264 -3 c4 -7 -3 -8 -22 -4 -38 9 -42 14 -10 14 14 0 29 -5 32 -10z m-3186 -52 c-4 -71 -7 -73 -123 -87 -59 -8 -109 -11 -113 -7 -11 11 27 74 64 107 30 26 40 29 104 29 l71 0 -3 -42z m6844 35 c3 -5 0 -24 -7 -43 -10 -32 -15 -36 -61 -42 -75 -10 -192 2 -209 21 -25 28 -24 54 4 62 34 10 268 11 273 2z m500 -15 c26 -25 21 -34 -28 -53 -61 -23 -238 -19 -274 7 -23 16 -23 18 -5 25 10 4 24 12 29 19 12 15 57 20 176 19 66 0 90 -4 102 -17z m-6623 2 c0 -5 -14 -10 -31 -10 -17 0 -28 4 -24 10 3 6 17 10 31 10 13 0 24 -4 24 -10z m5638 -2 c-3 -7 -13 -15 -24 -17 -16 -3 -17 -1 -5 13 16 19 34 21 29 4z m1548 -4 c-3 -9 -6 -18 -6 -20 0 -2 -13 -4 -29 -4 -19 0 -48 -15 -85 -44 -55 -42 -57 -43 -104 -35 -28 6 -57 6 -72 0 -41 -15 -90 -21 -90 -11 0 6 -5 10 -11 10 -5 0 -7 -5 -3 -12 5 -8 0 -9 -17 -5 -13 4 -31 7 -39 7 -9 1 -5 6 10 15 l25 14 -27 -2 c-15 -1 -26 3 -25 8 1 6 6 9 10 7 11 -3 42 14 94 54 l45 34 165 0 c146 0 164 -2 159 -16z m301 -14 c31 -11 61 -24 66 -29 18 -18 -124 -51 -217 -51 -47 0 -86 3 -86 6 0 9 24 30 66 56 67 43 93 45 171 18z m-10605 -36 c34 -18 58 -18 58 0 0 18 27 28 53 20 21 -6 20 -7 -4 -28 -14 -11 -32 -32 -41 -46 -8 -14 -43 -41 -77 -60 -38 -22 -61 -42 -61 -53 0 -15 -3 -16 -20 -7 -18 10 -20 21 -20 104 0 51 3 95 6 98 7 7 70 -9 106 -28z m2035 16 c5 -28 -99 -120 -135 -120 -29 0 -29 76 1 113 20 25 27 27 77 25 39 -2 55 -7 57 -18z m1994 0 c26 -14 24 -32 -6 -58 -31 -27 -47 -28 -63 -1 -11 17 -11 24 0 37 26 34 38 38 69 22z m3043 -22 c16 -62 -7 -108 -62 -121 -28 -7 -54 1 -46 14 3 5 0 9 -5 9 -6 0 -11 5 -11 11 0 5 4 8 9 4 5 -3 12 -1 16 5 3 5 0 10 -7 10 -10 0 -9 3 2 10 8 5 14 21 15 36 0 21 6 30 25 35 44 12 58 10 64 -13z m1390 16 c29 -11 16 -24 -24 -24 -38 0 -54 13 -27 23 18 8 33 8 51 1z m-6924 -32 c21 -17 22 -24 16 -75 -7 -51 -10 -58 -34 -63 -15 -3 -42 -10 -61 -15 -44 -11 -52 -5 -50 39 2 29 12 47 48 85 25 26 48 47 52 47 4 0 17 -8 29 -18z m5093 3 c70 -9 47 -25 -41 -27 l-77 -1 65 -6 c50 -5 59 -8 39 -13 -14 -4 -50 -3 -80 1 -32 5 -55 5 -57 0 -5 -11 -73 -11 -91 0 -25 16 60 35 154 35 l90 -1 -75 6 c-49 4 -66 8 -50 12 14 4 36 5 50 3 14 -1 46 -6 73 -9z m-473 -5 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m-453 -6 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m153 2 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m2984 -5 c3 -5 43 -12 88 -16 111 -8 174 -34 121 -48 -42 -12 -289 -5 -321 9 -40 16 -35 31 13 40 19 3 35 10 35 15 0 12 57 12 64 0z m-2764 -11 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m3240 -20 c0 -23 -4 -30 -20 -30 -25 0 -36 25 -20 45 21 25 40 18 40 -15z m-10195 10 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m719 -6 c8 -20 8 -93 0 -132 -9 -45 -52 -53 -103 -18 -20 14 -42 26 -49 26 -24 0 -13 66 16 97 32 35 45 41 93 42 25 1 39 -4 43 -15z m-1395 -29 c38 -44 44 -105 11 -105 -11 0 -20 -7 -20 -15 0 -8 -9 -24 -20 -35 -26 -26 -50 -26 -50 0 0 18 -5 20 -47 16 -27 -3 -51 -5 -55 -5 -4 -1 -6 -15 -4 -32 3 -26 1 -30 -15 -26 -24 6 -24 -2 -2 -19 10 -7 14 -16 10 -20 -4 -5 -12 -2 -17 6 -8 13 -10 12 -10 -2 0 -19 26 -48 44 -48 7 0 21 -7 32 -16 10 -8 13 -12 5 -8 -7 3 -37 6 -67 5 -50 -1 -76 10 -54 24 13 8 13 25 0 25 -6 0 -14 -10 -19 -22 -6 -17 -9 -18 -14 -5 -3 9 9 36 32 69 21 29 42 64 46 77 7 22 30 63 82 149 11 17 23 22 57 22 38 0 48 -5 75 -35z m7598 29 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m133 -4 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-4396 -6 c9 -3 16 -17 16 -30 0 -19 -5 -24 -24 -24 -13 0 -31 -3 -40 -6 -25 -10 -20 32 6 50 26 19 22 18 42 10z m2096 -15 c0 -25 -33 -22 -38 4 -2 12 3 17 17 17 15 0 21 -6 21 -21z m2656 4 c-8 -8 -155 -13 -160 -5 -2 4 34 8 80 8 47 1 83 0 80 -3z m-6399 -26 c0 -1 4 -32 8 -68 6 -61 5 -67 -19 -97 -15 -17 -36 -34 -46 -37 -11 -4 -20 -15 -20 -25 0 -42 -131 -47 -138 -5 -5 22 14 35 51 35 41 0 32 17 -14 24 -36 6 -40 9 -37 32 2 19 16 33 52 54 32 17 56 40 68 64 19 36 21 38 56 31 20 -4 38 -8 39 -8z m5573 3 c-19 -13 -30 -13 -30 0 0 6 10 10 23 10 18 0 19 -2 7 -10z m-6592 -23 c3 -12 -3 -17 -21 -17 -20 0 -24 4 -20 20 7 25 36 23 41 -3z m6387 13 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m110 0 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m4823 -22 c-3 -23 -50 -56 -82 -57 -12 -1 -16 -6 -13 -15 4 -11 1 -13 -10 -9 -10 4 -14 2 -10 -4 17 -28 -78 -55 -113 -33 -9 5 -19 5 -26 -1 -7 -5 -56 -8 -109 -7 l-98 3 33 32 c66 65 109 78 263 80 77 1 142 5 145 9 4 4 -1 4 -10 1 -12 -4 -15 -2 -11 9 3 7 14 14 25 14 14 0 19 -6 16 -22z m-11808 -7 c0 -21 -39 -50 -76 -57 -21 -4 -24 -1 -24 29 0 43 5 47 57 47 35 0 43 -3 43 -19z m12044 -2 c31 -25 33 -42 6 -69 -16 -16 -33 -20 -82 -19 -96 1 -103 7 -63 51 59 63 93 73 139 37z m-10232 -52 c8 -70 -1 -107 -29 -118 -42 -16 -106 -10 -143 12 l-35 21 40 34 c59 51 126 94 145 94 13 0 19 -11 22 -43z m9438 4 c0 -25 -5 -30 -32 -36 -18 -4 -40 -14 -50 -22 -12 -11 -55 -16 -170 -19 -148 -5 -154 -5 -182 17 l-28 22 48 26 c45 23 64 26 214 31 91 4 173 7 183 8 13 2 17 -5 17 -27z m-11240 -6 c0 -8 -7 -15 -15 -15 -16 0 -20 12 -8 23 11 12 23 8 23 -8z m464 9 c37 -14 0 -105 -50 -123 -44 -16 -130 -14 -147 3 -12 12 -12 22 -3 50 6 19 17 37 26 40 8 3 31 12 50 20 38 15 99 20 124 10z m560 0 c33 -13 17 -34 -26 -34 l-41 0 23 20 c26 23 23 22 44 14z m1651 -3 c-7 -12 -64 -25 -72 -17 -7 7 35 24 60 25 10 1 16 -3 12 -8z m4988 -2 c12 -7 23 -13 25 -14 2 -2 -9 -15 -23 -29 -26 -26 -27 -26 -170 -24 -80 2 -145 5 -145 8 0 15 19 28 48 35 17 3 32 10 32 15 0 19 200 26 233 9z m2985 -11 c2 -10 -2 -18 -8 -18 -7 0 -25 -11 -40 -23 -25 -21 -41 -25 -149 -30 -125 -6 -171 2 -171 30 0 7 8 16 18 19 9 3 28 11 42 17 51 23 68 25 185 24 105 -2 120 -4 123 -19z m-515 -8 c5 -5 6 -17 2 -29 -4 -15 -23 -26 -62 -37 -60 -17 -77 -18 -136 -8 -20 3 -43 2 -50 -4 -18 -14 -204 -26 -212 -13 -10 17 26 58 65 75 65 29 366 41 393 16z m-10223 -50 c0 -22 -4 -40 -10 -40 -5 0 -10 18 -10 40 0 22 5 40 10 40 6 0 10 -18 10 -40z m785 14 c24 -37 12 -82 -28 -99 -18 -7 -40 -10 -52 -5 -11 4 -26 5 -32 3 -7 -3 -13 0 -13 5 0 5 -3 23 -6 39 -13 67 94 114 131 57z m6265 -4 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m-5948 -19 c19 -7 24 -17 26 -48 2 -36 -1 -41 -32 -58 l-35 -19 -31 29 c-65 62 -15 129 72 96z m1076 -42 c-4 -28 -35 -38 -44 -14 -8 19 26 59 39 46 5 -5 7 -19 5 -32z m4822 31 c-20 -13 -40 -13 -40 0 0 6 12 10 28 10 21 0 24 -2 12 -10z m4549 -36 c38 -8 39 -15 4 -52 -43 -46 -91 -66 -178 -73 -44 -4 -114 -11 -155 -15 -62 -5 -82 -3 -109 11 -21 10 -30 20 -24 26 5 5 52 32 104 59 l94 49 116 1 c64 0 131 -3 148 -6z m-10264 -24 c3 -5 -1 -10 -9 -10 -9 0 -16 5 -16 10 0 6 4 10 9 10 6 0 13 -4 16 -10z m10630 -38 c7 -18 12 -13 -59 -46 -79 -35 -154 -36 -193 -1 -24 21 -26 26 -13 35 8 5 24 10 34 10 10 0 24 7 30 15 6 8 39 18 76 23 68 9 112 -4 125 -36z m-1550 22 c106 -8 117 -12 81 -31 -16 -9 -39 -24 -50 -34 -11 -11 -26 -19 -33 -19 -7 0 -13 -7 -13 -15 0 -18 -89 -21 -167 -6 -26 5 -65 12 -85 16 -63 10 -96 64 -40 66 15 0 52 9 82 20 37 12 70 17 100 14 25 -3 81 -8 125 -11z m636 0 c14 -17 5 -41 -22 -56 -64 -36 -135 -59 -163 -54 -22 4 -27 3 -16 -4 10 -7 -37 -10 -147 -10 -151 0 -163 1 -163 18 0 25 45 62 75 62 14 0 25 3 25 8 0 15 47 36 95 42 28 4 107 7 176 8 105 2 129 -1 140 -14z m-10091 -54 c0 -45 -21 -68 -40 -45 -7 8 -23 15 -36 15 -38 0 -30 36 14 64 45 29 62 20 62 -34z m11235 48 c8 -23 -11 -83 -25 -80 -8 2 -10 -3 -7 -13 5 -12 -3 -15 -48 -15 -30 0 -55 3 -55 7 0 3 8 23 18 44 23 50 105 90 117 57z m-4740 -15 c20 -15 20 -15 -2 -10 -18 4 -23 1 -23 -14 0 -24 -81 -63 -122 -60 -16 2 -28 -2 -28 -8 0 -7 -36 -11 -104 -11 -107 0 -116 4 -116 44 0 17 44 36 85 36 18 0 35 5 37 12 5 14 148 14 157 0 3 -4 17 -5 31 -1 l25 7 -27 1 c-16 1 -28 6 -28 11 0 16 93 11 115 -7z m-7490 -22 c3 -5 1 -12 -5 -16 -5 -3 -10 1 -10 9 0 18 6 21 15 7z m1347 -26 c24 -32 15 -50 -32 -64 -45 -13 -83 -2 -99 28 -10 17 -6 23 29 44 47 28 78 25 102 -8z m6497 21 c14 -2 27 -8 29 -14 2 -8 -26 -11 -93 -11 -97 0 -125 4 -125 19 0 19 34 20 189 6z m-7525 -13 c21 -11 36 -25 36 -37 0 -12 -5 -16 -16 -12 -8 3 -12 2 -9 -4 9 -14 -71 -13 -98 1 -33 18 -33 18 -2 44 36 29 44 30 89 8z m1614 2 c2 -2 1 -12 -2 -22 -5 -16 -131 -83 -157 -83 -15 0 -10 57 7 74 8 9 28 16 44 16 16 0 35 7 42 15 11 13 54 13 66 0z m-1798 -5 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-259 -22 c33 -9 37 -13 26 -26 -10 -13 -9 -15 6 -9 23 9 107 -14 107 -28 0 -6 -6 -19 -13 -30 -16 -21 -54 -17 -113 11 -21 10 -44 14 -60 10 -20 -5 -37 0 -66 21 l-40 27 22 18 c26 21 76 23 131 6z m1792 -21 c-3 -48 -21 -60 -77 -53 -49 5 -68 19 -63 45 3 18 64 39 107 38 32 -2 35 -4 33 -30z m-1133 -2 c9 -10 9 -15 1 -15 -6 0 -11 -4 -11 -10 0 -5 7 -7 15 -4 8 4 15 1 15 -6 0 -9 -66 -10 -109 -1 -3 1 6 12 19 26 27 28 52 32 70 10z m411 -34 c0 -9 2 -26 5 -37 3 -18 -3 -23 -34 -30 -63 -14 -86 -12 -115 8 -21 15 -26 25 -21 41 9 30 14 32 93 33 59 1 71 -2 72 -15z m7379 3 c0 -2 -12 -4 -27 -4 -21 0 -24 3 -14 9 13 8 41 5 41 -5z m140 9 c-1 -21 -20 -31 -73 -37 -53 -7 -58 -6 -55 11 2 10 10 21 18 25 21 9 110 10 110 1z m-7268 -33 c9 0 29 -11 44 -23 l27 -24 -22 -22 c-18 -18 -31 -21 -69 -19 -45 3 -47 4 -50 36 -5 49 4 65 31 58 12 -3 30 -6 39 -6z m7106 3 c-10 -2 -26 -2 -35 0 -10 3 -2 5 17 5 19 0 27 -2 18 -5z m1694 -10 c10 -9 18 -20 18 -25 0 -4 -37 -8 -82 -7 -60 0 -75 3 -56 9 15 4 35 15 44 24 20 21 53 20 76 -1z m252 1 c25 -24 19 -34 -19 -34 -27 0 -35 4 -35 18 0 35 28 43 54 16z m-9986 -14 c15 -25 12 -26 -75 -33 -61 -5 -73 1 -73 33 0 10 34 16 95 19 31 1 43 -4 53 -19z m7573 1 c-11 -7 -10 -10 5 -14 16 -4 16 -5 -3 -6 -23 -1 -30 9 -16 22 3 4 11 7 17 7 6 0 5 -4 -3 -9z m-6193 -32 c7 -12 12 -22 10 -22 -2 -1 -31 -28 -64 -60 -57 -54 -62 -57 -86 -46 -22 10 -26 18 -26 53 1 22 -2 51 -6 63 -7 23 -11 23 129 31 21 1 34 -4 43 -19z m-1078 -8 c-1 -15 -28 -41 -43 -41 -26 0 -67 22 -67 36 0 7 14 14 33 16 38 4 77 -2 77 -11z m10646 -6 c2 -18 -3 -25 -17 -25 -10 0 -19 -4 -19 -9 0 -5 -19 -16 -42 -26 -39 -15 -45 -15 -85 0 -30 12 -43 22 -43 36 0 10 1 19 3 19 1 0 20 7 42 15 22 8 67 14 100 15 57 0 60 -1 61 -25z m346 1 c9 -13 -16 -24 -59 -25 -62 -2 -83 20 -35 37 31 11 83 4 94 -12z m132 9 c7 -19 -35 -37 -78 -33 -45 5 -42 24 6 35 61 15 65 15 72 -2z m250 0 c-4 -8 -11 -15 -18 -15 -6 0 -4 -5 4 -10 11 -7 7 -10 -18 -10 -20 0 -31 4 -27 10 3 6 -1 10 -9 10 -9 0 -16 5 -16 11 0 7 11 9 28 6 15 -3 34 -2 42 4 20 12 20 11 14 -6z m-1256 -1 c55 -15 -3 -74 -72 -74 -34 0 -36 2 -36 34 0 19 6 37 13 39 17 8 68 8 95 1z m247 -14 c3 -5 2 -10 -4 -10 -5 0 -13 5 -16 10 -3 6 -2 10 4 10 5 0 13 -4 16 -10z m-505 -15 l65 7 -37 -26 c-43 -30 -94 -34 -144 -10 -50 24 -45 44 8 32 23 -5 72 -6 108 -3z m486 -20 c1 -10 -6 -15 -22 -15 -26 0 -32 18 -12 38 13 13 30 2 34 -23z m-1306 14 c22 -1 20 -3 -15 -20 -44 -21 -115 -26 -115 -8 0 23 34 40 70 34 19 -2 46 -5 60 -6z m-8793 -21 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z m6071 15 c-10 -2 -26 -2 -35 0 -10 3 -2 5 17 5 19 0 27 -2 18 -5z m2987 -13 c0 -17 -85 -21 -122 -6 -42 17 -23 26 50 24 55 -2 72 -6 72 -18z m209 5 c4 -12 -2 -15 -28 -15 -47 0 -72 10 -54 21 22 14 75 10 82 -6z m1951 5 c4 -6 -9 -10 -32 -9 -38 1 -38 1 -8 9 17 4 31 8 32 9 1 0 5 -3 8 -9z m-10655 -50 l0 -50 -44 0 c-24 0 -48 6 -54 13 -11 13 -9 15 51 74 6 7 20 12 30 13 14 0 17 -9 17 -50z m5566 35 c-22 -16 -48 -19 -86 -7 -21 6 -17 8 25 13 83 10 82 10 61 -6z m-7120 -19 c17 -13 18 -16 3 -31 -8 -9 -23 -13 -31 -10 -22 9 -32 37 -16 47 18 11 21 10 44 -6z m12142 -8 c24 -20 -8 -28 -120 -28 -107 0 -130 7 -105 32 16 16 204 13 225 -4z m-5630 -7 c3 -10 0 -12 -12 -8 -9 4 -14 3 -11 -2 8 -14 -9 -21 -24 -11 -12 6 -11 11 0 24 16 18 40 17 47 -3z m5679 13 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-667 -14 c12 -7 11 -13 -10 -34 -23 -25 -52 -32 -84 -20 -24 9 -20 20 17 43 35 23 54 26 77 11z m170 0 c0 -5 -9 -10 -20 -10 -11 0 -23 0 -27 -1 -4 0 -9 4 -11 10 -2 6 10 11 27 11 17 0 31 -4 31 -10z m-2535 -29 c-3 -6 -11 -8 -17 -5 -6 4 -5 9 3 15 16 10 23 4 14 -10z m2062 3 c20 -4 21 -7 11 -24 -11 -17 -24 -20 -85 -20 -41 0 -74 4 -74 10 -5 30 -1 35 26 41 28 6 71 4 122 -7z m-1667 -8 c0 -21 27 -27 44 -11 12 12 47 15 170 15 159 0 189 -7 147 -36 -12 -8 -21 -22 -21 -30 0 -11 -21 -14 -117 -13 -114 1 -328 14 -289 17 29 3 10 16 -27 20 -18 1 -92 4 -164 6 -73 1 -136 6 -140 9 -3 4 9 13 28 21 48 21 369 23 369 2z m540 -7 c13 -23 -2 -49 -26 -49 -19 0 -18 17 2 28 14 8 14 10 0 21 -13 11 -17 9 -26 -13 -5 -14 -8 -31 -6 -38 1 -7 1 -10 -1 -6 -2 4 -11 4 -19 1 -8 -3 -14 0 -14 6 0 7 7 14 15 17 8 4 12 11 8 17 -7 11 23 37 44 37 7 0 17 -9 23 -21z m421 2 l23 -19 -44 -20 c-55 -25 -127 -36 -169 -27 -38 8 -43 44 -8 68 34 24 167 23 198 -2z m409 9 c13 -9 12 -13 -9 -30 -28 -24 -57 -26 -65 -4 -13 35 38 58 74 34z m-250 -20 c0 -5 -7 -10 -15 -10 -8 0 -15 5 -15 10 0 6 7 10 15 10 8 0 15 -4 15 -10z m1644 -63 c14 -38 -9 -74 -53 -88 -131 -39 -202 -39 -165 2 7 8 14 21 14 27 0 7 8 12 18 12 9 0 49 18 87 40 39 22 75 38 80 36 6 -1 14 -15 19 -29z m-316 -3 c19 -3 32 -11 32 -19 0 -8 -4 -15 -10 -15 -5 0 -10 -9 -10 -19 0 -34 -72 -59 -204 -71 -65 -6 -129 -16 -143 -21 -13 -5 -49 -9 -78 -9 -43 0 -56 4 -65 19 -15 29 -13 64 4 58 8 -3 32 3 53 14 125 65 267 86 421 63z m-10440 -11 c-2 -11 -14 -19 -31 -21 -22 -3 -27 1 -27 17 0 17 6 21 31 21 24 0 30 -4 27 -17z m9439 -38 c4 -29 -29 -63 -84 -86 -26 -11 -58 -25 -71 -32 -19 -9 -26 -7 -43 9 -29 30 -17 78 24 92 18 6 50 18 72 26 54 21 99 17 102 -9z m-4632 -5 c1 -22 -15 -30 -57 -30 -39 0 -53 12 -44 36 8 21 101 16 101 -6z m3096 7 c-1 -12 -15 -9 -19 4 -3 6 1 10 8 8 6 -3 11 -8 11 -12z m54 3 c3 -5 -1 -10 -9 -10 -9 0 -16 5 -16 10 0 6 4 10 9 10 6 0 13 -4 16 -10z m1239 -5 c17 -13 17 -15 2 -30 -9 -9 -16 -21 -16 -26 0 -5 -12 -14 -27 -21 -34 -13 -99 -44 -136 -64 -17 -9 -35 -13 -45 -8 -14 6 -13 8 8 12 35 6 65 28 50 37 -7 4 -17 2 -23 -4 -6 -6 -22 -11 -36 -10 l-26 1 27 9 c15 6 53 35 85 65 62 58 98 68 137 39z m543 -5 c-3 -11 -1 -20 4 -20 5 0 -13 -20 -41 -45 -39 -34 -59 -45 -85 -45 -74 0 -85 24 -28 67 46 35 101 61 132 62 19 1 22 -3 18 -19z m-1007 3 c0 -3 -18 -30 -40 -59 -48 -63 -86 -79 -168 -69 -31 4 -60 9 -64 12 -10 5 17 32 62 64 49 34 210 74 210 52z m-9560 -34 c0 -15 -4 -19 -16 -15 -9 3 -18 6 -20 6 -2 0 -4 7 -4 15 0 8 9 15 20 15 14 0 20 -7 20 -21z m9689 -10 c-23 -20 -59 -26 -59 -10 0 15 29 33 45 27 8 -3 15 -1 15 5 0 6 5 7 10 4 7 -4 2 -14 -11 -26z m-749 7 c0 -13 -20 -36 -31 -36 -12 0 -40 31 -34 39 8 13 65 11 65 -3z m210 -11 c10 -12 10 -16 -1 -20 -56 -20 -103 -35 -110 -35 -10 0 -12 31 -3 54 8 21 96 22 114 1z m-10416 -4 c3 -5 43 -12 88 -16 46 -4 95 -14 110 -21 15 -8 45 -14 67 -14 22 0 43 -4 46 -10 3 -5 15 -10 26 -10 12 0 19 -5 16 -12 -6 -19 -339 -11 -350 8 -4 8 -21 14 -37 14 -15 0 -36 3 -45 6 -14 6 -12 11 11 35 27 29 58 37 68 20z m1990 -17 c25 -10 19 -49 -9 -64 -20 -11 -27 -11 -40 0 -21 17 -19 57 3 63 27 7 29 7 46 1z m8101 -24 c0 -11 -14 -16 -57 -18 -46 -2 -58 0 -58 12 0 20 17 25 70 23 32 -1 45 -6 45 -17z m-3196 -29 c16 -10 -46 -22 -69 -12 -13 5 -4 8 50 20 3 0 11 -3 19 -8z m4391 -1 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m45 -10 c3 -5 -3 -10 -14 -10 -12 0 -21 5 -21 10 0 6 6 10 14 10 8 0 18 -4 21 -10z m-11325 -26 c0 -13 -35 -33 -57 -34 -16 0 -23 -6 -23 -19 0 -24 23 -32 89 -30 33 2 57 -3 68 -13 21 -18 77 -38 105 -38 11 0 26 -7 34 -15 9 -8 30 -15 48 -15 18 0 57 -4 87 -10 30 -5 97 -17 149 -26 52 -9 106 -22 120 -29 14 -7 50 -15 82 -19 69 -7 86 -14 98 -35 20 -38 -338 -2 -489 49 -31 11 -87 24 -126 30 -38 6 -88 18 -109 26 -22 9 -85 19 -140 24 -56 4 -125 17 -155 27 l-54 20 33 31 c25 24 42 32 69 32 47 0 97 15 117 34 15 16 54 22 54 10z m10551 -54 c13 -7 26 -14 28 -16 7 -6 -24 -30 -86 -68 -131 -80 -195 -84 -222 -14 -8 22 -6 27 15 37 14 6 30 11 36 11 5 0 27 13 47 29 62 49 116 55 182 21z m1845 21 c-3 -4 5 -6 17 -4 23 5 56 -21 40 -30 -26 -14 -62 -15 -73 -2 -13 16 -7 45 10 45 6 0 9 -4 6 -9z m-1410 -13 c11 -12 -17 -68 -35 -68 -9 0 -29 -14 -45 -30 -16 -17 -37 -30 -47 -30 -17 0 -55 47 -45 57 3 4 -3 12 -14 20 -12 8 -17 20 -13 31 4 13 2 13 -10 -3 -9 -11 -17 -25 -17 -31 0 -6 -22 -22 -48 -36 -39 -20 -50 -22 -60 -12 -16 17 -15 24 2 24 8 0 16 7 20 15 3 8 33 28 68 45 58 28 70 30 150 28 47 -2 90 -6 94 -10z m958 -7 c16 -18 15 -20 -14 -45 -34 -28 -51 -32 -81 -16 -26 14 -24 44 4 63 30 22 70 21 91 -2z m214 -3 c3 -14 -3 -18 -26 -18 -30 0 -51 24 -29 34 23 9 52 1 55 -16z m-17529 -1 c6 -8 8 -16 5 -20 -10 -9 -34 4 -34 19 0 18 14 18 29 1z m15611 3 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z m897 -6 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-1189 -19 c20 -7 14 -35 -11 -44 -13 -5 -61 -7 -108 -4 -75 5 -86 3 -108 -16 -33 -29 -111 -30 -111 -2 0 21 26 31 87 31 27 0 45 5 50 15 15 25 142 38 201 20z m1557 1 c17 -12 17 -15 4 -28 -22 -23 -58 -40 -69 -33 -18 11 -11 43 12 59 27 19 29 19 53 2z m-10975 -21 c69 -10 129 -21 133 -25 5 -4 1 -15 -9 -24 -13 -13 -28 -16 -71 -12 -57 5 -120 22 -138 37 -6 4 -49 9 -95 11 -53 2 -85 7 -87 15 -9 26 69 25 267 -2z m9683 6 c8 -32 -41 -71 -89 -71 -48 0 -61 8 -69 41 -6 23 -3 28 22 37 15 6 51 11 79 11 43 1 53 -2 57 -18z m887 5 c0 -8 -5 -18 -10 -21 -6 -4 -8 -11 -5 -16 4 -5 -10 -16 -29 -25 -31 -15 -36 -16 -50 -1 -21 20 -20 27 2 27 9 0 31 11 47 25 35 28 45 31 45 11z m77 8 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-9191 -70 c-5 -13 -10 -14 -18 -6 -6 6 -8 18 -4 28 5 13 10 14 18 6 6 -6 8 -18 4 -28z m-1071 -34 c-21 -24 -95 -29 -95 -7 0 22 11 27 63 27 49 0 50 0 32 -20z m963 -2 c-3 -25 -42 -36 -67 -19 -21 13 7 40 42 41 24 0 28 -4 25 -22z m10282 -42 c0 -22 -44 -54 -80 -58 -29 -2 -35 0 -38 18 -2 14 8 30 28 47 26 23 34 25 60 15 17 -5 30 -15 30 -22z m-11053 14 c27 0 3 -18 -33 -24 -23 -5 -41 -3 -50 5 -21 17 2 31 40 24 16 -3 35 -5 43 -5z m416 3 c11 -10 -14 -33 -35 -33 -11 0 -26 6 -34 14 -12 13 -10 15 18 19 18 2 36 5 39 5 3 1 9 -1 12 -5z m7841 1 c25 -10 19 -30 -13 -43 -31 -14 -177 1 -195 19 -16 16 0 19 161 28 17 1 38 -1 47 -4z m3086 -9 c7 -9 10 -18 7 -22 -8 -7 -37 15 -37 28 0 14 16 11 30 -6z m-742 -33 c2 -24 -1 -34 -15 -39 -24 -10 -111 -8 -121 1 -9 10 54 64 82 69 41 8 51 3 54 -31z m-10362 -2 c8 0 14 -7 14 -15 0 -10 -10 -15 -29 -15 -16 0 -43 -3 -60 -6 -22 -5 -31 -3 -31 6 0 22 33 41 64 35 16 -3 35 -5 42 -5z m9704 3 c-1 -20 -18 -31 -54 -34 -45 -5 -61 16 -24 30 28 12 78 14 78 4z m421 -2 c4 -1 9 -10 12 -21 4 -17 0 -20 -28 -20 -35 0 -50 12 -42 34 4 11 17 12 58 7z m-9827 -7 c27 -10 18 -23 -20 -30 -26 -5 -39 -3 -45 7 -12 21 31 36 65 23z m8839 0 c11 -11 -5 -34 -24 -34 -10 0 -19 2 -19 4 0 2 -3 11 -6 20 -5 12 0 16 18 16 14 0 27 -3 31 -6z m228 -1 c-11 -5 -11 -7 0 -14 10 -6 8 -9 -7 -9 -12 0 -24 7 -28 15 -4 11 2 15 22 14 15 0 21 -3 13 -6z m529 -8 c0 -16 -35 -21 -44 -6 -8 12 4 21 26 21 10 0 18 -7 18 -15z m-10377 -52 c-13 -2 -33 -2 -45 0 -13 2 -3 4 22 4 25 0 35 -2 23 -4z m8742 -33 c0 -24 -3 -25 -65 -28 -113 -5 -155 11 -112 44 12 10 42 13 97 11 78 -2 80 -3 80 -27z m546 20 c20 0 7 -31 -17 -40 -41 -16 -114 -13 -114 5 0 8 -4 15 -10 15 -5 0 -10 4 -10 10 0 9 101 19 128 13 8 -2 18 -3 23 -3z m253 -19 c15 -16 12 -19 -39 -35 -63 -20 -75 -16 -75 24 0 22 5 29 23 32 37 5 75 -3 91 -21z m504 13 c32 -22 28 -30 -25 -48 -67 -23 -73 -21 -73 18 0 28 4 35 23 39 42 8 53 7 75 -9z m-1768 -3 c0 -18 -28 -31 -83 -37 -47 -6 -61 -4 -77 11 -11 10 -20 22 -20 27 0 4 41 8 90 8 50 0 90 -4 90 -9z m754 0 c10 -16 -43 -58 -89 -71 -42 -12 -46 -11 -62 9 -10 12 -30 22 -45 23 -32 3 -37 22 -10 37 21 13 199 14 206 2z m1464 -14 c2 -11 -3 -17 -16 -17 -23 0 -37 26 -19 34 19 7 32 1 35 -17z m-785 6 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m15 -28 c-24 -12 -38 -10 -38 5 0 5 6 7 14 4 8 -3 17 0 21 5 3 6 11 8 17 5 5 -3 -1 -12 -14 -19z m512 21 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m-570 -16 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m-2582 -17 c2 -8 -5 -13 -17 -13 -21 0 -35 13 -24 24 10 10 36 3 41 -11z m4294 -13 c-1 -14 -17 -38 -36 -55 -82 -72 -111 -95 -120 -95 -5 0 -29 -9 -53 -21 -54 -26 -87 -22 -91 11 -2 21 7 31 61 62 35 21 72 46 82 56 55 49 100 72 140 68 15 -1 19 -7 17 -26z m-4063 -19 c58 -16 21 -47 -51 -42 -20 1 -57 -6 -81 -17 -64 -28 -94 -32 -164 -24 -43 6 -63 5 -63 -2 0 -6 -7 -2 -15 8 -17 22 -12 35 13 34 21 0 113 16 202 36 71 15 122 18 159 7z m732 -13 c4 -6 8 -5 11 2 2 8 32 15 81 18 77 5 77 5 77 -21 0 -15 -9 -31 -25 -41 -26 -17 -95 -22 -95 -7 0 5 -38 12 -84 16 -99 8 -121 18 -91 41 15 11 32 13 70 8 28 -3 53 -11 56 -16z m506 6 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-29 -33 c32 -17 29 -43 -4 -39 -32 4 -50 28 -40 54 4 11 10 14 14 8 4 -6 17 -16 30 -23z m2052 2 c0 -11 -69 -82 -107 -108 -29 -21 -166 -90 -178 -90 -5 0 -13 -4 -17 -10 -4 -5 -17 -4 -32 5 -30 16 -35 34 -7 25 14 -4 33 8 69 43 27 26 54 57 60 69 26 48 212 106 212 66z m-2882 -19 c13 -9 22 -17 20 -19 -6 -7 -258 8 -258 15 0 3 19 11 43 17 54 14 165 7 195 -13z m1180 8 c7 -21 -43 -36 -118 -36 -72 0 -158 19 -145 32 20 21 256 24 263 4z m1466 12 c26 -10 20 -44 -8 -44 -13 0 -46 -18 -74 -40 -27 -22 -55 -40 -61 -40 -6 0 -11 -11 -11 -25 0 -16 -6 -25 -15 -25 -9 0 -33 -9 -55 -20 -39 -20 -85 -27 -78 -12 32 66 43 81 68 86 15 3 54 28 86 57 75 65 107 79 148 63z m606 -4 c0 -5 -9 -10 -19 -10 -11 0 -23 -5 -27 -11 -5 -9 1 -10 20 -5 15 4 26 2 26 -3 0 -14 -36 -32 -52 -26 -8 3 -18 -6 -25 -26 -8 -21 -17 -30 -27 -26 -9 4 -13 1 -10 -7 7 -17 -25 -42 -65 -51 -29 -6 -33 -5 -28 9 4 10 3 15 -3 11 -6 -3 -10 0 -10 7 0 19 48 68 66 68 9 0 29 9 45 21 16 11 37 18 45 15 10 -4 13 -2 8 6 -4 6 1 17 11 25 22 15 45 17 45 3z m-1927 -7 c11 -10 -13 -33 -34 -33 -24 0 -25 16 -1 29 20 12 27 13 35 4z m-10818 -25 c6 -13 24 -26 45 -31 l35 -9 -25 -14 c-23 -12 -21 -13 24 -7 39 5 47 3 41 -7 -5 -8 -3 -11 6 -8 23 9 50 -11 67 -50 10 -21 26 -38 37 -40 11 -2 22 -7 25 -11 3 -4 31 -18 62 -32 32 -13 58 -27 58 -31 0 -3 -18 -9 -40 -13 -38 -6 -62 -3 -105 14 -59 24 -99 31 -173 31 l-82 0 0 44 c0 36 -4 46 -20 51 -11 3 -20 10 -20 15 0 4 -16 11 -35 14 -19 4 -38 14 -43 22 -8 14 -16 15 -68 3 -49 -11 -55 -14 -34 -20 20 -6 21 -7 5 -8 -11 0 -26 3 -33 8 -9 5 7 15 50 30 35 13 79 29 98 36 30 11 92 30 110 34 3 1 10 -9 15 -21z m10115 12 c0 -5 -7 -7 -15 -4 -8 4 -15 8 -15 10 0 2 7 4 15 4 8 0 15 -4 15 -10z m1480 -49 c-11 -38 -37 -66 -78 -84 -15 -7 -46 -25 -68 -40 -35 -24 -50 -28 -94 -25 -37 2 -56 8 -64 20 -18 29 60 99 142 129 85 30 155 47 164 39 4 -3 3 -21 -2 -39z m-300 10 c0 -21 -45 -62 -81 -72 -21 -7 -39 -16 -39 -21 0 -4 -14 -8 -30 -8 -24 0 -30 4 -28 18 4 22 23 42 41 42 7 0 17 3 21 8 7 7 93 40 109 41 4 1 7 -3 7 -8z m1238 -5 c3 -3 -9 -6 -26 -6 -18 0 -32 4 -32 9 0 9 48 6 58 -3z m-3965 -3 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m2499 -27 c4 -20 -1 -27 -23 -37 -16 -6 -29 -17 -29 -24 0 -7 -23 -18 -51 -25 -35 -9 -47 -15 -38 -21 10 -6 7 -9 -11 -8 -26 0 -74 17 -53 18 6 1 13 11 15 22 2 12 10 25 18 29 8 4 42 21 75 38 73 38 91 40 97 8z m-2455 8 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m348 -19 c37 -22 50 -24 166 -25 113 0 133 -3 183 -25 96 -42 78 -51 -116 -58 -95 -4 -215 -3 -267 2 -109 9 -131 6 -131 -20 0 -11 -4 -19 -10 -19 -5 0 -10 -5 -10 -12 0 -9 3 -9 12 0 14 14 118 16 118 2 0 -5 8 -10 18 -10 33 -1 -10 -17 -65 -25 -62 -8 -163 10 -163 30 0 7 -5 15 -12 17 -7 3 -9 11 -4 24 6 12 10 15 13 7 5 -15 83 -18 83 -3 0 5 11 12 25 16 14 4 24 11 22 18 -3 7 -47 11 -138 11 -111 0 -134 3 -136 15 -6 33 14 45 72 43 33 -2 54 1 50 6 -12 20 35 30 140 31 100 0 114 -2 150 -25z m655 19 c0 -3 -7 -12 -15 -21 -11 -11 -43 -17 -106 -20 -88 -4 -90 -4 -80 16 6 11 21 22 33 24 35 7 168 8 168 1z m178 -10 c27 -18 28 -32 5 -50 -21 -16 -63 -18 -63 -4 0 6 -6 10 -14 10 -16 0 -66 38 -66 51 0 16 113 10 138 -7z m452 1 c0 -18 16 -19 77 -3 39 9 51 8 79 -5 19 -10 49 -25 68 -34 35 -17 39 -33 8 -33 -10 0 -34 -11 -54 -25 -41 -28 -91 -32 -179 -14 -30 6 -97 11 -149 11 -79 -1 -102 3 -134 21 -45 25 -56 44 -29 54 10 4 24 15 31 25 12 16 29 18 148 18 112 0 134 -2 134 -15z m610 -1 c2 -3 -2 -10 -10 -15 -11 -8 -9 -9 10 -4 19 6 22 5 13 -5 -12 -13 -73 -5 -73 11 0 5 -4 9 -10 9 -21 0 -9 -20 15 -26 14 -3 25 -8 25 -11 0 -12 -65 -64 -68 -54 -2 6 -8 11 -14 11 -6 0 -8 -6 -5 -14 4 -10 -12 -15 -72 -20 -76 -7 -122 1 -136 24 -8 13 33 49 56 50 9 0 19 3 23 7 3 4 37 17 74 29 48 17 81 22 117 18 27 -3 52 -8 55 -10z m1604 -2 c-6 -4 -13 -15 -17 -24 -3 -10 -11 -18 -17 -18 -6 0 -8 5 -4 12 4 7 3 8 -4 4 -7 -4 -12 -14 -12 -23 0 -10 -6 -13 -16 -9 -12 5 -14 1 -9 -17 5 -14 4 -19 -3 -12 -5 6 -12 24 -16 40 -4 18 -3 25 2 17 7 -10 11 -10 22 3 7 8 9 15 4 16 -5 0 0 4 11 9 25 11 74 13 59 2z m-684 -30 c0 -14 -36 -43 -44 -35 -4 4 -4 0 -1 -9 8 -19 2 -23 -47 -32 -47 -8 -52 10 -8 27 17 6 30 17 30 24 0 12 13 17 33 14 4 0 7 4 7 9 0 6 7 10 15 10 8 0 15 -4 15 -8z m-11950 -17 c10 -12 10 -15 -1 -15 -26 0 -59 12 -59 21 0 15 47 10 60 -6z m-193 -1 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m12722 -49 c0 -14 -2 -16 -6 -5 -3 8 -10 18 -16 21 -5 4 -6 12 -2 19 10 16 25 -6 24 -35z m-1259 15 c0 -5 -15 -10 -32 -9 -28 0 -30 2 -13 9 28 12 45 12 45 0z m-1490 -16 c0 -8 -5 -12 -10 -9 -6 4 -8 11 -5 16 9 14 15 11 15 -7z m-9933 0 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m8593 -12 c0 -5 40 -6 90 -4 l90 4 -2 -27 -3 -27 -91 7 c-72 5 -99 3 -129 -9 -57 -24 -85 -21 -85 9 0 14 0 28 0 33 -1 7 52 18 103 21 15 0 27 -3 27 -7z m2797 2 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-11292 -24 c3 -6 -4 -10 -17 -10 -18 0 -20 2 -8 10 19 12 18 12 25 0z m985 0 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m11978 3 c-10 -2 -28 -2 -40 0 -13 2 -5 4 17 4 22 1 32 -1 23 -4z m-3148 -29 c0 -31 23 -28 28 4 2 12 10 22 18 22 12 0 12 -4 -1 -30 -14 -28 -19 -30 -68 -29 -51 1 -51 1 -19 12 25 8 31 14 27 29 -4 10 -2 18 4 18 6 0 11 -12 11 -26z m3131 -10 c12 -7 -1 -34 -16 -34 -7 0 -24 -9 -38 -20 -32 -26 -59 -25 -83 1 -19 21 -19 21 11 45 41 33 82 35 126 8z m-3171 6 c0 -5 -10 -10 -22 -10 -19 0 -20 2 -8 10 19 13 30 13 30 0z m389 1 c8 -5 11 -15 8 -23 -4 -11 -20 -13 -68 -10 -35 2 -68 8 -73 13 -23 21 102 39 133 20z m321 -13 c34 -37 26 -54 -26 -62 -64 -8 -172 -8 -177 2 -3 4 -2 21 0 39 l5 32 82 4 c44 1 84 4 88 5 4 1 16 -8 28 -20z m1495 2 c-19 -8 -19 -9 3 -9 12 -1 22 -7 22 -16 0 -17 -35 -38 -53 -32 -7 2 -17 -3 -24 -12 -10 -14 -13 -14 -32 3 -19 17 -21 17 -21 3 0 -10 5 -17 10 -17 6 0 10 -5 10 -10 0 -6 -8 -5 -20 2 -24 15 -41 1 -19 -16 14 -10 15 -15 4 -29 -7 -9 -23 -17 -36 -16 -24 0 -24 0 -3 9 33 13 44 35 13 26 -13 -4 -37 -10 -54 -12 -23 -3 -21 -1 8 7 24 7 43 20 49 35 12 26 66 64 90 64 9 0 21 7 28 15 7 8 20 15 29 14 12 0 11 -2 -4 -9z m156 -26 c11 -14 10 -18 -6 -30 -10 -8 -24 -14 -31 -14 -12 0 -40 28 -33 33 2 1 13 7 24 14 27 16 30 16 46 -3z m268 -8 l23 -24 -31 -18 c-17 -10 -31 -22 -31 -26 0 -13 -77 -9 -88 5 -13 16 1 35 48 65 44 28 51 27 79 -2z m-12214 4 c3 -5 -1 -10 -9 -10 -9 0 -16 5 -16 10 0 6 4 10 9 10 6 0 13 -4 16 -10z m8584 -15 c12 -12 11 -15 -10 -20 -29 -7 -101 16 -107 35 -6 18 97 5 117 -15z m44 18 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z m2922 -6 c10 -8 15 -19 11 -25 -10 -16 -48 -15 -72 2 -18 14 -18 15 6 25 33 13 33 13 55 -2z m-11459 -18 c3 -5 -13 -9 -35 -9 -27 0 -41 4 -41 13 0 15 66 11 76 -4z m-85 -10 c3 -5 30 -10 60 -11 62 -2 77 -7 58 -19 -10 -6 -5 -9 16 -10 17 -1 37 0 45 1 12 2 11 -3 -4 -19 -21 -23 -42 -27 -48 -9 -3 7 -22 13 -44 14 -38 1 -70 14 -144 55 l-35 19 45 -6 c25 -4 47 -10 51 -15z m199 6 c0 -9 -6 -12 -15 -9 -8 4 -12 10 -9 15 8 14 24 10 24 -6z m7780 5 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m690 0 c-20 -13 -33 -13 -25 0 3 6 14 10 23 10 15 0 15 -2 2 -10z m2613 -7 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m-2899 -25 c5 -9 7 -20 3 -24 -8 -8 -153 -11 -270 -5 -62 3 -80 8 -88 22 -8 17 -3 18 68 22 43 2 123 3 177 3 82 -1 101 -4 110 -18z m906 -1 c0 -26 -37 -34 -162 -33 -70 1 -128 4 -130 6 -2 3 -10 13 -17 23 -13 16 -4 17 148 17 123 0 161 -3 161 -13z m-7455 -7 c3 -6 -1 -7 -9 -4 -18 7 -21 14 -7 14 6 0 13 -4 16 -10z m9083 -35 c2 -12 -6 -31 -16 -43 -17 -19 -29 -22 -96 -22 -47 0 -76 4 -76 11 0 6 17 26 37 45 34 32 41 35 92 32 48 -3 56 -6 59 -23z m-10320 -1 c33 -16 41 -30 20 -37 -7 -2 1 -2 17 1 78 14 212 -4 301 -39 l31 -12 -35 -19 c-26 -13 -39 -15 -48 -7 -8 7 -37 8 -79 4 -55 -6 -74 -4 -106 11 -22 11 -37 24 -34 32 2 6 0 12 -5 12 -6 0 -10 -3 -10 -8 0 -4 -48 -7 -107 -7 l-107 0 -3 33 c-2 23 1 32 12 32 8 0 15 -7 15 -16 0 -8 5 -12 10 -9 6 4 8 11 5 16 -19 30 63 39 123 13z m9076 7 c8 -12 -21 -34 -34 -26 -8 5 -8 11 1 21 13 16 25 18 33 5z m816 1 c0 -18 -43 -31 -107 -32 -73 0 -97 11 -66 29 18 11 173 13 173 3z m167 -19 c7 -19 -35 -22 -51 -4 -9 10 -13 20 -10 23 8 9 57 -6 61 -19z m468 2 c0 -11 -15 -29 -35 -43 -28 -19 -43 -22 -75 -17 -21 3 -41 7 -42 9 -6 6 18 61 30 68 7 5 37 7 67 6 47 -3 55 -6 55 -23z m317 16 c-8 -4 -14 -12 -15 -17 -1 -5 -28 -10 -59 -12 -44 -2 -58 0 -58 11 0 23 11 27 79 27 40 0 61 -4 53 -9z m-1982 -11 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m260 0 c0 -5 -7 -10 -15 -10 -8 0 -15 5 -15 10 0 6 7 10 15 10 8 0 15 -4 15 -10z m-1932 -27 c-10 -2 -26 -2 -35 0 -10 3 -2 5 17 5 19 0 27 -2 18 -5z m-88 -7 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m120 -26 c0 -5 7 -10 15 -10 8 0 15 -4 15 -9 0 -5 12 -11 28 -13 19 -3 9 -6 -30 -12 -60 -9 -108 -2 -108 14 0 5 11 12 25 16 14 3 25 10 25 15 0 5 7 9 15 9 8 0 15 -4 15 -10z m77 4 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m993 -14 c0 -5 -18 -10 -40 -10 -22 0 -40 5 -40 10 0 6 18 10 40 10 22 0 40 -4 40 -10z m62 -9 c-2 -8 3 -11 13 -8 16 7 19 -1 7 -21 -9 -14 -66 -32 -97 -31 -20 0 -20 0 0 9 14 6 -3 8 -50 8 -64 -1 -66 -2 -25 -8 45 -7 44 -7 -17 -8 -45 -2 -63 2 -63 11 1 31 54 67 73 48 18 -18 104 -14 111 5 7 19 52 15 48 -5z m1034 3 c19 -9 34 -18 34 -20 0 -7 -39 -43 -58 -53 -14 -8 -29 -7 -52 0 -17 6 -44 9 -60 5 -29 -5 -30 -4 -30 29 0 32 3 35 38 40 20 4 42 8 47 10 23 8 49 4 81 -11z m2461 -1 c3 -7 -5 -20 -16 -30 -12 -9 -21 -23 -21 -29 0 -12 -66 -24 -88 -16 -22 8 -9 46 18 53 16 4 19 7 8 8 -28 2 -21 19 10 24 45 7 85 3 89 -10z m-3157 -1 c0 -10 -22 -32 -32 -32 -4 0 -12 9 -18 20 -10 18 -8 20 20 20 16 0 30 -4 30 -8z m1969 -47 c15 -15 7 -35 -13 -35 -8 0 -16 -9 -19 -20 -4 -17 -14 -20 -65 -20 -33 0 -67 3 -76 6 -24 9 -19 32 12 51 15 10 29 20 32 24 16 21 105 17 129 -6z m208 2 c15 -15 14 -17 -13 -27 -16 -6 -31 -14 -34 -18 -9 -12 -49 -32 -64 -32 -17 0 -30 33 -22 58 11 34 104 48 133 19z m493 7 c6 -6 -9 -22 -39 -41 -59 -39 -133 -49 -139 -20 -4 18 30 59 58 70 21 9 109 2 120 -9z m-3863 -7 c12 -12 -10 -27 -40 -27 -63 0 -101 22 -59 34 20 5 91 0 99 -7z m-7140 -3 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m100 0 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m9817 -10 c18 -48 2 -64 -64 -64 -30 0 -40 4 -45 21 -8 24 -9 21 30 42 39 21 71 21 79 1z m-1424 -29 c-7 -8 -28 -15 -48 -15 -43 0 -38 9 9 15 19 2 35 9 37 15 2 6 7 9 9 6 3 -3 0 -12 -7 -21z m1201 4 c15 -24 11 -27 -41 -34 -65 -9 -110 1 -110 25 0 21 22 27 93 25 30 -1 52 -8 58 -16z m-1141 8 c0 -10 -39 -47 -49 -47 -17 0 -13 10 12 31 20 17 37 24 37 16z m887 -12 c20 -21 11 -29 -22 -21 -22 6 -25 9 -15 21 15 19 18 19 37 0z m-8992 -1 c13 -5 14 -8 3 -15 -9 -6 -4 -9 15 -9 15 0 27 5 27 12 0 6 7 4 18 -5 10 -10 27 -17 38 -17 26 0 40 -11 48 -37 7 -23 -7 -32 -19 -13 -3 6 -30 10 -60 10 -30 0 -66 6 -81 12 l-27 13 24 6 c23 7 23 7 -3 8 -26 1 -37 19 -21 34 8 9 17 9 38 1z m550 -14 c-3 -5 -10 -10 -16 -10 -5 0 -9 5 -9 10 0 6 7 10 16 10 8 0 12 -4 9 -10z m5725 -20 c25 -7 24 -8 -12 -24 -47 -20 -48 -20 -48 2 0 33 12 37 60 22z m1068 -15 c11 -10 1 -15 -50 -27 -66 -17 -80 -16 -60 4 17 17 15 28 -5 29 -10 1 -2 5 17 9 41 8 80 2 98 -15z m-132 -21 c-4 -9 -1 -23 5 -31 10 -12 6 -14 -29 -12 -50 3 -58 29 -14 46 39 16 45 15 38 -3z m1192 -8 c31 -19 -12 -30 -133 -34 -69 -3 -125 -8 -125 -12 0 -4 19 -17 43 -28 l42 -20 -28 -11 c-16 -6 -87 -11 -158 -11 -103 0 -129 3 -129 14 0 7 7 19 15 26 8 7 15 19 15 26 0 19 37 26 119 22 48 -2 71 1 71 8 0 30 41 39 148 34 59 -3 113 -9 120 -14z m333 14 c48 0 0 -72 -58 -86 -38 -10 -175 6 -170 19 2 7 12 14 23 15 10 2 30 14 44 27 27 25 67 35 114 29 16 -2 37 -4 47 -4z m-933 -32 c29 -12 51 -26 49 -32 -2 -6 -20 -14 -41 -18 -20 -4 -51 -15 -68 -24 -25 -13 -38 -14 -74 -5 -23 6 -88 11 -142 11 -110 0 -127 10 -97 57 26 38 51 44 190 38 101 -4 142 -10 183 -27z m-7938 18 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m6768 -33 l3 -32 -140 2 c-86 1 -141 6 -141 12 0 6 29 9 75 7 65 -3 74 -1 69 12 -3 9 -17 16 -30 16 -13 0 -24 4 -24 8 0 5 42 8 93 8 l92 -1 3 -32z m2245 31 c12 -12 -6 -34 -28 -34 -24 0 -49 22 -38 33 8 9 58 9 66 1z m-8822 -13 c-10 -6 -6 -11 15 -19 l29 -10 -32 -1 c-29 -1 -33 5 -24 37 1 1 7 2 14 2 9 0 8 -3 -2 -9z m6369 -1 c0 -5 10 -10 22 -10 12 0 19 -2 16 -5 -3 -3 -24 -3 -47 1 -29 5 -38 10 -29 15 18 12 38 11 38 -1z m-6055 -10 c17 -7 15 -9 -12 -9 -18 -1 -33 4 -33 9 0 12 17 12 45 0z m9893 -16 c31 -21 28 -35 -16 -64 -20 -14 -39 -28 -42 -31 -21 -25 -89 -35 -123 -17 -16 8 -16 11 -2 24 18 19 19 31 3 37 -7 3 -2 6 12 6 14 1 45 15 70 31 51 34 67 36 98 14z m301 -8 c10 -11 6 -17 -19 -29 -32 -16 -41 -8 -14 14 14 12 14 14 -3 20 -16 7 -16 8 3 8 12 1 27 -5 33 -13z m-759 -5 c0 -5 -7 -14 -15 -21 -8 -7 -15 -18 -15 -24 0 -6 -28 -22 -62 -35 -35 -12 -78 -29 -96 -37 -41 -17 -63 -18 -41 -1 9 7 22 26 30 42 18 38 107 85 161 85 21 0 38 -4 38 -9z m235 -11 c-28 -12 -45 -12 -45 0 0 6 15 10 33 9 27 0 29 -2 12 -9z m-551 -10 c36 -13 32 -26 -14 -50 -38 -19 -110 -28 -110 -12 1 20 63 72 87 72 6 0 23 -4 37 -10z m-301 -9 c21 -1 23 -31 2 -31 -8 0 -19 -9 -25 -20 -15 -29 -70 -28 -70 1 0 37 18 58 48 55 15 -2 35 -4 45 -5z m-183 -10 c0 -10 -30 -24 -37 -17 -3 3 -2 9 2 15 8 13 35 15 35 2z m1040 -1 c0 -5 -7 -10 -16 -10 -8 0 -12 -4 -9 -10 3 -5 -3 -10 -14 -10 -28 0 -26 6 7 24 33 18 32 18 32 6z m-16372 -20 c25 -24 28 -40 7 -40 -9 0 -12 6 -9 15 4 8 1 15 -5 15 -6 0 -11 -5 -11 -11 0 -8 -5 -8 -15 1 -18 15 -20 40 -2 40 7 0 23 -9 35 -20z m13872 -5 c64 -2 74 -18 35 -55 -23 -22 -34 -24 -124 -24 -81 -1 -103 2 -118 17 -11 9 -29 17 -40 17 -27 0 -53 10 -53 20 0 19 153 42 215 32 17 -3 55 -6 85 -7z m2386 -10 c-8 -8 -23 -15 -32 -15 -16 0 -16 1 2 15 26 20 51 20 30 0z m-8666 -32 c0 -15 -115 -19 -124 -4 -9 14 0 16 63 16 42 0 61 -4 61 -12z m5617 1 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m1080 -33 c12 -15 18 -30 13 -36 -11 -13 -171 -17 -259 -7 l-64 7 36 38 37 38 108 -7 c99 -6 109 -8 129 -33z m599 20 c8 -1 8 -10 1 -33 l-10 -33 -91 -2 c-81 -2 -92 -4 -107 -25 -16 -21 -18 -21 -24 -5 -9 21 -34 22 -41 2 -9 -23 -77 -20 -99 5 -10 11 -24 20 -32 20 -18 0 -17 19 2 25 8 3 23 8 33 12 9 3 52 16 95 27 75 20 107 21 273 7z m999 -14 c8 -9 10 -19 4 -28 -7 -11 -9 -11 -9 4 0 9 -4 17 -10 17 -5 0 -10 -7 -10 -17 0 -9 -3 -14 -6 -10 -6 6 4 47 12 47 3 0 11 -6 19 -13z m-720 -27 c0 -8 -15 -22 -34 -31 -29 -13 -43 -14 -83 -5 -55 12 -62 25 -27 44 34 18 144 12 144 -8z m199 -2 c13 -22 7 -27 -37 -35 -22 -3 -52 1 -82 13 -42 16 -45 19 -30 30 26 19 135 13 149 -8z m-15314 -19 c0 -6 -4 -7 -10 -4 -5 3 -10 11 -10 16 0 6 5 7 10 4 6 -3 10 -11 10 -16z m15520 11 c0 -5 -8 -10 -17 -10 -15 0 -16 2 -3 10 19 12 20 12 20 0z m35 0 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-11448 -16 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m12437 -23 c16 -17 16 -19 -6 -24 -22 -6 -58 16 -58 35 0 16 47 8 64 -11z m-16275 -68 c64 -43 127 -84 141 -90 14 -7 39 -22 55 -32 17 -11 39 -20 51 -20 11 -1 29 -10 39 -21 10 -11 24 -20 32 -20 7 0 13 -5 13 -11 0 -10 278 -148 395 -195 33 -14 103 -38 157 -54 67 -20 106 -37 127 -57 46 -44 116 -79 249 -123 67 -22 147 -53 180 -70 33 -16 75 -33 93 -36 19 -4 65 -22 102 -41 52 -26 319 -126 466 -174 12 -4 -146 -109 -164 -109 -4 0 -48 16 -96 35 -49 19 -97 35 -108 35 -10 0 -31 10 -46 22 -19 15 -44 22 -82 24 -34 2 -62 9 -74 20 -10 9 -40 19 -66 22 -31 3 -53 12 -61 24 -7 10 -19 18 -26 18 -8 0 -83 33 -167 73 -85 41 -185 86 -224 102 -134 56 -404 194 -464 239 -34 24 -76 48 -94 51 -40 9 -110 50 -153 91 -19 18 -45 35 -59 38 -14 4 -25 11 -25 16 0 5 -28 27 -62 49 -35 22 -69 46 -76 52 -8 6 -35 23 -60 36 -26 14 -72 43 -102 66 -30 23 -56 42 -58 43 -6 4 34 74 42 74 6 0 62 -35 125 -77z m12758 70 c-9 -2 -15 -9 -12 -14 4 -5 -1 -9 -9 -9 -17 0 -21 12 -9 23 3 4 16 6 27 6 17 -1 18 -2 3 -6z m2933 -32 c0 -25 -5 -30 -35 -35 -19 -4 -39 -15 -44 -25 -14 -25 -73 -26 -103 -1 l-23 19 25 2 c14 1 38 3 54 4 16 1 34 9 41 18 12 16 63 47 78 47 4 0 7 -13 7 -29z m-2587 8 l117 2 0 -39 c0 -38 -1 -40 -42 -47 -58 -11 -102 -7 -155 16 -25 11 -68 19 -98 19 -56 0 -69 8 -59 34 8 20 31 26 79 19 22 -3 93 -5 158 -4z m-855 -9 c29 0 28 -6 -5 -35 -23 -20 -39 -24 -86 -25 -56 0 -58 1 -51 23 12 42 25 49 73 43 25 -3 56 -6 69 -6z m3679 -17 c7 -17 -26 -43 -44 -36 -7 3 -13 18 -13 33 0 24 3 27 26 22 14 -2 28 -11 31 -19z m-757 -16 c0 -24 -8 -40 -27 -57 -25 -22 -39 -25 -133 -28 -156 -5 -203 -3 -215 9 -7 7 -4 15 10 25 11 8 29 22 40 32 15 13 40 17 105 18 89 1 140 10 140 25 0 5 18 9 40 9 39 0 40 -1 40 -33z m-1632 -22 c20 -14 42 -25 49 -25 19 0 16 -14 -7 -35 -14 -12 -29 -16 -52 -12 -18 4 -77 7 -131 8 -54 2 -100 6 -103 10 -3 5 0 16 5 26 5 10 12 26 15 36 5 14 18 17 96 17 81 0 95 -3 128 -25z m1094 11 c15 -8 36 -12 48 -9 11 3 20 1 20 -3 0 -5 -13 -10 -29 -11 -16 -1 -41 -14 -55 -28 -40 -40 -87 -55 -170 -55 -70 0 -77 2 -93 26 -16 25 -16 27 2 40 10 8 28 14 40 14 12 0 26 5 32 11 11 11 89 25 148 28 17 0 42 -5 57 -13z m-2087 -11 c0 -5 -18 -11 -41 -13 -32 -2 -41 0 -41 13 0 13 9 15 41 13 23 -2 41 -7 41 -13z m1615 -34 c15 -29 13 -32 -25 -29 -33 3 -38 9 -28 36 8 19 41 14 53 -7z m-10050 -1 c11 -7 6 -10 -20 -10 -26 0 -31 3 -20 10 8 5 17 10 20 10 3 0 12 -5 20 -10z m9769 0 c22 -1 -28 -29 -53 -30 -13 0 -16 5 -11 18 5 14 4 15 -6 5 -7 -7 -22 -13 -33 -13 -19 1 -19 2 4 15 14 9 38 13 54 10 16 -3 36 -5 45 -5z m2133 -47 c21 -12 -54 -73 -89 -73 -18 0 -55 39 -48 50 18 29 102 44 137 23z m-3739 0 c-15 -3 -20 -9 -16 -21 5 -13 3 -14 -7 -5 -17 15 -4 33 23 32 l22 -2 -22 -4z m3395 -36 c30 -28 28 -33 -15 -47 -21 -7 -58 -23 -83 -36 -43 -22 -151 -54 -184 -54 -22 0 -20 36 3 59 10 10 36 24 57 31 22 7 41 16 44 21 3 4 29 19 58 32 58 27 84 26 120 -6z m-3298 8 c35 -18 36 -21 12 -27 -11 -3 -28 4 -41 18 -26 27 -14 31 29 9z m848 -26 c17 -13 40 -19 75 -19 41 0 48 -2 38 -14 -11 -13 -84 -26 -158 -27 -22 0 -30 -4 -27 -14 7 -16 -106 -31 -166 -21 -25 4 -40 2 -40 -4 0 -5 -15 -11 -32 -11 -31 -2 -31 -2 -5 -6 15 -2 27 -9 27 -14 0 -5 25 -9 55 -9 53 0 105 -15 105 -31 0 -9 -33 -19 -65 -21 -40 -1 -170 23 -173 32 -2 6 -21 13 -43 16 -49 8 -49 20 -1 42 20 9 39 19 42 22 3 3 14 10 25 16 11 6 20 18 20 26 0 9 6 22 13 31 10 12 18 13 43 4 25 -10 39 -8 87 10 67 26 141 23 180 -8z m-578 6 c-11 -13 -6 -15 36 -13 112 4 181 -32 91 -48 -22 -3 -53 -14 -69 -24 -39 -23 -75 -16 -75 16 0 32 -3 34 -49 41 -40 6 -64 19 -64 34 0 5 32 9 71 9 63 0 70 -2 59 -15z m965 5 c16 -7 13 -9 -17 -9 -21 -1 -38 4 -38 9 0 12 27 12 55 0z m1532 4 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-3011 -19 c27 -8 66 -15 87 -15 27 0 37 -4 33 -12 -3 -7 -9 -21 -12 -30 -4 -10 -11 -18 -17 -18 -7 0 -8 -3 -1 -10 12 -12 74 6 74 21 0 16 49 10 87 -11 21 -11 56 -20 78 -20 28 0 49 -7 69 -25 l29 -25 -23 -20 c-13 -11 -35 -20 -50 -20 -15 0 -50 -10 -79 -21 -43 -18 -55 -20 -80 -9 -16 6 -35 25 -41 40 -9 22 -20 30 -43 32 -24 2 -33 8 -35 26 -4 27 -28 29 -77 5 -29 -14 -41 -15 -68 -6 -17 6 -47 14 -64 18 -36 7 -40 16 -18 39 8 8 15 17 15 21 0 3 8 17 18 30 20 29 49 31 118 10z m2944 4 c0 -6 7 -9 15 -6 56 22 -24 -82 -89 -115 -22 -12 -70 -25 -106 -29 -106 -13 -140 -21 -140 -30 0 -5 -9 -9 -20 -9 -11 0 -20 4 -20 9 0 5 -15 12 -32 16 -29 6 -30 8 -12 14 28 8 74 43 74 55 0 6 -5 5 -11 -1 -7 -7 -24 -9 -39 -6 -19 3 -33 -1 -46 -15 -11 -10 -30 -22 -44 -25 -14 -3 -56 -15 -95 -27 -43 -13 -97 -21 -140 -21 -38 0 -72 -5 -76 -11 -4 -5 -30 -11 -60 -12 l-53 -1 -9 38 c-8 32 -12 37 -31 31 -11 -3 -32 -16 -46 -29 -20 -18 -49 -26 -150 -40 -69 -9 -128 -19 -131 -21 -17 -10 -126 20 -152 42 -30 25 -43 29 -51 16 -2 -4 -39 -19 -81 -32 -43 -14 -81 -33 -86 -42 -8 -16 -25 -18 -120 -18 -61 0 -109 3 -107 8 2 4 10 20 18 35 11 23 11 33 2 48 -15 24 -15 29 1 29 8 0 22 9 32 20 20 22 73 35 109 26 36 -9 24 -44 -17 -48 -20 -2 -33 -9 -35 -19 -3 -14 3 -15 50 -6 60 11 78 22 78 46 0 9 16 25 35 35 32 18 36 18 59 2 16 -10 46 -16 81 -16 54 0 56 -1 49 -22 -4 -13 -12 -26 -18 -30 -8 -5 -8 -10 0 -18 15 -15 67 5 136 51 33 23 74 41 100 45 23 3 60 12 81 20 37 14 191 20 221 8 21 -8 21 -54 1 -54 -8 0 -15 -9 -15 -20 0 -11 2 -20 6 -20 3 0 45 12 94 27 64 19 90 31 93 45 4 14 15 18 48 18 23 0 61 9 83 19 55 25 254 38 262 17 3 -8 1 -23 -4 -33 -12 -25 8 -60 32 -55 11 2 56 23 100 47 45 24 96 46 113 50 18 3 35 11 38 16 8 13 25 11 25 -2z m93 -6 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m-1353 -77 c0 -9 -30 -14 -35 -6 -4 6 3 10 14 10 12 0 21 -2 21 -4z m-10665 -46 c-3 -5 -11 -10 -16 -10 -6 0 -7 5 -4 10 3 6 11 10 16 10 6 0 7 -4 4 -10z m8785 -30 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m935 -60 c10 -22 16 -41 14 -43 -2 -2 -31 -16 -63 -31 -54 -26 -67 -28 -128 -23 -51 4 -80 13 -113 34 -51 32 -56 50 -17 59 15 4 34 12 42 20 17 14 60 20 171 22 l76 2 18 -40z m2735 25 c6 -8 9 -19 5 -25 -11 -18 -78 -47 -125 -54 -25 -4 -64 -20 -88 -37 -51 -37 -80 -35 -104 8 l-19 31 58 11 c75 14 163 42 163 52 0 9 48 27 76 28 12 1 27 -6 34 -14z m-330 -22 c0 -43 -12 -56 -36 -38 -24 18 -54 18 -78 0 -16 -12 -17 -15 -4 -15 9 0 18 5 20 11 2 6 12 7 27 1 20 -7 17 -9 -28 -20 -28 -6 -70 -27 -96 -47 -46 -35 -47 -35 -151 -35 -74 0 -114 -4 -134 -15 -16 -8 -72 -18 -129 -21 l-100 -7 -10 26 c-10 25 -10 25 -63 13 -29 -7 -67 -20 -85 -29 -18 -9 -52 -17 -76 -17 -25 0 -58 -7 -73 -15 -32 -16 -204 -22 -204 -6 0 12 63 41 89 41 12 0 30 9 41 20 15 15 33 20 79 20 59 0 77 12 66 43 -10 27 13 41 69 41 31 1 56 3 56 6 0 4 17 12 37 19 35 13 210 17 221 6 10 -10 -22 -35 -44 -35 -17 0 -24 -6 -24 -20 0 -18 7 -20 63 -20 51 0 64 3 75 20 7 11 19 20 27 20 8 0 37 10 63 22 57 28 118 29 156 5 22 -15 25 -21 15 -33 -13 -16 -7 -18 19 -5 9 5 28 14 42 20 14 6 48 24 75 40 68 39 95 40 95 4z m-3385 7 c3 -5 -3 -10 -15 -10 -12 0 -18 5 -15 10 3 6 10 10 15 10 5 0 12 -4 15 -10z m140 -20 c-3 -5 -13 -10 -21 -10 -8 0 -12 5 -9 10 3 6 13 10 21 10 8 0 12 -4 9 -10z m45 -20 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-260 -50 c0 -5 -4 -10 -9 -10 -6 0 -13 5 -16 10 -3 6 1 10 9 10 9 0 16 -4 16 -10z m1410 -30 c0 -5 -18 -15 -40 -21 -28 -8 -39 -17 -36 -26 3 -8 -2 -17 -12 -20 -9 -3 -25 -13 -34 -21 -13 -10 -32 -13 -69 -10 -55 6 -71 19 -67 58 3 23 7 25 66 28 34 2 62 7 62 12 0 6 29 10 65 10 36 0 65 -4 65 -10z m196 -178 c-3 -5 11 -9 31 -10 21 -1 40 4 44 10 5 7 19 0 43 -23 20 -18 36 -36 36 -40 0 -3 -20 -3 -45 1 -42 6 -45 5 -45 -16 0 -18 -7 -25 -27 -30 -115 -26 -155 -41 -215 -80 -38 -24 -79 -44 -92 -44 -12 0 -31 -9 -41 -20 -15 -17 -99 -48 -180 -66 -16 -4 -38 -14 -47 -22 -13 -10 -48 -16 -115 -20 -90 -4 -100 -3 -117 17 -16 17 -16 21 -4 21 9 0 21 6 27 14 10 12 8 17 -8 25 -29 16 -48 14 -68 -8 -10 -11 -31 -23 -48 -27 -16 -4 -35 -10 -40 -15 -6 -4 -37 -17 -70 -30 -54 -20 -112 -52 -125 -70 -3 -4 -43 -10 -90 -14 -47 -4 -101 -14 -120 -24 -46 -21 -141 -21 -163 1 -16 15 -15 17 14 23 18 4 33 15 36 25 4 13 15 18 46 18 24 1 51 9 67 20 14 11 45 23 68 27 23 4 44 11 47 16 3 4 21 16 40 25 19 9 35 20 35 25 0 5 7 9 15 9 9 0 41 9 73 20 31 11 89 25 127 31 39 6 73 15 76 20 8 13 118 32 145 25 30 -8 31 -37 4 -54 -12 -7 -18 -17 -15 -22 6 -10 94 18 151 49 22 11 55 23 75 26 19 3 44 13 55 23 30 28 149 69 257 89 86 15 101 21 129 50 31 32 45 42 34 25z m-1266 -116 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z m685 -36 c3 -6 -1 -13 -10 -16 -19 -8 -30 0 -20 15 8 14 22 14 30 1z m-4427 -217 c-10 -2 -28 -2 -40 0 -13 2 -5 4 17 4 22 1 32 -1 23 -4z m202 -3 c0 -5 -7 -10 -15 -10 -8 0 -15 5 -15 10 0 6 7 10 15 10 8 0 15 -4 15 -10z m5135 -130 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m110 -115 c-16 -8 -43 -14 -60 -14 -26 1 -24 3 15 14 59 17 83 17 45 0z m-105 -26 c0 -7 12 -8 33 -4 30 6 29 5 -13 -18 -54 -30 -120 -45 -120 -28 0 6 15 11 34 11 65 0 96 29 34 31 -31 1 -32 1 -8 9 36 11 40 11 40 -1z m107 -5 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-167 -21 c-19 -3 -41 -9 -48 -15 -7 -6 -16 -8 -19 -4 -13 13 21 26 62 24 l40 -1 -35 -4z m-197 -50 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m-563 -43 c0 -13 -7 -20 -20 -20 -11 0 -20 -6 -21 -12 -3 -65 -24 -103 -41 -75 -5 9 -17 9 -50 0 -23 -6 -49 -8 -57 -3 -19 10 -91 0 -117 -17 -13 -8 -66 -16 -138 -20 l-116 -6 0 -30 0 -30 -62 7 c-144 17 -243 16 -328 0 -47 -9 -135 -20 -197 -24 -62 -5 -117 -11 -123 -15 -20 -13 11 -35 49 -35 24 0 42 -7 54 -20 17 -20 16 -20 -48 -20 -57 0 -65 2 -65 19 0 23 -58 34 -121 23 -24 -5 -79 -7 -122 -5 -71 3 -80 1 -104 -21 -16 -16 -24 -30 -20 -41 10 -25 -50 -45 -176 -56 -61 -5 -127 -14 -147 -20 -23 -7 -49 -7 -76 -1 -30 7 -48 6 -67 -4 -39 -21 -70 -12 -87 24 -20 43 -52 42 -97 -3 -30 -30 -41 -35 -83 -35 -32 0 -48 4 -47 13 1 45 -4 57 -26 57 -27 0 -53 -25 -58 -54 -5 -27 -52 -38 -119 -30 -96 11 -130 12 -136 3 -3 -5 -12 -9 -20 -9 -8 0 -12 4 -9 10 3 5 0 8 -7 5 -15 -6 -80 -12 -153 -15 -39 -2 -45 -4 -25 -9 15 -5 -44 -11 -145 -15 -178 -8 -421 -23 -515 -32 l-56 -6 1 33 c0 38 -23 50 -71 38 -28 -8 -31 -12 -28 -44 l2 -35 -106 1 c-59 1 -97 4 -84 6 12 2 20 8 17 13 -2 4 24 11 59 15 41 4 66 12 70 20 3 8 2 16 -2 19 -4 2 -94 6 -200 8 -182 3 -194 2 -208 -16 -14 -20 -44 -31 -44 -16 0 5 -3 15 -6 24 -4 11 -1 16 11 16 9 0 13 5 10 10 -3 6 3 10 14 10 12 0 21 4 21 8 0 5 44 8 98 8 66 -1 104 3 114 12 18 14 408 29 661 24 147 -3 161 -1 193 19 29 17 39 19 62 10 34 -14 62 -14 192 0 58 6 130 12 160 14 30 2 116 8 191 14 74 6 145 8 156 5 11 -3 35 2 53 11 25 13 70 18 203 22 105 3 181 9 197 17 14 7 54 13 90 14 100 3 159 13 168 27 4 7 32 15 62 18 30 3 87 15 125 27 160 49 258 60 338 38 37 -10 65 -8 174 11 101 18 148 21 210 16 68 -6 85 -4 119 12 24 12 71 23 121 27 45 3 99 12 120 20 21 7 94 16 162 20 92 5 132 11 160 26 20 10 53 19 74 20 30 0 37 -3 37 -20z m-4097 3 c-13 -2 -33 -2 -45 0 -13 2 -3 4 22 4 25 0 35 -2 23 -4z m90 0 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m-236 -9 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m4358 -35 c-4 -5 -13 -9 -22 -9 -13 0 -13 3 -3 15 13 15 35 11 25 -6z m-4212 -6 c-13 -2 -33 -2 -45 0 -13 2 -3 4 22 4 25 0 35 -2 23 -4z m1837 -157 c0 -2 3 -11 6 -20 4 -11 0 -16 -14 -16 -11 0 -22 8 -25 20 -4 15 0 20 14 20 10 0 19 -2 19 -4z m106 -18 c-18 -10 -39 -2 -31 12 3 4 15 6 26 3 19 -5 19 -7 5 -15z m-526 -25 c0 -5 -4 -14 -9 -21 -11 -18 -111 -5 -111 14 0 10 16 14 60 14 33 0 60 -3 60 -7z m-4086 -76 c14 -10 15 -18 7 -40 -12 -30 -42 -45 -81 -42 -27 2 -37 28 -26 71 5 20 13 24 44 24 21 0 46 -6 56 -13z m5279 6 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m47 -2 c0 -5 8 -12 18 -14 14 -4 14 -5 1 -6 -9 0 -22 6 -29 14 -9 10 -9 15 -1 15 6 0 11 -4 11 -9z m110 -1 c-19 -13 -30 -13 -30 0 0 6 10 10 23 10 18 0 19 -2 7 -10z m-4665 -12 c50 2 117 -2 150 -8 33 -6 139 -12 235 -14 490 -10 718 -24 848 -52 66 -14 75 -14 97 0 19 13 39 15 94 10 59 -6 68 -9 64 -25 -4 -14 -19 -19 -69 -24 -35 -4 -72 -4 -81 0 -25 11 -227 14 -211 4 9 -6 7 -9 -9 -9 -12 0 -23 -6 -25 -12 -3 -9 -9 -8 -22 5 -26 25 -39 21 -20 -8 15 -22 14 -26 -3 -49 -18 -26 -47 -34 -58 -17 -3 5 -30 7 -60 4 -35 -4 -55 -2 -55 5 0 5 -7 12 -15 16 -8 3 -14 0 -12 -7 1 -8 -19 -13 -65 -15 -43 -2 -68 1 -68 8 0 5 10 10 23 11 12 0 16 3 9 6 -16 6 -72 -16 -72 -29 0 -13 -497 0 -560 14 -87 20 -157 21 -182 4 -33 -23 -82 -20 -141 10 -51 26 -55 27 -198 22 -81 -3 -159 -3 -173 -1 -29 6 -36 23 -8 23 14 0 15 2 2 10 -8 5 -15 15 -15 22 0 7 -13 14 -30 16 -59 5 -74 12 -89 43 -13 26 -13 31 0 36 28 11 303 -2 316 -15 17 -17 133 -16 150 1 23 23 41 27 103 20 33 -4 101 -6 150 -5z m1580 -80 c34 -15 32 -28 -4 -28 -31 0 -47 13 -36 30 8 13 9 12 40 -2z m-2228 -54 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m1980 -40 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-3994 -671 c-13 -2 -33 -2 -45 0 -13 2 -3 4 22 4 25 0 35 -2 23 -4z m64 -19 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z\"></path><path d=\"M31020 39970 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M31200 39940 c0 -5 -7 -7 -15 -4 -9 4 -18 -1 -21 -10 -11 -29 6 -31 34 -3 14 15 21 27 14 27 -6 0 -12 -4 -12 -10z\"></path><path d=\"M30416 39895 c-15 -14 -29 -25 -33 -25 -3 0 -18 -14 -34 -31 -36 -38 -49 -86 -43 -153 5 -49 4 -53 -30 -84 -20 -17 -40 -32 -46 -32 -5 0 -10 -7 -10 -15 0 -8 -5 -15 -11 -15 -15 0 -45 -37 -74 -91 -26 -50 -46 -168 -46 -276 1 -37 0 -81 0 -98 0 -16 3 -106 6 -200 6 -147 4 -185 -14 -285 -28 -158 -47 -243 -71 -325 -52 -177 -66 -284 -84 -657 -3 -76 -1 -100 10 -109 22 -18 17 -32 -26 -87 -42 -52 -49 -82 -28 -127 8 -18 19 -25 38 -25 29 0 70 37 70 63 0 9 4 18 9 21 4 3 11 19 14 36 8 39 27 39 27 0 0 -21 -5 -30 -16 -30 -10 0 -14 -7 -12 -22 4 -27 28 -36 28 -10 0 10 3 22 8 26 4 4 7 32 7 61 0 45 4 57 28 79 15 14 27 29 27 33 0 5 18 26 40 48 23 22 44 47 48 56 8 17 81 105 154 183 26 28 48 54 48 59 0 4 5 7 11 7 17 0 49 40 49 62 0 11 -7 18 -18 18 -27 0 -72 -23 -72 -37 0 -6 -8 -14 -18 -17 -10 -4 -59 -46 -108 -96 -87 -87 -124 -112 -124 -84 0 17 -16 18 -24 2 -4 -7 -4 -2 -1 12 2 14 5 32 5 41 0 13 59 91 150 197 11 13 23 34 26 47 3 13 15 26 26 28 14 4 19 11 15 21 -4 10 -1 16 7 16 8 0 16 7 20 15 6 17 -29 22 -39 5 -3 -5 -14 -10 -23 -10 -9 0 -35 -18 -57 -40 -98 -96 -147 -140 -157 -140 -17 0 -2 95 24 148 20 41 37 66 73 106 6 6 23 28 38 49 15 20 33 37 40 37 7 0 25 20 41 45 31 50 27 68 -19 79 -14 4 -25 13 -25 20 0 8 -4 16 -10 18 -16 5 8 87 40 132 16 22 45 59 64 81 20 22 41 52 48 67 7 15 22 29 34 32 11 3 50 34 86 70 36 35 84 76 106 90 47 30 45 26 32 60 -11 30 -50 36 -70 11 -7 -8 -17 -15 -22 -15 -12 0 -97 -67 -123 -98 -37 -43 -120 -127 -145 -147 -14 -11 -33 -26 -43 -34 -9 -7 -23 -11 -31 -8 -31 12 35 158 111 242 10 11 26 35 36 52 25 45 187 209 215 217 24 8 30 48 12 76 -8 13 -13 13 -37 -2 -16 -9 -49 -26 -75 -38 -25 -12 -63 -42 -83 -66 -20 -24 -44 -44 -54 -44 -44 1 -74 108 -38 135 9 7 17 17 17 24 0 6 4 11 10 11 5 0 30 20 56 45 25 25 51 45 58 45 19 0 46 34 46 58 0 25 -5 26 -48 11 -17 -6 -34 -20 -37 -30 -4 -11 -18 -24 -31 -29 -13 -5 -24 -14 -24 -20 0 -5 -9 -10 -19 -10 -12 0 -21 -9 -25 -25 -4 -14 -10 -24 -15 -22 -5 1 -16 -6 -24 -17 -12 -16 -16 -17 -38 -5 -68 39 -74 61 -31 105 33 34 66 89 75 126 4 15 22 36 43 48 19 13 47 40 61 61 14 21 36 45 49 54 29 19 31 32 4 40 -28 9 -25 30 8 55 37 29 51 58 52 102 0 72 -19 85 -64 43z m-352 -2179 c-10 -8 -21 -12 -23 -10 -3 2 4 11 15 18 10 8 21 12 23 10 3 -2 -4 -11 -15 -18z m17 -89 c-10 -9 -11 -8 -5 6 3 10 9 15 12 12 3 -3 0 -11 -7 -18z m-21 -27 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m-83 -37 c-3 -10 -5 -4 -5 12 0 17 2 24 5 18 2 -7 2 -21 0 -30z m38 -23 c-10 -11 -23 -20 -29 -20 -6 1 0 10 13 20 30 26 39 26 16 0z\"></path><path d=\"M31128 39856 c-19 -14 -25 -46 -9 -46 5 0 16 14 25 30 16 32 11 37 -16 16z\"></path><path d=\"M31086 39801 c-4 -7 -5 -15 -2 -18 9 -9 19 4 14 18 -4 11 -6 11 -12 0z\"></path><path d=\"M31101 37816 c-8 -9 -11 -19 -7 -23 9 -9 29 13 24 27 -2 8 -8 7 -17 -4z\"></path><path d=\"M29822 36010 c0 -14 2 -19 5 -12 2 6 2 18 0 25 -3 6 -5 1 -5 -13z\"></path><path d=\"M29840 36004 c0 -8 5 -12 10 -9 6 4 8 11 5 16 -9 14 -15 11 -15 -7z\"></path><path d=\"M29865 35150 c-3 -5 -2 -10 4 -10 5 0 13 5 16 10 3 6 2 10 -4 10 -5 0 -13 -4 -16 -10z\"></path><path d=\"M30601 35153 c4 -26 -4 -42 -23 -48 -15 -4 -18 -8 -10 -12 7 -3 22 3 33 13 20 18 26 54 9 54 -5 0 -9 -3 -9 -7z\"></path><path d=\"M29785 35044 c-44 -52 -42 -59 4 -17 38 34 51 54 34 53 -5 -1 -21 -17 -38 -36z\"></path><path d=\"M30470 34990 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M30058 34963 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M30440 34950 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M29854 34879 c-3 -6 -1 -16 5 -22 8 -8 11 -5 11 11 0 24 -5 28 -16 11z\"></path><path d=\"M29756 34763 c-6 -14 -5 -15 5 -6 7 7 10 15 7 18 -3 3 -9 -2 -12 -12z\"></path><path d=\"M29880 34645 c0 -9 -11 -20 -25 -25 -14 -5 -25 -14 -25 -19 0 -9 41 -23 49 -16 2 3 -2 5 -10 5 -8 0 -1 10 15 23 17 14 26 29 22 35 -10 17 -26 15 -26 -3z\"></path><path d=\"M29635 34590 c-3 -5 1 -10 10 -10 9 0 13 5 10 10 -3 6 -8 10 -10 10 -2 0 -7 -4 -10 -10z\"></path><path d=\"M29621 34554 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M29880 34360 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M29426 34045 c4 -8 8 -15 10 -15 2 0 4 7 4 15 0 8 -4 15 -10 15 -5 0 -7 -7 -4 -15z\"></path><path d=\"M29450 34035 c0 -8 5 -15 10 -15 6 0 10 7 10 15 0 8 -4 15 -10 15 -5 0 -10 -7 -10 -15z\"></path><path d=\"M31375 38130 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M31336 35316 c-4 -16 -5 -31 -1 -34 3 -3 5 3 6 14 0 18 1 18 9 -1 11 -25 12 2 1 30 -7 17 -9 16 -15 -9z\"></path><path d=\"M31321 35244 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M29935 34000 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M29768 34503 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M30247 33709 c7 -7 15 -10 18 -7 3 3 -2 9 -12 12 -14 6 -15 5 -6 -5z\"></path><path d=\"M29650 33021 c0 -25 6 -27 13 -6 4 8 2 17 -3 20 -6 4 -10 -3 -10 -14z\"></path><path d=\"M29600 33715 c0 -9 6 -12 15 -9 8 4 15 10 15 15 0 5 -7 9 -15 9 -8 0 -15 -7 -15 -15z\"></path><path d=\"M30010 33180 c-12 -7 -12 -12 -2 -22 10 -10 15 -10 22 2 12 18 13 30 3 30 -5 0 -15 -5 -23 -10z\"></path><path d=\"M29681 32194 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M29898 32837 c-11 -9 -14 -18 -8 -27 7 -12 10 -12 16 3 3 9 10 14 15 11 5 -3 9 2 9 10 0 19 -9 20 -32 3z\"></path><path d=\"M29686 32774 c-20 -19 -20 -21 2 -21 16 0 32 14 32 30 0 12 -18 8 -34 -9z\"></path><path d=\"M29750 32630 c0 -8 5 -22 10 -30 9 -13 10 -13 10 0 0 8 -5 22 -10 30 -9 13 -10 13 -10 0z\"></path><path d=\"M29485 32271 c-3 -5 -1 -12 4 -15 5 -3 11 1 15 9 6 16 -9 21 -19 6z\"></path><path d=\"M29966 31945 c4 -8 10 -12 15 -9 11 6 2 24 -11 24 -5 0 -7 -7 -4 -15z\"></path><path d=\"M29651 31504 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M29190 30835 c0 -5 5 -17 10 -25 5 -8 10 -10 10 -5 0 6 -5 17 -10 25 -5 8 -10 11 -10 5z\"></path><path d=\"M28571 31484 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M23053 31253 c9 -2 23 -2 30 0 6 3 -1 5 -18 5 -16 0 -22 -2 -12 -5z\"></path><path d=\"M23178 31253 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M30780 31256 c0 -2 7 -7 16 -10 8 -3 12 -2 9 4 -6 10 -25 14 -25 6z\"></path><path d=\"M25297 31097 c-5 -13 15 -47 27 -47 13 0 36 28 36 44 0 20 -55 22 -63 3z\"></path><path d=\"M25175 31026 c-28 -18 -58 -43 -69 -54 -10 -12 -40 -28 -67 -37 -41 -14 -82 -39 -136 -85 -23 -19 -3 -40 38 -40 28 0 46 7 67 28 15 15 40 33 55 39 15 7 27 17 27 23 0 5 13 10 29 10 17 0 33 5 36 10 3 6 15 10 26 10 10 0 19 5 19 10 0 6 9 19 20 30 11 11 25 20 30 20 6 0 10 6 10 14 0 8 7 16 15 20 8 3 15 12 15 21 0 28 -61 18 -115 -19z\"></path><path d=\"M23360 30761 c0 -5 -16 -16 -36 -26 -19 -9 -38 -23 -40 -30 -3 -8 -21 -19 -39 -25 -18 -6 -47 -27 -63 -45 -27 -32 -34 -35 -88 -36 -33 -1 -51 -3 -41 -6 15 -4 16 -6 2 -26 -8 -12 -15 -29 -15 -39 0 -13 -8 -18 -26 -18 -19 0 -25 -5 -22 -17 4 -22 48 -31 48 -10 0 17 21 27 53 27 15 0 31 14 50 44 22 35 34 45 63 49 38 6 74 32 74 52 0 6 19 17 43 24 23 7 49 16 57 20 20 10 25 51 8 62 -17 11 -28 11 -28 0z\"></path><path d=\"M22928 30613 c-20 -5 -29 -25 -18 -42 13 -22 50 -3 50 25 0 24 -2 25 -32 17z\"></path><path d=\"M21243 30596 c-25 -12 -29 -21 -13 -31 12 -8 50 16 50 32 0 15 -6 15 -37 -1z\"></path><path d=\"M24670 30593 c-24 -12 -24 -13 -3 -13 12 0 25 5 28 11 11 16 2 17 -25 2z\"></path><path d=\"M22857 30553 c-12 -11 -8 -23 8 -23 8 0 15 7 15 15 0 16 -12 20 -23 8z\"></path><path d=\"M22770 30501 c-6 -13 -17 -17 -30 -14 -11 3 -20 0 -20 -6 0 -6 -5 -11 -11 -11 -7 0 -23 -12 -36 -26 -19 -20 -21 -29 -12 -40 20 -24 56 -16 90 21 18 19 40 34 49 32 19 -3 27 43 8 54 -20 13 -26 11 -38 -10z\"></path><path d=\"M22847 30490 c3 -11 7 -20 9 -20 2 0 4 9 4 20 0 11 -4 20 -9 20 -5 0 -7 -9 -4 -20z\"></path><path d=\"M22938 30423 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M22640 30361 c0 -10 39 -31 44 -23 2 4 -7 12 -20 19 -13 6 -24 8 -24 4z\"></path><path d=\"M22705 30360 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M22525 30338 c-34 -20 -45 -35 -50 -70 -4 -23 -3 -27 3 -14 6 14 11 16 16 8 20 -33 96 13 96 59 0 24 -4 29 -22 29 -13 0 -32 -6 -43 -12z\"></path><path d=\"M22420 30260 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M22720 30240 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M22480 30220 c0 -3 9 -11 20 -18 16 -10 24 -10 40 0 29 19 25 23 -20 23 -22 0 -40 -2 -40 -5z\"></path><path d=\"M31490 30130 c-12 -8 -11 -10 8 -10 12 0 22 5 22 10 0 13 -11 13 -30 0z\"></path><path d=\"M31590 30129 c0 -7 159 -23 166 -16 2 2 -34 8 -81 13 -47 5 -85 7 -85 3z\"></path><path d=\"M31548 30113 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M31848 30093 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M31613 30083 c9 -2 23 -2 30 0 6 3 -1 5 -18 5 -16 0 -22 -2 -12 -5z\"></path><path d=\"M31773 30073 c9 -2 23 -2 30 0 6 3 -1 5 -18 5 -16 0 -22 -2 -12 -5z\"></path><path d=\"M22978 30023 c-10 -2 -18 -9 -18 -14 0 -12 3 -12 36 6 28 14 19 18 -18 8z\"></path><path d=\"M31218 30013 c12 -2 32 -2 45 0 12 2 2 4 -23 4 -25 0 -35 -2 -22 -4z\"></path><path d=\"M33030 29969 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M22793 29960 c2 -10 18 -15 48 -16 44 -1 44 -1 4 3 -22 3 -44 10 -48 16 -6 8 -7 7 -4 -3z\"></path><path d=\"M33090 29960 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M22748 29938 c9 -9 15 -9 24 0 9 9 7 12 -12 12 -19 0 -21 -3 -12 -12z\"></path><path d=\"M33160 29940 l-45 -7 40 -1 c22 -1 47 3 55 8 8 5 11 9 5 8 -5 0 -30 -4 -55 -8z\"></path><path d=\"M22700 29910 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M29088 31553 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M29061 31504 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M29875 31480 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M29790 31299 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M29615 31040 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M29495 30950 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M29267 30580 c3 -11 9 -22 13 -25 5 -3 6 4 3 15 -3 11 -9 22 -13 25 -5 3 -6 -4 -3 -15z\"></path><path d=\"M29235 30580 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M29135 30380 c-3 -5 -2 -10 4 -10 5 0 13 5 16 10 3 6 2 10 -4 10 -5 0 -13 -4 -16 -10z\"></path><path d=\"M27194 31005 c8 -8 25 -15 38 -15 18 0 20 2 8 9 -8 6 -17 8 -21 5 -4 -2 -10 0 -14 6 -3 5 -11 10 -16 10 -6 0 -4 -7 5 -15z\"></path><path d=\"M27128 30993 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M27243 30983 c-24 -2 -43 -9 -43 -15 0 -11 64 -2 90 13 8 4 11 8 5 7 -5 -1 -29 -3 -52 -5z\"></path><path d=\"M27100 30970 c0 -5 13 -10 29 -10 17 0 33 5 36 10 4 6 -8 10 -29 10 -20 0 -36 -4 -36 -10z\"></path><path d=\"M26465 30820 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M26428 30798 c9 -9 15 -9 24 0 9 9 7 12 -12 12 -19 0 -21 -3 -12 -12z\"></path><path d=\"M26328 30743 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M27272 30845 c-11 -13 -6 -15 38 -15 38 0 50 4 50 15 0 20 -70 20 -88 0z\"></path><path d=\"M27470 30820 c20 -13 43 -13 35 0 -3 6 -16 10 -28 10 -18 0 -19 -2 -7 -10z\"></path><path d=\"M27852 30871 c2 -7 7 -12 11 -12 12 1 9 15 -3 20 -7 2 -11 -2 -8 -8z\"></path><path d=\"M27757 30843 c-3 -5 17 -8 43 -8 26 0 46 3 43 8 -2 4 -22 7 -43 7 -21 0 -41 -3 -43 -7z\"></path><path d=\"M27760 30800 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M29460 30499 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M29380 30385 c0 -8 2 -15 4 -15 2 0 6 7 10 15 3 8 1 15 -4 15 -6 0 -10 -7 -10 -15z\"></path><path d=\"M29185 30190 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M29220 30180 c0 -5 4 -10 9 -10 6 0 13 5 16 10 3 6 -1 10 -9 10 -9 0 -16 -4 -16 -10z\"></path><path d=\"M29170 30159 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M28090 30820 c-8 -5 -11 -12 -7 -16 3 -4 12 -2 19 3 7 6 22 13 33 16 16 4 16 5 -5 6 -14 0 -32 -3 -40 -9z\"></path><path d=\"M26545 30620 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M26300 30450 c0 -5 -7 -10 -17 -10 -9 0 -14 -3 -10 -6 8 -8 47 5 47 17 0 5 -4 9 -10 9 -5 0 -10 -4 -10 -10z\"></path><path d=\"M26320 30399 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M26880 30550 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M25955 30490 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M25920 30469 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M25760 30410 c0 -5 4 -10 9 -10 6 0 13 5 16 10 3 6 -1 10 -9 10 -9 0 -16 -4 -16 -10z\"></path><path d=\"M36138 29583 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M36608 29473 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M36458 29433 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M36818 29213 c12 -2 32 -2 45 0 12 2 2 4 -23 4 -25 0 -35 -2 -22 -4z\"></path><path d=\"M23820 30430 c-13 -8 -13 -10 2 -10 9 0 20 5 23 10 8 13 -5 13 -25 0z\"></path><path d=\"M26040 30440 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M27195 30430 c11 -5 27 -9 35 -9 13 -1 13 0 0 9 -8 5 -24 9 -35 9 l-20 0 20 -9z\"></path><path d=\"M26866 30379 c-12 -12 -15 -19 -7 -19 16 0 44 27 34 33 -5 2 -17 -4 -27 -14z\"></path><path d=\"M36682 30329 c2 -6 8 -10 13 -10 5 0 11 4 13 10 2 6 -4 11 -13 11 -9 0 -15 -5 -13 -11z\"></path><path d=\"M19967 30253 c-4 -3 -7 -11 -7 -17 0 -6 5 -5 12 2 6 6 9 14 7 17 -3 3 -9 2 -12 -2z\"></path><path d=\"M19905 30230 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M19865 30210 c-3 -5 -2 -10 4 -10 5 0 13 5 16 10 3 6 2 10 -4 10 -5 0 -13 -4 -16 -10z\"></path><path d=\"M26965 30250 c3 -5 10 -10 16 -10 5 0 9 5 9 10 0 6 -7 10 -16 10 -8 0 -12 -4 -9 -10z\"></path><path d=\"M27345 30258 c-3 -9 -20 -21 -36 -27 -16 -5 -29 -15 -29 -20 0 -16 50 -13 56 3 3 8 27 17 55 21 59 8 67 29 9 23 -22 -2 -42 1 -44 7 -2 5 -7 2 -11 -7z\"></path><path d=\"M29320 30051 c0 -5 9 -11 19 -14 14 -3 18 -1 14 9 -6 15 -33 19 -33 5z\"></path><path d=\"M26640 30090 c0 -5 18 -10 40 -10 22 0 40 5 40 10 0 6 -18 10 -40 10 -22 0 -40 -4 -40 -10z\"></path><path d=\"M36010 30110 c-11 -7 -3 -10 30 -10 33 0 41 3 30 10 -8 5 -22 10 -30 10 -8 0 -22 -5 -30 -10z\"></path><path d=\"M22326 30094 c-4 -9 -5 -19 -3 -21 8 -8 37 10 37 23 0 19 -26 18 -34 -2z\"></path><path d=\"M24560 30093 c0 -10 -3 -28 -6 -40 -4 -14 -2 -23 5 -23 6 0 11 11 11 24 0 14 5 28 10 31 15 9 12 25 -5 25 -8 0 -15 -8 -15 -17z\"></path><path d=\"M36395 30029 c-4 -6 -5 -12 -2 -15 2 -3 7 2 10 11 7 17 1 20 -8 4z\"></path><path d=\"M26290 29971 c0 -6 5 -13 10 -16 6 -3 10 1 10 9 0 9 -4 16 -10 16 -5 0 -10 -4 -10 -9z\"></path><path d=\"M26610 29699 c-52 -16 -117 -34 -145 -39 -27 -6 -69 -20 -93 -31 -47 -23 -86 -69 -64 -77 6 -2 12 -8 12 -14 0 -15 39 -48 75 -63 38 -17 82 -20 120 -10 49 13 199 87 212 105 6 9 25 31 42 49 32 35 41 77 19 99 -18 18 -74 12 -178 -19z\"></path><path d=\"M25211 29271 c-10 -7 -15 -26 -14 -61 1 -59 19 -79 71 -80 46 0 65 21 56 64 -12 65 -70 104 -113 77z\"></path><path d=\"M30795 29227 c-23 -19 -27 -31 -27 -73 1 -27 5 -61 10 -74 22 -56 90 -90 180 -90 36 0 49 6 72 30 38 41 55 130 25 130 -8 0 -15 5 -15 10 0 6 -4 10 -9 10 -5 0 -36 18 -69 40 -72 48 -125 54 -167 17z\"></path><path d=\"M25845 29199 c-22 -4 -57 -11 -77 -14 -29 -5 -39 -11 -44 -30 -9 -35 -1 -42 62 -48 42 -4 65 -2 88 10 17 9 49 22 71 28 32 10 40 17 40 36 0 22 -5 24 -50 26 -28 0 -68 -3 -90 -8z\"></path><path d=\"M26322 29178 c-7 -7 -12 -25 -12 -40 0 -31 31 -45 69 -33 23 7 26 21 11 59 -10 28 -47 35 -68 14z\"></path><path d=\"M22825 29050 c-20 -22 -16 -80 7 -104 40 -40 108 -12 108 43 0 66 -75 106 -115 61z\"></path><path d=\"M25730 29032 c-40 -41 -39 -66 5 -86 73 -35 207 -16 227 32 7 15 12 31 12 36 1 12 -86 36 -156 43 -54 5 -59 4 -88 -25z\"></path><path d=\"M23672 28994 c-18 -15 -32 -33 -32 -40 0 -8 -8 -14 -19 -14 -24 0 -81 -55 -81 -79 0 -23 31 -51 57 -51 25 0 73 66 73 101 0 20 7 27 43 37 30 9 49 23 61 43 l17 29 -44 0 c-32 0 -51 -7 -75 -26z\"></path><path d=\"M22653 28914 c-3 -8 1 -23 10 -32 15 -14 17 -14 23 1 8 21 -1 47 -16 47 -6 0 -13 -7 -17 -16z\"></path><path d=\"M23816 28887 c-17 -13 -25 -65 -12 -86 11 -17 73 -14 80 5 25 66 -18 118 -68 81z\"></path><path d=\"M22192 28834 c-12 -8 -29 -31 -37 -50 -18 -43 -6 -66 43 -90 31 -15 35 -14 97 15 58 28 65 34 65 60 0 39 -9 61 -26 61 -8 0 -14 5 -14 10 0 16 -103 12 -128 -6z\"></path><path d=\"M29608 28753 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M29928 28753 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M29605 28671 c-3 -5 -20 -13 -38 -16 -55 -12 -87 -64 -73 -121 l7 -26 82 6 c106 9 179 31 217 67 37 36 37 42 3 68 -35 29 -66 35 -94 20 -17 -9 -24 -9 -27 0 -4 13 -68 15 -77 2z\"></path><path d=\"M21276 28585 c-78 -32 -118 -70 -114 -109 2 -16 11 -34 20 -40 20 -12 43 -5 226 72 104 43 112 48 112 74 l0 28 -92 0 c-75 0 -104 -5 -152 -25z\"></path><path d=\"M23137 28592 c-10 -10 -17 -23 -17 -28 0 -5 -16 -20 -35 -33 -19 -13 -35 -31 -35 -41 0 -35 56 -63 85 -42 17 11 65 99 65 118 0 15 -26 43 -41 44 -3 0 -13 -8 -22 -18z\"></path><path d=\"M23370 28577 c-27 -14 -42 -61 -28 -89 10 -21 58 -24 76 -6 18 18 15 63 -5 87 -16 18 -21 19 -43 8z\"></path><path d=\"M22956 28401 c-12 -13 -16 -32 -14 -57 4 -51 36 -69 91 -52 34 10 37 15 37 47 0 51 -23 81 -64 81 -20 0 -40 -8 -50 -19z\"></path><path d=\"M22238 28379 c-22 -12 -24 -76 -5 -103 19 -27 73 -13 81 20 10 37 -3 70 -30 83 -29 13 -25 13 -46 0z\"></path><path d=\"M22458 28379 c-22 -13 -22 -28 0 -55 26 -32 67 -39 92 -14 25 25 25 35 0 60 -21 21 -64 26 -92 9z\"></path><path d=\"M22625 28376 c-17 -12 -18 -16 -4 -52 13 -36 18 -39 56 -42 44 -3 83 22 83 53 0 46 -91 74 -135 41z\"></path><path d=\"M23258 28253 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M23213 28233 c9 -2 23 -2 30 0 6 3 -1 5 -18 5 -16 0 -22 -2 -12 -5z\"></path><path d=\"M21806 28215 c-74 -26 -105 -90 -66 -133 27 -29 54 -28 117 3 39 20 55 34 66 63 21 53 9 76 -39 79 -21 2 -57 -4 -78 -12z\"></path><path d=\"M23008 28183 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M23083 28183 c9 -2 23 -2 30 0 6 3 -1 5 -18 5 -16 0 -22 -2 -12 -5z\"></path><path d=\"M36212 29946 c4 -5 0 -15 -10 -22 -16 -12 -15 -13 5 -14 29 0 37 15 15 31 -9 7 -14 9 -10 5z\"></path><path d=\"M25918 29943 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M30818 29983 c12 -2 32 -2 45 0 12 2 2 4 -23 4 -25 0 -35 -2 -22 -4z\"></path><path d=\"M19425 29810 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M19357 29709 c7 -7 15 -10 18 -7 3 3 -2 9 -12 12 -14 6 -15 5 -6 -5z\"></path><path d=\"M31440 29880 c0 -7 14 -8 38 -4 51 9 53 14 4 14 -23 0 -42 -5 -42 -10z\"></path><path d=\"M30936 29811 c-6 -8 51 -21 89 -20 13 0 8 5 -15 14 -42 16 -67 18 -74 6z\"></path><path d=\"M35805 29810 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M33200 29810 c0 -5 8 -10 19 -10 10 0 34 -3 52 -6 23 -4 29 -2 19 4 -24 15 -90 24 -90 12z\"></path><path d=\"M33058 29803 c12 -2 32 -2 45 0 12 2 2 4 -23 4 -25 0 -35 -2 -22 -4z\"></path><path d=\"M33191 29779 c13 -8 97 -13 88 -5 -2 2 -26 6 -53 9 -30 3 -43 1 -35 -4z\"></path><path d=\"M30625 29750 c3 -5 11 -10 16 -10 6 0 7 5 4 10 -3 6 -11 10 -16 10 -6 0 -7 -4 -4 -10z\"></path><path d=\"M30665 29730 c3 -5 10 -10 16 -10 5 0 9 5 9 10 0 6 -7 10 -16 10 -8 0 -12 -4 -9 -10z\"></path><path d=\"M30538 29723 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M30680 29710 c-39 -16 -41 -19 -18 -19 15 -1 30 -5 33 -11 9 -14 22 -12 28 4 4 10 -1 12 -16 9 -22 -4 -22 -4 -2 12 13 11 34 15 62 13 22 -2 39 0 36 5 -8 13 -77 5 -123 -13z\"></path><path d=\"M30588 29713 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M20500 29615 c0 -19 21 -19 46 0 18 14 17 14 -13 15 -23 0 -33 -5 -33 -15z\"></path><path d=\"M32545 29640 c27 -12 43 -12 25 0 -8 5 -22 9 -30 9 -10 0 -8 -3 5 -9z\"></path><path d=\"M33340 29600 c0 -5 12 -10 28 -9 24 0 25 1 7 9 -27 12 -35 12 -35 0z\"></path><path d=\"M20985 29530 c3 -5 10 -10 16 -10 5 0 9 5 9 10 0 6 -7 10 -16 10 -8 0 -12 -4 -9 -10z\"></path><path d=\"M31563 29543 c-41 -4 -62 -23 -25 -23 39 0 91 13 86 21 -3 5 -8 8 -12 7 -4 -1 -26 -3 -49 -5z\"></path><path d=\"M31858 29543 c12 -2 32 -2 45 0 12 2 2 4 -23 4 -25 0 -35 -2 -22 -4z\"></path><path d=\"M37281 29480 c14 -31 19 -36 19 -24 0 6 -7 19 -16 30 -14 18 -14 18 -3 -6z\"></path><path d=\"M19498 29203 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M19350 29156 c0 -2 9 -6 20 -9 11 -3 20 -1 20 4 0 5 -9 9 -20 9 -11 0 -20 -2 -20 -4z\"></path><path d=\"M21090 29410 c-12 -8 -11 -10 8 -10 12 0 22 5 22 10 0 13 -11 13 -30 0z\"></path><path d=\"M31938 29423 c12 -2 32 -2 45 0 12 2 2 4 -23 4 -25 0 -35 -2 -22 -4z\"></path><path d=\"M32640 29320 c0 -5 -26 -11 -57 -12 l-58 -2 55 -3 c30 -3 58 -9 61 -15 5 -7 30 -8 85 -1 l79 10 -85 3 c-47 1 -77 4 -67 7 9 2 15 9 12 14 -8 12 -25 12 -25 -1z\"></path><path d=\"M32473 29289 c9 -6 41 -12 69 -15 68 -6 34 11 -36 19 -34 3 -45 2 -33 -4z\"></path><path d=\"M20106 29261 c-4 -7 -5 -15 -2 -18 9 -9 19 4 14 18 -4 11 -6 11 -12 0z\"></path><path d=\"M33101 29340 c-11 -6 -5 -10 22 -15 20 -4 42 -5 49 -2 7 3 2 6 -12 6 -15 1 -30 5 -36 11 -5 5 -15 6 -23 0z\"></path><path d=\"M20658 29293 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M37822 29130 c0 -14 2 -19 5 -12 2 6 2 18 0 25 -3 6 -5 1 -5 -13z\"></path><path d=\"M18672 28515 c0 -16 2 -22 5 -12 2 9 2 23 0 30 -3 6 -5 -1 -5 -18z\"></path><path d=\"M18677 28450 c-3 -11 -1 -20 4 -20 5 0 9 9 9 20 0 11 -2 20 -4 20 -2 0 -6 -9 -9 -20z\"></path><path d=\"M18650 28280 c-12 -8 -11 -10 8 -10 12 0 22 5 22 10 0 13 -11 13 -30 0z\"></path><path d=\"M18673 28175 c0 -38 2 -53 4 -32 2 20 2 52 0 70 -2 17 -4 1 -4 -38z\"></path><path d=\"M18660 28088 c0 -9 5 -20 10 -23 13 -8 13 5 0 25 -8 13 -10 13 -10 -2z\"></path><path d=\"M18667 27930 c3 -11 7 -20 9 -20 2 0 4 9 4 20 0 11 -4 20 -9 20 -5 0 -7 -9 -4 -20z\"></path><path d=\"M20199 28937 c-9 -7 -19 -22 -23 -35 -6 -17 -3 -22 9 -22 11 0 15 5 11 15 -3 8 2 22 11 30 19 20 14 28 -8 12z\"></path><path d=\"M19210 28210 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M34495 28000 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M19207 28064 c-8 -8 1 -24 14 -24 5 0 9 7 9 15 0 15 -12 20 -23 9z\"></path><path d=\"M19564 27791 c4 -5 0 -12 -6 -14 -8 -3 -6 -6 5 -6 9 -1 17 6 17 14 0 8 -5 15 -11 15 -5 0 -8 -4 -5 -9z\"></path><path d=\"M33101 27764 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M19261 27430 c0 -37 2 -41 9 -22 6 13 6 31 0 45 -7 18 -9 14 -9 -23z\"></path><path d=\"M19751 27355 c-2 -24 16 -37 35 -26 18 10 18 10 -3 11 -12 0 -24 6 -26 13 -3 6 -6 8 -6 2z\"></path><path d=\"M19840 27329 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M21448 27343 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M30750 27270 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M21440 27143 c0 -13 5 -23 10 -23 13 0 13 11 0 30 -8 12 -10 11 -10 -7z\"></path><path d=\"M22590 27061 c0 -5 12 -11 27 -14 26 -5 26 -4 8 9 -22 16 -35 18 -35 5z\"></path><path d=\"M29991 27014 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M29998 26983 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M23045 26979 c-15 -7 -8 -8 24 -4 33 4 48 1 62 -11 17 -15 19 -15 19 -2 0 27 -62 37 -105 17z\"></path><path d=\"M22720 26910 c0 -5 11 -10 25 -10 14 0 25 5 25 10 0 6 -11 10 -25 10 -14 0 -25 -4 -25 -10z\"></path><path d=\"M28623 26913 c9 -2 23 -2 30 0 6 3 -1 5 -18 5 -16 0 -22 -2 -12 -5z\"></path><path d=\"M22477 26899 c7 -7 15 -10 18 -7 3 3 -2 9 -12 12 -14 6 -15 5 -6 -5z\"></path><path d=\"M21280 26844 c0 -7 -11 -9 -25 -6 -14 2 -25 0 -25 -6 0 -5 16 -12 35 -14 19 -2 35 -2 35 2 0 11 -20 35 -20 24z\"></path><path d=\"M22948 26863 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M32730 26845 c7 -9 15 -13 17 -11 7 7 -7 26 -19 26 -6 0 -6 -6 2 -15z\"></path><path d=\"M22715 26750 c-3 -5 1 -10 10 -10 9 0 13 5 10 10 -3 6 -8 10 -10 10 -2 0 -7 -4 -10 -10z\"></path><path d=\"M22750 26730 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M22560 26710 c0 -5 7 -10 16 -10 8 0 12 5 9 10 -3 6 -10 10 -16 10 -5 0 -9 -4 -9 -10z\"></path><path d=\"M22537 26696 c-4 -10 -5 -21 -2 -24 9 -9 17 6 13 25 -3 17 -4 17 -11 -1z\"></path><path d=\"M22578 26673 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M22530 26649 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M30068 26673 c6 -2 9 -10 6 -15 -4 -7 -2 -8 5 -4 13 9 5 26 -12 25 -9 0 -8 -2 1 -6z\"></path><path d=\"M19926 26415 c-3 -8 -1 -15 3 -15 5 0 11 7 15 15 3 8 1 15 -3 15 -5 0 -11 -7 -15 -15z\"></path><path d=\"M19700 26390 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M19905 26260 c4 -6 11 -8 16 -5 14 9 11 15 -7 15 -8 0 -12 -5 -9 -10z\"></path><path d=\"M32078 26433 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M27580 26445 c0 -8 2 -15 4 -15 2 0 6 7 10 15 3 8 1 15 -4 15 -6 0 -10 -7 -10 -15z\"></path><path d=\"M31902 26313 c-2 -44 9 -59 32 -46 11 6 12 13 6 23 -8 13 -10 12 -10 -2 0 -37 -19 -16 -23 25 l-4 42 -1 -42z\"></path><path d=\"M31930 26240 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M21078 26193 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M27485 26220 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M28318 26028 c5 -5 16 -8 23 -6 8 3 3 7 -10 11 -17 4 -21 3 -13 -5z\"></path><path d=\"M32657 26023 c-4 -3 -7 -11 -7 -17 0 -6 5 -5 12 2 6 6 9 14 7 17 -3 3 -9 2 -12 -2z\"></path><path d=\"M23760 25890 c0 -5 4 -10 9 -10 6 0 13 5 16 10 3 6 -1 10 -9 10 -9 0 -16 -4 -16 -10z\"></path><path d=\"M27180 25960 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M26672 25860 c0 -14 2 -19 5 -12 2 6 2 18 0 25 -3 6 -5 1 -5 -13z\"></path><path d=\"M29330 25861 c0 -5 9 -7 20 -4 11 3 20 7 20 9 0 2 -9 4 -20 4 -11 0 -20 -4 -20 -9z\"></path><path d=\"M24100 25102 c0 -10 21 -32 32 -32 16 0 8 19 -12 30 -11 6 -20 7 -20 2z\"></path><path d=\"M25750 25819 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M24480 25783 c0 -14 15 -29 33 -36 22 -8 22 5 -1 26 -20 18 -32 22 -32 10z\"></path><path d=\"M23836 25081 c-4 -5 -2 -12 3 -15 5 -4 12 -2 15 3 4 5 2 12 -3 15 -5 4 -12 2 -15 -3z\"></path><path d=\"M33590 25726 c0 -8 4 -17 9 -20 5 -4 7 3 4 14 -6 23 -13 26 -13 6z\"></path><path d=\"M31525 25750 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M31525 25650 c3 -5 11 -10 16 -10 6 0 7 5 4 10 -3 6 -11 10 -16 10 -6 0 -7 -4 -4 -10z\"></path><path d=\"M21625 25710 c27 -12 43 -12 25 0 -8 5 -22 9 -30 9 -10 0 -8 -3 5 -9z\"></path><path d=\"M20754 25148 c-4 -6 1 -17 11 -25 30 -21 40 -15 14 8 l-24 22 23 -6 c12 -3 20 -1 16 4 -7 13 -31 11 -40 -3z\"></path><path d=\"M20830 25080 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M25107 25472 c1 -8 3 -19 3 -25 0 -7 4 -6 10 3 12 19 13 33 1 26 -5 -4 -11 -3 -14 1 -2 5 -2 2 0 -5z\"></path><path d=\"M26020 25260 c-10 -18 -8 -20 30 -20 33 0 40 3 40 20 0 16 -7 20 -30 20 -19 0 -33 -7 -40 -20z\"></path><path d=\"M22170 25350 c19 -13 30 -13 30 0 0 6 -10 10 -22 10 -19 0 -20 -2 -8 -10z\"></path><path d=\"M22222 25322 c-9 -3 -8 -8 3 -19 17 -16 46 -14 52 3 4 12 -34 23 -55 16z\"></path><path d=\"M22160 25310 c0 -6 7 -10 15 -10 8 0 15 2 15 4 0 2 -7 6 -15 10 -8 3 -15 1 -15 -4z\"></path><path d=\"M22256 25261 c-18 -7 -18 -8 -2 -14 16 -6 56 7 56 18 0 7 -32 5 -54 -4z\"></path><path d=\"M21605 25011 c6 -5 23 -13 39 -17 22 -5 28 -4 24 7 -2 8 -20 15 -39 17 -23 2 -31 0 -24 -7z\"></path><path d=\"M23040 24846 c0 -7 7 -19 15 -26 8 -7 15 -18 15 -25 0 -13 49 -27 63 -18 4 2 -6 22 -24 44 -30 38 -69 53 -69 25z\"></path><path d=\"M22841 24741 c-10 -18 -6 -31 11 -31 4 0 8 6 8 14 0 8 5 16 12 18 8 3 6 7 -5 11 -11 4 -20 0 -26 -12z\"></path><path d=\"M23050 24713 c0 -13 6 -23 14 -23 8 0 16 -6 19 -12 2 -7 7 -11 10 -8 3 3 -5 19 -18 35 -23 29 -24 29 -25 8z\"></path><path d=\"M22908 24713 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M23210 24716 c0 -2 7 -9 15 -16 12 -10 15 -10 15 4 0 9 -7 16 -15 16 -8 0 -15 -2 -15 -4z\"></path><path d=\"M20051 24667 c-16 -31 0 -67 30 -67 25 0 31 17 21 55 -11 38 -34 43 -51 12z\"></path><path d=\"M22314 24669 c-14 -23 40 -56 104 -64 52 -6 62 -10 62 -26 0 -16 7 -19 40 -19 28 0 40 4 40 15 0 18 -37 38 -57 31 -10 -4 -21 2 -30 14 -9 12 -25 20 -43 20 -19 0 -33 7 -40 20 -12 22 -64 28 -76 9z\"></path><path d=\"M21796 24641 c-3 -4 5 -18 18 -30 23 -22 23 -22 29 -1 7 26 -34 53 -47 31z\"></path><path d=\"M22653 24644 c-9 -4 -9 -11 -1 -29 15 -33 -4 -55 -49 -55 -26 0 -33 -4 -31 -17 2 -11 27 -25 73 -41 39 -13 72 -28 73 -33 2 -5 8 -9 13 -9 5 0 38 -17 72 -38 59 -37 65 -38 124 -33 62 6 62 6 45 28 -9 11 -42 36 -72 55 -31 18 -64 38 -75 45 -11 7 -46 27 -77 45 -42 24 -58 39 -60 57 -3 25 -14 33 -35 25z\"></path><path d=\"M23348 24625 c-12 -12 16 -45 37 -44 15 1 16 2 4 6 -9 2 -20 13 -25 24 -5 11 -12 17 -16 14z\"></path><path d=\"M21660 24597 c-37 -18 -31 -37 20 -65 25 -13 56 -31 70 -38 14 -8 32 -14 40 -14 20 -1 50 -24 50 -39 0 -7 19 -11 49 -11 31 0 53 -5 61 -15 7 -8 28 -19 48 -25 29 -8 39 -6 55 7 16 15 19 15 27 3 6 -8 10 -23 10 -32 0 -11 8 -18 18 -18 10 0 29 -10 41 -22 13 -12 37 -21 52 -21 23 0 29 -5 29 -21 0 -15 10 -24 34 -32 31 -9 35 -8 40 9 7 28 -1 37 -32 37 -28 0 -66 34 -90 81 -11 20 -19 25 -45 22 l-32 -3 29 14 c28 13 29 14 8 20 -12 4 -30 5 -39 2 -18 -5 -83 44 -83 63 0 19 -39 22 -65 5 -27 -18 -106 -15 -113 5 -2 5 -10 7 -18 4 -8 -3 -14 1 -14 10 0 20 -80 87 -105 87 -11 0 -31 -6 -45 -13z\"></path><path d=\"M22920 24540 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M21632 24390 c-19 -11 -32 -26 -30 -32 7 -20 112 -68 136 -62 37 10 28 46 -22 82 -24 18 -46 32 -48 32 -1 0 -18 -9 -36 -20z\"></path><path d=\"M22044 24376 c-10 -8 -16 -17 -12 -21 11 -11 48 5 48 21 0 18 -11 18 -36 0z\"></path><path d=\"M22997 24383 c-12 -12 -7 -22 17 -35 14 -7 44 -31 68 -53 46 -44 66 -47 87 -14 11 18 10 24 -10 45 -12 13 -32 24 -43 24 -12 0 -34 9 -51 20 -31 20 -56 25 -68 13z\"></path><path d=\"M23344 24369 c-3 -6 0 -15 7 -20 14 -8 32 9 23 23 -7 11 -22 10 -30 -3z\"></path><path d=\"M22910 24330 c0 -11 5 -20 10 -20 6 0 10 9 10 20 0 11 -4 20 -10 20 -5 0 -10 -9 -10 -20z\"></path><path d=\"M22446 24304 c-8 -22 -7 -34 3 -34 12 0 21 39 11 45 -4 3 -11 -2 -14 -11z\"></path><path d=\"M21760 24282 c0 -11 14 -25 33 -34 18 -8 70 -44 116 -79 45 -35 89 -68 96 -74 19 -13 81 18 90 45 7 24 -14 64 -44 79 -11 6 -46 7 -90 2 -72 -7 -72 -7 -92 21 -35 49 -109 76 -109 40z\"></path><path d=\"M23200 24280 c0 -23 4 -24 31 -9 23 12 16 29 -12 29 -12 0 -19 -7 -19 -20z\"></path><path d=\"M22348 24263 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M22995 24250 c-3 -5 6 -17 20 -26 14 -9 25 -22 25 -29 0 -7 7 -15 15 -19 19 -7 20 20 1 31 -7 4 -18 18 -25 31 -12 23 -26 28 -36 12z\"></path><path d=\"M22367 24220 c-16 -37 -14 -50 9 -50 8 0 14 -6 14 -12 0 -10 3 -9 9 1 6 9 11 10 15 2 9 -14 26 -14 26 -1 0 6 -6 10 -13 10 -14 0 -33 31 -40 65 -3 16 -7 14 -20 -15z\"></path><path d=\"M22305 24231 c-3 -5 -1 -12 5 -16 5 -3 10 -3 10 1 0 3 8 0 17 -7 15 -12 16 -12 10 4 -4 10 -7 21 -7 23 0 8 -29 4 -35 -5z\"></path><path d=\"M23080 24162 c0 -4 18 -24 40 -45 22 -20 40 -41 40 -47 0 -15 32 -8 38 8 2 6 -3 12 -12 12 -19 0 -66 46 -66 65 0 8 -9 15 -20 15 -11 0 -20 -4 -20 -8z\"></path><path d=\"M22440 24127 c0 -7 10 -18 21 -26 19 -11 21 -11 15 4 -3 9 -6 21 -6 26 0 5 -7 9 -15 9 -8 0 -15 -6 -15 -13z\"></path><path d=\"M20710 24110 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M22490 24091 c0 -6 9 -15 21 -21 18 -10 20 -9 17 7 -3 19 -38 32 -38 14z\"></path><path d=\"M20684 24079 c-3 -6 -1 -16 5 -22 8 -8 11 -5 11 11 0 24 -5 28 -16 11z\"></path><path d=\"M23400 24071 c0 -5 7 -12 16 -15 8 -3 12 -10 9 -16 -3 -5 -1 -10 5 -10 13 0 9 32 -5 42 -14 10 -25 10 -25 -1z\"></path><path d=\"M21280 24050 c0 -19 3 -21 12 -12 9 9 9 15 0 24 -9 9 -12 7 -12 -12z\"></path><path d=\"M21486 24041 c-13 -20 6 -33 40 -29 33 4 34 3 28 -28 -5 -28 -3 -32 20 -38 14 -3 26 -11 26 -16 0 -13 57 -13 65 0 8 12 -94 110 -115 110 -8 0 -25 3 -36 6 -12 3 -25 1 -28 -5z\"></path><path d=\"M21026 23911 c-10 -16 4 -36 27 -38 12 0 42 -10 68 -22 35 -16 50 -30 67 -65 28 -55 58 -68 84 -36 10 13 22 20 25 16 4 -4 3 -10 -3 -14 -23 -15 -22 -38 2 -49 13 -6 24 -7 24 -3 0 5 12 10 28 12 36 4 36 32 0 36 -15 2 -33 11 -40 21 -7 10 -32 30 -55 45 -37 23 -43 31 -43 61 0 45 -11 50 -59 25 -50 -25 -63 -25 -79 0 -13 21 -37 27 -46 11z m294 -181 c0 -11 -4 -20 -10 -20 -5 0 -10 9 -10 20 0 11 5 20 10 20 6 0 10 -9 10 -20z\"></path><path d=\"M23170 23900 c0 -5 10 -15 22 -21 13 -7 29 -18 36 -26 17 -17 62 -17 62 0 -1 29 -18 40 -54 33 -29 -6 -36 -4 -36 9 0 8 -7 15 -15 15 -8 0 -15 -4 -15 -10z\"></path><path d=\"M22348 23873 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M23337 23863 c-12 -11 -8 -33 6 -33 7 0 30 -16 51 -35 39 -36 60 -43 71 -25 25 40 -95 127 -128 93z\"></path><path d=\"M23807 23863 c-13 -13 -7 -33 11 -33 10 0 22 -12 29 -29 6 -16 29 -42 51 -58 23 -15 42 -37 43 -48 1 -17 2 -17 6 -2 7 26 23 20 23 -9 0 -14 4 -23 10 -19 25 16 -8 75 -42 75 -10 0 -18 4 -18 9 0 4 -18 29 -40 54 -22 25 -40 50 -40 56 0 12 -23 15 -33 4z\"></path><path d=\"M22210 23777 c-19 -5 -59 -11 -87 -14 -37 -3 -53 -9 -53 -19 0 -8 -9 -14 -20 -14 -11 0 -20 -5 -20 -11 0 -7 8 -9 23 -4 41 13 117 22 117 13 0 -16 18 -8 23 11 5 21 47 32 71 19 22 -12 20 5 -1 18 -12 7 -30 7 -53 1z\"></path><path d=\"M24018 23770 c-4 -43 -7 -77 -13 -118 -7 -47 10 -71 48 -72 9 0 17 -4 17 -10 0 -5 4 -10 8 -10 25 0 -16 136 -44 147 -12 4 -14 15 -9 44 4 22 4 39 1 39 -3 0 -7 -9 -8 -20z\"></path><path d=\"M23480 23743 c0 -5 5 -15 10 -23 8 -12 10 -11 10 8 0 12 -4 22 -10 22 -5 0 -10 -3 -10 -7z\"></path><path d=\"M22493 23713 c-28 -10 -6 -63 26 -63 8 0 23 -7 33 -17 17 -15 18 -15 18 4 0 31 -54 84 -77 76z\"></path><path d=\"M22116 23701 c-17 -7 -15 -10 16 -29 19 -12 42 -22 49 -22 12 0 12 2 0 9 -8 5 -10 14 -6 21 14 23 -22 36 -59 21z m44 -11 c0 -5 -4 -10 -9 -10 -6 0 -13 5 -16 10 -3 6 1 10 9 10 9 0 16 -4 16 -10z\"></path><path d=\"M23727 23704 c-16 -16 -6 -35 16 -32 12 2 22 10 22 18 0 16 -26 25 -38 14z\"></path><path d=\"M24540 23670 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M23551 23649 c-12 -20 -10 -25 16 -50 21 -19 34 -24 44 -18 12 7 11 15 -6 46 -24 45 -36 50 -54 22z\"></path><path d=\"M22270 23650 c0 -6 11 -15 25 -20 14 -5 25 -16 25 -24 0 -13 20 -26 41 -26 22 0 6 27 -21 37 -17 6 -29 17 -28 24 2 8 -7 15 -19 17 -13 2 -23 -2 -23 -8z\"></path><path d=\"M24990 23650 c0 -6 11 -15 25 -20 14 -5 25 -14 25 -20 0 -12 59 -70 71 -70 19 0 7 18 -46 68 -53 51 -75 63 -75 42z\"></path><path d=\"M22800 23640 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M20680 23610 c0 -5 12 -10 26 -10 14 0 23 4 19 10 -3 6 -15 10 -26 10 -10 0 -19 -4 -19 -10z\"></path><path d=\"M24258 23613 c-27 -7 -21 -21 11 -28 31 -7 81 2 81 15 0 15 -54 23 -92 13z\"></path><path d=\"M24570 23610 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M24605 23610 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M25550 23600 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M24445 23580 c-7 -11 5 -40 16 -40 5 0 9 5 9 11 0 6 9 8 21 4 17 -6 20 -3 17 11 -3 19 -53 30 -63 14z\"></path><path d=\"M24582 23565 c2 -16 13 -21 53 -25 40 -4 51 -9 53 -25 5 -25 74 -98 83 -87 12 12 19 76 10 90 -4 7 -24 15 -45 18 -20 2 -45 13 -56 24 -21 21 -23 22 -70 24 -25 1 -30 -3 -28 -19z\"></path><path d=\"M22610 23574 c0 -3 4 -14 10 -24 8 -15 5 -19 -16 -24 -13 -4 -43 -1 -65 5 -30 9 -42 10 -51 1 -15 -15 13 -38 57 -47 35 -8 133 -54 141 -66 3 -5 23 -9 45 -9 28 0 39 4 39 15 0 8 -4 15 -10 15 -5 0 -10 4 -10 8 0 12 -118 132 -130 132 -5 0 -10 -3 -10 -6z\"></path><path d=\"M23630 23573 c0 -16 25 -73 32 -73 4 0 5 6 2 14 -3 8 -1 17 5 21 15 9 -5 45 -24 45 -8 0 -15 -3 -15 -7z\"></path><path d=\"M25580 23573 c0 -4 20 -26 45 -48 38 -36 44 -47 43 -78 l-1 -37 -46 0 c-26 0 -56 7 -69 16 -14 10 -52 17 -108 19 -104 5 -209 31 -284 70 -36 18 -40 19 -40 2 0 -9 -23 -19 -57 -27 -46 -10 -54 -14 -38 -21 11 -4 36 -8 56 -8 46 -1 112 -37 167 -90 51 -48 72 -52 72 -13 0 49 11 55 84 47 36 -3 66 -10 66 -14 0 -4 65 -12 146 -18 l145 -10 37 -36 c20 -19 46 -37 57 -39 12 -2 21 -13 23 -26 2 -14 10 -22 22 -22 28 0 33 17 11 37 -20 17 -20 17 1 32 16 11 49 14 140 12 110 -2 119 0 116 16 -4 22 -36 28 -208 42 -148 12 -201 30 -230 77 -10 19 -24 34 -30 34 -7 0 -32 20 -57 45 -42 42 -63 55 -63 38z\"></path><path d=\"M26110 23576 c0 -4 7 -14 15 -22 8 -9 15 -11 15 -6 0 5 -7 15 -15 22 -8 7 -15 9 -15 6z\"></path><path d=\"M22450 23555 c-10 -13 -9 -15 9 -15 12 0 21 6 21 15 0 8 -4 15 -9 15 -5 0 -14 -7 -21 -15z\"></path><path d=\"M24106 23551 c-3 -5 3 -20 14 -34 11 -14 20 -30 20 -36 0 -6 7 -11 15 -11 21 0 19 4 -15 41 -21 24 -26 35 -17 41 9 6 9 8 0 8 -6 0 -14 -4 -17 -9z\"></path><path d=\"M22105 23520 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M26190 23526 c0 -2 8 -10 18 -17 15 -13 16 -12 3 4 -13 16 -21 21 -21 13z\"></path><path d=\"M22150 23505 c0 -8 2 -15 4 -15 2 0 6 7 10 15 3 8 1 15 -4 15 -6 0 -10 -7 -10 -15z\"></path><path d=\"M24170 23500 c11 -20 30 -28 30 -12 0 11 -22 32 -32 32 -5 0 -4 -9 2 -20z\"></path><path d=\"M24858 23493 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M22195 23472 c-16 -11 -16 -50 1 -56 8 -3 17 0 20 7 7 19 -9 57 -21 49z\"></path><path d=\"M24170 23460 c-8 -5 -12 -12 -8 -15 3 -4 15 -1 26 6 17 10 23 10 36 0 9 -8 16 -19 16 -26 0 -16 38 -50 47 -42 3 4 2 7 -4 7 -5 0 -18 18 -29 40 -20 41 -50 52 -84 30z\"></path><path d=\"M26220 23441 c8 -30 37 -40 46 -16 8 19 -8 38 -35 40 -15 1 -17 -3 -11 -24z\"></path><path d=\"M21502 23438 c3 -7 13 -14 24 -16 32 -5 68 -25 91 -52 16 -17 23 -20 23 -10 -1 21 -93 90 -120 90 -13 0 -20 -5 -18 -12z\"></path><path d=\"M21606 23425 c28 -28 44 -32 44 -11 0 11 -46 36 -66 36 -2 0 8 -11 22 -25z\"></path><path d=\"M21772 23430 c-10 -17 -10 -20 3 -20 8 0 15 9 15 20 0 11 -1 20 -3 20 -1 0 -8 -9 -15 -20z\"></path><path d=\"M21892 23428 c2 -18 14 -27 57 -40 29 -10 57 -15 62 -12 14 8 -2 33 -24 36 -12 2 -22 10 -22 18 0 10 -12 16 -38 18 -35 3 -38 1 -35 -20z\"></path><path d=\"M23250 23441 c0 -6 8 -16 18 -23 9 -7 24 -26 32 -42 8 -16 29 -35 47 -42 19 -8 33 -22 35 -35 2 -11 15 -28 30 -37 47 -28 44 -4 -5 41 -26 24 -47 47 -47 52 0 10 -49 55 -60 55 -4 0 -10 9 -13 20 -5 20 -37 29 -37 11z m100 -81 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z\"></path><path d=\"M26657 23443 c-13 -12 -7 -51 9 -57 19 -7 34 1 34 18 0 17 -35 48 -43 39z\"></path><path d=\"M24205 23420 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M21810 23391 c0 -14 6 -19 20 -18 25 2 23 30 -3 35 -11 2 -17 -3 -17 -17z\"></path><path d=\"M22793 23403 c-19 -7 -16 -20 14 -53 29 -33 77 -41 87 -15 3 8 16 15 28 16 15 1 9 5 -17 11 -22 6 -42 14 -45 17 -6 7 -48 31 -52 30 -2 0 -9 -3 -15 -6z\"></path><path d=\"M21664 23359 c-3 -6 -1 -16 5 -22 8 -8 11 -5 11 11 0 24 -5 28 -16 11z\"></path><path d=\"M24271 23348 c6 -10 14 -16 19 -13 6 3 7 -1 4 -9 -4 -9 5 -20 25 -30 35 -19 54 -48 45 -70 -7 -19 2 -21 20 -4 7 7 11 22 9 33 -4 18 -3 18 7 3 7 -12 7 -23 0 -38 -5 -11 -14 -29 -20 -40 -12 -25 -13 -30 0 -30 5 0 13 15 18 33 8 28 10 30 18 13 5 -13 3 -21 -4 -24 -21 -7 -13 -32 11 -32 18 0 19 2 7 10 -11 8 -5 9 23 7 20 -2 36 -8 35 -13 -1 -5 -9 -8 -17 -6 -8 2 11 -21 41 -52 30 -31 60 -56 66 -56 5 0 17 -11 26 -25 18 -27 46 -34 46 -10 0 8 -9 20 -20 27 -11 7 -20 22 -20 34 0 19 -20 41 -112 119 -10 8 -26 15 -37 15 -19 0 -48 26 -39 36 11 10 -39 89 -58 92 -10 2 -29 13 -42 25 -12 11 -31 21 -42 22 -15 1 -17 -2 -9 -17z\"></path><path d=\"M22100 23346 c0 -10 9 -16 21 -16 24 0 21 23 -4 28 -10 2 -17 -3 -17 -12z\"></path><path d=\"M22966 23315 c-10 -27 -7 -35 14 -35 12 0 39 -9 61 -20 35 -18 42 -19 60 -7 19 14 19 15 -15 40 -44 34 -110 46 -120 22z\"></path><path d=\"M25335 23320 c-8 -12 41 -74 69 -87 17 -8 17 -9 0 -23 -16 -14 -17 -13 -11 3 3 9 2 17 -3 17 -6 0 -10 -5 -10 -11 0 -29 -35 -38 -135 -33 -117 5 -260 46 -277 79 -17 30 -33 43 -62 51 -29 7 -33 -4 -14 -36 10 -16 10 -24 0 -41 -7 -12 -12 -23 -9 -25 2 -2 26 -7 53 -10 41 -5 57 -14 102 -57 28 -28 52 -55 52 -60 0 -5 25 -33 55 -62 30 -30 55 -58 55 -63 0 -17 75 -83 116 -101 23 -11 55 -32 70 -48 39 -40 64 -49 64 -23 0 11 -3 19 -7 19 -21 -3 -31 3 -36 21 -3 11 -11 20 -19 20 -7 0 -22 16 -32 35 -21 39 -75 92 -123 120 -18 11 -33 24 -33 29 0 5 -19 27 -41 47 -60 54 -50 67 52 71 61 2 86 -1 97 -11 9 -10 47 -16 114 -19 89 -4 101 -7 114 -27 8 -13 26 -26 40 -29 13 -4 24 -13 24 -21 0 -21 16 -19 51 8 28 20 40 22 140 19 106 -3 110 -2 100 16 -9 17 -26 20 -148 24 -101 4 -147 10 -170 22 -18 9 -41 16 -52 16 -11 0 -22 9 -26 20 -8 25 -26 25 -55 0 -12 -11 -26 -17 -31 -14 -14 8 1 31 29 44 l27 12 -28 20 c-15 11 -27 26 -27 34 0 8 -7 14 -15 14 -9 0 -20 11 -25 25 -10 26 -24 32 -35 15z m-402 -97 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m457 -58 c0 -8 -4 -15 -10 -15 -5 0 -10 7 -10 15 0 8 5 15 10 15 6 0 10 -7 10 -15z m-30 -15 c0 -5 10 -10 22 -10 12 0 19 -3 15 -6 -9 -9 -57 5 -57 16 0 6 5 10 10 10 6 0 10 -4 10 -10z\"></path><path d=\"M22158 23314 c-4 -3 -4 -12 -1 -20 7 -19 53 -18 53 1 0 8 -4 15 -9 15 -5 0 -16 2 -23 5 -8 3 -17 3 -20 -1z\"></path><path d=\"M22237 23274 c-18 -18 -2 -34 68 -69 41 -20 82 -38 90 -39 8 -1 18 -5 21 -9 4 -4 20 -7 36 -7 17 0 28 -5 28 -14 0 -7 7 -19 15 -26 12 -10 18 -10 31 1 12 10 17 10 23 0 6 -10 10 -9 14 4 5 11 3 14 -5 9 -8 -5 -9 -2 -5 9 5 14 0 17 -33 17 -30 0 -40 4 -40 16 0 15 -25 42 -72 80 -8 6 -36 14 -63 17 -28 4 -61 10 -75 13 -14 3 -29 2 -33 -2z\"></path><path d=\"M24073 23261 c-1 -13 7 -15 43 -12 53 4 53 7 -2 19 -34 8 -40 6 -41 -7z\"></path><path d=\"M21134 23234 c3 -9 6 -18 6 -20 0 -3 4 -3 10 1 11 7 2 35 -12 35 -6 0 -7 -7 -4 -16z\"></path><path d=\"M23470 23219 c9 -15 8 -24 -2 -37 -12 -15 -11 -16 5 -3 21 17 22 47 2 55 -13 5 -14 2 -5 -15z\"></path><path d=\"M21935 23219 c-4 -6 -4 -13 -1 -16 8 -8 36 5 36 17 0 13 -27 13 -35 -1z\"></path><path d=\"M25930 23218 c0 -7 11 -23 24 -35 17 -17 26 -19 34 -11 18 18 15 36 -7 48 -27 14 -51 13 -51 -2z\"></path><path d=\"M23272 23183 c-7 -7 -10 -14 -7 -14 3 -1 8 -2 13 -3 17 -4 39 -22 45 -38 11 -32 97 -19 97 14 0 4 -9 8 -19 8 -11 0 -26 6 -33 13 -24 23 -82 36 -96 20z\"></path><path d=\"M24347 23194 c-4 -4 -7 -14 -7 -23 0 -11 3 -12 11 -4 6 6 10 16 7 23 -2 6 -7 8 -11 4z\"></path><path d=\"M21977 23170 c-4 -14 0 -20 12 -20 9 0 22 -9 29 -20 7 -11 19 -20 27 -20 8 0 15 -4 15 -10 0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -16 10 -8 0 -20 14 -26 30 -16 47 -61 66 -71 30z\"></path><path d=\"M21140 23161 c0 -6 5 -13 10 -16 6 -3 10 1 10 9 0 9 -4 16 -10 16 -5 0 -10 -4 -10 -9z\"></path><path d=\"M23014 23163 c17 -3 30 -12 33 -24 3 -10 9 -19 13 -19 4 0 10 -9 13 -21 3 -12 10 -18 17 -14 8 5 7 12 -4 24 -9 10 -16 23 -16 29 0 16 -34 32 -62 31 -18 -2 -17 -3 6 -6z\"></path><path d=\"M21190 23150 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M23026 23125 c9 -14 19 -24 21 -21 7 7 -16 46 -28 46 -5 0 -2 -11 7 -25z\"></path><path d=\"M23524 23124 c-26 -39 -9 -76 41 -92 22 -7 46 -19 55 -26 8 -8 34 -17 57 -21 39 -6 42 -9 37 -30 -4 -17 1 -29 20 -46 14 -12 26 -26 26 -31 0 -19 44 -50 78 -55 l36 -6 -16 25 c-10 15 -29 38 -43 54 -32 34 -31 37 5 51 45 17 38 39 -14 45 -60 7 -117 38 -189 104 -33 30 -64 54 -68 54 -5 0 -16 -12 -25 -26z m221 -144 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m5 -34 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z\"></path><path d=\"M21166 23115 c4 -8 10 -12 15 -9 14 8 10 24 -6 24 -9 0 -12 -6 -9 -15z\"></path><path d=\"M21210 23093 c0 -23 -2 -25 -11 -13 -9 13 -10 13 -6 0 2 -9 14 -14 28 -13 18 2 27 -4 37 -24 6 -15 12 -33 12 -40 0 -7 5 -13 10 -13 12 0 12 0 -2 41 -13 40 -46 89 -59 89 -5 0 -9 -12 -9 -27z\"></path><path d=\"M24060 23099 c0 -14 67 -79 81 -79 5 0 9 -6 9 -14 0 -7 8 -16 19 -19 32 -8 3 48 -36 69 -19 10 -39 26 -44 36 -11 20 -29 24 -29 7z\"></path><path d=\"M26053 23103 c-7 -2 -13 -11 -13 -18 0 -7 -13 -16 -30 -20 -43 -10 -37 -21 16 -29 25 -3 66 -15 91 -26 25 -11 51 -20 58 -20 6 0 17 -11 23 -25 6 -14 16 -25 22 -25 13 0 13 37 0 43 -6 3 -5 4 2 3 7 -2 13 -18 14 -37 1 -50 3 -56 14 -39 7 12 12 12 22 2 6 -6 18 -12 26 -12 16 0 3 20 -48 76 l-32 36 22 15 c29 20 19 27 -70 51 -41 11 -82 23 -90 26 -8 2 -21 2 -27 -1z\"></path><path d=\"M23116 23050 c-19 -6 -19 -7 -1 -13 20 -8 29 -4 24 11 -2 5 -13 6 -23 2z\"></path><path d=\"M21300 23040 c0 -5 9 -10 21 -10 11 0 17 5 14 10 -3 6 -13 10 -21 10 -8 0 -14 -4 -14 -10z\"></path><path d=\"M21235 23018 c4 -13 11 -27 16 -32 5 -6 9 -27 9 -49 0 -21 4 -36 9 -33 15 10 -14 136 -31 136 -5 0 -6 -10 -3 -22z\"></path><path d=\"M22774 23019 c-11 -19 27 -41 61 -35 17 2 24 2 18 -1 -22 -9 -14 -25 10 -19 12 3 16 3 10 0 -7 -3 -13 -10 -13 -16 0 -5 6 -8 13 -5 6 2 31 -7 54 -20 61 -34 121 -29 78 7 -8 7 -25 10 -38 6 -18 -4 -30 1 -48 20 -41 44 -132 84 -145 63z\"></path><path d=\"M25636 23005 c4 -8 12 -15 19 -15 7 0 15 -9 18 -21 6 -24 30 -21 35 4 2 12 -3 17 -18 17 -11 0 -23 7 -26 15 -4 8 -12 15 -20 15 -8 0 -11 -6 -8 -15z\"></path><path d=\"M25028 22961 c37 -36 60 -39 93 -13 l22 19 -55 6 c-31 4 -65 10 -75 13 -11 4 -6 -6 15 -25z\"></path><path d=\"M24203 22973 c-21 -8 -15 -32 6 -26 15 4 20 -1 23 -18 3 -25 38 -40 38 -17 0 11 -46 70 -53 67 -1 0 -8 -3 -14 -6z\"></path><path d=\"M24660 22960 c0 -5 7 -10 16 -10 8 0 12 5 9 10 -3 6 -10 10 -16 10 -5 0 -9 -4 -9 -10z\"></path><path d=\"M22660 22950 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M22240 22925 c-9 -11 -10 -19 -3 -26 7 -7 14 -5 23 6 9 11 10 19 3 26 -7 7 -14 5 -23 -6z\"></path><path d=\"M22701 22926 c-9 -11 -8 -15 5 -20 23 -9 24 -8 24 14 0 23 -13 26 -29 6z\"></path><path d=\"M23920 22934 c0 -10 28 -33 34 -27 3 3 10 -6 15 -21 9 -21 17 -26 45 -26 20 0 36 6 39 14 8 19 -1 26 -34 26 -20 0 -27 4 -23 14 3 8 -4 16 -18 20 -29 7 -58 8 -58 0z\"></path><path d=\"M23220 22920 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M24697 22924 c-3 -4 0 -19 9 -35 10 -20 22 -29 39 -29 38 0 31 36 -12 59 -25 13 -28 13 -36 5z\"></path><path d=\"M25515 22892 c-3 -3 -5 -14 -5 -25 0 -15 5 -18 23 -13 12 3 25 6 30 6 4 0 7 8 7 19 0 13 -7 19 -25 19 -13 0 -27 -3 -30 -6z\"></path><path d=\"M25777 22882 c-25 -27 -21 -51 11 -64 37 -16 135 -82 151 -102 7 -9 24 -16 38 -16 20 0 23 -4 18 -22 -5 -20 -5 -21 5 -5 15 23 5 51 -15 43 -23 -8 -32 24 -11 39 9 7 48 16 87 20 38 4 69 10 69 14 0 15 -93 31 -145 25 -49 -6 -56 -4 -80 20 -14 14 -33 26 -41 26 -8 0 -24 9 -36 20 -27 25 -31 25 -51 2z\"></path><path d=\"M26260 22892 c0 -5 9 -17 21 -28 15 -14 22 -15 28 -6 5 8 16 -5 31 -38 13 -27 29 -50 37 -50 7 0 13 -8 13 -19 0 -11 11 -23 28 -30 44 -18 75 -51 107 -114 33 -66 74 -102 105 -92 31 10 25 49 -15 89 -54 56 -43 96 27 96 21 0 38 5 38 10 0 6 -14 10 -31 10 -16 0 -47 9 -67 19 -20 11 -63 25 -94 31 -37 7 -58 16 -58 25 0 18 -48 55 -71 55 -10 0 -23 9 -29 21 -9 16 -14 18 -26 9 -11 -10 -15 -9 -20 4 -6 17 -24 22 -24 8z\"></path><path d=\"M23071 22869 c13 -12 32 -18 43 -15 22 6 59 -11 51 -23 -6 -11 24 -23 37 -15 5 3 16 -3 24 -14 8 -11 31 -23 53 -27 22 -3 49 -17 62 -31 12 -13 32 -24 45 -24 13 0 24 -8 27 -20 6 -25 58 -28 81 -4 25 25 19 34 -24 34 -35 0 -42 4 -52 28 -21 47 -98 112 -98 82 0 -5 -16 -12 -36 -16 -35 -6 -55 1 -147 53 -12 7 -37 13 -56 13 l-34 0 24 -21z m42 4 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z\"></path><path d=\"M24272 22878 c3 -7 12 -14 21 -16 12 -2 15 1 11 12 -7 19 -38 22 -32 4z\"></path><path d=\"M24070 22855 c7 -8 20 -14 29 -14 13 1 13 2 -1 6 -10 2 -18 9 -18 14 0 5 -5 9 -11 9 -8 0 -8 -5 1 -15z\"></path><path d=\"M24128 22863 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M24314 22835 c-8 -21 5 -85 17 -85 6 0 8 -4 4 -9 -3 -6 17 -11 46 -13 48 -3 53 -5 62 -33 13 -39 36 -56 59 -44 10 5 17 13 17 17 -4 24 3 42 16 42 8 0 14 -5 13 -12 -4 -14 131 -40 215 -42 38 -1 57 -5 57 -13 0 -19 57 -16 64 3 11 28 7 31 -34 29 -55 -3 -176 19 -196 36 -12 10 -40 13 -92 12 -71 -2 -132 14 -132 35 0 11 -53 66 -78 80 -28 15 -31 15 -38 -3z m273 -131 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z\"></path><path d=\"M24790 22837 c0 -17 34 -57 48 -57 6 0 14 -9 17 -21 4 -11 18 -24 31 -29 13 -5 23 -15 22 -22 -2 -7 7 -14 20 -16 16 -2 22 -8 18 -18 -10 -25 15 -60 52 -74 20 -7 55 -31 78 -54 22 -23 56 -55 75 -71 41 -36 89 -97 89 -113 0 -8 -26 -12 -80 -12 -67 0 -83 3 -100 20 -24 24 -58 26 -67 5 -8 -21 -2 -25 41 -27 23 -1 42 -8 50 -19 10 -14 33 -19 117 -25 109 -7 128 -13 182 -65 37 -36 52 -36 73 -4 15 23 22 25 100 25 46 0 84 4 84 9 0 15 -29 21 -100 21 -135 2 -138 3 -246 106 -54 52 -105 92 -112 89 -7 -3 -10 -1 -7 4 7 12 -16 63 -32 74 -17 11 -16 32 2 47 22 18 9 29 -28 24 -43 -7 -167 48 -167 74 0 10 -9 24 -21 32 -11 8 -29 30 -41 48 -11 18 -36 39 -55 47 -43 18 -43 18 -43 2z\"></path><path d=\"M24125 22830 c-4 -6 5 -10 20 -10 15 0 24 4 20 10 -3 6 -12 10 -20 10 -8 0 -17 -4 -20 -10z\"></path><path d=\"M23890 22780 c0 -26 47 -57 62 -42 15 15 -9 45 -30 37 -10 -3 -12 0 -8 10 3 9 0 15 -9 15 -8 0 -15 -9 -15 -20z\"></path><path d=\"M22870 22750 c0 -5 7 -10 16 -10 8 0 12 5 9 10 -3 6 -10 10 -16 10 -5 0 -9 -4 -9 -10z\"></path><path d=\"M25460 22739 c0 -24 23 -21 28 4 2 10 -3 17 -12 17 -10 0 -16 -9 -16 -21z\"></path><path d=\"M22227 22711 c-6 -24 0 -31 29 -31 12 0 24 -4 26 -9 6 -15 80 -61 99 -61 11 0 19 -4 19 -10 0 -5 8 -10 18 -10 9 0 30 -7 46 -15 15 -8 33 -15 38 -15 18 0 146 -100 177 -138 l30 -37 16 39 c25 59 17 77 -44 109 -30 15 -64 27 -76 27 -13 0 -38 17 -59 40 -39 42 -40 43 -98 40 -28 -1 -40 4 -50 19 -9 15 -23 21 -49 21 -28 0 -41 6 -53 25 -20 31 -61 34 -69 6z\"></path><path d=\"M26777 22722 c-34 -4 -31 -26 5 -30 16 -2 28 3 31 12 8 19 0 23 -36 18z\"></path><path d=\"M21566 22681 c-3 -4 5 -22 17 -39 22 -29 37 -30 66 -6 2 2 -8 15 -23 29 -28 25 -51 32 -60 16z\"></path><path d=\"M21380 22660 c0 -11 12 -34 28 -51 62 -70 91 -99 101 -99 6 0 11 -9 11 -20 0 -11 6 -20 14 -20 8 0 16 -5 18 -11 4 -13 48 -3 48 11 0 5 -23 34 -51 64 -28 31 -46 56 -39 56 7 0 -14 20 -46 45 -63 49 -84 56 -84 25z\"></path><path d=\"M23565 22670 c-11 -18 26 -23 43 -6 15 15 14 16 -10 16 -15 0 -30 -5 -33 -10z\"></path><path d=\"M25556 22673 c-12 -12 -6 -33 9 -33 8 0 15 6 15 14 0 17 -14 28 -24 19z\"></path><path d=\"M23697 22633 c-10 -9 -8 -33 2 -33 5 0 11 9 14 20 5 20 -3 26 -16 13z\"></path><path d=\"M23732 22610 c0 -14 2 -19 5 -12 2 6 2 18 0 25 -3 6 -5 1 -5 -13z\"></path><path d=\"M25570 22613 l-25 -15 25 6 c14 3 28 6 33 6 4 0 7 5 7 10 0 13 -9 11 -40 -7z\"></path><path d=\"M26888 22623 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M24062 22603 c2 -10 10 -17 16 -15 7 1 12 -8 12 -19 0 -27 50 -139 61 -139 5 0 9 6 9 13 0 8 3 7 10 -3 6 -9 5 -17 -3 -22 -7 -4 -7 -8 -2 -8 6 -1 29 -5 52 -9 36 -7 42 -6 46 10 3 11 1 22 -4 25 -5 3 -9 11 -9 19 0 18 -78 103 -102 111 -10 3 -30 16 -43 30 -28 28 -48 31 -43 7z m72 -74 c-3 -5 -10 -7 -15 -3 -5 3 -7 10 -3 15 3 5 10 7 15 3 5 -3 7 -10 3 -15z m106 -99 c8 -5 11 -12 8 -16 -4 -3 -14 1 -23 10 -18 17 -9 21 15 6z\"></path><path d=\"M21710 22597 c0 -12 80 -87 93 -87 9 0 22 -8 29 -18 9 -12 28 -18 58 -20 25 0 46 -6 48 -12 2 -5 8 -10 14 -10 5 0 29 -13 53 -30 24 -16 53 -30 64 -30 14 0 25 -11 36 -36 8 -20 32 -52 52 -72 l37 -34 23 27 c17 19 22 34 17 48 -4 12 -7 22 -8 23 -58 35 -79 44 -105 44 -22 0 -31 5 -31 16 0 18 -79 104 -96 104 -6 0 -19 9 -29 20 -17 19 -19 19 -37 3 -16 -14 -22 -15 -36 -5 -24 17 -32 20 -84 27 -39 5 -48 10 -48 26 0 14 -7 19 -25 19 -14 0 -25 -1 -25 -3z m240 -87 c0 -5 -10 -10 -22 -9 -22 0 -22 1 -3 9 11 5 21 9 23 9 1 1 2 -3 2 -9z\"></path><path d=\"M23032 22570 c-3 -33 13 -47 33 -30 11 9 12 16 2 31 -18 30 -33 29 -35 -1z\"></path><path d=\"M25265 22580 c1 -8 5 -14 8 -12 4 1 32 2 63 2 49 0 55 2 44 15 -17 21 -118 17 -115 -5z\"></path><path d=\"M25470 22592 c-30 -2 -59 -7 -64 -13 -6 -6 -4 -9 7 -9 9 0 20 -6 24 -13 15 -25 71 -40 127 -33 45 5 56 3 71 -14 10 -11 23 -20 29 -19 30 4 38 -1 27 -15 -12 -14 -5 -46 9 -46 5 0 10 9 12 20 2 12 8 21 13 21 14 0 19 -32 6 -41 -8 -4 -5 -15 9 -32 11 -15 20 -31 20 -37 0 -6 7 -11 15 -11 9 0 18 -7 21 -15 4 -8 15 -15 25 -15 17 0 19 8 19 81 l0 82 98 -7 c53 -4 129 -16 167 -26 39 -9 91 -20 116 -23 47 -6 60 -15 166 -115 49 -46 59 -49 44 -11 -16 39 -39 62 -52 53 -8 -4 -10 -3 -5 4 7 11 -11 51 -28 64 -15 10 113 -3 174 -18 30 -8 80 -14 112 -14 45 0 63 -5 79 -21 18 -18 148 -75 154 -67 7 10 35 72 35 79 0 10 -74 49 -93 49 -14 0 -37 40 -37 65 0 12 -14 15 -60 15 -49 0 -60 -3 -60 -17 0 -9 7 -24 15 -33 15 -16 11 -18 -55 -24 -75 -8 -170 1 -150 14 17 11 -16 20 -55 15 -16 -2 -63 0 -103 5 -65 9 -77 14 -106 45 -39 41 -49 42 -79 14 -21 -19 -29 -20 -161 -13 -84 4 -150 12 -165 20 -14 8 -33 14 -41 14 -8 0 -31 10 -50 22 -36 22 -95 27 -230 20z m140 -12 c-13 -9 -13 -11 0 -20 8 -5 12 -10 8 -10 -3 0 -14 -3 -24 -7 -12 -4 -15 -3 -10 5 5 8 -2 12 -23 12 -60 0 -68 15 -11 21 30 3 60 6 65 7 6 1 3 -3 -5 -8z m163 -67 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m620 -70 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z\"></path><path d=\"M25220 22580 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M24575 22570 c-8 -13 3 -30 20 -30 8 0 11 7 8 20 -6 22 -18 26 -28 10z\"></path><path d=\"M26115 22570 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M23840 22543 c0 -8 12 -13 30 -13 18 0 30 5 30 13 0 8 -12 14 -30 14 -18 0 -30 -6 -30 -14z\"></path><path d=\"M26822 22538 c2 -13 10 -23 18 -23 8 0 16 10 18 23 3 17 -2 22 -18 22 -16 0 -21 -5 -18 -22z\"></path><path d=\"M22780 22461 c0 -5 7 -14 15 -21 8 -7 15 -20 15 -30 0 -19 19 -30 52 -30 13 0 18 -5 15 -14 -4 -9 3 -16 21 -19 15 -3 43 -10 62 -17 19 -7 42 -15 50 -18 8 -3 20 -7 25 -7 14 -3 47 -15 68 -26 9 -5 29 -6 44 -3 18 5 24 4 19 -5 -4 -7 0 -11 11 -11 10 0 54 -21 97 -47 113 -69 139 -85 161 -97 11 -6 39 -24 62 -38 l41 -27 30 27 29 26 -41 26 c-23 14 -58 34 -79 45 -21 11 -59 40 -84 63 -25 24 -43 40 -40 35 3 -5 -22 -10 -57 -10 -53 -1 -63 1 -62 15 1 11 -7 17 -24 18 -35 1 -70 13 -103 36 -15 11 -35 17 -43 14 -8 -3 -13 -2 -10 3 6 9 -86 51 -110 51 -7 0 -19 6 -26 13 -11 10 -120 57 -134 57 -2 0 -4 -4 -4 -9z m195 -91 c3 -5 2 -10 -4 -10 -5 0 -13 5 -16 10 -3 6 -2 10 4 10 5 0 13 -4 16 -10z m25 -20 c-8 -5 -22 -9 -30 -9 -10 0 -8 3 5 9 27 12 43 12 25 0z\"></path><path d=\"M24690 22447 c0 -32 51 -80 76 -71 15 4 16 4 5 -4 -12 -9 -12 -13 3 -28 15 -14 22 -15 37 -6 12 8 19 8 19 2 0 -5 -5 -10 -11 -10 -5 0 -7 -4 -4 -10 10 -17 32 -11 38 9 3 14 -2 21 -19 25 -13 4 -34 21 -46 39 -18 29 -77 77 -93 77 -3 0 -5 -10 -5 -23z\"></path><path d=\"M21590 22433 c0 -23 11 -38 33 -46 9 -3 17 -13 17 -21 0 -16 27 -29 41 -20 5 3 8 0 7 -7 -2 -6 3 -14 10 -16 30 -11 7 28 -44 76 -31 28 -58 51 -60 51 -2 0 -4 -8 -4 -17z\"></path><path d=\"M23720 22415 c0 -16 27 -32 37 -21 7 7 -16 36 -28 36 -5 0 -9 -7 -9 -15z\"></path><path d=\"M24285 22382 c-10 -10 -5 -30 10 -36 23 -8 71 12 58 25 -12 12 -59 19 -68 11z\"></path><path d=\"M23235 22370 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M23250 22324 c0 -8 5 -12 10 -9 6 4 8 11 5 16 -9 14 -15 11 -15 -7z\"></path><path d=\"M23800 22332 c0 -5 9 -17 20 -27 27 -24 52 -5 27 19 -17 17 -47 22 -47 8z\"></path><path d=\"M22780 22317 c0 -14 102 -122 123 -130 8 -3 20 -1 28 4 11 7 8 9 -9 9 -15 0 -26 9 -32 28 -16 44 -25 56 -60 80 -38 25 -50 28 -50 9z\"></path><path d=\"M23320 22300 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M24870 22294 c0 -21 138 -154 160 -154 9 0 -1 15 -26 38 -22 20 -61 58 -87 85 -31 31 -47 42 -47 31z\"></path><path d=\"M23870 22290 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M21730 22280 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M23905 22270 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M23870 22261 c0 -5 5 -13 10 -16 6 -3 10 -2 10 4 0 5 -4 13 -10 16 -5 3 -10 2 -10 -4z\"></path><path d=\"M21520 22251 c-50 -7 -67 -31 -22 -31 15 0 43 -11 62 -25 39 -29 60 -32 60 -9 0 18 -38 75 -48 72 -4 0 -27 -4 -52 -7z\"></path><path d=\"M24397 22240 c-13 -10 -35 -22 -50 -25 -14 -4 -31 -13 -37 -20 -8 -10 1 -16 42 -28 97 -28 177 -47 200 -48 22 0 22 -1 3 -9 -18 -7 -18 -8 8 -15 18 -5 33 -3 40 4 21 21 -13 63 -70 86 -28 11 -65 32 -82 47 -29 27 -30 27 -54 8z m43 -30 c13 -13 15 -20 7 -20 -14 0 -37 20 -37 32 0 13 9 9 30 -12z m-40 0 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m55 -28 c24 3 31 0 28 -9 -7 -18 -68 -16 -103 2 -40 21 -38 26 7 13 20 -5 51 -8 68 -6z m81 -31 c-3 -5 -15 -7 -26 -4 -28 7 -25 13 6 13 14 0 23 -4 20 -9z\"></path><path d=\"M26461 22251 c-12 -8 -12 -14 2 -42 12 -25 13 -35 4 -41 -9 -6 -9 -8 1 -8 6 0 12 -6 12 -14 0 -8 24 -21 58 -31 31 -10 63 -22 70 -28 7 -5 37 -7 71 -3 56 6 60 6 63 -15 4 -31 20 -33 47 -8 12 12 34 24 49 28 22 6 28 14 30 44 2 22 -1 37 -8 37 -12 0 -49 -20 -68 -37 -7 -7 -22 -13 -32 -13 -32 0 -120 21 -120 29 0 9 -61 31 -88 31 -22 0 -22 1 -7 36 8 20 15 38 15 40 0 8 -86 3 -99 -5z\"></path><path d=\"M21760 22235 c0 -10 7 -15 18 -13 21 4 19 22 -2 26 -10 2 -16 -3 -16 -13z\"></path><path d=\"M21810 22206 c0 -8 7 -16 15 -20 9 -3 15 0 15 8 0 8 -7 16 -15 20 -9 3 -15 0 -15 -8z\"></path><path d=\"M22320 22209 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M22454 22205 c-4 -8 -14 -15 -23 -16 -9 -1 2 -5 23 -10 43 -10 63 -1 53 25 -8 20 -46 21 -53 1z\"></path><path d=\"M26168 22183 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M21850 22171 c0 -5 7 -16 15 -25 8 -8 15 -28 15 -44 0 -30 0 -30 -37 -19 -21 6 -49 19 -62 29 -13 10 -33 18 -43 18 -11 0 -22 9 -25 20 -4 15 -14 20 -40 20 -28 0 -34 -3 -29 -16 3 -9 6 -18 6 -20 0 -2 15 -4 33 -4 24 0 35 -6 42 -22 6 -13 18 -22 27 -22 10 1 15 -2 12 -7 -3 -5 4 -9 15 -9 11 0 23 -4 26 -10 3 -5 15 -10 27 -10 11 0 39 -16 61 -36 23 -19 69 -48 103 -64 35 -17 78 -48 102 -75 22 -25 48 -45 56 -45 17 0 60 -40 69 -64 8 -21 37 -9 37 16 0 14 -5 18 -15 14 -26 -10 -16 14 11 26 21 10 31 9 56 -5 37 -21 58 -22 58 -2 0 10 -11 15 -35 15 -28 0 -35 4 -35 19 0 19 -25 31 -68 31 -24 0 -157 85 -192 122 -11 12 -26 34 -32 50 -7 15 -16 28 -19 28 -3 0 -12 18 -19 41 -9 27 -22 44 -38 50 -31 12 -82 12 -82 0z\"></path><path d=\"M25520 22150 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M22327 22133 c-12 -12 -7 -36 11 -49 20 -16 32 -17 52 -4 12 7 9 13 -13 34 -29 27 -39 31 -50 19z\"></path><path d=\"M22607 22116 c-7 -17 1 -26 23 -26 10 0 29 -9 43 -20 27 -22 52 -27 41 -8 -4 7 -3 8 4 4 7 -4 12 -14 12 -22 0 -8 7 -14 15 -14 8 0 23 -4 33 -9 9 -6 34 -13 55 -16 21 -3 37 -12 37 -19 0 -16 99 -71 108 -61 4 3 0 10 -8 16 -10 6 -5 7 18 3 21 -4 32 -3 32 5 0 6 -11 11 -25 11 -14 0 -35 8 -46 19 -11 10 -34 21 -50 25 -16 3 -39 15 -52 26 -13 13 -32 20 -49 18 -18 -2 -36 6 -55 24 -55 51 -125 74 -136 44z\"></path><path d=\"M25035 22120 c-3 -5 -3 -10 2 -10 28 -2 -58 -32 -89 -32 -21 1 -38 -3 -38 -8 0 -8 18 -12 121 -25 32 -4 66 -20 120 -58 42 -29 84 -57 95 -63 10 -6 23 -20 29 -32 5 -12 15 -20 21 -18 6 2 17 0 25 -5 12 -7 12 -9 0 -9 -11 0 -10 -5 4 -20 10 -11 24 -20 32 -20 7 0 18 -11 23 -25 5 -14 13 -26 17 -26 39 -7 53 -5 53 7 0 8 -9 14 -20 14 -13 0 -20 7 -20 19 0 13 -8 21 -22 23 -14 2 -23 10 -23 20 0 22 -44 54 -68 50 -15 -3 -17 1 -11 23 5 21 2 27 -14 32 -14 3 -21 15 -24 39 -4 34 4 44 18 23 4 -7 27 -10 60 -7 51 4 54 3 54 -19 0 -20 5 -23 41 -23 52 0 129 -19 150 -36 20 -18 44 -18 59 1 16 19 49 19 87 0 35 -17 74 -19 162 -8 96 12 86 28 -19 30 -81 1 -93 4 -121 27 -17 14 -37 26 -45 26 -8 0 -19 12 -24 28 -25 67 -52 92 -100 92 -19 0 -28 -15 -12 -22 10 -4 62 -82 62 -92 0 -5 -29 -6 -64 -2 -44 4 -77 2 -104 -7 -40 -14 -70 -8 -58 11 10 16 -20 22 -105 22 -85 0 -133 17 -192 66 -30 26 -52 30 -62 14z m288 -97 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z\"></path><path d=\"M24690 22110 c0 -6 26 -10 58 -10 40 0 53 3 42 10 -20 13 -100 13 -100 0z\"></path><path d=\"M26945 22110 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M23630 22071 c0 -6 5 -13 10 -16 6 -3 10 1 10 9 0 9 -4 16 -10 16 -5 0 -10 -4 -10 -9z\"></path><path d=\"M24600 22060 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M22463 22033 c-15 -5 -18 -53 -4 -53 5 0 11 -9 14 -20 3 -11 10 -20 17 -20 6 0 8 5 5 10 -3 6 -2 10 4 10 16 0 22 -18 9 -23 -9 -3 -6 -11 10 -27 24 -23 52 -21 52 4 0 9 -7 13 -22 9 -20 -4 -21 -3 -6 7 16 10 15 14 -13 44 -16 19 -35 40 -42 49 -7 8 -18 13 -24 10z\"></path><path d=\"M23550 22030 c0 -5 7 -10 16 -10 8 0 12 5 9 10 -3 6 -10 10 -16 10 -5 0 -9 -4 -9 -10z\"></path><path d=\"M23770 22024 c31 -36 150 -66 150 -37 0 7 -7 13 -16 13 -9 0 -27 9 -41 20 -16 12 -41 20 -66 20 -35 0 -38 -2 -27 -16z\"></path><path d=\"M26681 22037 c2 -1 11 -8 20 -15 14 -10 18 -10 23 3 4 11 -1 15 -21 15 -14 0 -24 -1 -22 -3z\"></path><path d=\"M24010 21957 c0 -3 18 -24 40 -48 21 -23 37 -46 35 -50 -8 -12 23 -19 83 -19 66 0 189 -45 197 -72 6 -15 82 -58 106 -58 6 0 9 8 7 18 -4 15 2 19 33 21 22 1 63 -5 91 -14 29 -9 95 -20 145 -25 65 -6 103 -14 126 -29 26 -16 51 -21 99 -21 78 0 106 16 89 48 -11 21 -22 26 -48 23 -7 -1 -24 6 -38 15 -21 14 -40 15 -114 10 -82 -7 -89 -6 -93 12 -5 16 -19 20 -103 26 -53 3 -110 13 -125 21 -15 8 -60 15 -100 16 -61 2 -76 5 -96 25 -12 13 -34 24 -47 24 -16 0 -34 12 -51 35 -20 26 -35 35 -57 35 -16 0 -29 -4 -29 -10 0 -12 -43 -13 -55 -1 -11 10 -95 26 -95 18z\"></path><path d=\"M26628 21953 c-10 -2 -15 -10 -11 -19 7 -18 23 -18 23 0 0 8 6 17 13 19 15 7 -1 6 -25 0z\"></path><path d=\"M24745 21928 c10 -33 31 -52 49 -45 22 9 20 24 -4 30 -11 3 -20 12 -20 21 0 9 -7 16 -16 16 -11 0 -14 -6 -9 -22z\"></path><path d=\"M22995 21921 c-6 -11 45 -36 93 -46 29 -6 32 -4 32 18 0 19 -6 26 -31 31 -46 9 -87 7 -94 -3z\"></path><path d=\"M21600 21905 c0 -9 12 -18 30 -22 17 -3 29 -8 26 -10 -2 -3 0 -18 6 -34 9 -25 12 -28 26 -17 12 10 16 10 19 1 5 -15 33 -18 33 -4 0 5 -11 16 -25 25 -15 10 -25 12 -25 6 0 -6 -5 -8 -11 -5 -5 4 -8 12 -6 18 4 14 -41 57 -59 57 -8 0 -14 -7 -14 -15z\"></path><path d=\"M23925 21890 c3 -5 13 -10 21 -10 8 0 14 5 14 10 0 6 -9 10 -21 10 -11 0 -17 -4 -14 -10z\"></path><path d=\"M23170 21870 c-6 -11 -16 -17 -22 -14 -6 4 -8 3 -5 -4 10 -15 105 -67 151 -82 21 -7 41 -20 43 -30 4 -16 42 -40 63 -40 14 0 12 64 -2 78 -7 7 -26 12 -43 12 -24 0 -37 9 -65 44 -21 26 -43 43 -55 43 -11 0 -28 3 -37 7 -11 5 -20 1 -28 -14z\"></path><path d=\"M20871 21851 c6 -17 15 -31 20 -31 5 0 9 -6 9 -14 0 -8 13 -20 29 -27 15 -7 37 -25 47 -40 14 -22 24 -27 41 -23 20 5 23 2 23 -25 0 -37 -9 -39 -40 -6 -22 23 -69 30 -86 12 -7 -6 14 -42 44 -78 17 -20 57 -26 67 -9 11 18 26 11 62 -30 26 -29 44 -40 65 -40 34 0 37 21 8 65 -11 17 -20 46 -20 65 0 47 -11 61 -59 79 -22 9 -65 39 -94 68 -37 35 -65 54 -90 58 l-37 7 11 -31z\"></path><path d=\"M21286 21865 c4 -9 15 -20 25 -26 11 -5 19 -19 19 -29 0 -12 7 -20 16 -20 9 0 34 -18 56 -41 31 -32 43 -38 51 -29 9 9 7 16 -10 27 -13 9 -23 22 -23 29 0 8 -5 14 -10 14 -6 0 -33 20 -59 45 -49 45 -75 58 -65 30z\"></path><path d=\"M22587 21874 c-9 -10 32 -64 49 -64 22 0 17 30 -8 51 -25 20 -31 22 -41 13z\"></path><path d=\"M23720 21865 c0 -16 27 -32 37 -21 7 7 -16 36 -28 36 -5 0 -9 -7 -9 -15z\"></path><path d=\"M25885 21830 c-6 -10 30 -42 38 -33 13 13 7 31 -13 36 -11 3 -22 2 -25 -3z\"></path><path d=\"M21748 21793 c19 -8 15 -61 -7 -75 -19 -12 -19 -12 0 -40 11 -15 26 -28 34 -28 7 0 15 -3 17 -7 2 -5 21 -17 43 -28 22 -11 71 -50 109 -87 51 -51 75 -68 96 -68 52 0 93 -13 97 -31 3 -11 19 -19 49 -24 24 -3 45 -6 46 -5 2 0 25 -6 53 -14 27 -9 51 -13 54 -11 2 3 -1 5 -7 5 -7 0 -12 7 -12 15 0 8 -7 15 -15 15 -8 0 -15 3 -15 8 0 8 -56 42 -70 42 -4 0 -22 13 -39 29 -16 15 -58 39 -93 52 -102 38 -171 85 -256 174 -44 47 -83 85 -88 84 -5 0 -3 -3 4 -6z\"></path><path d=\"M22390 21789 c0 -27 15 -39 51 -39 35 0 39 -3 39 -25 0 -18 5 -25 18 -25 32 0 116 -33 132 -51 8 -10 28 -21 44 -25 29 -7 29 -7 13 16 -12 18 -14 27 -5 37 6 7 9 13 7 14 -2 0 -17 2 -32 4 -15 2 -47 13 -70 23 -23 11 -55 23 -72 27 -16 3 -39 15 -50 24 -21 19 -75 34 -75 20z\"></path><path d=\"M25178 21793 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M21597 21772 c2 -11 25 -28 51 -40 49 -23 70 -20 37 4 -11 8 -21 19 -21 24 -1 6 -2 15 -3 20 0 6 -16 10 -35 10 -28 0 -33 -3 -29 -18z\"></path><path d=\"M25763 21775 c-9 -25 2 -27 22 -5 17 18 17 20 1 20 -9 0 -19 -7 -23 -15z\"></path><path d=\"M25454 21729 c0 -13 7 -19 23 -19 16 0 23 6 23 19 0 13 -7 19 -23 19 -16 0 -23 -6 -23 -19z\"></path><path d=\"M20867 21733 c-12 -11 -8 -23 8 -23 8 0 15 7 15 15 0 16 -12 20 -23 8z\"></path><path d=\"M21470 21698 c1 -17 46 -68 60 -68 19 0 10 22 -21 51 -35 33 -39 34 -39 17z\"></path><path d=\"M23948 21704 c-5 -4 -8 -16 -8 -28 0 -14 3 -17 11 -9 6 6 9 19 7 28 -1 9 -6 13 -10 9z\"></path><path d=\"M25120 21691 c0 -17 9 -19 89 -23 88 -3 90 -3 125 -40 20 -21 48 -41 61 -44 14 -3 25 -12 25 -19 0 -7 7 -16 16 -19 23 -9 24 -8 24 14 0 13 -7 20 -19 20 -19 0 -39 35 -27 47 11 12 -16 43 -37 43 -13 0 -40 9 -62 20 -29 15 -59 20 -117 20 -70 0 -78 -2 -78 -19z\"></path><path d=\"M26515 21678 c-4 -9 3 -33 14 -54 18 -34 25 -38 64 -41 32 -3 46 0 50 10 3 8 0 14 -6 13 -7 0 -12 1 -13 4 -4 23 -29 50 -46 50 -12 0 -30 7 -40 16 -15 15 -18 15 -23 2z\"></path><path d=\"M26316 21644 c-4 -10 -1 -14 6 -12 15 5 23 28 10 28 -5 0 -13 -7 -16 -16z\"></path><path d=\"M21281 21636 c-17 -20 3 -66 29 -66 11 0 20 -4 20 -10 0 -5 5 -10 10 -10 6 0 8 12 5 28 -4 15 -8 37 -11 50 -5 25 -35 30 -53 8z\"></path><path d=\"M23645 21630 c4 -6 11 -8 16 -5 14 9 11 15 -7 15 -8 0 -12 -5 -9 -10z\"></path><path d=\"M23700 21630 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M22791 21608 c-12 -20 -11 -24 15 -45 16 -13 44 -26 62 -29 17 -3 42 -18 55 -33 12 -14 40 -39 62 -55 22 -16 48 -38 58 -47 14 -15 23 -16 43 -9 32 13 37 12 29 0 -3 -5 -1 -10 5 -10 14 0 4 53 -11 58 -12 5 -12 32 1 32 6 0 10 -7 10 -16 0 -14 3 -14 15 -4 13 10 -4 22 -103 69 -65 31 -133 68 -151 84 -39 33 -71 35 -90 5z m275 -178 c13 0 24 -4 24 -10 0 -5 -11 -10 -25 -10 -14 0 -25 2 -25 4 0 2 -2 10 -3 18 -2 7 -2 10 0 6 3 -5 16 -8 29 -8z\"></path><path d=\"M20520 21586 c0 -22 6 -36 16 -40 24 -9 30 0 26 38 -3 27 -9 36 -23 36 -15 0 -19 -7 -19 -34z\"></path><path d=\"M21550 21605 c0 -8 7 -15 15 -15 8 0 15 7 15 15 0 8 -7 15 -15 15 -8 0 -15 -7 -15 -15z\"></path><path d=\"M22397 21613 c-4 -3 -7 -11 -7 -17 0 -6 5 -5 12 2 6 6 9 14 7 17 -3 3 -9 2 -12 -2z\"></path><path d=\"M23740 21610 c0 -5 7 -10 16 -10 8 0 12 5 9 10 -3 6 -10 10 -16 10 -5 0 -9 -4 -9 -10z\"></path><path d=\"M25090 21612 c0 -13 62 -62 71 -56 22 13 1 42 -39 53 -18 6 -32 6 -32 3z\"></path><path d=\"M22420 21592 c0 -12 19 -26 26 -19 2 2 -2 10 -11 17 -9 8 -15 8 -15 2z\"></path><path d=\"M23780 21590 c0 -6 7 -10 15 -10 8 0 15 2 15 4 0 2 -7 6 -15 10 -8 3 -15 1 -15 -4z\"></path><path d=\"M21590 21571 c0 -5 7 -14 15 -21 12 -10 15 -10 15 3 0 8 -7 17 -15 21 -8 3 -15 2 -15 -3z\"></path><path d=\"M23820 21570 c0 -5 8 -11 18 -13 9 -2 1 -3 -18 -1 -25 2 -31 1 -20 -6 8 -5 23 -10 32 -10 9 0 34 -11 54 -25 38 -26 53 -29 92 -19 24 7 31 34 8 34 -7 0 -33 8 -57 19 -54 23 -109 34 -109 21z m77 -26 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m28 -32 c-8 -8 -25 10 -19 20 4 6 9 5 15 -3 4 -7 6 -15 4 -17z\"></path><path d=\"M21356 21552 c-2 -4 -1 -14 5 -22 7 -12 9 -10 9 8 0 23 -5 28 -14 14z\"></path><path d=\"M20560 21520 c0 -11 2 -20 4 -20 2 0 11 -3 20 -6 11 -4 16 0 16 14 0 11 -7 23 -16 26 -23 9 -24 8 -24 -14z\"></path><path d=\"M21330 21526 c0 -7 7 -19 15 -26 8 -7 15 -17 15 -22 0 -6 -6 -6 -14 1 -8 7 -17 8 -20 3 -3 -6 3 -12 14 -15 27 -7 32 4 17 42 -12 32 -27 42 -27 17z\"></path><path d=\"M21392 21500 c0 -19 2 -27 5 -17 2 9 2 25 0 35 -3 9 -5 1 -5 -18z\"></path><path d=\"M21630 21523 c0 -16 41 -74 56 -80 9 -3 30 -19 46 -35 42 -41 66 -38 34 5 -15 19 -26 38 -26 43 0 16 -58 44 -64 31 -3 -7 -4 -1 -3 13 2 19 -3 26 -20 28 -13 2 -23 0 -23 -5z\"></path><path d=\"M24086 21515 c-3 -8 -14 -15 -25 -15 -11 0 -23 -5 -26 -11 -8 -13 25 -40 42 -34 7 2 10 -2 6 -11 -3 -9 1 -14 13 -14 11 0 51 -11 90 -26 54 -19 75 -33 88 -56 27 -45 66 -57 169 -51 48 3 90 10 93 14 3 5 -6 9 -20 9 -14 0 -36 10 -49 23 -42 40 -91 61 -155 68 -35 3 -67 10 -70 15 -11 15 -131 104 -141 104 -5 0 -11 -7 -15 -15z\"></path><path d=\"M25475 21510 c20 -23 29 -21 19 4 -3 9 -13 16 -22 16 -13 0 -12 -3 3 -20z\"></path><path d=\"M21250 21474 c-11 -13 -10 -16 8 -21 12 -3 22 -11 22 -18 0 -23 24 -34 43 -21 23 18 22 46 -3 46 -11 0 -20 7 -20 15 0 20 -34 19 -50 -1z\"></path><path d=\"M22505 21470 c3 -5 11 -10 16 -10 6 0 7 5 4 10 -3 6 -11 10 -16 10 -6 0 -7 -4 -4 -10z\"></path><path d=\"M22530 21444 c1 -19 40 -55 51 -48 8 5 9 3 4 -5 -5 -9 -1 -12 12 -9 11 2 27 -3 36 -11 15 -12 17 -11 17 2 0 9 -10 22 -22 28 -13 7 -27 18 -33 25 -12 15 -65 30 -65 18z\"></path><path d=\"M23165 21440 c3 -6 -4 -10 -16 -10 -37 0 -7 -21 33 -23 19 -1 43 -10 52 -20 10 -9 23 -17 30 -17 7 0 21 -9 31 -20 15 -16 29 -20 72 -18 29 1 53 6 53 10 0 12 -75 29 -78 18 -6 -17 -22 -11 -22 9 0 10 -9 21 -19 24 -14 3 -18 1 -14 -10 5 -13 3 -13 -15 -2 -13 8 -17 16 -11 20 6 3 -9 16 -33 28 -48 23 -73 27 -63 11z\"></path><path d=\"M25828 21444 c-11 -16 14 -65 31 -62 23 5 25 28 3 28 -14 0 -22 8 -24 23 -2 13 -6 18 -10 11z\"></path><path d=\"M25555 21430 c3 -5 10 -10 16 -10 5 0 9 5 9 10 0 6 -7 10 -16 10 -8 0 -12 -4 -9 -10z\"></path><path d=\"M21336 21411 c-15 -17 -15 -20 3 -42 l19 -23 -2 42 c0 23 -1 42 -2 42 0 0 -8 -8 -18 -19z\"></path><path d=\"M25589 21403 c-12 -15 -12 -16 3 -11 11 5 18 0 23 -15 6 -21 6 -22 14 -2 8 19 -3 45 -19 45 -4 0 -14 -8 -21 -17z\"></path><path d=\"M22126 21383 c-3 -10 -9 -24 -12 -30 -10 -22 10 -14 24 8 9 14 10 25 4 31 -6 6 -12 3 -16 -9z\"></path><path d=\"M21455 21374 c9 -9 18 -14 21 -11 9 9 -6 27 -22 27 -13 0 -13 -2 1 -16z\"></path><path d=\"M23070 21375 c0 -10 44 -45 57 -45 7 0 13 7 13 15 0 8 -4 15 -10 15 -5 0 -10 -6 -10 -12 0 -7 -7 -2 -16 10 -13 19 -34 30 -34 17z\"></path><path d=\"M22360 21360 c0 -17 39 -50 59 -50 11 0 26 -8 33 -17 15 -21 149 -93 171 -93 14 0 27 45 19 68 -2 7 -20 12 -40 12 -21 0 -48 9 -62 20 -26 21 -56 27 -45 10 3 -6 -4 -10 -17 -10 -18 0 -20 2 -8 10 8 5 12 10 10 12 -51 33 -120 55 -120 38z m60 -30 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z m153 -67 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z\"></path><path d=\"M21440 21353 c0 -5 5 -14 12 -21 9 -9 9 -12 0 -12 -7 0 -12 -6 -12 -14 0 -8 -5 -18 -12 -22 -7 -5 -9 -2 -5 8 4 12 -1 15 -18 14 -20 -1 -22 -4 -13 -21 29 -55 77 -74 97 -36 12 21 5 31 -21 31 -38 0 -16 40 30 55 21 6 22 4 16 -19 -6 -26 -5 -26 49 -26 47 0 57 -3 62 -20 8 -25 41 -43 66 -37 10 3 17 0 16 -6 -1 -6 6 -12 15 -14 14 -4 15 0 6 31 -11 35 -38 50 -38 22 0 -8 -5 -18 -12 -22 -7 -5 -9 -2 -6 7 3 8 8 25 12 39 6 19 5 21 -3 10 -8 -11 -11 -11 -11 -2 0 10 -5 10 -22 1 -18 -10 -20 -9 -15 5 5 13 0 16 -31 15 -33 -1 -34 -2 -12 -9 20 -6 15 -8 -25 -9 -29 0 -45 3 -37 7 7 5 10 16 6 26 -5 14 -14 17 -37 12 -17 -3 -36 -1 -43 5 -8 6 -14 7 -14 2z m230 -73 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z\"></path><path d=\"M21802 21348 c2 -6 13 -17 25 -25 19 -13 20 -12 16 12 -4 17 -12 25 -25 25 -11 0 -18 -5 -16 -12z\"></path><path d=\"M22150 21353 c0 -4 5 -15 10 -23 8 -13 10 -13 10 2 0 9 -4 20 -10 23 -5 3 -10 3 -10 -2z\"></path><path d=\"M26252 21338 c2 -15 11 -24 26 -26 20 -3 23 0 20 20 -2 15 -11 24 -26 26 -20 3 -23 0 -20 -20z m38 -2 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z\"></path><path d=\"M23426 21321 c-3 -5 -16 -7 -28 -3 -37 9 -11 -16 30 -28 20 -7 51 -21 68 -31 30 -18 124 -27 124 -13 0 14 -36 33 -62 34 -16 0 -28 5 -28 11 0 11 -60 39 -84 39 -8 0 -17 -4 -20 -9z\"></path><path d=\"M22193 21288 c10 -24 21 -34 40 -36 33 -4 36 15 3 24 -14 3 -23 12 -22 22 0 9 -7 18 -17 20 -16 3 -17 1 -4 -30z\"></path><path d=\"M23128 21313 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M23160 21308 c0 -7 9 -19 21 -26 19 -12 20 -11 17 10 -3 24 -38 39 -38 16z\"></path><path d=\"M24750 21316 c0 -15 71 -36 118 -35 41 2 58 -2 67 -14 14 -19 35 -23 35 -7 0 6 11 15 25 20 14 5 25 16 25 25 0 13 -21 15 -135 15 -74 0 -135 -2 -135 -4z\"></path><path d=\"M25970 21310 c13 -8 13 -10 -2 -10 -30 0 -29 -18 1 -33 31 -15 41 -13 41 9 0 16 -28 44 -43 44 -7 0 -6 -4 3 -10z\"></path><path d=\"M27226 21311 c-4 -7 -5 -15 -2 -18 9 -9 19 4 14 18 -4 11 -6 11 -12 0z\"></path><path d=\"M21865 21300 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M22711 21294 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M21209 21287 c0 -1 -2 -14 -3 -28 -1 -20 2 -25 15 -22 9 3 20 0 23 -6 8 -13 -31 -54 -44 -46 -6 4 -10 1 -10 -4 0 -6 5 -11 11 -11 13 0 49 -38 49 -52 0 -4 7 -8 15 -8 8 0 15 7 15 16 0 8 -7 22 -15 30 -20 20 -19 32 3 36 29 6 62 -4 62 -18 0 -10 13 -14 40 -14 23 0 40 5 40 11 0 16 -31 38 -52 39 -9 0 -33 15 -52 34 -20 18 -50 36 -66 40 -17 3 -30 4 -31 3z\"></path><path d=\"M22750 21261 c11 -22 30 -29 30 -11 0 5 -9 14 -21 20 -19 11 -20 10 -9 -9z\"></path><path d=\"M25450 21254 c-8 -3 -24 -9 -35 -14 -11 -5 -31 -11 -45 -13 -25 -3 -25 -3 5 -16 20 -8 52 -10 95 -6 71 7 67 9 133 -64 40 -43 59 -41 86 11 19 38 14 42 -66 47 -12 0 -28 7 -35 14 -27 25 -111 50 -138 41z\"></path><path d=\"M21931 21223 c37 -46 45 -53 59 -53 13 1 13 2 -1 13 -9 7 -21 22 -28 35 -6 12 -19 22 -28 22 -13 0 -14 -2 -2 -17z\"></path><path d=\"M22274 21225 c8 -8 17 -15 20 -15 3 0 6 7 6 15 0 9 -9 15 -21 15 -18 0 -19 -2 -5 -15z\"></path><path d=\"M23650 21220 c13 -24 23 -25 39 -6 9 11 8 15 -5 20 -33 13 -45 7 -34 -14z\"></path><path d=\"M26021 21231 c-7 -5 -11 -13 -7 -19 8 -13 -9 -25 -64 -46 -30 -12 -46 -14 -48 -7 -8 25 -35 41 -67 41 -53 0 -66 -8 -52 -31 8 -13 23 -19 50 -19 24 0 49 -8 64 -20 32 -25 104 -27 143 -4 26 16 30 15 85 -10 32 -14 63 -26 70 -26 8 0 15 -4 17 -9 3 -10 21 -14 61 -12 25 1 27 4 21 23 -9 30 -30 45 -79 59 -62 18 -128 49 -148 70 -20 21 -26 23 -46 10z\"></path><path d=\"M27926 21225 c4 -8 10 -15 15 -15 5 0 9 7 9 15 0 8 -7 15 -15 15 -9 0 -12 -6 -9 -15z\"></path><path d=\"M20850 21189 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M21760 21184 c0 -18 37 -23 57 -8 20 15 18 16 -27 18 -16 0 -30 -4 -30 -10z\"></path><path d=\"M22701 21185 c-23 -12 -24 -13 -5 -23 14 -7 26 -7 43 3 23 12 24 13 5 23 -14 7 -26 7 -43 -3z\"></path><path d=\"M23779 21177 c-14 -11 -11 -12 22 -12 40 0 51 8 23 19 -21 8 -26 7 -45 -7z\"></path><path d=\"M23295 21170 c3 -5 10 -10 16 -10 5 0 9 5 9 10 0 6 -7 10 -16 10 -8 0 -12 -4 -9 -10z\"></path><path d=\"M22828 21148 c-10 -12 -18 -25 -18 -29 0 -5 32 -18 70 -30 53 -17 70 -27 68 -39 -4 -21 86 -100 113 -100 10 0 19 4 19 9 0 5 18 12 40 16 l39 7 -23 23 c-34 34 -100 65 -139 65 -26 0 -45 11 -87 50 -30 28 -57 50 -60 50 -3 0 -13 -10 -22 -22z\"></path><path d=\"M21420 21147 c0 -7 18 -26 39 -43 22 -16 44 -39 50 -51 6 -13 20 -23 31 -23 11 0 25 -9 32 -20 9 -14 24 -20 50 -20 28 0 38 -5 43 -20 9 -27 42 -45 59 -31 10 9 20 6 37 -9 13 -10 18 -19 12 -20 -7 0 -13 6 -13 13 -1 6 -11 0 -23 -15 -23 -28 -54 -38 -75 -24 -7 4 -16 5 -20 1 -9 -9 39 -45 61 -45 11 0 15 -4 11 -11 -5 -9 2 -10 22 -6 16 3 23 4 16 1 -15 -7 -6 -24 12 -24 7 0 48 -24 90 -52 42 -29 85 -57 95 -62 10 -5 26 -23 35 -40 9 -17 37 -44 63 -61 25 -16 64 -46 85 -67 43 -42 48 -45 48 -23 0 8 -7 15 -15 15 -31 0 3 36 47 49 24 7 53 17 66 22 32 13 40 11 44 -8 3 -15 5 -15 22 3 20 19 19 19 -5 22 -13 2 -38 19 -54 37 -17 18 -67 51 -111 73 -44 22 -86 47 -93 56 -8 9 -19 16 -26 16 -7 0 -42 20 -78 44 -35 24 -90 56 -122 71 -31 16 -72 43 -91 60 -26 24 -34 28 -35 16 -1 -10 -4 -7 -7 7 -4 12 -40 56 -81 97 -73 74 -73 74 -102 60 -38 -20 -61 -19 -82 5 -19 23 -37 26 -37 7z m384 -262 c-19 -15 -19 -15 0 -30 19 -15 19 -15 -1 -15 -23 0 -36 22 -27 45 4 8 16 15 27 15 20 0 20 0 1 -15z m3 -61 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m208 -54 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-25 -16 c0 -8 4 -13 8 -10 5 3 22 -8 38 -25 17 -18 43 -32 64 -35 30 -5 39 -12 48 -38 15 -40 15 -46 2 -46 -5 0 -10 9 -10 20 0 11 -6 20 -14 20 -18 0 -76 32 -76 43 0 4 -9 7 -20 7 -10 0 -24 8 -29 18 -10 16 -10 16 -11 0 0 -23 -5 -23 -30 2 -24 24 -25 29 -2 46 23 18 32 17 32 -2z\"></path><path d=\"M21960 20730 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M23800 21154 c0 -10 98 -44 126 -44 27 0 37 -5 41 -20 4 -15 14 -20 39 -20 31 0 34 3 34 29 0 16 -6 33 -12 39 -10 8 -228 23 -228 16z\"></path><path d=\"M22020 21110 c0 -35 -3 -40 -23 -40 -12 0 -28 9 -35 20 -13 21 -46 28 -40 8 5 -14 34 -32 133 -82 39 -19 84 -47 100 -61 63 -55 85 -77 85 -89 0 -6 10 -18 22 -26 36 -24 138 -127 138 -139 0 -6 5 -11 11 -11 6 0 22 -14 37 -31 23 -28 27 -30 33 -13 9 26 0 44 -22 44 -12 0 -19 7 -19 20 0 13 -7 20 -20 20 -11 0 -20 7 -20 15 0 8 -9 20 -20 27 -11 7 -20 20 -20 30 0 10 -9 18 -26 20 l-25 3 31 32 31 31 -55 26 c-30 14 -61 26 -68 26 -16 0 -88 65 -88 79 0 14 -37 51 -50 51 -5 0 -10 4 -10 9 0 5 -14 23 -31 40 -17 17 -35 31 -40 31 -5 0 -9 -18 -9 -40z\"></path><path d=\"M26751 21134 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M22370 21111 c0 -6 5 -13 10 -16 6 -3 10 1 10 9 0 9 -4 16 -10 16 -5 0 -10 -4 -10 -9z\"></path><path d=\"M22400 21112 c0 -12 39 -52 50 -52 15 0 12 5 -20 33 -16 15 -30 23 -30 19z\"></path><path d=\"M26715 21110 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M23380 21089 c0 -6 7 -9 15 -5 8 3 15 1 15 -3 0 -5 8 -12 17 -15 15 -6 15 -4 -2 14 -20 22 -45 27 -45 9z\"></path><path d=\"M26690 21080 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M26730 21080 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M26796 21067 c7 -21 44 -44 44 -27 0 5 -5 10 -11 10 -7 0 -18 8 -25 18 -13 16 -14 16 -8 -1z\"></path><path d=\"M21382 21058 c2 -6 10 -14 16 -16 7 -2 10 2 6 12 -7 18 -28 22 -22 4z\"></path><path d=\"M24115 21050 c-9 -29 2 -56 30 -74 l25 -16 0 49 c0 35 -4 51 -16 55 -25 10 -32 7 -39 -14z\"></path><path d=\"M25976 21054 c-9 -23 -8 -24 20 -24 20 0 25 4 20 16 -3 9 -6 18 -6 20 0 12 -29 2 -34 -12z\"></path><path d=\"M22420 21042 c0 -12 19 -26 26 -19 2 2 -2 10 -11 17 -9 8 -15 8 -15 2z\"></path><path d=\"M23400 21046 c0 -2 7 -9 15 -16 13 -11 14 -10 9 4 -5 14 -24 23 -24 12z\"></path><path d=\"M23441 21048 c-1 -4 4 -19 11 -33 14 -30 48 -34 48 -5 0 14 -7 20 -24 20 -13 0 -27 6 -29 13 -3 6 -6 9 -6 5z\"></path><path d=\"M22476 21027 c3 -10 9 -15 12 -12 3 3 0 11 -7 18 -10 9 -11 8 -5 -6z\"></path><path d=\"M26738 21033 c12 -2 32 -2 45 0 12 2 2 4 -23 4 -25 0 -35 -2 -22 -4z\"></path><path d=\"M24280 21010 c0 -5 9 -10 20 -10 11 0 20 -5 20 -12 0 -6 3 -8 7 -4 5 4 -1 14 -11 22 -23 16 -36 18 -36 4z\"></path><path d=\"M24513 21010 c-13 -5 -23 -12 -23 -15 0 -3 17 -23 39 -45 56 -58 91 -52 91 15 0 16 -10 28 -32 39 -35 18 -43 19 -75 6z\"></path><path d=\"M24672 21008 c-7 -7 -12 -22 -12 -35 0 -19 7 -24 40 -29 34 -6 44 -13 60 -43 14 -29 25 -37 49 -39 22 -2 34 4 43 18 12 18 23 20 116 20 93 0 103 2 100 17 -4 21 -40 30 -126 32 -56 1 -65 -1 -69 -19 -7 -28 -33 -25 -33 3 0 42 -20 57 -62 48 -32 -7 -40 -5 -59 15 -26 27 -30 29 -47 12z\"></path><path d=\"M22492 20969 c2 -7 10 -15 17 -17 8 -3 12 1 9 9 -2 7 -10 15 -17 17 -8 3 -12 -1 -9 -9z\"></path><path d=\"M24334 20965 c-17 -13 -15 -14 33 -15 55 0 78 14 40 24 -35 9 -52 7 -73 -9z\"></path><path d=\"M21525 20960 c3 -5 13 -10 21 -10 8 0 14 -7 14 -15 0 -8 5 -16 10 -16 6 -1 14 -2 19 -3 5 0 13 -4 17 -8 4 -5 11 -8 16 -8 15 0 -26 40 -42 40 -12 1 -11 4 4 15 18 14 17 15 -23 15 -25 0 -40 -4 -36 -10z\"></path><path d=\"M24458 20963 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M24490 20940 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M22530 20931 c0 -5 7 -12 16 -15 14 -5 15 -4 4 9 -14 17 -20 19 -20 6z\"></path><path d=\"M23554 20929 c-7 -11 51 -77 60 -68 3 3 0 22 -6 42 -11 37 -39 50 -54 26z\"></path><path d=\"M24442 20931 c2 -7 7 -12 11 -12 12 1 9 15 -3 20 -7 2 -11 -2 -8 -8z\"></path><path d=\"M23090 20919 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M22566 20904 c-8 -21 8 -40 39 -48 15 -4 25 -14 25 -24 0 -15 2 -15 10 -2 14 22 12 4 -4 -34 -8 -19 -24 -37 -36 -41 -21 -7 -21 -7 -3 -27 22 -25 151 -88 179 -88 12 0 41 -15 65 -32 24 -18 48 -33 53 -33 4 0 16 -15 25 -34 9 -19 25 -39 36 -45 11 -6 34 -21 51 -33 17 -12 35 -19 39 -15 5 4 5 -1 2 -10 -4 -12 -1 -18 8 -18 8 0 15 -4 15 -10 0 -5 7 -10 15 -10 8 0 15 4 15 10 0 12 -52 66 -71 72 -9 3 2 15 30 33 l45 28 -30 15 c-16 8 -31 18 -34 22 -3 4 -24 10 -47 14 -23 3 -59 17 -79 31 -20 14 -41 25 -45 25 -5 0 -9 7 -9 15 0 18 -12 19 -28 3 -8 -8 -12 -9 -12 -1 0 6 6 13 13 16 9 4 9 7 -1 18 -11 12 -14 12 -23 -1 -8 -11 -9 -9 -4 9 4 14 3 21 -2 18 -6 -4 -48 31 -95 76 -88 84 -125 117 -132 117 -2 0 -7 -7 -10 -16z m227 -241 c-7 -2 -19 -2 -25 0 -7 3 -2 5 12 5 14 0 19 -2 13 -5z m167 -119 c0 -8 -4 -14 -10 -14 -5 0 -10 9 -10 21 0 11 5 17 10 14 6 -3 10 -13 10 -21z m104 -5 c-8 -14 -24 -10 -24 6 0 9 6 12 15 9 8 -4 12 -10 9 -15z\"></path><path d=\"M25238 20891 c8 -4 13 -12 13 -17 -1 -5 44 -9 98 -9 55 0 97 -3 94 -7 -2 -5 -25 -8 -51 -8 l-47 0 25 -20 c14 -11 31 -17 40 -13 8 4 83 7 165 7 83 1 164 4 180 9 27 7 28 6 8 -4 -32 -17 -29 -26 13 -39 43 -14 107 -15 130 -2 14 8 10 12 -22 22 -21 7 -42 18 -46 24 -5 7 -59 12 -148 14 -101 1 -150 6 -170 17 -18 9 -57 15 -105 15 -43 0 -75 4 -75 10 0 6 -26 10 -57 10 -36 0 -53 -4 -45 -9z m286 -50 c4 -5 -3 -7 -14 -4 -23 6 -26 13 -6 13 8 0 17 -4 20 -9z\"></path><path d=\"M21380 20880 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M23422 20878 c3 -7 15 -14 27 -16 15 -2 21 -9 17 -18 -4 -9 7 -19 31 -29 41 -17 63 -19 63 -5 0 6 -12 10 -27 10 -39 0 -61 15 -34 23 12 3 21 1 21 -5 0 -5 5 -6 11 -2 14 8 -8 24 -34 24 -10 0 -25 7 -33 15 -19 18 -47 20 -42 3z\"></path><path d=\"M23132 20870 c2 -8 19 -24 36 -35 17 -11 31 -25 32 -31 0 -7 16 -24 36 -39 27 -21 39 -24 47 -16 9 9 6 13 -10 17 -12 4 -25 14 -28 25 -3 10 -15 21 -26 24 -10 4 -19 13 -19 21 0 8 -8 14 -17 14 -9 0 -25 8 -36 18 -16 13 -19 14 -15 2z\"></path><path d=\"M22364 20845 c-8 -19 13 -37 36 -30 18 6 34 -5 43 -27 9 -25 47 -11 47 17 0 24 -24 38 -88 50 -25 5 -33 3 -38 -10z\"></path><path d=\"M23627 20840 c-15 -18 -16 -21 -1 -27 8 -3 26 0 40 7 27 15 44 6 26 -12 -23 -23 -13 -47 26 -65 20 -9 40 -18 43 -20 4 -2 9 5 11 15 6 21 -9 45 -34 55 -10 3 -18 12 -18 20 0 7 -16 21 -35 30 -43 21 -37 21 -58 -3z m133 -85 c0 -8 -4 -15 -9 -15 -13 0 -22 16 -14 24 11 11 23 6 23 -9z\"></path><path d=\"M21250 20841 c0 -14 52 -48 83 -56 45 -12 33 20 -16 44 -47 23 -67 26 -67 12z\"></path><path d=\"M21430 20843 c1 -14 60 -67 66 -60 4 4 -8 20 -26 37 -33 31 -40 35 -40 23z\"></path><path d=\"M23560 20840 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M26215 20830 c-16 -17 -31 -20 -115 -20 -53 0 -100 -3 -103 -7 -4 -4 5 -19 20 -35 27 -28 27 -28 157 -28 117 0 136 -2 174 -22 33 -18 44 -20 51 -10 4 7 25 15 47 18 72 10 87 15 77 25 -11 11 -180 32 -199 25 -7 -3 -15 6 -18 19 -4 14 -20 31 -36 40 -36 19 -33 19 -55 -5z m-92 -47 c-7 -2 -21 -2 -30 0 -10 3 -4 5 12 5 17 0 24 -2 18 -5z\"></path><path d=\"M23585 20800 c-18 -8 -17 -9 7 -9 15 -1 30 -5 33 -11 3 -5 13 -10 21 -10 8 0 14 5 14 10 0 6 -8 10 -18 10 -10 0 -22 4 -27 9 -6 5 -19 5 -30 1z\"></path><path d=\"M24797 20746 c-4 -10 -7 -25 -6 -34 0 -11 4 -9 10 7 5 13 8 29 6 35 -2 5 -6 2 -10 -8z\"></path><path d=\"M26978 20753 c12 -2 22 -8 22 -12 0 -5 -11 -6 -25 -3 -14 2 -25 0 -25 -6 0 -26 14 -42 36 -42 14 0 30 -10 40 -26 10 -14 35 -34 56 -45 l39 -20 -3 43 c-3 40 -5 44 -40 52 -27 7 -40 17 -49 38 -9 23 -17 28 -43 27 -23 -1 -25 -3 -8 -6z\"></path><path d=\"M23790 20722 c0 -11 20 -35 48 -58 26 -21 49 -42 50 -46 2 -5 10 -8 18 -8 8 0 14 -6 14 -12 0 -7 6 -2 13 12 7 14 23 26 35 28 12 2 22 9 22 16 0 14 -75 54 -124 67 -17 4 -41 11 -53 14 -19 6 -23 3 -23 -13z\"></path><path d=\"M26733 20714 c-9 -25 17 -35 72 -28 50 7 101 22 94 28 -2 2 -39 6 -82 10 -66 6 -78 5 -84 -10z\"></path><path d=\"M26560 20710 c0 -6 34 -10 83 -10 56 0 77 3 67 10 -20 13 -150 13 -150 0z\"></path><path d=\"M21562 20693 c-34 -7 -26 -51 13 -74 68 -41 82 -48 120 -54 l40 -7 -70 71 c-38 39 -72 70 -75 70 -3 -1 -15 -4 -28 -6z\"></path><path d=\"M21299 20688 c-10 -33 -6 -38 32 -38 21 0 39 4 39 8 0 13 -67 41 -71 30z\"></path><path d=\"M25568 20653 c12 -8 22 -22 22 -30 0 -7 8 -17 18 -20 9 -4 22 -14 29 -22 6 -9 15 -12 20 -8 4 5 0 14 -10 21 -9 7 -17 18 -17 24 0 15 -50 52 -69 51 -12 0 -11 -4 7 -16z\"></path><path d=\"M23391 20637 c-6 -8 -8 -17 -4 -20 7 -8 33 11 33 24 0 13 -16 11 -29 -4z\"></path><path d=\"M26446 20642 c-7 -12 23 -54 34 -47 4 3 10 -2 14 -10 3 -8 15 -15 27 -15 22 0 22 0 3 21 -29 33 -72 60 -78 51z\"></path><path d=\"M21382 20628 c5 -15 28 -23 28 -10 0 5 -7 13 -16 16 -10 4 -14 1 -12 -6z\"></path><path d=\"M24055 20620 l-30 -8 35 -1 c19 0 42 4 50 9 12 8 11 10 -5 9 -11 -1 -33 -5 -50 -9z\"></path><path d=\"M21136 20583 c-11 -11 -6 -23 9 -23 8 0 15 4 15 9 0 13 -16 22 -24 14z\"></path><path d=\"M27192 20569 c-17 -26 0 -49 34 -49 18 0 24 5 24 23 0 45 -36 61 -58 26z\"></path><path d=\"M24950 20570 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M22400 20551 c0 -6 4 -11 9 -11 14 0 9 -43 -7 -59 -11 -11 -16 -11 -30 1 -27 24 -52 29 -52 13 0 -8 9 -15 19 -15 12 0 21 -8 23 -21 2 -17 19 -27 73 -45 92 -31 99 -31 90 3 -6 27 -6 27 14 9 15 -14 18 -22 10 -32 -6 -7 -6 -14 -1 -18 13 -8 23 19 16 39 -8 19 26 21 44 3 10 -10 15 -10 21 1 7 11 10 11 17 -1 12 -20 52 -40 64 -33 6 3 10 2 10 -4 0 -6 10 -20 22 -31 l22 -21 -27 -23 c-15 -13 -27 -26 -27 -29 0 -10 63 -27 102 -27 33 0 45 -7 81 -44 23 -24 47 -52 52 -61 9 -15 15 -16 32 -7 25 14 39 4 17 -12 -12 -10 -7 -19 37 -64 28 -28 55 -49 60 -46 5 3 2 12 -6 20 -20 21 -19 31 6 45 17 8 31 8 60 0 21 -7 42 -11 45 -11 4 1 10 -3 14 -9 7 -12 40 -4 40 9 0 9 -32 22 -46 19 -21 -3 -34 2 -34 14 0 7 -9 18 -20 25 -26 16 -101 42 -123 42 -10 0 -28 9 -40 21 -12 11 -34 23 -49 26 -15 3 -30 14 -33 24 -4 11 -13 19 -21 19 -12 0 -44 54 -44 74 0 2 14 7 30 10 17 3 44 9 60 12 17 3 30 9 30 13 0 11 -142 33 -161 26 -9 -3 -24 5 -37 20 -12 14 -29 25 -37 25 -21 0 -75 41 -75 57 0 7 -9 17 -20 23 -11 6 -20 17 -20 25 0 21 -23 19 -50 -5 -27 -24 -48 -25 -69 -6 -21 19 -91 32 -91 17z m640 -401 c0 -5 -5 -10 -11 -10 -5 0 -7 5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m7 -45 c-7 -7 -18 -10 -24 -8 -21 8 -15 18 11 19 20 2 22 -1 13 -11z m88 5 c3 -6 -4 -10 -17 -10 -18 0 -20 2 -8 10 19 12 18 12 25 0z\"></path><path d=\"M24990 20545 c0 -9 9 -15 21 -15 18 0 19 2 9 15 -7 8 -16 15 -21 15 -5 0 -9 -7 -9 -15z\"></path><path d=\"M23480 20540 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M23120 20530 c0 -5 -7 -10 -15 -10 -16 0 -16 -20 0 -32 6 -4 26 -8 45 -8 20 0 45 -7 57 -15 11 -8 34 -13 51 -12 32 2 33 12 1 12 -10 0 -18 4 -18 9 1 17 -36 30 -78 27 -27 -2 -43 2 -43 9 0 8 11 9 33 5 l32 -6 -29 15 c-33 19 -36 19 -36 6z\"></path><path d=\"M21751 20498 c7 -13 18 -27 25 -31 18 -10 18 -25 -1 -43 -8 -9 -15 -19 -15 -24 0 -11 85 -50 110 -50 11 0 27 -11 36 -25 9 -14 22 -25 29 -25 7 0 25 -15 39 -32 15 -18 31 -38 36 -45 6 -7 10 -15 10 -19 0 -11 71 -74 82 -74 6 0 4 7 -3 17 -12 14 -12 16 1 11 8 -3 14 -15 13 -27 -2 -17 3 -21 25 -21 19 0 23 -3 13 -9 -18 -11 -8 -36 18 -51 25 -13 27 -1 10 49 -9 24 -15 30 -30 26 -14 -5 -17 -2 -13 10 10 24 -24 56 -52 49 -15 -4 -24 -2 -24 6 0 6 4 9 8 6 5 -3 22 2 38 10 22 12 30 12 33 3 7 -22 62 -67 88 -72 14 -2 33 -2 44 0 17 5 16 7 -7 27 -14 11 -33 29 -42 39 -10 10 -34 20 -55 24 -30 4 -38 10 -34 23 5 21 -24 40 -72 46 -20 3 -37 8 -39 13 -10 29 -32 42 -79 48 -48 5 -53 8 -53 30 0 35 -28 90 -58 113 -13 11 -40 20 -59 20 -32 0 -33 -1 -22 -22z m287 -232 c-7 -8 -17 -12 -22 -9 -4 3 -2 9 5 14 22 13 31 11 17 -5z m46 -1 c-5 -11 -2 -13 10 -9 9 3 16 1 16 -5 0 -14 -27 -15 -35 -1 -3 6 -3 15 0 20 9 15 15 12 9 -5z\"></path><path d=\"M21590 20500 c0 -5 4 -10 8 -10 5 0 17 -8 28 -17 25 -23 61 -43 74 -43 5 0 10 9 10 20 0 19 -13 25 -52 22 -10 -1 -24 7 -30 18 -13 21 -38 27 -38 10z\"></path><path d=\"M24546 20485 c9 -14 18 -25 20 -25 2 0 -2 11 -8 25 -6 14 -15 25 -20 25 -5 0 -1 -11 8 -25z\"></path><path d=\"M25040 20496 c0 -15 55 -66 71 -66 18 0 8 28 -12 33 -11 3 -23 15 -26 26 -6 23 -33 29 -33 7z\"></path><path d=\"M26620 20501 c0 -5 7 -14 15 -21 8 -7 15 -21 15 -32 0 -16 3 -17 22 -7 l23 12 -22 10 c-13 5 -25 18 -28 28 -6 19 -25 27 -25 10z\"></path><path d=\"M24050 20471 c0 -5 12 -19 26 -30 14 -11 35 -35 47 -53 13 -18 25 -31 28 -28 10 8 39 -21 55 -56 9 -19 20 -34 25 -34 5 0 31 -21 57 -46 81 -79 91 -86 101 -80 21 14 -9 106 -34 106 -8 0 -15 5 -15 10 0 6 -11 10 -25 10 -18 0 -23 4 -19 15 4 8 1 15 -5 15 -6 0 -11 -4 -11 -10 0 -5 -7 -10 -15 -10 -8 0 -15 7 -15 15 0 8 5 15 10 15 6 0 10 5 10 11 0 20 -24 3 -30 -22 -6 -22 -7 -21 -19 14 -7 20 -19 37 -27 37 -8 0 -14 10 -14 23 -1 32 -22 55 -55 59 -22 2 -31 9 -33 26 -2 14 -10 22 -23 22 -10 0 -19 -4 -19 -9z\"></path><path d=\"M24596 20466 c3 -9 11 -16 16 -16 13 0 5 23 -10 28 -7 2 -10 -2 -6 -12z\"></path><path d=\"M25777 20463 c-10 -9 3 -23 21 -23 11 0 18 -8 19 -22 2 -27 42 -65 77 -74 22 -5 26 -3 26 14 0 24 -28 38 -36 17 -8 -21 -23 -9 -17 14 3 13 -6 26 -29 43 -45 34 -54 38 -61 31z m70 -65 c-3 -8 -6 -5 -6 6 -1 11 2 17 5 13 3 -3 4 -12 1 -19z\"></path><path d=\"M24630 20439 c0 -6 -9 -9 -20 -6 -11 3 -18 2 -15 -3 3 -4 14 -10 25 -13 15 -4 20 0 20 14 0 10 -2 19 -5 19 -3 0 -5 -5 -5 -11z\"></path><path d=\"M21433 20371 c-8 -13 -9 -21 0 -30 8 -8 7 -17 -3 -36 -16 -29 -19 -26 47 -59 84 -42 110 -31 84 36 -10 27 -90 108 -106 108 -5 0 -15 -8 -22 -19z\"></path><path d=\"M22580 20374 c0 -8 5 -12 10 -9 6 4 8 11 5 16 -9 14 -15 11 -15 -7z\"></path><path d=\"M22630 20380 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M23120 20380 c0 -5 7 -10 16 -10 8 0 12 5 9 10 -3 6 -10 10 -16 10 -5 0 -9 -4 -9 -10z\"></path><path d=\"M23462 20369 c2 -14 11 -25 22 -27 10 -2 16 0 12 6 -3 6 0 12 6 15 16 5 10 13 -20 22 -21 6 -23 4 -20 -16z\"></path><path d=\"M23636 20375 c-3 -9 -6 -18 -6 -20 0 -1 18 -2 40 -2 31 1 40 5 38 16 -4 23 -64 27 -72 6z\"></path><path d=\"M26738 20373 c-7 -32 4 -63 21 -63 21 0 74 -33 132 -81 46 -38 121 -67 104 -39 -4 7 -2 16 6 21 11 7 10 9 -3 9 -12 0 -18 8 -18 24 0 14 -4 28 -10 31 -5 3 -10 21 -10 39 0 33 0 33 -62 41 -35 4 -73 8 -85 9 -12 0 -21 6 -20 11 1 6 -10 11 -25 13 -19 2 -27 -2 -30 -15z\"></path><path d=\"M26277 20373 c-16 -16 -4 -24 26 -18 48 10 57 25 16 25 -20 0 -39 -3 -42 -7z\"></path><path d=\"M26975 20360 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M22645 20350 c-3 -5 1 -10 10 -10 9 0 13 5 10 10 -3 6 -8 10 -10 10 -2 0 -7 -4 -10 -10z\"></path><path d=\"M21347 20343 c-16 -15 -5 -31 21 -31 36 0 45 7 31 24 -12 15 -41 19 -52 7z\"></path><path d=\"M22618 20325 c30 -25 80 -35 66 -14 -3 6 -14 9 -24 6 -10 -2 -23 4 -31 14 -7 11 -20 19 -27 19 -7 0 0 -11 16 -25z\"></path><path d=\"M23558 20343 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M25200 20343 c0 -4 13 -21 30 -37 92 -96 115 -116 132 -122 32 -10 41 10 18 39 -24 30 -40 35 -40 12 0 -8 7 -15 15 -15 8 0 15 -4 15 -10 0 -16 -16 -12 -36 11 -15 17 -16 22 -4 29 12 7 11 12 -4 29 -11 12 -26 21 -35 21 -13 -1 -13 -3 3 -15 11 -8 17 -18 13 -21 -14 -14 -38 19 -32 44 5 19 3 23 -9 19 -8 -3 -22 1 -33 8 -20 16 -33 19 -33 8z\"></path><path d=\"M23706 20306 c-6 -25 -2 -35 19 -53 14 -13 39 -23 55 -23 38 0 60 -9 60 -26 0 -25 37 -36 80 -23 22 7 37 15 35 20 -3 4 -30 11 -60 14 -36 5 -55 12 -55 21 0 7 -9 18 -20 24 -11 6 -20 16 -20 23 -1 24 -31 51 -59 53 -25 2 -30 -2 -35 -30z\"></path><path d=\"M23517 20318 c6 -11 43 -10 43 1 0 5 -11 8 -24 7 -13 0 -22 -4 -19 -8z\"></path><path d=\"M22370 20275 c0 -8 4 -15 10 -15 5 0 7 7 4 15 -4 8 -8 15 -10 15 -2 0 -4 -7 -4 -15z\"></path><path d=\"M22406 20252 c-3 -6 -1 -14 5 -17 15 -10 25 3 12 16 -7 7 -13 7 -17 1z\"></path><path d=\"M22454 20184 c10 -37 38 -74 53 -69 7 2 15 0 18 -5 4 -6 14 -10 23 -10 11 0 13 3 6 8 -6 4 -17 17 -23 30 -12 23 -13 23 -28 5 -13 -17 -14 -15 -9 16 5 29 4 32 -9 21 -13 -10 -15 -9 -15 9 0 11 -5 21 -11 21 -7 0 -9 -10 -5 -26z\"></path><path d=\"M26065 20200 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M21633 20150 c10 -46 47 -95 94 -124 24 -14 48 -26 53 -26 16 0 11 47 -5 54 -8 3 -15 12 -15 20 0 23 -87 106 -111 106 -19 0 -21 -4 -16 -30z\"></path><path d=\"M23355 20170 c-15 -25 93 -141 146 -156 26 -7 35 -16 37 -36 2 -15 9 -31 15 -36 20 -15 67 -24 67 -12 0 21 -30 69 -47 75 -23 7 -83 62 -83 74 0 5 -18 18 -39 28 -22 10 -47 30 -56 46 -17 28 -30 34 -40 17z m115 -108 c0 -1 -9 2 -20 8 -11 6 -20 15 -20 20 0 6 9 2 20 -7 11 -10 20 -19 20 -21z\"></path><path d=\"M24030 20160 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M24924 20135 c-7 -17 3 -35 19 -35 7 0 6 4 -3 10 -13 9 -12 12 4 25 18 13 18 15 3 15 -10 0 -20 -7 -23 -15z\"></path><path d=\"M22305 20130 c-19 -8 -19 -9 3 -9 12 -1 22 4 22 9 0 6 -1 10 -2 9 -2 0 -12 -4 -23 -9z\"></path><path d=\"M21780 20115 c-18 -21 13 -55 50 -55 15 0 35 -9 45 -20 10 -11 37 -26 59 -32 23 -7 46 -18 52 -26 5 -8 21 -12 34 -10 l24 3 -33 38 c-21 23 -42 37 -57 37 -17 0 -24 6 -24 20 0 11 -7 20 -15 20 -9 0 -25 9 -37 20 -26 24 -80 26 -98 5z\"></path><path d=\"M24116 20114 c-5 -12 0 -15 21 -12 14 2 28 9 31 16 6 18 -45 15 -52 -4z\"></path><path d=\"M27096 20121 c-3 -5 1 -11 9 -14 9 -4 12 -1 8 9 -6 16 -10 17 -17 5z\"></path><path d=\"M22355 20110 c-3 -6 1 -7 9 -4 18 7 21 14 7 14 -6 0 -13 -4 -16 -10z\"></path><path d=\"M27045 20110 c-3 -6 1 -7 9 -4 18 7 21 14 7 14 -6 0 -13 -4 -16 -10z\"></path><path d=\"M24960 20096 c0 -2 7 -9 15 -16 9 -7 15 -8 15 -2 0 5 -7 12 -15 16 -8 3 -15 4 -15 2z\"></path><path d=\"M23975 20070 c20 -22 31 -20 22 5 -4 8 -14 15 -23 15 -16 0 -16 -2 1 -20z\"></path><path d=\"M27082 20071 c2 -8 19 -25 38 -38 19 -12 46 -31 60 -42 31 -23 54 -30 58 -16 2 6 -7 12 -20 15 -14 4 -32 23 -46 51 -22 40 -28 45 -59 45 -25 0 -33 -4 -31 -15z\"></path><path d=\"M22204 20069 c-3 -6 -1 -16 5 -22 8 -8 11 -5 11 11 0 24 -5 28 -16 11z\"></path><path d=\"M23260 20042 c0 -16 10 -24 43 -32 23 -6 56 -16 74 -22 23 -8 38 -9 55 -1 22 11 22 11 3 19 -11 4 -24 13 -30 20 -5 6 -28 14 -50 18 -22 3 -52 8 -67 12 -24 5 -28 3 -28 -14z\"></path><path d=\"M25040 20026 c0 -9 7 -16 16 -16 9 0 14 5 12 12 -6 18 -28 21 -28 4z\"></path><path d=\"M25550 20025 c0 -8 9 -15 20 -15 18 0 60 -32 60 -45 0 -10 45 -75 52 -75 4 0 21 -13 38 -29 31 -27 70 -32 70 -9 0 6 -8 8 -18 6 -24 -7 -120 79 -125 110 -2 12 -20 34 -40 47 -41 29 -57 31 -57 10z\"></path><path d=\"M25080 19990 c0 -13 5 -20 13 -17 6 2 12 10 12 17 0 7 -6 15 -12 18 -8 2 -13 -5 -13 -18z\"></path><path d=\"M25679 19953 c14 -27 80 -87 87 -81 6 6 -79 98 -91 98 -3 0 -1 -8 4 -17z\"></path><path d=\"M23640 19910 c0 -21 46 -80 63 -80 10 0 17 -8 17 -19 0 -16 18 -31 36 -31 2 0 -3 17 -12 38 -9 20 -16 45 -16 54 0 9 -5 21 -11 26 -18 14 -77 23 -77 12z\"></path><path d=\"M26390 19911 c0 -12 29 -35 36 -28 11 10 -5 37 -21 37 -8 0 -15 -4 -15 -9z\"></path><path d=\"M23758 19874 c-3 -3 -2 -22 4 -42 5 -20 10 -44 12 -52 4 -21 19 -17 31 9 5 11 15 21 22 21 7 0 13 5 13 10 0 6 -4 10 -9 10 -5 0 -13 9 -16 20 -10 32 -25 23 -18 -10 4 -23 2 -30 -10 -30 -17 0 -29 57 -13 64 8 3 8 5 0 5 -6 1 -13 -1 -16 -5z\"></path><path d=\"M24100 19860 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M24670 19855 c0 -8 5 -15 10 -15 6 0 10 7 10 15 0 8 -4 15 -10 15 -5 0 -10 -7 -10 -15z\"></path><path d=\"M26180 19825 l-45 -15 62 5 c79 6 119 -7 48 -16 l-50 -6 63 -1 c56 -2 62 0 62 18 0 13 -7 20 -19 20 -10 0 -31 2 -47 4 -16 3 -49 -2 -74 -9z\"></path><path d=\"M25790 19820 c0 -5 7 -10 16 -10 8 0 12 5 9 10 -3 6 -10 10 -16 10 -5 0 -9 -4 -9 -10z\"></path><path d=\"M25842 19778 c6 -16 36 -34 44 -26 3 4 4 14 1 23 -7 17 -51 21 -45 3z\"></path><path d=\"M25325 19740 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M25370 19745 c0 -15 18 -40 24 -34 3 3 -1 14 -9 25 -8 10 -14 15 -15 9z\"></path><path d=\"M23837 19727 c-3 -7 3 -13 14 -13 13 0 15 3 7 13 -6 7 -12 13 -13 13 -2 0 -5 -6 -8 -13z\"></path><path d=\"M23860 19689 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M26660 19680 c0 -5 6 -10 14 -10 7 0 16 -9 19 -20 6 -23 27 -27 27 -6 0 7 -11 21 -25 30 -28 19 -35 20 -35 6z\"></path><path d=\"M23880 19662 c0 -14 35 -42 52 -42 9 0 19 -6 21 -12 4 -8 6 -7 6 4 1 9 -11 26 -25 37 -27 22 -54 28 -54 13z\"></path><path d=\"M24357 19612 c5 -19 41 -47 50 -38 7 7 -15 34 -38 46 -14 8 -16 6 -12 -8z\"></path><path d=\"M26066 19601 c-4 -7 -5 -15 -2 -18 9 -9 19 4 14 18 -4 11 -6 11 -12 0z\"></path><path d=\"M23976 19568 c4 -7 21 -24 38 -38 60 -48 134 -132 139 -158 5 -25 13 -31 91 -71 5 -2 6 1 2 7 -4 7 -3 12 2 12 5 0 12 -9 15 -20 5 -20 41 -28 51 -11 3 5 -1 24 -9 42 -10 25 -15 29 -15 14 l-1 -20 -9 20 c-7 17 -9 18 -14 4 -8 -19 -36 -21 -36 -2 0 8 5 11 10 8 6 -3 10 1 10 9 0 18 -25 22 -35 6 -3 -5 -18 -10 -33 -9 -27 1 -27 1 6 15 17 8 32 17 32 21 0 13 -93 93 -107 93 -7 0 -13 3 -13 8 0 4 -15 24 -33 45 -25 28 -40 37 -66 37 -23 0 -30 -4 -25 -12z m214 -163 c0 -9 -6 -12 -15 -9 -8 4 -15 10 -15 15 0 5 7 9 15 9 8 0 15 -7 15 -15z\"></path><path d=\"M26087 19574 c-8 -8 57 -74 73 -74 14 0 13 17 -2 27 -7 4 -18 17 -24 28 -12 21 -35 30 -47 19z\"></path><path d=\"M26802 19568 c-19 -19 -15 -25 24 -32 25 -5 34 -11 30 -21 -3 -9 0 -12 10 -8 15 5 20 23 6 23 -4 0 -12 10 -17 22 -12 27 -35 34 -53 16z\"></path><path d=\"M24425 19550 c3 -5 11 -10 16 -10 6 0 7 5 4 10 -3 6 -11 10 -16 10 -6 0 -7 -4 -4 -10z\"></path><path d=\"M24995 19550 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M26190 19482 c0 -12 19 -26 26 -19 2 2 -2 10 -11 17 -9 8 -15 8 -15 2z\"></path><path d=\"M25112 19450 c7 -11 16 -20 20 -20 5 0 3 9 -4 20 -7 11 -16 20 -20 20 -5 0 -3 -9 4 -20z\"></path><path d=\"M26220 19440 c0 -11 40 -34 47 -26 3 3 3 12 0 21 -7 16 -47 21 -47 5z\"></path><path d=\"M26957 19443 c-14 -13 -6 -33 12 -33 11 0 23 -9 26 -20 3 -11 13 -20 21 -20 20 0 18 16 -4 32 -10 7 -21 21 -25 31 -7 18 -19 22 -30 10z\"></path><path d=\"M27330 19430 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M24020 19390 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M24605 19390 c3 -5 13 -10 21 -10 8 0 14 5 14 10 0 6 -9 10 -21 10 -11 0 -17 -4 -14 -10z\"></path><path d=\"M24652 19353 c4 -22 38 -30 38 -10 0 8 -7 18 -16 21 -23 9 -26 8 -22 -11z\"></path><path d=\"M24707 19309 c7 -7 15 -10 18 -7 3 3 -2 9 -12 12 -14 6 -15 5 -6 -5z\"></path><path d=\"M27010 19260 c19 -13 30 -13 30 0 0 6 -10 10 -22 10 -19 0 -20 -2 -8 -10z\"></path><path d=\"M27078 19223 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M24407 19213 c-14 -13 -6 -42 13 -48 11 -4 27 -18 34 -33 15 -29 50 -62 65 -62 5 0 18 -11 29 -25 11 -14 25 -25 31 -25 6 0 11 -6 11 -14 0 -8 7 -17 16 -20 8 -3 12 -2 9 4 -9 14 9 12 23 -2 8 -8 12 -8 12 -1 0 17 -40 63 -55 63 -7 0 -19 13 -26 29 -7 17 -24 34 -36 40 -13 6 -23 15 -23 20 0 5 -16 16 -36 26 -20 9 -39 26 -41 36 -5 20 -15 24 -26 12z\"></path><path d=\"M27305 19158 c-2 -7 -5 -30 -7 -50 l-4 -37 41 1 40 0 -3 40 c-3 31 -10 41 -29 49 -31 12 -33 11 -38 -3z\"></path><path d=\"M26582 19153 c-27 -5 -25 -24 5 -37 11 -5 30 -24 43 -43 14 -21 31 -33 45 -33 14 0 42 -21 76 -55 54 -56 108 -89 135 -83 11 2 8 10 -13 33 -15 17 -39 45 -53 61 -14 17 -48 41 -75 55 -27 13 -67 43 -88 67 -22 23 -42 41 -46 41 -3 -1 -16 -4 -29 -6z m95 -89 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z\"></path><path d=\"M24920 19110 c0 -5 7 -10 15 -10 8 0 15 -6 15 -13 0 -7 9 -13 19 -13 16 0 18 4 9 19 -5 10 -12 16 -15 13 -3 -3 -14 -1 -24 5 -13 6 -19 6 -19 -1z\"></path><path d=\"M25020 19032 c-13 -14 -12 -15 3 -9 9 3 17 2 17 -4 0 -6 7 -4 15 5 19 19 20 32 1 17 -8 -7 -16 -8 -18 -2 -1 5 -10 2 -18 -7z\"></path><path d=\"M25060 18996 c0 -2 7 -7 16 -10 8 -3 12 -2 9 4 -6 10 -25 14 -25 6z\"></path><path d=\"M24710 18933 c0 -6 7 -16 15 -23 8 -7 15 -18 15 -24 0 -6 12 -24 26 -39 20 -22 29 -26 40 -16 7 6 11 16 7 22 -4 6 -9 3 -13 -8 -6 -17 -7 -17 -13 6 -6 25 -77 101 -77 82z\"></path><path d=\"M26915 18880 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M25250 18835 c-10 -13 -9 -15 9 -15 12 0 25 -8 28 -17 8 -21 23 -33 41 -33 10 0 10 5 2 20 -6 11 -17 20 -25 20 -8 0 -15 9 -15 20 0 24 -22 26 -40 5z\"></path><path d=\"M24870 18800 c0 -6 7 -13 15 -16 16 -6 21 -24 7 -24 -5 0 -18 9 -30 20 -29 27 -28 13 1 -24 21 -26 26 -28 53 -18 16 6 24 11 17 11 -7 1 -10 7 -7 14 2 7 -9 20 -26 30 -17 11 -30 14 -30 7z\"></path><path d=\"M25905 18760 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M24910 18711 c0 -5 9 -13 20 -16 11 -3 20 -11 20 -16 0 -5 5 -9 11 -9 7 0 41 -25 76 -55 36 -30 72 -55 82 -55 9 0 22 -5 29 -12 6 -6 14 -9 18 -6 3 3 -8 14 -25 24 -17 10 -31 22 -31 26 0 5 -11 13 -25 18 -14 5 -25 14 -25 20 0 6 -5 8 -10 5 -6 -3 -14 5 -20 19 -5 14 -17 27 -27 28 -10 0 -25 1 -33 2 -8 1 -16 9 -18 19 -4 17 -42 25 -42 8z\"></path><path d=\"M25500 18627 c0 -21 12 -28 27 -16 19 16 16 29 -7 29 -11 0 -20 -6 -20 -13z\"></path><path d=\"M25613 18543 c-20 -7 -15 -23 6 -23 11 0 21 -9 24 -22 4 -12 9 -19 13 -16 10 10 -4 55 -18 60 -7 3 -19 3 -25 1z\"></path><path d=\"M26201 18511 c-10 -7 -8 -12 10 -25 28 -19 49 -21 49 -3 0 29 -32 45 -59 28z\"></path><path d=\"M25195 18480 c3 -5 13 -10 21 -10 8 0 12 5 9 10 -3 6 -13 10 -21 10 -8 0 -12 -4 -9 -10z\"></path><path d=\"M25690 18458 c21 -9 22 -12 7 -15 -14 -4 -9 -9 20 -24 46 -23 44 -23 40 1 -4 26 -36 49 -67 49 l-25 0 25 -11z\"></path><path d=\"M25230 18448 c0 -10 5 -18 10 -18 6 0 10 -7 10 -15 0 -8 8 -16 18 -16 50 -4 74 14 42 31 -25 13 -42 4 -20 -10 13 -8 12 -10 -2 -10 -9 0 -26 12 -37 28 -16 21 -20 23 -21 10z\"></path><path d=\"M25339 18377 c6 -8 8 -17 4 -20 -3 -4 1 -7 10 -7 9 0 21 -9 27 -20 6 -11 17 -20 25 -20 13 0 13 3 3 20 -7 11 -18 20 -25 20 -7 0 -17 9 -23 20 -6 11 -16 20 -22 20 -7 0 -7 -4 1 -13z\"></path><path d=\"M25785 18370 c19 -21 55 -27 55 -10 0 6 -6 10 -12 10 -9 0 -8 4 2 10 11 7 5 10 -24 10 -38 0 -39 0 -21 -20z\"></path><path d=\"M24788 18353 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M24860 18293 c1 -22 62 -163 71 -163 3 0 18 19 33 42 l28 43 -47 42 c-42 38 -85 56 -85 36z\"></path><path d=\"M25431 18290 c0 -8 11 -26 24 -39 14 -13 25 -27 25 -32 0 -8 51 -39 64 -39 8 0 -2 36 -16 59 -8 13 -23 21 -39 21 -16 0 -33 9 -42 23 -11 15 -16 17 -16 7z\"></path><path d=\"M27036 18271 c-4 -5 3 -7 14 -4 23 6 26 13 6 13 -8 0 -17 -4 -20 -9z\"></path><path d=\"M27070 18246 c0 -9 5 -16 10 -16 6 0 10 4 10 9 0 6 -4 13 -10 16 -5 3 -10 -1 -10 -9z\"></path><path d=\"M27473 18173 c-15 -5 -18 -33 -4 -33 13 0 33 28 24 33 -4 2 -14 2 -20 0z\"></path><path d=\"M26106 18133 c-11 -11 -6 -23 9 -23 8 0 15 4 15 9 0 13 -16 22 -24 14z\"></path><path d=\"M25595 18110 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M25120 18082 c0 -12 19 -26 26 -19 2 2 -2 10 -11 17 -9 8 -15 8 -15 2z\"></path><path d=\"M25919 18031 c10 -6 12 -22 9 -54 -4 -33 -2 -47 8 -51 18 -7 34 25 34 67 0 35 -13 47 -48 47 -14 0 -14 -2 -3 -9z\"></path><path d=\"M26231 18018 c-10 -26 -3 -85 10 -94 5 -3 9 -16 9 -30 0 -13 5 -24 10 -24 6 0 10 10 10 23 0 12 9 30 20 40 30 26 26 69 -9 90 -37 22 -40 22 -50 -5z\"></path><path d=\"M26595 17920 c3 -5 10 -10 16 -10 5 0 9 5 9 10 0 6 -7 10 -16 10 -8 0 -12 -4 -9 -10z\"></path><path d=\"M24915 17884 c-13 -61 -23 -76 -44 -64 -11 5 -31 10 -45 10 -49 0 -26 -44 52 -98 17 -13 32 -32 32 -43 0 -15 7 -19 34 -19 42 0 57 27 28 50 -15 11 -22 33 -27 90 -7 88 -20 120 -30 74z\"></path><path d=\"M27583 17823 c-26 -5 -29 -13 -11 -31 14 -14 32 -16 24 -3 -3 5 1 11 9 15 15 5 22 27 8 25 -5 -1 -18 -4 -30 -6z\"></path><path d=\"M27556 17781 c-4 -7 -5 -15 -2 -18 9 -9 19 4 14 18 -4 11 -6 11 -12 0z\"></path><path d=\"M25730 17520 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M26192 17350 c0 -19 2 -27 5 -17 2 9 2 25 0 35 -3 9 -5 1 -5 -18z\"></path><path d=\"M26360 25340 c-27 -9 -22 -12 23 -14 15 -1 26 2 24 8 -5 14 -18 15 -47 6z\"></path><path d=\"M26308 25305 c-3 -14 -1 -25 3 -25 5 0 9 11 9 25 0 14 -2 25 -4 25 -2 0 -6 -11 -8 -25z\"></path><path d=\"M27770 25195 c0 -8 5 -15 10 -15 6 0 10 7 10 15 0 8 -4 15 -10 15 -5 0 -10 -7 -10 -15z\"></path><path d=\"M32270 25330 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M37200 24989 c0 -11 4 -18 10 -14 5 3 7 12 3 20 -7 21 -13 19 -13 -6z\"></path><path d=\"M37080 24781 c-12 -23 -13 -31 -2 -31 4 0 12 11 19 25 13 29 -1 34 -17 6z\"></path><path d=\"M37024 24665 c-4 -8 1 -30 10 -48 l16 -32 0 42 c0 43 -16 66 -26 38z\"></path><path d=\"M36992 24591 c2 -7 7 -12 11 -12 12 1 9 15 -3 20 -7 2 -11 -2 -8 -8z\"></path><path d=\"M22968 25253 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M23036 25221 c-8 -13 11 -61 24 -61 5 0 10 16 10 35 0 34 -20 49 -34 26z\"></path><path d=\"M23090 25140 c0 -5 4 -10 9 -10 6 0 13 5 16 10 3 6 -1 10 -9 10 -9 0 -16 -4 -16 -10z\"></path><path d=\"M23090 25116 c0 -2 7 -9 15 -16 13 -11 14 -10 9 4 -5 14 -24 23 -24 12z\"></path><path d=\"M23132 25104 c1 -9 9 -19 16 -22 9 -3 13 2 10 14 -1 9 -9 19 -16 22 -9 3 -13 -2 -10 -14z\"></path><path d=\"M21900 25085 c0 -8 5 -15 10 -15 6 0 10 7 10 15 0 8 -4 15 -10 15 -5 0 -10 -7 -10 -15z\"></path><path d=\"M32370 25055 c0 -8 2 -15 4 -15 2 0 6 7 10 15 3 8 1 15 -4 15 -6 0 -10 -7 -10 -15z\"></path><path d=\"M31286 25051 c-7 -10 18 -34 27 -25 7 8 -3 34 -13 34 -5 0 -11 -4 -14 -9z\"></path><path d=\"M31248 25020 c-22 -51 -7 -75 31 -51 9 6 11 15 6 27 -7 17 -8 16 -14 -6 -5 -16 -9 -21 -14 -13 -5 7 -3 22 3 33 6 12 9 26 7 33 -2 7 -11 -4 -19 -23z\"></path><path d=\"M31290 24940 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M26381 24971 c-10 -6 -10 -10 -1 -16 13 -8 24 -1 19 14 -3 6 -10 7 -18 2z\"></path><path d=\"M27558 24843 c-2 -5 -1 -30 2 -58 l6 -50 4 53 c4 48 -2 77 -12 55z\"></path><path d=\"M29253 24720 c0 -30 2 -43 4 -27 2 15 2 39 0 55 -2 15 -4 2 -4 -28z\"></path><path d=\"M29275 24670 c-3 -5 1 -10 10 -10 9 0 13 5 10 10 -3 6 -8 10 -10 10 -2 0 -7 -4 -10 -10z\"></path><path d=\"M33136 24721 c-4 -7 -5 -15 -2 -18 9 -9 19 4 14 18 -4 11 -6 11 -12 0z\"></path><path d=\"M31172 24730 c0 -14 2 -19 5 -12 2 6 2 18 0 25 -3 6 -5 1 -5 -13z\"></path><path d=\"M24652 24238 c-5 -7 -12 -23 -16 -34 -6 -18 1 -25 39 -43 57 -27 69 -26 83 3 10 22 7 28 -24 55 -37 33 -65 39 -82 19z\"></path><path d=\"M24537 24117 c-8 -7 -12 -19 -8 -27 5 -12 10 -11 27 7 16 16 18 23 9 27 -7 2 -20 -1 -28 -7z\"></path><path d=\"M26060 24421 c0 -12 40 -41 57 -41 14 0 18 26 6 33 -20 11 -63 16 -63 8z\"></path><path d=\"M26040 24330 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M27554 24289 c-10 -17 13 -36 27 -22 12 12 4 33 -11 33 -5 0 -12 -5 -16 -11z\"></path><path d=\"M26745 24000 c-3 -5 1 -10 9 -10 9 0 16 5 16 10 0 6 -4 10 -9 10 -6 0 -13 -4 -16 -10z\"></path><path d=\"M26648 23943 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M26728 23928 c-2 -19 -10 -24 -45 -26 -56 -4 -55 -17 0 -18 37 -1 45 3 55 25 14 30 15 41 3 41 -5 0 -11 -10 -13 -22z\"></path><path d=\"M26660 23920 c0 -5 9 -10 20 -10 11 0 20 5 20 10 0 6 -9 10 -20 10 -11 0 -20 -4 -20 -10z\"></path><path d=\"M27081 23771 c-19 -12 -9 -24 39 -47 24 -11 43 -28 46 -41 3 -12 15 -25 25 -28 10 -4 19 -10 19 -15 0 -4 8 -10 18 -12 15 -4 17 0 14 24 -3 22 -14 34 -41 46 -20 9 -40 22 -46 27 -39 39 -62 53 -74 46z\"></path><path d=\"M27056 23571 c-8 -13 50 -31 100 -31 37 0 44 3 44 20 0 18 -7 20 -69 20 -39 0 -72 -4 -75 -9z\"></path><path d=\"M26980 23529 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M19810 24190 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M33127 24401 c-4 -18 -7 -43 -6 -55 1 -11 5 -1 10 24 5 25 7 49 6 55 -2 5 -7 -5 -10 -24z\"></path><path d=\"M33081 24364 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M33086 24332 c-3 -6 -1 -14 5 -17 15 -10 25 3 12 16 -7 7 -13 7 -17 1z\"></path><path d=\"M30195 24370 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M19955 24210 c3 -5 10 -10 16 -10 5 0 9 5 9 10 0 6 -7 10 -16 10 -8 0 -12 -4 -9 -10z\"></path><path d=\"M30572 24186 c7 -8 16 -12 21 -9 11 7 -2 23 -19 23 -12 0 -12 -2 -2 -14z\"></path><path d=\"M19425 23760 c20 -22 31 -20 22 5 -4 8 -14 15 -23 15 -16 0 -16 -2 1 -20z\"></path><path d=\"M26193 23863 c-3 -8 16 -34 42 -59 40 -38 50 -43 62 -32 11 12 9 21 -15 58 -21 34 -34 44 -56 45 -15 0 -31 -5 -33 -12z\"></path><path d=\"M36925 23979 c-4 -6 -5 -13 -2 -16 7 -7 27 6 27 18 0 12 -17 12 -25 -2z\"></path><path d=\"M36890 23950 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M36890 23900 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M36811 23799 c-7 -23 -10 -44 -7 -47 3 -3 6 2 6 11 0 10 3 17 8 17 4 0 8 14 9 30 3 41 -2 38 -16 -11z\"></path><path d=\"M36696 23704 c-18 -17 -20 -30 -7 -38 5 -3 12 6 15 19 4 16 11 23 18 19 7 -4 8 -3 4 4 -9 15 -12 15 -30 -4z\"></path><path d=\"M36530 23525 c0 -8 5 -15 10 -15 6 0 10 7 10 15 0 8 -4 15 -10 15 -5 0 -10 -7 -10 -15z\"></path><path d=\"M36576 23532 c-3 -6 -1 -14 5 -17 15 -10 25 3 12 16 -7 7 -13 7 -17 1z\"></path><path d=\"M36523 23465 c-15 -11 -22 -12 -25 -3 -2 6 -10 9 -16 7 -9 -3 -6 -9 7 -20 17 -16 20 -15 47 7 32 26 21 33 -13 9z\"></path><path d=\"M19560 23770 c0 -16 5 -30 10 -30 6 0 10 14 10 30 0 17 -4 30 -10 30 -5 0 -10 -13 -10 -30z\"></path><path d=\"M19610 23675 c0 -38 3 -65 7 -62 7 8 5 119 -3 126 -2 2 -4 -26 -4 -64z\"></path><path d=\"M19570 23697 c0 -3 7 -18 15 -33 l16 -29 -3 29 c-2 16 -9 31 -15 34 -7 2 -13 2 -13 -1z\"></path><path d=\"M33207 23949 c7 -7 15 -10 18 -7 3 3 -2 9 -12 12 -14 6 -15 5 -6 -5z\"></path><path d=\"M32007 23881 c-4 -17 -3 -21 5 -13 5 5 8 16 6 23 -3 8 -7 3 -11 -10z\"></path><path d=\"M32293 23881 c4 -26 17 -40 17 -18 0 10 0 20 1 24 0 4 -4 9 -10 11 -6 2 -10 -5 -8 -17z\"></path><path d=\"M20320 23581 c0 -16 7 -34 15 -41 9 -8 15 -30 15 -57 0 -37 3 -44 17 -41 10 2 22 16 27 31 8 23 7 30 -12 43 -12 8 -22 21 -22 29 0 20 -22 65 -32 65 -4 0 -8 -13 -8 -29z\"></path><path d=\"M20220 23283 c0 -21 6 -55 13 -76 l13 -37 14 24 c16 31 5 112 -16 120 -24 9 -24 9 -24 -31z\"></path><path d=\"M20525 23003 l-30 -14 30 6 c31 7 41 12 34 19 -2 2 -17 -3 -34 -11z\"></path><path d=\"M20721 22974 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M20680 22953 c0 -5 8 -17 17 -28 14 -18 15 -18 9 -2 -3 10 -6 23 -6 28 0 5 -4 9 -10 9 -5 0 -10 -3 -10 -7z\"></path><path d=\"M20766 22925 c-3 -8 -1 -15 4 -15 6 0 10 7 10 15 0 8 -2 15 -4 15 -2 0 -6 -7 -10 -15z\"></path><path d=\"M20721 22906 c-7 -8 -11 -23 -8 -33 4 -15 5 -14 6 4 0 12 7 23 14 26 6 2 9 7 6 11 -3 4 -12 0 -18 -8z\"></path><path d=\"M20740 22854 c0 -8 5 -12 10 -9 6 4 8 11 5 16 -9 14 -15 11 -15 -7z\"></path><path d=\"M31385 23430 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M19850 23276 c0 -9 5 -16 10 -16 6 0 10 4 10 9 0 6 -4 13 -10 16 -5 3 -10 -1 -10 -9z\"></path><path d=\"M19860 23165 c-11 -13 -8 -15 15 -15 23 0 26 2 15 15 -7 8 -14 15 -15 15 -1 0 -8 -7 -15 -15z\"></path><path d=\"M19900 23046 c0 -8 5 -18 10 -21 6 -3 10 3 10 14 0 12 -4 21 -10 21 -5 0 -10 -6 -10 -14z\"></path><path d=\"M32465 23330 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M19340 23241 c0 -6 4 -13 10 -16 6 -3 7 1 4 9 -7 18 -14 21 -14 7z\"></path><path d=\"M32270 23136 c0 -9 5 -16 10 -16 6 0 10 4 10 9 0 6 -4 13 -10 16 -5 3 -10 -1 -10 -9z\"></path><path d=\"M31350 23131 c0 -6 4 -13 10 -16 6 -3 7 1 4 9 -7 18 -14 21 -14 7z\"></path><path d=\"M32090 22979 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M35523 22980 c-1 -16 1 -17 12 -7 7 6 11 15 8 20 -8 13 -19 7 -20 -13z\"></path><path d=\"M35460 22950 c-12 -8 -12 -10 5 -10 11 0 27 5 35 10 12 8 12 10 -5 10 -11 0 -27 -5 -35 -10z\"></path><path d=\"M35385 22910 c3 -5 14 -10 23 -10 15 0 15 2 2 10 -20 13 -33 13 -25 0z\"></path><path d=\"M28180 22700 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M32220 22785 c0 -15 18 -40 24 -34 3 3 -1 14 -9 25 -8 10 -14 15 -15 9z\"></path><path d=\"M20415 22020 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M32368 22673 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M28865 22610 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M28020 22364 c0 -9 5 -14 12 -12 18 6 21 28 4 28 -9 0 -16 -7 -16 -16z\"></path><path d=\"M30312 22450 c14 -22 24 -19 15 5 -4 8 -11 15 -17 15 -6 0 -6 -7 2 -20z\"></path><path d=\"M27695 22360 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M27772 22120 c-7 -11 -9 -20 -4 -20 10 0 32 22 32 32 0 15 -15 8 -28 -12z\"></path><path d=\"M27502 22038 c-7 -7 -12 -16 -12 -20 0 -12 28 -10 36 3 10 17 -10 31 -24 17z\"></path><path d=\"M30375 22200 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M33700 21980 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M27818 21703 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M27956 21605 c-21 -16 -32 -55 -16 -55 5 0 21 10 35 22 43 37 25 66 -19 33z\"></path><path d=\"M31470 21759 c0 -22 8 -23 33 -5 23 18 22 24 -8 24 -18 0 -25 -6 -25 -19z\"></path><path d=\"M33662 21728 c-7 -7 -12 -16 -12 -21 0 -5 7 -1 16 8 9 9 14 18 12 20 -2 3 -10 -1 -16 -7z\"></path><path d=\"M33686 21713 c-6 -14 -5 -15 5 -6 7 7 10 15 7 18 -3 3 -9 -2 -12 -12z\"></path><path d=\"M30541 21598 c0 -32 2 -58 7 -58 4 0 6 19 4 43 -5 70 -10 76 -11 15z\"></path><path d=\"M30561 21584 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M32581 21674 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M19570 21625 c7 -9 15 -13 17 -11 7 7 -7 26 -19 26 -6 0 -6 -6 2 -15z\"></path><path d=\"M19617 21540 c-3 -12 0 -20 8 -20 14 0 27 25 18 34 -11 11 -21 6 -26 -14z\"></path><path d=\"M31483 21094 c-6 -13 -7 -24 -3 -24 9 0 25 39 18 45 -2 2 -8 -7 -15 -21z\"></path><path d=\"M19692 21090 c0 -14 2 -19 5 -12 2 6 2 18 0 25 -3 6 -5 1 -5 -13z\"></path><path d=\"M32270 20910 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M32247 20889 c7 -7 15 -10 18 -7 3 3 -2 9 -12 12 -14 6 -15 5 -6 -5z\"></path><path d=\"M31730 20870 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M27882 20478 c3 -29 8 -34 41 -42 52 -13 73 7 37 35 -14 10 -30 23 -37 29 -26 22 -44 11 -41 -22z\"></path><path d=\"M20570 20535 c0 -8 9 -15 20 -15 11 0 20 7 20 15 0 8 -9 15 -20 15 -11 0 -20 -7 -20 -15z\"></path><path d=\"M28200 20445 c-18 -10 -20 -14 -8 -15 23 0 48 11 48 21 0 12 -11 11 -40 -6z\"></path><path d=\"M28150 20410 c-11 -7 0 -10 38 -10 33 0 51 4 47 10 -8 13 -65 13 -85 0z\"></path><path d=\"M31693 20550 c0 -25 2 -35 4 -22 2 12 2 32 0 45 -2 12 -4 2 -4 -23z\"></path><path d=\"M32481 20424 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M29548 20353 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M21460 19911 c0 -5 7 -12 16 -15 24 -9 28 -7 14 9 -14 17 -30 20 -30 6z\"></path><path d=\"M28186 20244 c-8 -29 -3 -39 13 -29 13 8 15 55 2 55 -5 0 -12 -12 -15 -26z\"></path><path d=\"M27651 20204 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M27521 20094 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M27600 19910 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M32426 20047 c3 -10 9 -15 12 -12 3 3 0 11 -7 18 -10 9 -11 8 -5 -6z\"></path><path d=\"M30470 20131 c0 -6 5 -13 10 -16 6 -3 10 1 10 9 0 9 -4 16 -10 16 -5 0 -10 -4 -10 -9z\"></path><path d=\"M30295 20040 c-3 -6 1 -13 10 -16 21 -9 26 -2 10 13 -9 8 -16 9 -20 3z\"></path><path d=\"M32360 19950 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M30671 19884 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M27523 19713 c-14 -5 -17 -105 -4 -137 7 -19 8 -19 13 2 4 12 2 25 -3 28 -5 3 -9 22 -8 42 0 32 1 34 9 15 5 -13 14 -23 20 -23 15 0 12 26 -5 40 -9 7 -14 19 -11 27 3 7 4 13 3 12 -1 0 -8 -3 -14 -6z\"></path><path d=\"M27575 19640 c-3 -5 1 -10 9 -10 8 0 18 5 21 10 3 6 -1 10 -9 10 -8 0 -18 -4 -21 -10z\"></path><path d=\"M30890 19551 c0 -12 5 -21 10 -21 6 0 10 6 10 14 0 8 -4 18 -10 21 -5 3 -10 -3 -10 -14z\"></path><path d=\"M33307 19233 c-3 -5 -2 -15 2 -22 7 -10 10 -10 16 -1 4 6 3 16 -3 22 -5 5 -12 6 -15 1z\"></path><path d=\"M33148 19223 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M33281 19211 c-1 -25 -1 -25 -112 -5 -23 3 -39 2 -43 -5 -5 -7 8 -12 36 -13 25 -1 7 -5 -42 -8 l-85 -7 97 0 c54 1 101 -2 104 -6 4 -3 15 -2 25 4 15 7 19 6 19 -6 0 -8 -6 -15 -12 -15 -7 0 -5 -5 5 -11 9 -6 34 -8 55 -6 l37 4 -40 1 c-40 2 -41 2 -37 36 2 19 2 41 -1 48 -3 7 -6 2 -6 -11z\"></path><path d=\"M33310 19160 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M33220 19090 c0 -5 -7 -10 -16 -10 -8 0 -12 -4 -9 -10 9 -14 16 -12 45 10 l25 20 -22 0 c-13 0 -23 -4 -23 -10z\"></path><path d=\"M33065 18750 c4 -6 11 -8 16 -5 14 9 11 15 -7 15 -8 0 -12 -5 -9 -10z\"></path><path d=\"M33755 18380 c-3 -5 -2 -10 4 -10 5 0 13 5 16 10 3 6 2 10 -4 10 -5 0 -13 -4 -16 -10z\"></path><path d=\"M33207 18343 c-13 -13 -7 -32 8 -27 8 4 15 12 15 20 0 15 -12 19 -23 7z\"></path><path d=\"M33696 18325 c-11 -8 -15 -15 -9 -15 19 0 43 12 43 21 0 13 -12 11 -34 -6z\"></path><path d=\"M35080 18160 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M33497 17982 c-51 -53 -26 -68 50 -31 46 22 50 28 31 47 -20 20 -53 14 -81 -16z\"></path><path d=\"M33610 18000 c-18 -12 -2 -12 25 0 13 6 15 9 5 9 -8 0 -22 -4 -30 -9z\"></path><path d=\"M33420 17899 c0 -18 2 -19 15 -9 15 12 12 30 -6 30 -5 0 -9 -10 -9 -21z\"></path><path d=\"M33353 17873 c-13 -5 -19 -33 -7 -33 3 0 14 5 25 10 34 19 19 38 -18 23z\"></path><path d=\"M34258 17860 c-7 -11 -18 -20 -25 -20 -7 0 -13 -9 -13 -19 0 -22 -30 -37 -41 -19 -10 16 -39 -8 -39 -33 0 -13 -7 -19 -23 -19 -12 0 -40 -9 -62 -20 -22 -11 -46 -20 -54 -20 -24 0 -81 -44 -81 -63 0 -10 -8 -20 -17 -23 -60 -19 -80 -40 -69 -70 5 -14 9 -13 36 3 16 9 30 21 30 26 0 17 32 40 63 43 17 2 35 11 40 19 6 11 28 15 85 16 120 2 205 13 210 27 2 8 -10 12 -43 12 -30 0 -52 6 -65 18 -19 17 -18 18 15 45 19 15 42 27 51 27 10 0 27 8 38 19 12 10 35 23 51 28 17 5 31 17 33 26 3 14 -6 17 -52 17 -45 0 -58 -4 -68 -20z m-258 -200 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z\"></path><path d=\"M34800 17822 c0 -5 -19 -15 -42 -22 -53 -17 -118 -56 -118 -71 0 -7 -11 -4 -26 6 -23 15 -30 15 -53 4 -14 -8 -29 -18 -33 -23 -4 -6 -24 -9 -45 -8 -54 3 -123 -8 -123 -18 0 -5 17 -12 38 -15 20 -4 45 -9 55 -12 20 -5 23 -33 3 -33 -8 0 -17 -8 -20 -18 -4 -11 -16 -24 -29 -31 -23 -13 -67 -74 -67 -93 0 -19 28 11 34 37 4 16 14 25 26 25 10 0 23 7 28 17 6 10 16 14 27 10 11 -5 27 3 47 23 16 17 32 30 35 30 23 0 123 45 123 55 0 8 22 16 62 20 43 5 68 14 80 27 19 22 33 73 23 88 -7 12 -25 13 -25 2z m-299 -175 c-8 -8 -11 -7 -11 4 0 20 13 34 18 19 3 -7 -1 -17 -7 -23z\"></path><path d=\"M33665 17798 c-11 -7 -28 -22 -38 -35 -10 -13 -25 -23 -33 -23 -8 0 -14 -4 -14 -10 0 -5 6 -10 13 -10 24 0 88 27 105 43 14 15 14 19 2 31 -12 12 -19 12 -35 4z\"></path><path d=\"M33341 17614 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M34285 17526 c-22 -11 -51 -29 -65 -39 l-25 -19 24 7 c33 10 19 -10 -21 -30 -23 -11 -34 -12 -39 -4 -3 6 -6 0 -6 -14 l0 -26 38 25 c21 13 43 24 49 24 6 0 8 5 5 10 -4 6 6 10 22 10 32 0 61 15 50 26 -3 4 -13 1 -21 -5 -8 -7 -25 -11 -38 -9 -19 3 -14 7 24 23 26 11 50 26 53 33 6 16 -2 14 -50 -12z\"></path><path d=\"M34108 17393 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M33708 16673 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M33708 16653 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M32417 16024 c4 -10 13 -14 27 -10 11 3 30 6 41 6 35 1 -6 20 -42 20 -25 0 -31 -3 -26 -16z\"></path><path d=\"M32188 15933 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M18935 18862 c-32 -6 -39 -19 -15 -27 22 -7 45 6 39 22 -2 5 -13 7 -24 5z\"></path><path d=\"M18880 18830 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M18980 18830 c0 -5 7 -7 15 -4 8 4 15 8 15 10 0 2 -7 4 -15 4 -8 0 -15 -4 -15 -10z\"></path><path d=\"M18640 18760 c-13 -9 -13 -11 0 -20 20 -14 45 -8 45 10 0 18 -25 24 -45 10z\"></path><path d=\"M18280 18156 c0 -10 9 -16 21 -16 24 0 21 23 -4 28 -10 2 -17 -3 -17 -12z\"></path><path d=\"M17776 17651 c-19 -21 -19 -21 19 -21 28 0 42 -6 57 -25 11 -15 30 -25 45 -25 14 0 33 -10 43 -22 10 -13 21 -20 25 -16 4 4 -5 18 -19 31 -17 16 -26 35 -26 56 0 27 -3 31 -27 31 -16 0 -44 3 -63 6 -28 5 -39 1 -54 -15z\"></path><path d=\"M17990 17520 c0 -5 7 -7 15 -4 8 4 15 8 15 10 0 2 -7 4 -15 4 -8 0 -15 -4 -15 -10z\"></path><path d=\"M18010 17500 c-8 -5 -11 -12 -7 -16 4 -4 15 0 24 9 18 18 8 23 -17 7z\"></path><path d=\"M17512 17321 c-19 -11 -1 -23 88 -56 74 -28 100 -45 100 -63 0 -11 82 -52 105 -52 8 0 15 -4 15 -10 0 -5 9 -10 20 -10 13 0 20 7 20 19 0 13 -15 27 -47 43 -27 13 -58 33 -71 46 -13 12 -28 23 -35 24 -7 0 -16 2 -22 3 -5 2 -22 3 -37 4 -17 1 -28 7 -28 15 0 8 -21 21 -47 30 -26 9 -47 16 -47 16 -1 0 -7 -4 -14 -9z m88 -31 c0 -5 -2 -10 -4 -10 -3 0 -8 5 -11 10 -3 6 -1 10 4 10 6 0 11 -4 11 -10z\"></path><path d=\"M17268 17153 c-19 -5 -25 -33 -8 -33 6 0 20 -9 31 -19 34 -31 148 -69 194 -64 23 3 35 1 28 -4 -8 -6 4 -17 37 -36 l49 -28 21 21 c29 29 17 40 -41 40 -35 0 -49 4 -49 14 0 9 -17 16 -45 20 -25 4 -45 10 -45 14 0 8 -52 33 -74 36 -8 1 -20 7 -27 13 -25 19 -54 30 -71 26z\"></path><path d=\"M17950 17085 c-7 -8 -9 -15 -6 -15 4 0 14 7 22 15 9 8 11 15 6 15 -5 0 -15 -7 -22 -15z\"></path><path d=\"M17991 17054 c10 -13 87 -30 95 -21 2 2 2 12 -2 21 -5 12 -18 15 -54 14 -37 -2 -46 -5 -39 -14z\"></path><path d=\"M17684 16925 c21 -18 41 -25 72 -25 33 0 47 -5 56 -20 15 -23 34 -26 53 -6 18 17 9 26 -26 26 -17 0 -38 10 -53 25 -20 20 -35 25 -78 25 l-53 0 29 -25z\"></path><path d=\"M17267 16922 c-39 -43 -5 -84 86 -103 34 -7 80 -13 102 -14 22 0 52 -8 65 -18 13 -9 35 -17 48 -17 12 0 25 -7 28 -15 3 -8 22 -17 42 -21 21 -4 57 -21 82 -38 113 -81 240 -118 248 -73 2 10 -3 17 -12 17 -21 0 -182 76 -191 89 -3 6 -11 8 -19 5 -7 -3 -30 11 -51 31 -22 19 -44 35 -50 35 -7 0 -24 11 -38 24 -17 16 -41 25 -76 28 -33 3 -79 20 -131 47 -88 46 -109 49 -133 23z\"></path><path d=\"M17990 16805 c-13 -15 3 -25 67 -41 l27 -7 -23 31 c-24 34 -51 41 -71 17z\"></path><path d=\"M17115 16720 c-17 -54 8 -66 145 -72 55 -3 65 0 68 15 3 13 -3 17 -28 17 -19 0 -49 12 -75 30 -52 36 -100 40 -110 10z\"></path><path d=\"M18152 16731 c-11 -7 -11 -9 2 -14 10 -4 16 -1 16 8 0 17 -1 17 -18 6z\"></path><path d=\"M17338 16618 c-5 -58 6 -70 61 -67 32 2 55 -3 71 -14 14 -9 35 -17 48 -17 12 0 36 -10 53 -22 37 -27 132 -57 214 -68 33 -4 48 -8 33 -8 -16 -1 -28 -6 -28 -11 0 -18 54 -28 93 -18 l38 10 -42 18 c-22 11 -51 19 -64 19 -12 0 -34 9 -48 20 -14 11 -30 20 -36 20 -5 0 -21 11 -34 24 -34 34 -81 56 -120 56 -26 0 -37 6 -47 25 -11 21 -21 25 -56 25 -26 0 -44 5 -47 14 -3 7 -23 18 -45 23 l-40 10 -4 -39z\"></path><path d=\"M17291 16614 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M17980 16588 c0 -19 36 -57 63 -67 12 -5 43 -11 70 -15 26 -4 47 -11 47 -15 0 -14 37 -20 49 -8 20 20 12 27 -76 68 -101 47 -153 60 -153 37z\"></path><path d=\"M17303 16473 c-40 -14 25 -69 91 -79 35 -4 58 -14 74 -31 17 -19 29 -23 50 -18 22 4 29 1 37 -17 16 -37 71 -59 139 -56 37 2 61 8 64 16 2 7 -7 12 -25 12 -15 1 -44 9 -63 20 -86 46 -165 80 -186 80 -12 0 -25 4 -28 9 -5 8 -95 53 -126 63 -8 3 -21 3 -27 1z\"></path><path d=\"M17892 16383 c-24 -9 8 -33 44 -33 27 0 34 4 34 20 0 16 -6 20 -32 19 -18 0 -39 -3 -46 -6z\"></path><path d=\"M17338 16283 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M17377 16252 c9 -23 35 -42 50 -37 6 2 22 -4 35 -14 14 -11 42 -19 73 -20 28 -1 58 -4 68 -7 29 -9 19 11 -15 30 -18 11 -42 27 -53 36 -13 11 -45 19 -92 23 -65 5 -71 4 -66 -11z\"></path><path d=\"M17800 16262 c0 -14 23 -32 41 -32 10 0 19 -6 22 -12 2 -7 8 -9 13 -5 4 4 -5 19 -21 32 -30 24 -55 32 -55 17z\"></path><path d=\"M17632 16158 c4 -29 35 -35 53 -11 18 24 10 33 -26 33 -26 0 -30 -3 -27 -22z\"></path><path d=\"M17958 16172 c-10 -2 -18 -9 -18 -16 0 -9 17 -13 50 -13 40 -1 49 2 40 12 -12 14 -46 23 -72 17z\"></path><path d=\"M17773 16133 c-18 -7 -16 -43 2 -43 18 0 31 28 19 39 -5 5 -15 6 -21 4z\"></path><path d=\"M18070 16115 c7 -8 17 -15 23 -15 6 0 21 -10 34 -22 20 -19 25 -20 33 -8 8 13 10 12 10 -2 0 -10 5 -18 10 -18 6 0 10 4 10 10 0 5 7 7 15 4 8 -4 15 -1 15 5 0 13 -45 25 -59 16 -6 -3 -21 1 -33 9 -15 11 -18 16 -8 16 13 0 13 2 0 10 -8 5 -26 10 -39 10 -20 0 -21 -2 -11 -15z\"></path><path d=\"M17950 16040 c-20 -12 1 -34 56 -61 36 -17 47 -19 59 -9 12 10 15 9 15 -5 0 -11 5 -15 14 -12 8 3 17 1 19 -6 3 -9 8 -9 18 0 10 10 9 16 -7 34 -14 16 -26 20 -53 15 -18 -3 -31 -2 -27 1 15 15 -73 56 -94 43z\"></path><path d=\"M18235 16030 c4 -6 11 -8 16 -5 14 9 11 15 -7 15 -8 0 -12 -5 -9 -10z\"></path><path d=\"M18420 15950 c0 -5 9 -10 19 -10 11 0 23 5 26 10 4 6 -5 10 -19 10 -14 0 -26 -4 -26 -10z\"></path><path d=\"M18545 15911 c-3 -5 -1 -12 5 -16 5 -3 10 1 10 9 0 18 -6 21 -15 7z\"></path><path d=\"M18317 15873 c-11 -18 11 -34 41 -31 21 2 29 7 24 15 -9 15 -58 27 -65 16z\"></path><path d=\"M18400 15820 c0 -5 12 -10 28 -9 24 0 25 1 7 9 -27 12 -35 12 -35 0z\"></path><path d=\"M18050 15613 c1 -21 69 -73 96 -73 17 0 27 -8 78 -57 13 -13 38 -26 57 -30 19 -3 42 -16 51 -27 49 -59 133 -120 150 -110 7 4 8 2 4 -4 -4 -7 -1 -12 6 -12 7 0 26 -11 42 -25 16 -14 34 -25 40 -26 6 0 23 -2 38 -3 15 -1 30 4 33 11 6 18 -23 42 -82 67 -27 12 -76 42 -108 67 -33 26 -74 49 -92 53 -33 8 -103 66 -103 86 0 22 -27 38 -82 49 -30 7 -64 18 -74 26 -20 15 -54 20 -54 8z\"></path><path d=\"M18650 15236 c0 -13 35 -36 55 -36 13 0 30 -9 39 -21 8 -12 25 -22 39 -23 14 0 23 -4 21 -7 -8 -13 90 -68 166 -94 59 -19 80 -20 54 0 -10 8 -24 15 -31 15 -7 0 -31 18 -55 41 -37 35 -47 40 -75 34 -26 -4 -32 -3 -27 8 6 16 -36 47 -64 47 -10 0 -27 9 -37 20 -16 17 -85 30 -85 16z m255 -126 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z\"></path><path d=\"M21670 15190 c-8 -5 -10 -10 -5 -10 6 0 17 5 25 10 8 5 11 10 5 10 -5 0 -17 -5 -25 -10z\"></path><path d=\"M21473 15153 c-7 -2 -13 -19 -13 -37 0 -32 1 -33 64 -44 35 -7 82 -12 106 -12 41 0 110 25 110 40 0 9 -62 20 -120 20 -26 0 -63 9 -85 20 -41 21 -43 21 -62 13z\"></path><path d=\"M19352 15138 c5 -15 28 -23 28 -10 0 5 -7 13 -16 16 -10 4 -14 1 -12 -6z\"></path><path d=\"M21806 15055 c7 -16 45 -30 65 -23 7 2 13 12 15 21 2 14 -6 17 -42 17 -35 0 -42 -3 -38 -15z\"></path><path d=\"M20183 15053 c15 -2 37 -2 50 0 12 2 0 4 -28 4 -27 0 -38 -2 -22 -4z\"></path><path d=\"M19060 15011 c14 -12 40 -21 60 -21 31 0 33 1 19 16 -9 8 -36 18 -60 21 l-44 5 25 -21z\"></path><path d=\"M19171 14969 c8 -16 14 -18 22 -10 9 9 8 14 -3 21 -24 16 -31 11 -19 -11z\"></path><path d=\"M19250 14926 c0 -7 8 -20 17 -27 15 -12 16 -12 10 3 -5 15 -2 16 19 8 44 -17 50 -11 11 10 -44 24 -57 25 -57 6z\"></path><path d=\"M22846 14895 c-35 -26 -7 -38 70 -29 38 4 61 10 51 12 -9 2 -15 8 -12 13 4 5 -9 9 -29 9 -19 0 -40 2 -48 5 -7 2 -22 -2 -32 -10z\"></path><path d=\"M19360 14890 c0 -5 -17 -10 -37 -11 l-38 -1 35 -8 c22 -5 37 -5 41 2 4 7 9 7 13 -1 8 -12 26 -15 26 -3 0 4 -9 13 -20 20 -12 7 -20 8 -20 2z\"></path><path d=\"M20885 14889 c-10 -15 1 -23 20 -15 9 3 13 10 10 16 -8 13 -22 13 -30 -1z\"></path><path d=\"M19430 14841 c0 -6 5 -13 10 -16 6 -3 10 1 10 9 0 9 -4 16 -10 16 -5 0 -10 -4 -10 -9z\"></path><path d=\"M21002 14838 c3 -7 17 -15 33 -16 25 -3 27 -2 16 12 -16 19 -55 22 -49 4z\"></path><path d=\"M20535 14830 c3 -5 15 -10 26 -10 10 0 19 5 19 10 0 6 -12 10 -26 10 -14 0 -23 -4 -19 -10z\"></path><path d=\"M21087 14801 c-3 -12 -2 -22 1 -22 26 -5 69 -5 80 1 18 9 -3 26 -44 34 -26 6 -32 4 -37 -13z\"></path><path d=\"M23378 14766 c-16 -12 -16 -14 8 -24 36 -17 54 -15 54 7 0 30 -34 39 -62 17z\"></path><path d=\"M21220 14749 c0 -5 22 -8 50 -8 27 1 47 5 44 10 -6 11 -94 9 -94 -2z\"></path><path d=\"M21350 14710 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M21385 14709 c-13 -20 77 -26 93 -6 8 9 -1 12 -39 13 -28 0 -52 -3 -54 -7z\"></path><path d=\"M21505 14690 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M21280 14670 c0 -5 19 -10 43 -9 36 1 38 2 17 9 -36 12 -60 12 -60 0z\"></path><path d=\"M21470 14668 c0 -5 18 -8 40 -8 22 0 40 -4 40 -10 0 -5 8 -10 18 -9 14 0 12 3 -7 17 -24 17 -91 24 -91 10z\"></path><path d=\"M21998 14673 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M21968 14653 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M21920 14640 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M21140 14630 c0 -5 5 -10 10 -10 6 0 10 -8 8 -17 -2 -12 4 -19 20 -21 25 -4 30 15 7 24 -12 5 -13 10 -4 20 9 11 6 14 -15 14 -14 0 -26 -4 -26 -10z\"></path><path d=\"M21595 14631 c-6 -11 13 -26 22 -17 4 3 0 7 -8 7 -8 1 0 5 16 9 l30 8 -27 1 c-15 0 -29 -3 -33 -8z\"></path><path d=\"M21870 14630 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M23762 14628 c7 -19 38 -22 38 -4 0 10 -9 16 -21 16 -12 0 -19 -5 -17 -12z\"></path><path d=\"M24946 14551 c-25 -10 -8 -21 40 -27 30 -4 35 -2 30 12 -3 8 -6 18 -6 20 0 7 -43 3 -64 -5z\"></path><path d=\"M20738 14543 c-35 -4 -36 -5 -26 -28 8 -18 22 -26 55 -31 56 -8 85 4 89 39 2 26 1 27 -39 25 -23 -1 -59 -3 -79 -5z m55 -20 c-13 -2 -35 -2 -50 0 -16 2 -5 4 22 4 28 0 40 -2 28 -4z m22 -23 c-27 -12 -43 -12 -25 0 8 5 22 9 30 9 10 0 8 -3 -5 -9z\"></path><path d=\"M23920 14495 l0 -27 78 6 c111 10 136 16 123 29 -6 6 -54 13 -106 15 l-95 4 0 -27z\"></path><path d=\"M24725 14489 c-23 -14 -48 -19 -110 -19 -44 0 -87 -5 -95 -10 -12 -8 -11 -10 7 -10 12 0 25 -4 28 -10 8 -13 223 -12 231 1 9 15 -6 69 -19 68 -7 0 -25 -9 -42 -20z\"></path><path d=\"M25512 14476 c7 -8 15 -12 17 -11 5 6 -10 25 -20 25 -5 0 -4 -6 3 -14z\"></path><path d=\"M24368 14473 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M23785 14460 c3 -5 13 -10 21 -10 8 0 12 5 9 10 -3 6 -13 10 -21 10 -8 0 -12 -4 -9 -10z\"></path><path d=\"M24408 14463 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M25420 14460 c-20 -6 -21 -8 -5 -8 11 0 29 3 40 8 25 11 -1 11 -35 0z\"></path><path d=\"M24320 14450 c0 -13 11 -13 30 0 12 8 11 10 -7 10 -13 0 -23 -4 -23 -10z\"></path><path d=\"M24468 14433 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M24918 14427 c-43 -17 -33 -29 23 -26 45 3 55 -1 80 -25 23 -24 33 -27 56 -20 15 4 37 8 48 9 31 2 66 16 61 23 -2 4 39 5 91 4 60 -3 99 0 106 7 8 8 8 11 -2 11 -7 0 -20 7 -28 16 -13 13 -27 14 -77 8 -61 -8 -174 -8 -276 0 -30 3 -67 0 -82 -7z\"></path><path d=\"M25430 14430 c-18 -12 -2 -12 25 0 13 6 15 9 5 9 -8 0 -22 -4 -30 -9z\"></path><path d=\"M25488 14423 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M24498 14403 c12 -2 32 -2 45 0 12 2 2 4 -23 4 -25 0 -35 -2 -22 -4z\"></path><path d=\"M21083 14389 c-49 -14 -48 -27 1 -34 59 -9 81 -4 81 20 0 23 -32 29 -82 14z\"></path><path d=\"M25515 14384 c19 -19 93 -36 101 -23 3 5 22 10 42 10 37 1 37 1 -13 14 -27 7 -72 14 -98 14 -45 1 -47 0 -32 -15z\"></path><path d=\"M24400 14370 c0 -5 11 -10 24 -10 14 0 28 5 31 10 4 6 -7 10 -24 10 -17 0 -31 -4 -31 -10z\"></path><path d=\"M24310 14331 c0 -11 26 -22 34 -14 12 12 5 23 -14 23 -11 0 -20 -4 -20 -9z\"></path><path d=\"M23778 14323 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M23820 14292 c0 -15 12 -23 47 -33 26 -7 56 -12 65 -12 10 1 18 -5 18 -13 0 -16 -16 -19 -25 -4 -10 16 -55 12 -49 -4 4 -9 -3 -16 -18 -19 -13 -2 -1 -5 25 -6 34 -1 46 -4 41 -13 -5 -7 -1 -9 12 -5 127 40 127 41 177 18 59 -27 79 -26 157 4 35 14 74 25 86 25 11 0 38 -11 58 -25 28 -19 50 -25 91 -25 30 0 55 4 55 8 0 12 46 32 71 32 12 0 35 -6 52 -14 42 -19 154 -26 282 -19 168 10 125 36 -59 37 l-109 1 -17 30 c-10 17 -24 28 -31 26 -100 -29 -412 -23 -634 13 -16 3 -90 8 -162 11 -126 5 -133 5 -133 -13z\"></path><path d=\"M30400 14259 c12 -8 9 -10 -12 -6 -19 3 -28 0 -28 -9 0 -19 16 -25 45 -18 33 8 35 44 3 44 -19 0 -20 -2 -8 -11z\"></path><path d=\"M31835 14255 c-70 -15 -128 -42 -122 -58 2 -8 28 -12 66 -12 50 0 62 3 67 18 4 12 16 17 40 17 30 0 34 3 34 25 0 28 0 28 -85 10z\"></path><path d=\"M30296 14206 c-27 -12 -27 -13 -7 -19 29 -7 61 3 61 19 0 17 -15 17 -54 0z\"></path><path d=\"M23890 14180 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M25300 14182 c-8 -4 -16 -15 -18 -24 -3 -16 8 -18 107 -18 102 0 110 1 108 19 -1 14 -12 20 -45 25 -57 8 -133 7 -152 -2z\"></path><path d=\"M30220 14174 c-24 -13 -24 -14 -4 -14 12 0 24 7 28 15 3 8 4 15 3 14 -1 -1 -13 -7 -27 -15z\"></path><path d=\"M24333 14173 c-28 -11 -13 -33 23 -33 38 0 74 15 74 30 0 10 -75 13 -97 3z\"></path><path d=\"M25170 14170 c0 -5 5 -10 11 -10 5 0 7 5 4 10 -3 6 -8 10 -11 10 -2 0 -4 -4 -4 -10z\"></path><path d=\"M30260 14170 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M25213 14133 c9 -2 25 -2 35 0 9 3 1 5 -18 5 -19 0 -27 -2 -17 -5z\"></path><path d=\"M30110 14115 c-8 -9 -8 -15 -2 -15 18 0 42 12 42 21 0 14 -26 10 -40 -6z\"></path><path d=\"M25888 14103 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M24298 14083 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M29997 14076 c-20 -8 -52 -25 -71 -40 -19 -14 -54 -29 -77 -32 -51 -8 -88 -32 -89 -56 0 -26 34 -31 86 -13 26 9 68 18 93 22 49 6 271 60 279 67 12 13 -14 26 -52 26 -30 0 -48 6 -61 20 -21 23 -54 25 -108 6z\"></path><path d=\"M24559 14058 c10 -26 9 -27 -14 -16 -14 6 -28 8 -32 5 -14 -15 11 -21 100 -25 50 -2 97 -8 102 -13 6 -4 55 -5 110 -2 132 7 205 4 224 -8 11 -7 -3 -9 -46 -6 -35 2 -63 0 -63 -4 0 -11 181 -21 315 -18 83 2 119 0 118 -8 -1 -6 11 -18 28 -26 24 -11 40 -12 72 -5 24 6 104 7 187 3 239 -10 581 -8 593 4 8 8 -10 11 -64 11 -92 0 -282 17 -330 30 -20 6 -141 12 -270 15 -410 8 -619 22 -640 41 -20 18 -51 19 -260 9 -86 -4 -95 -3 -117 18 l-23 22 10 -27z\"></path><path d=\"M25950 14070 c0 -5 7 -7 15 -4 8 4 15 8 15 10 0 2 -7 4 -15 4 -8 0 -15 -4 -15 -10z\"></path><path d=\"M25041 14044 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M32195 14030 c-3 -5 1 -10 9 -10 9 0 16 5 16 10 0 6 -4 10 -9 10 -6 0 -13 -4 -16 -10z\"></path><path d=\"M24410 13900 c0 -5 9 -10 21 -10 11 0 17 5 14 10 -3 6 -13 10 -21 10 -8 0 -14 -4 -14 -10z\"></path><path d=\"M24500 13860 c0 -6 34 -10 81 -10 51 0 78 4 74 10 -3 6 -40 10 -81 10 -43 0 -74 -4 -74 -10z\"></path><path d=\"M24898 13818 c-18 -16 -16 -17 44 -22 83 -8 279 -3 264 6 -6 4 34 8 89 9 81 1 92 3 60 10 -57 11 -155 11 -155 -1 0 -5 -7 -10 -15 -10 -8 0 -12 6 -9 13 4 11 -22 13 -127 13 -108 -1 -135 -4 -151 -18z\"></path><path d=\"M24215 13820 c-3 -5 1 -10 9 -10 9 0 16 5 16 10 0 6 -4 10 -9 10 -6 0 -13 -4 -16 -10z\"></path><path d=\"M31455 13810 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M31505 13800 c-8 -13 9 -20 24 -11 10 6 9 10 -3 14 -8 3 -18 2 -21 -3z\"></path><path d=\"M25560 13790 c-24 -7 -24 -7 10 -17 47 -13 416 -17 424 -5 20 33 -81 38 -334 17 -38 -3 -49 -2 -35 4 17 8 16 10 -10 9 -16 0 -41 -3 -55 -8z\"></path><path d=\"M26047 13787 c-8 -22 1 -27 47 -27 54 0 78 15 38 23 -16 3 -41 9 -54 12 -17 5 -27 2 -31 -8z\"></path><path d=\"M26380 13786 c0 -2 7 -7 16 -10 8 -3 12 -2 9 4 -6 10 -25 14 -25 6z\"></path><path d=\"M31430 13765 c0 -8 2 -15 4 -15 2 0 6 7 10 15 3 8 1 15 -4 15 -6 0 -10 -7 -10 -15z\"></path><path d=\"M26305 13760 l-20 -9 20 0 c11 0 27 4 35 9 13 9 13 10 0 9 -8 0 -24 -4 -35 -9z\"></path><path d=\"M31477 13759 c7 -7 15 -10 18 -7 3 3 -2 9 -12 12 -14 6 -15 5 -6 -5z\"></path><path d=\"M26448 13733 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M29669 13716 c-2 -2 -43 -6 -90 -9 -99 -6 -169 -35 -169 -69 0 -19 4 -20 61 -14 33 3 66 9 72 13 21 13 101 32 139 33 20 0 43 3 52 6 26 10 18 24 -14 24 -16 0 -30 5 -30 10 0 10 -13 14 -21 6z m-129 -46 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z\"></path><path d=\"M24938 13683 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M24670 13650 c0 -11 24 -17 103 -24 43 -3 57 -1 57 9 0 7 -7 16 -16 19 -26 10 -144 7 -144 -4z\"></path><path d=\"M24930 13629 c-91 -21 -92 -22 -78 -30 7 -5 64 -9 127 -9 112 0 207 -11 286 -32 43 -12 503 -20 471 -8 -35 12 -1 19 57 11 64 -9 91 -22 31 -16 -22 2 -30 2 -19 -1 11 -3 40 -12 65 -21 67 -22 378 -33 398 -14 11 11 18 12 32 3 12 -7 86 -12 204 -13 150 -1 188 2 200 13 13 13 -8 16 -166 21 -100 4 -249 7 -332 7 -83 0 -168 5 -189 11 -29 8 -51 7 -88 -2 -43 -11 -51 -11 -68 5 -17 15 -45 19 -188 23 -127 4 -182 10 -225 24 -34 11 -86 19 -127 19 -38 0 -81 4 -95 10 -18 7 -26 6 -26 -2 0 -8 -30 -9 -105 -4 -58 4 -111 8 -118 10 -6 2 -28 0 -47 -5z m267 -35 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z\"></path><path d=\"M29360 13609 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M29027 13568 c-8 -5 -7 -8 4 -8 9 0 31 -3 49 -7 25 -5 32 -3 28 8 -5 15 -61 20 -81 7z\"></path><path d=\"M25880 13560 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M28928 13553 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M28858 13523 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M27413 13492 c-12 -2 -24 -10 -27 -19 -5 -13 -1 -14 25 -9 17 3 35 6 40 6 14 0 11 17 -3 22 -7 2 -23 2 -35 0z\"></path><path d=\"M28800 13490 c0 -5 7 -7 15 -4 8 4 15 8 15 10 0 2 -7 4 -15 4 -8 0 -15 -4 -15 -10z\"></path><path d=\"M27238 13483 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M28443 13477 c-46 -12 -54 -29 -31 -67 10 -16 10 -24 0 -41 -12 -18 -11 -24 0 -35 19 -19 211 -4 256 20 17 9 53 16 79 16 l48 0 -30 18 c-16 10 -51 22 -78 25 -40 6 -50 4 -64 -13 -10 -11 -21 -20 -25 -20 -19 0 -38 35 -38 71 0 39 0 39 -37 38 -21 -1 -57 -7 -80 -12z\"></path><path d=\"M28650 13480 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M29050 13463 c-25 -8 -76 -15 -115 -16 l-69 -2 -7 -34 -7 -33 51 6 c28 4 58 11 68 17 10 5 35 9 57 9 72 0 132 12 132 26 0 8 5 14 10 14 6 0 10 4 10 10 0 5 -7 7 -15 4 -8 -3 -27 -2 -42 3 -19 7 -42 5 -73 -4z\"></path><path d=\"M27977 13403 c-4 -3 5 -12 20 -20 31 -16 79 -9 87 13 4 11 -6 14 -48 14 -29 0 -56 -3 -59 -7z\"></path><path d=\"M27730 13350 c-6 -11 -9 -20 -8 -21 28 -6 79 -8 98 -3 l25 6 -24 19 c-31 25 -77 25 -91 -1z\"></path><path d=\"M28015 13312 c-15 -4 -7 -8 28 -18 32 -8 59 -9 79 -3 17 4 35 6 39 3 5 -3 14 -2 21 2 29 18 -110 32 -167 16z m92 -8 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z\"></path><path d=\"M27680 13273 c-48 -9 -45 -23 6 -23 58 0 88 14 52 23 -12 4 -25 6 -28 6 -3 -1 -16 -4 -30 -6z\"></path><path d=\"M27817 13273 c-12 -11 -8 -23 8 -23 8 0 15 7 15 15 0 16 -12 20 -23 8z\"></path><path d=\"M30650 19351 c0 -6 5 -13 10 -16 6 -3 10 1 10 9 0 9 -4 16 -10 16 -5 0 -10 -4 -10 -9z\"></path><path d=\"M28530 19170 c0 -11 7 -20 15 -20 8 0 15 9 15 20 0 11 -7 20 -15 20 -8 0 -15 -9 -15 -20z\"></path><path d=\"M28493 19143 c-7 -2 -13 -11 -13 -19 0 -12 4 -12 20 -4 32 17 26 37 -7 23z\"></path><path d=\"M30776 19241 c-14 -16 -15 -19 -2 -24 9 -4 16 3 19 19 5 29 5 29 -17 5z\"></path><path d=\"M28065 19000 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M28002 18953 c-12 -13 -20 -29 -16 -34 3 -6 17 2 31 17 13 15 21 30 16 33 -4 4 -18 -3 -31 -16z\"></path><path d=\"M27965 18462 c-6 -4 -18 -19 -28 -34 -17 -27 -17 -28 2 -28 17 0 61 46 61 64 0 8 -23 7 -35 -2z\"></path><path d=\"M28877 18515 c-4 -8 -2 -17 3 -20 6 -4 10 3 10 14 0 25 -6 27 -13 6z\"></path><path d=\"M29360 18325 c0 -17 18 -19 38 -6 11 7 10 10 -3 15 -26 10 -35 7 -35 -9z\"></path><path d=\"M29061 18304 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M30176 17935 c-3 -9 -6 -22 -5 -28 0 -7 5 -1 10 12 5 13 8 26 5 28 -2 2 -6 -3 -10 -12z\"></path><path d=\"M28835 17930 c-3 -5 1 -10 9 -10 8 0 18 5 21 10 3 6 -1 10 -9 10 -8 0 -18 -4 -21 -10z\"></path><path d=\"M28470 17725 c-10 -12 -10 -15 4 -15 9 0 16 7 16 15 0 8 -2 15 -4 15 -2 0 -9 -7 -16 -15z\"></path><path d=\"M30500 17890 c0 -5 7 -10 15 -10 8 0 15 5 15 10 0 6 -7 10 -15 10 -8 0 -15 -4 -15 -10z\"></path><path d=\"M28161 17534 c0 -11 3 -14 6 -6 3 7 2 16 -1 19 -3 4 -6 -2 -5 -13z\"></path><path d=\"M28060 17530 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M27977 17410 c-3 -11 -1 -23 4 -26 5 -3 9 6 9 20 0 31 -6 34 -13 6z\"></path><path d=\"M31928 17553 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M31893 17533 c-24 -9 -13 -20 17 -15 17 2 30 8 30 13 0 10 -27 11 -47 2z\"></path><path d=\"M27330 17250 c0 -5 7 -7 15 -4 8 4 15 8 15 10 0 2 -7 4 -15 4 -8 0 -15 -4 -15 -10z\"></path><path d=\"M27360 17220 c0 -6 7 -10 15 -10 8 0 15 2 15 4 0 2 -7 6 -15 10 -8 3 -15 1 -15 -4z\"></path><path d=\"M26710 17351 c0 -6 5 -13 10 -16 6 -3 10 1 10 9 0 9 -4 16 -10 16 -5 0 -10 -4 -10 -9z\"></path><path d=\"M36240 17510 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M34683 17272 c-24 -2 -43 -7 -43 -13 0 -12 87 -12 95 0 8 14 -4 17 -52 13z\"></path><path d=\"M35750 17340 c-9 -6 -10 -10 -3 -10 6 0 15 5 18 10 8 12 4 12 -15 0z\"></path><path d=\"M25428 17139 c-26 -14 -22 -29 6 -29 21 0 56 22 56 36 0 8 -45 3 -62 -7z\"></path><path d=\"M28873 17313 c9 -2 23 -2 30 0 6 3 -1 5 -18 5 -16 0 -22 -2 -12 -5z\"></path><path d=\"M28848 17283 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M31175 17140 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0 -7 -4 -4 -10z\"></path><path d=\"M31390 17130 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M31360 17109 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M31106 17002 c-2 -4 -1 -14 5 -22 7 -12 9 -10 9 8 0 23 -5 28 -14 14z\"></path><path d=\"M31090 16953 c0 -10 5 -25 10 -33 8 -12 10 -9 10 12 0 15 -4 30 -10 33 -5 3 -10 -2 -10 -12z\"></path><path d=\"M31168 16743 c12 -2 32 -2 45 0 12 2 2 4 -23 4 -25 0 -35 -2 -22 -4z\"></path><path d=\"M31265 16740 c-13 -6 -15 -9 -5 -9 8 0 22 4 30 9 18 12 2 12 -25 0z\"></path><path d=\"M31033 16730 c5 -19 87 -27 87 -9 0 8 -11 9 -36 4 -26 -4 -40 -2 -46 7 -8 10 -9 10 -5 -2z\"></path><path d=\"M36088 17183 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M24280 16900 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M24290 16846 c0 -9 5 -16 10 -16 6 0 10 4 10 9 0 6 -4 13 -10 16 -5 3 -10 -1 -10 -9z\"></path><path d=\"M32173 17003 c9 -2 23 -2 30 0 6 3 -1 5 -18 5 -16 0 -22 -2 -12 -5z\"></path><path d=\"M36720 16823 c0 -15 -2 -16 -10 -3 -5 8 -13 11 -17 6 -4 -5 -2 -11 5 -13 6 -3 12 -12 12 -21 0 -9 4 -23 9 -31 6 -10 9 1 9 32 -1 26 -3 47 -5 47 -1 0 -3 -8 -3 -17z\"></path><path d=\"M36740 16794 c0 -8 5 -12 10 -9 6 3 10 10 10 16 0 5 -4 9 -10 9 -5 0 -10 -7 -10 -16z\"></path><path d=\"M36670 16790 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M36650 16760 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M36690 16760 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M31948 16793 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M31687 16743 c18 -2 50 -2 70 0 21 2 7 4 -32 4 -38 0 -55 -2 -38 -4z\"></path><path d=\"M25027 16736 c-4 -10 -3 -15 3 -11 6 3 10 1 10 -6 0 -7 3 -10 6 -6 3 3 2 13 -4 22 -8 16 -9 16 -15 1z\"></path><path d=\"M36150 16620 c-11 -7 -5 -8 20 -4 43 8 51 14 19 14 -13 0 -31 -5 -39 -10z\"></path><path d=\"M23968 16283 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M32648 15773 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M32833 15743 c9 -2 25 -2 35 0 9 3 1 5 -18 5 -19 0 -27 -2 -17 -5z\"></path><path d=\"M22780 15680 c-13 -8 -12 -10 3 -10 9 0 17 5 17 10 0 12 -1 12 -20 0z\"></path><path d=\"M22988 15633 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M23098 15523 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M23150 15501 c0 -9 52 -22 59 -15 6 6 -1 11 -31 18 -16 3 -28 2 -28 -3z\"></path><path d=\"M33810 15584 c0 -8 5 -12 10 -9 6 3 10 10 10 16 0 5 -4 9 -10 9 -5 0 -10 -7 -10 -16z\"></path><path d=\"M31690 15470 c-11 -7 -4 -10 28 -10 23 0 42 5 42 10 0 13 -50 13 -70 0z\"></path><path d=\"M33103 15618 c-12 -6 -24 -17 -28 -25 -4 -12 0 -14 22 -8 35 8 50 22 38 34 -6 5 -19 5 -32 -1z\"></path><path d=\"M33615 15630 c27 -12 35 -12 35 0 0 6 -12 10 -27 9 -25 0 -26 -1 -8 -9z\"></path><path d=\"M33576 15611 c-6 -9 35 -24 43 -15 6 5 -18 24 -31 24 -4 0 -9 -4 -12 -9z\"></path><path d=\"M33676 15605 c-9 -26 -7 -32 5 -12 6 10 9 21 6 23 -2 3 -7 -2 -11 -11z\"></path><path d=\"M33090 15476 c0 -2 13 -6 29 -8 17 -2 28 -1 25 4 -5 8 -54 12 -54 4z\"></path><path d=\"M34625 15450 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M23378 15343 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M23418 15313 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M23590 15285 c-9 -10 -9 -15 -1 -15 6 0 11 5 11 10 0 6 18 10 40 10 22 0 40 -4 40 -10 0 -5 8 -10 17 -10 15 0 14 2 -3 15 -25 19 -88 19 -104 0z\"></path><path d=\"M23760 15259 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10 -5 -10 -11z\"></path><path d=\"M31615 15243 c-18 -14 -18 -15 -2 -9 10 3 25 6 33 6 8 0 14 5 14 10 0 15 -22 12 -45 -7z\"></path><path d=\"M31698 15243 c12 -2 32 -2 45 0 12 2 2 4 -23 4 -25 0 -35 -2 -22 -4z\"></path><path d=\"M31788 15233 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M35208 15233 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M31555 15130 c3 -5 15 -10 26 -10 10 0 19 5 19 10 0 6 -12 10 -26 10 -14 0 -23 -4 -19 -10z\"></path><path d=\"M30808 15053 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M32758 14923 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M34155 14790 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z\"></path><path d=\"M31449 14600 c25 -21 51 -26 51 -10 0 6 -12 10 -26 10 -14 0 -23 4 -19 10 3 6 -2 10 -12 10 -16 -1 -15 -3 6 -20z\"></path><path d=\"M31190 14600 c0 -8 99 -30 137 -30 13 0 26 -7 29 -15 7 -17 34 -21 34 -5 0 6 -7 10 -16 10 -9 0 -14 6 -11 13 3 9 -4 12 -27 9 -18 -2 -58 3 -89 11 -31 8 -57 12 -57 7z\"></path><path d=\"M31305 14600 c3 -5 13 -10 21 -10 8 0 12 5 9 10 -3 6 -13 10 -21 10 -8 0 -12 -4 -9 -10z\"></path><path d=\"M31400 14585 c12 -15 30 -12 30 6 0 5 -10 9 -21 9 -18 0 -19 -2 -9 -15z\"></path><path d=\"M31211 14571 c-10 -7 -8 -10 8 -16 27 -8 36 -2 18 13 -7 6 -18 7 -26 3z\"></path><path d=\"M31440 14570 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0 -10 -4 -10 -10z\"></path><path d=\"M33515 14407 c-4 -10 -5 -21 -1 -24 10 -10 18 4 13 24 -4 17 -4 17 -12 0z\"></path><path d=\"M32817 14294 c-13 -14 6 -24 44 -24 28 0 39 4 39 15 0 11 -11 15 -38 15 -21 0 -42 -3 -45 -6z\"></path><path d=\"M27373 12953 c9 -2 25 -2 35 0 9 3 1 5 -18 5 -19 0 -27 -2 -17 -5z\"></path><path d=\"M27974 12939 c-10 -16 17 -29 31 -16 10 9 10 14 1 19 -16 11 -24 10 -32 -3z\"></path><path d=\"M27938 12923 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z\"></path><path d=\"M28048 12893 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M27773 12873 c9 -2 25 -2 35 0 9 3 1 5 -18 5 -19 0 -27 -2 -17 -5z\"></path><path d=\"M28033 12873 c9 -2 25 -2 35 0 9 3 1 5 -18 5 -19 0 -27 -2 -17 -5z\"></path><path d=\"M27608 12863 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M27283 12833 c15 -2 39 -2 55 0 15 2 2 4 -28 4 -30 0 -43 -2 -27 -4z\"></path><path d=\"M26030 12958 c0 -5 10 -9 23 -9 17 -1 16 -3 -8 -8 -25 -6 -20 -9 36 -15 36 -5 75 -6 85 -3 10 2 -5 5 -33 6 -31 1 -53 6 -53 12 0 7 29 10 89 7 49 -1 84 0 78 4 -17 9 -217 14 -217 6z\"></path><path d=\"M24941 12941 c-30 -8 -37 -24 -17 -41 13 -10 26 -10 68 0 l52 13 -23 18 c-24 20 -39 22 -80 10z\"></path><path d=\"M25147 12944 c-14 -15 -6 -34 14 -34 14 0 19 5 17 17 -3 18 -20 27 -31 17z\"></path><path d=\"M25783 12933 c-3 -8 -14 -11 -27 -8 -17 5 -18 4 -6 -4 8 -6 41 -11 73 -11 50 0 58 3 55 17 -4 22 -87 27 -95 6z\"></path><path d=\"M25325 12930 c4 -6 75 -10 182 -10 97 0 174 2 172 4 -11 9 -360 15 -354 6z\"></path><path d=\"M26390 12930 c8 -5 20 -10 25 -10 6 0 3 5 -5 10 -8 5 -19 10 -25 10 -5 0 -3 -5 5 -10z\"></path><path d=\"M25568 12903 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z\"></path><path d=\"M11460 13594 c-118 -9 -263 -13 -365 -10 -149 4 -178 2 -224 -15 -30 -10 -113 -28 -185 -39 -180 -29 -346 -67 -430 -100 -39 -15 -105 -33 -146 -40 -94 -15 -291 -80 -480 -158 -248 -103 -279 -113 -497 -168 -325 -83 -453 -134 -646 -261 -169 -111 -284 -215 -421 -382 -69 -82 -70 -84 -92 -190 -27 -127 -54 -202 -95 -264 -39 -59 -78 -213 -86 -337 -12 -196 24 -383 120 -625 102 -258 128 -337 152 -453 l24 -113 81 -103 c142 -182 259 -292 445 -418 376 -255 913 -449 1460 -527 293 -42 427 -37 665 24 184 47 271 61 585 95 149 17 284 32 300 35 17 3 89 14 160 25 364 57 659 144 880 258 101 52 261 156 330 215 164 140 473 452 534 541 8 12 18 23 22 26 22 16 159 244 208 345 82 169 130 319 168 520 26 142 26 517 -1 660 -44 239 -108 429 -222 659 -124 247 -223 372 -385 483 -198 136 -603 255 -1044 308 -188 23 -578 27 -815 9z\"></path><path d=\"M27350 12169 c-30 -4 -98 -20 -150 -34 -177 -48 -193 -49 -329 -37 -256 24 -395 13 -537 -44 -134 -53 -314 -191 -429 -329 -184 -221 -305 -504 -371 -870 -25 -138 -26 -498 -1 -635 9 -52 16 -131 16 -175 -1 -60 3 -94 20 -135 15 -41 21 -77 21 -140 0 -49 9 -126 21 -180 12 -52 24 -153 28 -223 5 -87 12 -131 20 -137 7 -4 15 -29 17 -56 13 -142 27 -248 44 -329 10 -49 28 -137 39 -195 38 -193 113 -308 306 -475 80 -69 204 -133 425 -221 117 -46 172 -76 321 -174 196 -130 335 -174 603 -189 161 -10 248 -1 350 35 71 24 166 81 221 131 17 14 53 47 80 72 28 25 70 62 95 81 112 89 298 298 384 432 110 173 244 521 351 913 9 33 47 159 85 280 126 403 150 538 150 845 -1 449 -103 847 -303 1175 -107 175 -315 356 -511 445 -166 75 -403 147 -561 170 -83 11 -327 11 -405 -1z m-349 -3952 c-10 -9 -11 -8 -5 6 3 10 9 15 12 12 3 -3 0 -11 -7 -18z\"></path><path d=\"M17560 11133 c-175 -16 -333 -40 -426 -63 -116 -30 -301 -97 -369 -133 -83 -45 -225 -127 -276 -160 -30 -19 -97 -60 -150 -90 -306 -180 -571 -430 -729 -691 -40 -66 -71 -127 -288 -566 -88 -178 -159 -306 -216 -390 -231 -342 -323 -526 -402 -805 -98 -344 -128 -523 -128 -750 0 -188 9 -246 67 -460 56 -203 61 -214 150 -337 85 -120 107 -168 107 -242 l0 -53 68 -17 c37 -9 82 -16 101 -16 29 0 42 -9 85 -57 171 -194 367 -325 600 -403 72 -24 136 -72 159 -119 9 -19 21 -27 46 -29 19 -2 37 2 41 8 12 20 87 24 133 7 74 -28 279 -75 387 -88 127 -16 429 -16 560 0 200 25 292 58 645 231 399 195 536 289 655 449 14 18 34 45 46 59 23 30 155 226 229 342 27 41 64 100 83 130 20 30 82 125 138 210 93 140 132 192 244 330 94 115 141 176 185 243 26 39 60 90 75 112 71 106 221 387 286 537 66 152 84 202 120 333 101 371 85 690 -51 1058 -18 51 -50 153 -71 227 -20 74 -41 143 -46 153 -5 9 -32 29 -60 43 -97 49 -181 115 -334 263 -142 137 -177 168 -224 201 -19 13 -37 27 -40 30 -11 12 -154 112 -277 193 -139 92 -304 179 -414 220 -198 74 -490 111 -709 90z m-1050 -2227 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z\"></path></g></svg>"

/***/ })
/******/ ]);